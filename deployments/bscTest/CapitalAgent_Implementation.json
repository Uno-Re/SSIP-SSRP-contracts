{
  "address": "0x5431a6B392D14EdA8609c8486D28dD6cC94554b6",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_scr",
          "type": "uint256"
        }
      ],
      "name": "LogAddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "LogAddPoolWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogMarkToClaimPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_salesPolicy",
          "type": "address"
        }
      ],
      "name": "LogRemovePolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "LogRemovePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "LogRemovePoolWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "LogSetExchangeAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_MCR",
          "type": "uint256"
        }
      ],
      "name": "LogSetMCR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_MLR",
          "type": "uint256"
        }
      ],
      "name": "LogSetMLR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "LogSetOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_salesPolicy",
          "type": "address"
        }
      ],
      "name": "LogSetPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_SCR",
          "type": "uint256"
        }
      ],
      "name": "LogSetSCR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "LogSetSalesPolicyFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        }
      ],
      "name": "LogSetUSDC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyUtilized",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalUtilizedAmount",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyCoverage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_poolCapital",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCapital",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePoolCapital",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MLR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isNotMigrate",
          "type": "bool"
        }
      ],
      "name": "SSIPPolicyCaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_scr",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_scr",
          "type": "uint256"
        }
      ],
      "name": "addPoolByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "addPoolWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "checkCapitalByMCR",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coverageAmount",
          "type": "uint256"
        }
      ],
      "name": "checkCoverageByMLR",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolicyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDC_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "markToClaimPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "policy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "utilizedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coverageAmount",
          "type": "uint256"
        }
      ],
      "name": "policySale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCapital",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "SCR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolWhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "removePoolWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salesPolicyFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MCR",
          "type": "uint256"
        }
      ],
      "name": "setMCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MLR",
          "type": "uint256"
        }
      ],
      "name": "setMLR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        }
      ],
      "name": "setPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        }
      ],
      "name": "setPolicyByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_capital",
          "type": "uint256"
        }
      ],
      "name": "setPoolCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_SCR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setSCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setSalesPolicyFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        }
      ],
      "name": "setUSDCToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCapitalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUtilizedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "updatePolicyStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x847d032f81bfc50a30df23b5d8a1dfbd733b0597d9463550106bfeb736b42c05",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0x5431a6B392D14EdA8609c8486D28dD6cC94554b6",
    "transactionIndex": 14,
    "gasUsed": "2576505",
    "logsBloom": "0x
    "blockHash": "0xb64489f3deb197d6320ae7bb1b36fb081759575454277034cfb5e81111220d30",
    "transactionHash": "0x847d032f81bfc50a30df23b5d8a1dfbd733b0597d9463550106bfeb736b42c05",
    "logs": [],
    "blockNumber": 38142921,
    "cumulativeGasUsed": "3320042",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "593622eda432d5430e7613fe66d55d46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_scr\",\"type\":\"uint256\"}],\"name\":\"LogAddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"LogAddPoolWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogMarkToClaimPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_salesPolicy\",\"type\":\"address\"}],\"name\":\"LogRemovePolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"LogRemovePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"LogRemovePoolWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"LogSetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_MCR\",\"type\":\"uint256\"}],\"name\":\"LogSetMCR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_MLR\",\"type\":\"uint256\"}],\"name\":\"LogSetMLR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"LogSetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_salesPolicy\",\"type\":\"address\"}],\"name\":\"LogSetPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SCR\",\"type\":\"uint256\"}],\"name\":\"LogSetSCR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"LogSetSalesPolicyFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"name\":\"LogSetUSDC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyUtilized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalUtilizedAmount\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyCoverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolCapital\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCapital\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePoolCapital\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MLR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isNotMigrate\",\"type\":\"bool\"}],\"name\":\"SSIPPolicyCaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scr\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scr\",\"type\":\"uint256\"}],\"name\":\"addPoolByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"addPoolWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"checkCapitalByMCR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"checkCoverageByMLR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"markToClaimPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"utilizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"policySale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCapital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SCR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"removePoolWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesPolicyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MCR\",\"type\":\"uint256\"}],\"name\":\"setMCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MLR\",\"type\":\"uint256\"}],\"name\":\"setMLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"setPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"setPolicyByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"}],\"name\":\"setPoolCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SCR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setSCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setSalesPolicyFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"name\":\"setUSDCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCapitalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUtilizedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"updatePolicyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"update and manage all pools capital and policy utlized amount, whenever user stake and withdraw from the pool and buy policy from salesPolicy notifies to capital agent to update pool capital and policy coverage*\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"SSIPPolicyCaim(uint256,uint256,bool)\":{\"details\":\"update pool(caller) capital from capital agent, decrease capital of pool by _withdrawAmount, if user claim policy from pool \",\"params\":{\"_withdrawAmount\":\"amount to withdraw*\"}},\"SSIPStaking(uint256)\":{\"details\":\"update pool(caller) capital from capital agent, increase capital of pool by _stakingAmount, if user stake in pool\",\"params\":{\"_stakingAmount\":\"amount to deposit*\"}},\"SSIPWithdraw(uint256)\":{\"details\":\"update pool(caller) capital from capital agent, decrease capital of pool by _withdrawAmount, if user withdraw from pool remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively\",\"params\":{\"_withdrawAmount\":\"amount to withdraw*\"}},\"addPool(address,address,uint256)\":{\"details\":\"add pool into capitalAgent to stake capital, can only be call by whitelisted pools\",\"params\":{\"_currency\":\"pool lp currency address\",\"_scr\":\"pool scr value(minimum capital should maintain in capital agent)*\",\"_ssip\":\"address of pool to add\"}},\"addPoolByAdmin(address,address,uint256)\":{\"details\":\"add pool into capitalAgent to stake capital, can only be call by admin role\",\"params\":{\"_currency\":\"pool lp currency address\",\"_scr\":\"pool scr value(minimum capital should maintain in capital agent)*\",\"_ssip\":\"address of pool to add\"}},\"addPoolWhiteList(address)\":{\"details\":\"whitelist pool address, can only be call by admin role\",\"params\":{\"_pool\":\"address of pool to whitelist*\"}},\"checkCapitalByMCR(address,uint256)\":{\"details\":\"return if pool can withdraw this amount, remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively\",\"params\":{\"_pool\":\"address of pool\",\"_withdrawAmount\":\"withdraw amount*\"}},\"checkCoverageByMLR(uint256)\":{\"details\":\"return if user can buy policy from this coverage amount,  total utlized amount plus coverage should be less than MLR of total capital staked\",\"params\":{\"_coverageAmount\":\"coverage amount*\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"markToClaimPolicy(uint256)\":{\"details\":\"update policy status to not exist, can only be called by admin role\",\"params\":{\"_policyId\":\"policy id to update status*\"}},\"policySale(uint256)\":{\"details\":\"update policy coverage if user buy policy from SalesPolicy, only sales policy can call this function\",\"params\":{\"_coverageAmount\":\"coverage amount*\"}},\"removePolicy()\":{\"details\":\"remove sales policy from capital agent, can only be call by admin role*\"},\"removePool(address)\":{\"details\":\"remove pool from capitalAgent, can only be call by admin role\",\"params\":{\"_ssip\":\"address of pool to remove*\"}},\"removePoolWhiteList(address)\":{\"details\":\"remove whitelisted pool, can only be call by admin role\",\"params\":{\"_pool\":\"address of pool to remove from whitelist*\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setExchangeAgent(address)\":{\"details\":\"set new exchange agent address, can only be called by admin role\",\"params\":{\"_exchangeAgent\":\"new exchange agent address*\"}},\"setMCR(uint256)\":{\"details\":\"set new MCR, can only be called by operator\",\"params\":{\"_MCR\":\"new value to update*\"}},\"setMLR(uint256)\":{\"details\":\"set new MLR, can only be called by operator\",\"params\":{\"_MLR\":\"new value to update*\"}},\"setOperator(address)\":{\"details\":\"set operator, can only be call by admin role\",\"params\":{\"_operator\":\"new operator address*\"}},\"setPolicy(address)\":{\"details\":\"set sales policy, can only be call by SalesPolicyFactory\",\"params\":{\"_policy\":\"address of new SalesPolicy*\"}},\"setPolicyByAdmin(address)\":{\"details\":\"set sales policy, can only be call by admin role\",\"params\":{\"_policy\":\"address of new SalesPolicy*\"}},\"setSCR(uint256,address)\":{\"details\":\"set new SCR of pool, can only be called by operator\",\"params\":{\"_SCR\":\"new value to update\",\"_pool\":\"address of pool*\"}},\"setSalesPolicyFactory(address)\":{\"details\":\"set sales policy factory, can only be call by admin role\",\"params\":{\"_factory\":\"new sales policy factory address*\"}},\"setUSDCToken(address)\":{\"details\":\"set usdc token, can only be call by admin role\",\"params\":{\"_usdcToken\":\"new usdc token address*\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalCapitalStaked()\":{\"details\":\"return total capital in usdc staked in capital agent by pools *\"},\"updatePolicyStatus(uint256)\":{\"details\":\"update policy status, if expired update policy coverage and notify to sales policy\",\"params\":{\"_policyId\":\"policy id to update status*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CapitalAgent.sol\":\"CapitalAgent\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/CapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"./interfaces/ISalesPolicy.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./interfaces/ICapitalAgent.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\n\\n/**\\n * @dev update and manage all pools capital and policy utlized amount,\\n * whenever user stake and withdraw from the pool and buy policy from salesPolicy\\n * notifies to capital agent to update pool capital and policy coverage\\n **/\\ncontract CapitalAgent is ICapitalAgent, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    address public exchangeAgent;\\n    address public salesPolicyFactory;\\n    address public usdcToken;\\n    address public operator;\\n\\n    struct PoolInfo {\\n        uint256 totalCapital;\\n        uint256 SCR;\\n        address currency;\\n        bool exist;\\n    }\\n\\n    struct PolicyInfo {\\n        address policy;\\n        uint256 utilizedAmount;\\n        bool exist;\\n    }\\n\\n    mapping(address => PoolInfo) public poolInfo;\\n\\n    address[] private currencyList;\\n    mapping(address => bool) private existedCurrencies;\\n    mapping(address => uint256) private totalCapitalStakedByCurrency;\\n\\n    PolicyInfo public policyInfo;\\n\\n    uint256 public totalUtilizedAmount;\\n\\n    uint256 public MCR;\\n    uint256 public MLR;\\n\\n    uint256 public constant CALC_PRECISION = 1e18;\\n\\n    mapping(address => bool) public poolWhiteList;\\n\\n    mapping(address => mapping(uint256 => uint256)) public claimedAmount;\\n\\n    event LogAddPool(address indexed _ssip, address _currency, uint256 _scr);\\n    event LogRemovePool(address indexed _ssip);\\n    event LogSetPolicy(address indexed _salesPolicy);\\n    event LogRemovePolicy(address indexed _salesPolicy);\\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\\n    event LogUpdatePolicyCoverage(\\n        address indexed _policy,\\n        uint256 _amount,\\n        uint256 _policyUtilized,\\n        uint256 _totalUtilizedAmount\\n    );\\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\\n    event LogSetMCR(address indexed _owner, address indexed _capitalAgent, uint256 _MCR);\\n    event LogSetMLR(address indexed _owner, address indexed _capitalAgent, uint256 _MLR);\\n    event LogSetSCR(address indexed _owner, address indexed _capitalAgent, address indexed _pool, uint256 _SCR);\\n    event LogSetExchangeAgent(address indexed _owner, address indexed _capitalAgent, address _exchangeAgent);\\n    event LogSetSalesPolicyFactory(address indexed _factory);\\n    event LogAddPoolWhiteList(address indexed _pool);\\n    event LogRemovePoolWhiteList(address indexed _pool);\\n    event LogSetOperator(address indexed _operator);\\n    event LogSetUSDC(address indexed _usdcToken);\\n\\n    function initialize(\\n        address _exchangeAgent,\\n        address _USDC_TOKEN,\\n        address _multiSigWallet,\\n        address _operator\\n    ) external initializer {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero exchangeAgent address\\\");\\n        require(_USDC_TOKEN != address(0), \\\"UnoRe: zero USDC address\\\");\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multisigwallet address\\\");\\n        // require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \\\"UnoRe: more than three owners requied\\\");\\n        // require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \\\"UnoRe: more than one owners requied to verify\\\");\\n        exchangeAgent = _exchangeAgent;\\n        usdcToken = _USDC_TOKEN;\\n        operator = _operator;\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n    }\\n\\n    modifier onlyPoolWhiteList() {\\n        require(poolWhiteList[msg.sender], \\\"UnoRe: Capital Agent Forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"UnoRe: Capital Agent Forbidden\\\");\\n        _;\\n    }\\n\\n    function getPolicyInfo() external view returns (address, uint256, bool) {\\n        PolicyInfo memory _policy = policyInfo;\\n        return (_policy.policy, _policy.utilizedAmount, _policy.exist);\\n    }\\n\\n    /**\\n     * @dev set sales policy factory, can only be call by admin role\\n     * @param _factory new sales policy factory address\\n     **/\\n    function setSalesPolicyFactory(address _factory) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: zero factory address\\\");\\n        salesPolicyFactory = _factory;\\n        emit LogSetSalesPolicyFactory(_factory);\\n    }\\n\\n    /**\\n     * @dev set operator, can only be call by admin role\\n     * @param _operator new operator address\\n     **/\\n    function setOperator(address _operator) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_operator != address(0), \\\"UnoRe: zero operator address\\\");\\n        operator = _operator;\\n        emit LogSetOperator(_operator);\\n    }\\n\\n    /**\\n     * @dev set usdc token, can only be call by admin role\\n     * @param _usdcToken new usdc token address\\n     **/\\n    function setUSDCToken(address _usdcToken) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_usdcToken != address(0), \\\"UnoRe: zero usdc address\\\");\\n        usdcToken = _usdcToken;\\n        emit LogSetUSDC(_usdcToken);\\n    }\\n\\n    /**\\n     * @dev whitelist pool address, can only be call by admin role\\n     * @param _pool address of pool to whitelist\\n     **/\\n    function addPoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_pool != address(0), \\\"UnoRe: zero pool address\\\");\\n        require(!poolWhiteList[_pool], \\\"UnoRe: white list already\\\");\\n        poolWhiteList[_pool] = true;\\n        emit LogAddPoolWhiteList(_pool);\\n    }\\n\\n    /**\\n     * @dev remove whitelisted pool, can only be call by admin role\\n     * @param _pool address of pool to remove from whitelist\\n     **/\\n    function removePoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(poolWhiteList[_pool], \\\"UnoRe: no white list\\\");\\n        poolWhiteList[_pool] = false;\\n        emit LogRemovePoolWhiteList(_pool);\\n    }\\n\\n    /**\\n     * @dev return total capital in usdc staked in capital agent by pools \\n     **/\\n    function totalCapitalStaked() public view returns(uint256) {\\n        return _getTotalCapitalStakedInUSDC();\\n    }\\n\\n    /**\\n     * @dev add pool into capitalAgent to stake capital, can only be call by whitelisted pools\\n     * @param _ssip address of pool to add\\n     * @param _currency pool lp currency address\\n     * @param _scr pool scr value(minimum capital should maintain in capital agent)\\n     **/\\n    function addPool(address _ssip, address _currency, uint256 _scr) external override onlyPoolWhiteList {\\n        require(_ssip != address(0), \\\"UnoRe: zero address\\\");\\n        require(!poolInfo[_ssip].exist, \\\"UnoRe: already exist pool\\\");\\n\\n        if (existedCurrencies[_currency] == false) {\\n            existedCurrencies[_currency] = true;\\n            currencyList.push(_currency);\\n        }\\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\\n\\n        emit LogAddPool(_ssip, _currency, _scr);\\n    }\\n\\n    /**\\n     * @dev add pool into capitalAgent to stake capital, can only be call by admin role\\n     * @param _ssip address of pool to add\\n     * @param _currency pool lp currency address\\n     * @param _scr pool scr value(minimum capital should maintain in capital agent)\\n     **/\\n    function addPoolByAdmin(address _ssip, address _currency, uint256 _scr) external onlyRole(ADMIN_ROLE) {\\n        require(_ssip != address(0), \\\"UnoRe: zero address\\\");\\n        require(!poolInfo[_ssip].exist, \\\"UnoRe: already exist pool\\\");\\n\\n        if (existedCurrencies[_currency] == false) {\\n            existedCurrencies[_currency] = true;\\n            currencyList.push(_currency);\\n        }\\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\\n\\n        emit LogAddPool(_ssip, _currency, _scr);\\n    }\\n\\n    /**\\n     * @dev remove pool from capitalAgent, can only be call by admin role\\n     * @param _ssip address of pool to remove\\n     **/\\n    function removePool(address _ssip) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(poolInfo[_ssip].exist, \\\"UnoRe: no exit pool\\\");\\n        if (poolInfo[_ssip].totalCapital > 0) {\\n            address currency = poolInfo[_ssip].currency;\\n            totalCapitalStakedByCurrency[currency] = totalCapitalStakedByCurrency[currency] - poolInfo[_ssip].totalCapital;\\n        }\\n        delete poolInfo[_ssip];\\n        emit LogRemovePool(_ssip);\\n    }\\n\\n    function setPoolCapital(address _ssip, uint256 _capital) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(poolInfo[_ssip].exist, \\\"UnoRe: no exit pool\\\");\\n        address currency = poolInfo[_ssip].currency;\\n        totalCapitalStakedByCurrency[currency] += _capital;\\n        poolInfo[_ssip].totalCapital = _capital;\\n    }\\n\\n    /**\\n     * @dev set sales policy, can only be call by SalesPolicyFactory\\n     * @param _policy address of new SalesPolicy\\n     **/\\n    function setPolicy(address _policy) external override nonReentrant {\\n        require(!policyInfo.exist, \\\"UnoRe: Policy exists\\\");\\n        require(salesPolicyFactory == msg.sender, \\\"UnoRe: only salesPolicyFactory can call\\\");\\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\\n\\n        emit LogSetPolicy(_policy);\\n    }\\n\\n    /**\\n     * @dev set sales policy, can only be call by admin role\\n     * @param _policy address of new SalesPolicy\\n     **/\\n    function setPolicyByAdmin(address _policy) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_policy != address(0), \\\"UnoRe: zero address\\\");\\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\\n\\n        emit LogSetPolicy(_policy);\\n    }\\n\\n    /**\\n     * @dev remove sales policy from capital agent, can only be call by admin role\\n     **/\\n    function removePolicy() external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(policyInfo.exist, \\\"UnoRe: no exit pool\\\");\\n        totalUtilizedAmount = 0;\\n        address _policy = policyInfo.policy;\\n        policyInfo.policy = address(0);\\n        policyInfo.exist = false;\\n        policyInfo.utilizedAmount = 0;\\n        emit LogRemovePolicy(_policy);\\n    }\\n\\n    /**\\n     * @dev update pool(caller) capital from capital agent,\\n     * decrease capital of pool by _withdrawAmount, if user withdraw from pool\\n     * remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively\\n     * @param _withdrawAmount amount to withdraw\\n     **/\\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        require(_checkCapitalByMCRAndSCR(msg.sender, _withdrawAmount), \\\"UnoRe: minimum capital underflow\\\");\\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\\n    }\\n\\n    /**\\n     * @dev update pool(caller) capital from capital agent,\\n     * decrease capital of pool by _withdrawAmount, if user claim policy from pool \\n     * @param _withdrawAmount amount to withdraw\\n     **/\\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isNotMigrate) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\\n        if (_isNotMigrate) {\\n            _SSIPPolicyClaim(_withdrawAmount, _policyId);\\n        }\\n    }\\n\\n    function _SSIPPolicyClaim(uint256 _withdrawAmount, uint256 _policyId) internal {\\n        address _salesPolicyAddress = policyInfo.policy;\\n        (uint256 _coverageAmount, , , , ) = ISalesPolicy(_salesPolicyAddress).getPolicyData(_policyId);\\n        uint256 _claimed = claimedAmount[_salesPolicyAddress][_policyId];\\n        require(_coverageAmount >= _withdrawAmount + _claimed, \\\"UnoRe: coverage amount is less\\\");\\n        claimedAmount[_salesPolicyAddress][_policyId] += _withdrawAmount;\\n        bool _isFinished = !(_coverageAmount > (_withdrawAmount + _claimed));\\n        if (_isFinished) { // @Audit: DUST amount will prevent marking a policy complete\\n            _markToClaimPolicy(_policyId, _coverageAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev update pool(caller) capital from capital agent,\\n     * increase capital of pool by _stakingAmount, if user stake in pool\\n     * @param _stakingAmount amount to deposit\\n     **/\\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\\n    }\\n\\n    /**\\n     * @dev return if pool can withdraw this amount,\\n     * remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively\\n     * @param _pool address of pool\\n     * @param _withdrawAmount withdraw amount\\n     **/\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view override returns (bool) {\\n        return _checkCapitalByMCRAndSCR(_pool, _withdrawAmount);\\n    }\\n\\n    /**\\n     * @dev return if user can buy policy from this coverage amount, \\n     * total utlized amount plus coverage should be less than MLR of total capital staked\\n     * @param _coverageAmount coverage amount\\n     **/\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view override returns (bool) {\\n        return _checkCoverageByMLR(_coverageAmount);\\n    }\\n\\n    /**\\n     * @dev update policy coverage if user buy policy from SalesPolicy, only sales policy can call this function\\n     * @param _coverageAmount coverage amount\\n     **/\\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\\n        require(msg.sender == policyInfo.policy, \\\"UnoRe: only salesPolicy can call\\\");\\n        require(policyInfo.exist, \\\"UnoRe: no exist policy\\\");\\n        require(_checkCoverageByMLR(_coverageAmount), \\\"UnoRe: maximum leverage overflow\\\");\\n        _updatePolicyCoverage(_coverageAmount, true);\\n    }\\n\\n    /**\\n     * @dev update policy status, if expired update policy coverage and notify to sales policy\\n     * @param _policyId policy id to update status\\n     **/\\n    function updatePolicyStatus(uint256 _policyId) external override nonReentrant {\\n        require(policyInfo.policy != address(0), \\\"UnoRe: no exist salesPolicy\\\");\\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt, , ) = ISalesPolicy(policyInfo.policy)\\n            .getPolicyData(_policyId);\\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\\n        if (isExpired) {\\n            _updatePolicyCoverage(_coverageAmount, false);\\n            ISalesPolicy(policyInfo.policy).updatePolicyExpired(_policyId);\\n            emit LogUpdatePolicyExpired(policyInfo.policy, _policyId);\\n        }\\n    }\\n\\n    /**\\n     * @dev update policy status to not exist, can only be called by admin role\\n     * @param _policyId policy id to update status\\n     **/\\n    function markToClaimPolicy(uint256 _policyId) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        (uint256 _coverageAmount, , , , ) = ISalesPolicy(policyInfo.policy).getPolicyData(_policyId);\\n        _markToClaimPolicy(_policyId, _coverageAmount);\\n    }\\n\\n    function _markToClaimPolicy(uint256 _policyId, uint256 _coverageAmount) private {\\n        require(policyInfo.policy != address(0), \\\"UnoRe: no exist salesPolicy\\\");\\n        _updatePolicyCoverage(_coverageAmount, false);\\n        ISalesPolicy(policyInfo.policy).markToClaim(_policyId);\\n        emit LogMarkToClaimPolicy(policyInfo.policy, _policyId);\\n    }\\n\\n    function _updatePoolCapital(address _pool, uint256 _amount, bool isAdd) private {\\n        if (!isAdd) {\\n            require(poolInfo[_pool].totalCapital >= _amount, \\\"UnoRe: pool capital overflow\\\");\\n        }\\n        address currency = poolInfo[_pool].currency;\\n        poolInfo[_pool].totalCapital = isAdd ? poolInfo[_pool].totalCapital + _amount : poolInfo[_pool].totalCapital - _amount;\\n        totalCapitalStakedByCurrency[currency] = isAdd ? totalCapitalStakedByCurrency[currency] + _amount : totalCapitalStakedByCurrency[currency] - _amount;\\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStakedByCurrency[currency]);\\n    }\\n\\n    function _updatePolicyCoverage(uint256 _amount, bool isAdd) private {\\n        if (!isAdd) {\\n            require(policyInfo.utilizedAmount >= _amount, \\\"UnoRe: policy coverage overflow\\\");\\n        }\\n        policyInfo.utilizedAmount = isAdd ? policyInfo.utilizedAmount + _amount : policyInfo.utilizedAmount - _amount;\\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\\n        emit LogUpdatePolicyCoverage(policyInfo.policy, _amount, policyInfo.utilizedAmount, totalUtilizedAmount);\\n    }\\n\\n    function _checkCapitalByMCRAndSCR(address _pool, uint256 _withdrawAmount) private view returns (bool) {\\n        address currency = poolInfo[_pool].currency;\\n        uint256 totalCapitalStakedInUSDC;\\n        uint256 mcrInUSDC;\\n        uint256 scrInUSDC;\\n\\n        totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\\n        mcrInUSDC = _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency] - _withdrawAmount);\\n        scrInUSDC = _convertTokenToUSDC(currency, poolInfo[_pool].totalCapital - _withdrawAmount);\\n\\n        bool isMCRPass = mcrInUSDC >= (totalCapitalStakedInUSDC * MCR) / CALC_PRECISION;\\n        bool isSCRPass = scrInUSDC >= poolInfo[_pool].SCR;\\n\\n        return isMCRPass && isSCRPass;\\n    }\\n\\n    function _convertTokenToUSDC(address _currency, uint256 _amount) private view returns (uint256) {\\n        uint256 tokenInUSDC;\\n        if (_currency == usdcToken) {\\n            tokenInUSDC = _amount;\\n        } else {\\n            tokenInUSDC = _currency != address(0)\\n                ? IExchangeAgent(exchangeAgent).getNeededTokenAmount(_currency, usdcToken, _amount)\\n                : IExchangeAgent(exchangeAgent).getTokenAmountForETH(usdcToken, _amount);\\n        }\\n\\n        return tokenInUSDC;\\n    }\\n\\n    function _getTotalCapitalStakedInUSDC() private view returns (uint256) {\\n        uint256 totalCapitalStakedInUSDC;\\n        for (uint256 i = 0; i < currencyList.length; i++) {\\n            address currency = currencyList[i];\\n            totalCapitalStakedInUSDC = totalCapitalStakedInUSDC + _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency]);\\n        }\\n\\n        return totalCapitalStakedInUSDC;\\n    }\\n\\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\\n        uint256 totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStakedInUSDC * MLR) / CALC_PRECISION;\\n    }\\n\\n    /**\\n     * @dev set new MCR, can only be called by operator\\n     * @param _MCR new value to update\\n     **/\\n    function setMCR(uint256 _MCR) external onlyOperator nonReentrant {\\n        require(_MCR > 0, \\\"UnoRe: zero mcr\\\");\\n        MCR = _MCR;\\n        emit LogSetMCR(msg.sender, address(this), _MCR);\\n    }\\n\\n    /**\\n     * @dev set new MLR, can only be called by operator\\n     * @param _MLR new value to update\\n     **/\\n    function setMLR(uint256 _MLR) external onlyOperator nonReentrant {\\n        require(_MLR > 0, \\\"UnoRe: zero mlr\\\");\\n        MLR = _MLR;\\n        emit LogSetMLR(msg.sender, address(this), _MLR);\\n    }\\n\\n    /**\\n     * @dev set new SCR of pool, can only be called by operator\\n     * @param _SCR new value to update\\n     * @param _pool address of pool\\n     **/\\n    function setSCR(uint256 _SCR, address _pool) external onlyOperator nonReentrant {\\n        require(_SCR > 0, \\\"UnoRe: zero scr\\\");\\n        poolInfo[_pool].SCR = _SCR;\\n        emit LogSetSCR(msg.sender, address(this), _pool, _SCR);\\n    }\\n\\n    /**\\n     * @dev set new exchange agent address, can only be called by admin role\\n     * @param _exchangeAgent new exchange agent address\\n     **/\\n    function setExchangeAgent(address _exchangeAgent) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit LogSetExchangeAgent(msg.sender, address(this), _exchangeAgent);\\n    }\\n}\\n\",\"keccak256\":\"0xfdd93b6fb23571940c166f981cabac3e430b632e081f74ebe79908f641f59743\",\"license\":\"MIT\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\\n\\n    function setPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isMigrate) external;\\n\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\\n\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(uint256 _policyId) external;\\n\\n    function getPolicyInfo() external returns(address, uint256, bool);\\n\\n    function claimedAmount(address _policy, uint256 _policyId) external returns(uint256);\\n}\\n\",\"keccak256\":\"0x2a660335089a3f93cba45ace67f4b3951c04685f18f65fee230000ce51b272e3\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface IExchangeAgent {\\n    function usdcToken() external view returns (address);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) external view returns (uint256);\\n\\n    function convertForToken(address _token0, address _token1, uint256 _token0Amount) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3a0b6e72d0cac4ea4a6044538673f2cac3568a1bd9f2b3359979065b8486472\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface IGnosisSafe {\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getThreshold() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa958d03be51c456e26205695b66fd76ea243c91c24ca549360074b4782575e4d\",\"license\":\"MIT\"},\"contracts/interfaces/ISalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISalesPolicy {\\n    function setPremiumPool(address _premiumPool) external;\\n\\n    function setExchangeAgent(address _exchangeAgent) external;\\n\\n    function setCapitalAgent(address _capitalAgent) external;\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\\n\\n    function approvePremium(address _premiumCurrency) external;\\n\\n    function setProtocolURI(string memory newURI) external;\\n\\n    function setSigner(address _signer) external;\\n\\n    function updatePolicyExpired(uint256 _policyId) external;\\n\\n    function markToClaim(uint256 _policyId) external;\\n\\n    function allPoliciesLength() external view returns (uint256);\\n\\n    function killPool() external;\\n\\n    function revivePool() external;\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x2866e770aad9425cd7fffd3da31e1225b9c391df41aabff8e84583e6df58f598\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612da0806100206000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c8063794e572411610167578063a65888fb116100ce578063d4688a4511610087578063d4688a451461068c578063d547741f14610695578063d8c5c863146106a8578063d9203b91146106bb578063f8c8765e146106ce578063fb6cb847146106e157600080fd5b8063a65888fb1461061a578063a88d2f7a1461062d578063b3ab15fb14610640578063be22041b14610653578063c139b04f14610666578063c3ea3a281461067957600080fd5b806391d148541161012057806391d148541461055157806392ff38ec14610564578063974e4d851461056c5780639a7b5f111461058a578063a0931af2146105ff578063a217fddf1461061257600080fd5b8063794e5724146104f35780637d4163d3146104fc5780637e29d6c21461050f578063869bd44a146105225780638bb70831146105355780638be5a39f1461053e57600080fd5b8063385a128f1161020b57806355b4b1a4116101c457806355b4b1a414610472578063570ca7351461049d5780635b44d576146104b057806365cb3a83146104c3578063706c2d1b146104cb57806375b238fc146104de57600080fd5b8063385a128f146103b85780633b7d0946146103cb5780633fecfbf2146103de5780634341e0991461043d5780634a3a3d14146104505780634dc70bac1461046357600080fd5b80631dfa426d1161025d5780631dfa426d14610328578063248a9ca31461033b57806325042fe91461035c5780632f2ff15d1461037f57806336568abe1461039257806336760a1c146103a557600080fd5b806301ffc9a71461029a5780630d757531146102c25780630f5a9d01146102d757806311eac855146102ea57806318a00d8e14610315575b600080fd5b6102ad6102a83660046129c9565b6106f4565b60405190151581526020015b60405180910390f35b6102d56102d0366004612a0f565b61072b565b005b6102d56102e5366004612a3b565b610810565b6002546102fd906001600160a01b031681565b6040516001600160a01b0390911681526020016102b9565b6102d5610323366004612a3b565b6108d5565b6102d5610336366004612a3b565b610978565b61034e610349366004612a56565b610a39565b6040519081526020016102b9565b6102ad61036a366004612a3b565b600e6020526000908152604090205460ff1681565b6102d561038d366004612a0f565b610a5b565b6102d56103a0366004612a0f565b610a7d565b6001546102fd906001600160a01b031681565b6102d56103c6366004612a56565b610ab5565b6102d56103d9366004612a3b565b610b71565b610416604080516060810182526008546001600160a01b031680825260095460208301819052600a5460ff1615159290930182905292565b604080516001600160a01b03909416845260208401929092521515908201526060016102b9565b6102d561044b366004612a6f565b610ca9565b6102d561045e366004612a3b565b610d72565b61034e670de0b6b3a764000081565b61034e610480366004612a6f565b600f60209081526000928352604080842090915290825290205481565b6003546102fd906001600160a01b031681565b6102d56104be366004612a56565b610e3f565b6102d5610eea565b6102d56104d9366004612a99565b610f92565b61034e600080516020612d4b83398151915281565b61034e600c5481565b6102d561050a366004612a3b565b61117b565b6102d561051d366004612a99565b6112b2565b6102d5610530366004612a56565b6114b0565b61034e600d5481565b6102d561054c366004612a56565b611557565b6102ad61055f366004612a0f565b6115a4565b61034e6115dc565b600854600954600a54610416926001600160a01b0316919060ff1683565b6105ce610598366004612a3b565b6004602052600090815260409020805460018201546002909201549091906001600160a01b03811690600160a01b900460ff1684565b6040516102b9949392919093845260208401929092526001600160a01b031660408301521515606082015260800190565b6102d561060d366004612a56565b6115eb565b61034e600081565b6102d5610628366004612a3b565b6116f8565b6102d561063b366004612a3b565b611828565b6102d561064e366004612a3b565b6118ed565b6102d5610661366004612a56565b6119b2565b6102ad610674366004612a6f565b611b5c565b6102ad610687366004612a56565b611b6f565b61034e600b5481565b6102d56106a3366004612a0f565b611b7a565b6102d56106b6366004612a56565b611b96565b6000546102fd906001600160a01b031681565b6102d56106dc366004612ad5565b611c43565b6102d56106ef366004612b37565b611ee2565b60006001600160e01b03198216637965db0b60e01b148061072557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003546001600160a01b0316331461075e5760405162461bcd60e51b815260040161075590612b70565b60405180910390fd5b610766611f47565b600082116107a85760405162461bcd60e51b815260206004820152600f60248201526e2ab737a9329d103d32b9379039b1b960891b6044820152606401610755565b6001600160a01b0381166000818152600460205260409081902060010184905551309033907fade0e16d2bd0d685eef1e5355dc835692faac192ef62225adb31cd0c0b99c8a8906107fc9087815260200190565b60405180910390a461080c611f91565b5050565b600080516020612d4b83398151915261082881611fb7565b610830611f47565b6001600160a01b0382166108865760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f2075736463206164647265737300000000000000006044820152606401610755565b600280546001600160a01b0319166001600160a01b0384169081179091556040517f103c5bd4d1fbed26f9d95c639ecfb64bbece2b8f7d599a45f9aaab41c3e9ded090600090a261080c611f91565b600080516020612d4b8339815191526108ed81611fb7565b6108f5611f47565b6001600160a01b03821661091b5760405162461bcd60e51b815260040161075590612ba7565b600080546001600160a01b0319166001600160a01b038416908117909155604051908152309033907f28e0ff29ad991f2655c48b0b095a69abbf13aec6c8bc181dd526dbb3f8c9d0b99060200160405180910390a361080c611f91565b600080516020612d4b83398151915261099081611fb7565b610998611f47565b6001600160a01b0382166109be5760405162461bcd60e51b815260040161075590612ba7565b604080516060810182526001600160a01b0384168082526000602083018190526001928401839052600880546001600160a01b031916831790556009819055600a805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a261080c611f91565b6000908152600080516020612d2b833981519152602052604090206001015490565b610a6482610a39565b610a6d81611fb7565b610a778383611fc1565b50505050565b6001600160a01b0381163314610aa65760405163334bd91960e11b815260040160405180910390fd5b610ab08282612066565b505050565b6003546001600160a01b03163314610adf5760405162461bcd60e51b815260040161075590612b70565b610ae7611f47565b60008111610b295760405162461bcd60e51b815260206004820152600f60248201526e2ab737a9329d103d32b9379036b1b960891b6044820152606401610755565b600c819055604051818152309033907fa55ee73f4232498ac4c250ffa77f4337343a213648a66147d8848f6660fa3fdf906020015b60405180910390a3610b6e611f91565b50565b600080516020612d4b833981519152610b8981611fb7565b610b91611f47565b6001600160a01b038216600090815260046020526040902060020154600160a01b900460ff16610bd35760405162461bcd60e51b815260040161075590612bd4565b6001600160a01b03821660009081526004602052604090205415610c48576001600160a01b0380831660009081526004602090815260408083206002810154905494168084526007909252909120549091610c2d91612c17565b6001600160a01b039091166000908152600760205260409020555b6001600160a01b0382166000818152600460205260408082208281556001810183905560020180546001600160a81b0319169055517ff54e47602c09e6190ae0c9cba6074e2e211bf36944fd714fbb0bd78aba514cab9190a261080c611f91565b600080516020612d4b833981519152610cc181611fb7565b610cc9611f47565b6001600160a01b038316600090815260046020526040902060020154600160a01b900460ff16610d0b5760405162461bcd60e51b815260040161075590612bd4565b6001600160a01b0380841660009081526004602090815260408083206002015490931680835260079091529181208054859290610d49908490612c2a565b9091555050506001600160a01b0383166000908152600460205260409020829055610ab0611f91565b600080516020612d4b833981519152610d8a81611fb7565b610d92611f47565b6001600160a01b0382166000908152600e602052604090205460ff16610df15760405162461bcd60e51b8152602060048201526014602482015273155b9bd4994e881b9bc81dda1a5d19481b1a5cdd60621b6044820152606401610755565b6001600160a01b0382166000818152600e6020526040808220805460ff19169055517f4151e001c03bfed83a194d10eea2c0edf04f98e382c440c94a947a99d38d2c329190a261080c611f91565b610e47611f47565b33600090815260046020526040902060020154600160a01b900460ff16610e805760405162461bcd60e51b815260040161075590612c3d565b610e8a33826120e2565b610ed65760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f776044820152606401610755565b610ee2338260006121cf565b610b6e611f91565b600080516020612d4b833981519152610f0281611fb7565b610f0a611f47565b600a5460ff16610f2c5760405162461bcd60e51b815260040161075590612bd4565b6000600b819055600880546001600160a01b03198116909155600a805460ff1916905560098290556040516001600160a01b039091169182917fffb315d96bed6cc0b00a9cc39d15fcbcab7d047fca09660a2d73569cfc75817c9190a250610b6e611f91565b600080516020612d4b833981519152610faa81611fb7565b6001600160a01b038416610fd05760405162461bcd60e51b815260040161075590612ba7565b6001600160a01b038416600090815260046020526040902060020154600160a01b900460ff161561103f5760405162461bcd60e51b8152602060048201526019602482015278155b9bd4994e88185b1c9958591e48195e1a5cdd081c1bdbdb603a1b6044820152606401610755565b6001600160a01b03831660009081526006602052604081205460ff16151590036110c9576001600160a01b0383166000818152600660205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191690911790555b60408051608081018252600080825260208083018681526001600160a01b038881168587018181526001606088018181528d851680895260048852978a902098518955945190880155516002909601805493511515600160a01b026001600160a81b0319909416969092169590951791909117905583519283528201859052917f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab91015b60405180910390a250505050565b611183611f47565b600a5460ff16156111cd5760405162461bcd60e51b8152602060048201526014602482015273556e6f52653a20506f6c6963792065786973747360601b6044820152606401610755565b6001546001600160a01b031633146112375760405162461bcd60e51b815260206004820152602760248201527f556e6f52653a206f6e6c792073616c6573506f6c696379466163746f72792063604482015266185b8818d85b1b60ca1b6064820152608401610755565b604080516060810182526001600160a01b0383168082526000602083018190526001928401839052600880546001600160a01b031916831790556009819055600a805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a2610b6e611f91565b336000908152600e602052604090205460ff166112e15760405162461bcd60e51b815260040161075590612b70565b6001600160a01b0383166113075760405162461bcd60e51b815260040161075590612ba7565b6001600160a01b038316600090815260046020526040902060020154600160a01b900460ff16156113765760405162461bcd60e51b8152602060048201526019602482015278155b9bd4994e88185b1c9958591e48195e1a5cdd081c1bdbdb603a1b6044820152606401610755565b6001600160a01b03821660009081526006602052604081205460ff1615159003611400576001600160a01b0382166000818152600660205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191690911790555b60408051608081018252600080825260208083018581526001600160a01b038781168587018181526001606088018181528c851680895260048852978a902098518955945190880155516002909601805493511515600160a01b026001600160a81b0319909416969092169590951791909117905583519283528201849052917f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab910160405180910390a2505050565b600080516020612d4b8339815191526114c881611fb7565b6114d0611f47565b600854604051637a5402e960e01b8152600481018490526000916001600160a01b031690637a5402e99060240160a060405180830381865afa15801561151a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153e9190612c6b565b50505050905061154e838261237e565b5061080c611f91565b61155f611f47565b33600090815260046020526040902060020154600160a01b900460ff166115985760405162461bcd60e51b815260040161075590612c3d565b610ee2338260016121cf565b6000918252600080516020612d2b833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006115e6612486565b905090565b6115f3611f47565b6008546001600160a01b0316331461164d5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206f6e6c792073616c6573506f6c6963792063616e2063616c6c6044820152606401610755565b600a5460ff166116985760405162461bcd60e51b8152602060048201526016602482015275556e6f52653a206e6f20657869737420706f6c69637960501b6044820152606401610755565b6116a1816124f9565b6116ed5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206d6178696d756d206c65766572616765206f766572666c6f776044820152606401610755565b610ee281600161253e565b600080516020612d4b83398151915261171081611fb7565b611718611f47565b6001600160a01b03821661176e5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20706f6f6c206164647265737300000000000000006044820152606401610755565b6001600160a01b0382166000908152600e602052604090205460ff16156117d75760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a207768697465206c69737420616c7265616479000000000000006044820152606401610755565b6001600160a01b0382166000818152600e6020526040808220805460ff19166001179055517f398e8e2ed05e6be725398a28e81fdf023a447b92941bd666e68ce2091b82bcc79190a261080c611f91565b600080516020612d4b83398151915261184081611fb7565b611848611f47565b6001600160a01b03821661189e5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a207a65726f20666163746f7279206164647265737300000000006044820152606401610755565b600180546001600160a01b0319166001600160a01b0384169081179091556040517f6507596e94e343212d1c22479359f82fffb65f099deb3ebcae9eb33c3d06de9e90600090a261080c611f91565b600080516020612d4b83398151915261190581611fb7565b61190d611f47565b6001600160a01b0382166119635760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206f70657261746f722061646472657373000000006044820152606401610755565b600380546001600160a01b0319166001600160a01b0384169081179091556040517f08c5d29613b4e7468e893fe5f104f5a3ea6e28298f00fbbab9dc9394578c89de90600090a261080c611f91565b6119ba611f47565b6008546001600160a01b0316611a125760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f2065786973742073616c6573506f6c69637900000000006044820152606401610755565b600854604051637a5402e960e01b815260048101839052600091829182916001600160a01b031690637a5402e99060240160a060405180830381865afa158015611a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a849190612c6b565b505092509250925060008183611a9a9190612c2a565b421080159150611b5057611aaf84600061253e565b6008546040516352eaf0a160e11b8152600481018790526001600160a01b039091169063a5d5e14290602401600060405180830381600087803b158015611af557600080fd5b505af1158015611b09573d6000803e3d6000fd5b50506008546040518881526001600160a01b0390911692507faf1c77a8196c946ab8e645210cd1e2685b4fb758ddfd474fd918298854dea6fc915060200160405180910390a25b50505050610b6e611f91565b6000611b6883836120e2565b9392505050565b6000610725826124f9565b611b8382610a39565b611b8c81611fb7565b610a778383612066565b6003546001600160a01b03163314611bc05760405162461bcd60e51b815260040161075590612b70565b611bc8611f47565b60008111611c0a5760405162461bcd60e51b815260206004820152600f60248201526e2ab737a9329d103d32b9379036b63960891b6044820152606401610755565b600d819055604051818152309033907fb2f30bd42a6b499419a01b9b79e7b98934167f5a8a8c389ce446e20a8e5df76590602001610b5e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015611c895750825b905060008267ffffffffffffffff166001148015611ca65750303b155b905081158015611cb4575080155b15611cd25760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611cfc57845460ff60401b1916600160401b1785555b6001600160a01b038916611d5c5760405162461bcd60e51b815260206004820152602160248201527f556e6f52653a207a65726f2065786368616e67654167656e74206164647265736044820152607360f81b6064820152608401610755565b6001600160a01b038816611db25760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f2055534443206164647265737300000000000000006044820152606401610755565b6001600160a01b038716611e135760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a207a65726f206d756c746973696777616c6c6574206164647265604482015261737360f01b6064820152608401610755565b600080546001600160a01b03808c166001600160a01b031992831617909255600280548b84169083161790556003805492891692909116919091179055611e58612638565b611e6061264a565b611e78600080516020612d4b83398151915288611fc1565b50611e91600080516020612d4b83398151915280612652565b8315611ed757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b611eea611f47565b33600090815260046020526040902060020154600160a01b900460ff16611f235760405162461bcd60e51b815260040161075590612c3d565b611f2f338460006121cf565b8015611f3f57611f3f83836126b5565b610ab0611f91565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901611f8b57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b610b6e813361280c565b6000600080516020612d2b833981519152611fdc84846115a4565b61205c576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556120123390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610725565b6000915050610725565b6000600080516020612d2b83398151915261208184846115a4565b1561205c576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610725565b6001600160a01b0380831660009081526004602052604081206002015490911681808061210d612486565b6001600160a01b03851660009081526007602052604090205490935061213f90859061213a908990612c17565b612845565b6001600160a01b03881660009081526004602052604090205490925061216c90859061213a908990612c17565b90506000670de0b6b3a7640000600c54856121879190612cc2565b6121919190612cd9565b6001600160a01b03891660009081526004602052604090206001015490841080159250908310159082906121c25750805b9998505050505050505050565b8061223c576001600160a01b03831660009081526004602052604090205482111561223c5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a20706f6f6c206361706974616c206f766572666c6f77000000006044820152606401610755565b6001600160a01b038084166000908152600460205260409020600201541681612288576001600160a01b038416600090815260046020526040902054612283908490612c17565b6122ac565b6001600160a01b0384166000908152600460205260409020546122ac908490612c2a565b6001600160a01b038516600090815260046020526040902055816122f3576001600160a01b0381166000908152600760205260409020546122ee908490612c17565b612317565b6001600160a01b038116600090815260076020526040902054612317908490612c2a565b6001600160a01b038281166000818152600760208181526040808420879055948a1680845260048252858420549490935290815283519283528201939093527f4c54f63d510ce2f2f9bf99bf203458cb67aa75fae97ccab560a1654eba9dbf24910161116d565b6008546001600160a01b03166123d65760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f2065786973742073616c6573506f6c69637900000000006044820152606401610755565b6123e181600061253e565b6008546040516319d9b48f60e11b8152600481018490526001600160a01b03909116906333b3691e90602401600060405180830381600087803b15801561242757600080fd5b505af115801561243b573d6000803e3d6000fd5b50506008546040518581526001600160a01b0390911692507f56b46e5b13fdb3c0b1989f448e91b2ad68cf0c8e8ddd87f996720708ae3a156991506020015b60405180910390a25050565b60008060005b6005548110156124f3576000600582815481106124ab576124ab612cfb565b60009182526020808320909101546001600160a01b031680835260079091526040909120549091506124de908290612845565b6124e89084612c2a565b92505060010161248c565b50919050565b600080612504612486565b9050670de0b6b3a7640000600d548261251d9190612cc2565b6125279190612cd9565b83600b546125359190612c2a565b11159392505050565b80612595576009548211156125955760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a20706f6c69637920636f766572616765206f766572666c6f77006044820152606401610755565b806125ad576009546125a8908390612c17565b6125bb565b6009546125bb908390612c2a565b600955806125d65781600b546125d19190612c17565b6125e4565b81600b546125e49190612c2a565b600b8190556008546009546040805186815260208101929092528101929092526001600160a01b0316907facece99dd8b86cb96519fb17caded4d103b35a8261463d0d11f80a41146073009060600161247a565b612640612978565b6126486129c1565b565b612648612978565b600080516020612d2b833981519152600061266c84610a39565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b600854604051637a5402e960e01b8152600481018390526001600160a01b03909116906000908290637a5402e99060240160a060405180830381865afa158015612703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127279190612c6b565b505050506001600160a01b0383166000908152600f6020908152604080832087845290915290205490915061275c8186612c2a565b8210156127ab5760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a20636f76657261676520616d6f756e74206973206c65737300006044820152606401610755565b6001600160a01b0383166000908152600f60209081526040808320878452909152812080548792906127de908490612c2a565b90915550600090506127f08287612c2a565b83118015915061280457612804858461237e565b505050505050565b61281682826115a4565b61080c5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610755565b60025460009081906001600160a01b0390811690851603612867575081611b68565b6001600160a01b0384166128f15760005460025460405163ba560ed960e01b81526001600160a01b0391821660048201526024810186905291169063ba560ed990604401602060405180830381865afa1580156128c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ec9190612d11565b612970565b600054600254604051631a44cdf360e11b81526001600160a01b0387811660048301529182166024820152604481018690529116906334899be690606401602060405180830381865afa15801561294c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129709190612d11565b949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661264857604051631afcd79f60e31b815260040160405180910390fd5b611f91612978565b6000602082840312156129db57600080fd5b81356001600160e01b031981168114611b6857600080fd5b80356001600160a01b0381168114612a0a57600080fd5b919050565b60008060408385031215612a2257600080fd5b82359150612a32602084016129f3565b90509250929050565b600060208284031215612a4d57600080fd5b611b68826129f3565b600060208284031215612a6857600080fd5b5035919050565b60008060408385031215612a8257600080fd5b612a8b836129f3565b946020939093013593505050565b600080600060608486031215612aae57600080fd5b612ab7846129f3565b9250612ac5602085016129f3565b9150604084013590509250925092565b60008060008060808587031215612aeb57600080fd5b612af4856129f3565b9350612b02602086016129f3565b9250612b10604086016129f3565b9150612b1e606086016129f3565b905092959194509250565b8015158114610b6e57600080fd5b600080600060608486031215612b4c57600080fd5b83359250602084013591506040840135612b6581612b29565b809150509250925092565b6020808252601e908201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e0000604082015260600190565b602080825260139082015272556e6f52653a207a65726f206164647265737360681b604082015260600190565b602080825260139082015272155b9bd4994e881b9bc8195e1a5d081c1bdbdb606a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561072557610725612c01565b8082018082111561072557610725612c01565b6020808252601490820152730556e6f52653a206e6f20657869737420737369760641b604082015260600190565b600080600080600060a08688031215612c8357600080fd5b8551945060208601519350604086015192506060860151612ca381612b29565b6080870151909250612cb481612b29565b809150509295509295909350565b808202811582820484141761072557610725612c01565b600082612cf657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612d2357600080fd5b505191905056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122033ae19fd92d9f96794a1853799e787a550bf1360d5472e3d45dcf573d1cbc63864736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c8063794e572411610167578063a65888fb116100ce578063d4688a4511610087578063d4688a451461068c578063d547741f14610695578063d8c5c863146106a8578063d9203b91146106bb578063f8c8765e146106ce578063fb6cb847146106e157600080fd5b8063a65888fb1461061a578063a88d2f7a1461062d578063b3ab15fb14610640578063be22041b14610653578063c139b04f14610666578063c3ea3a281461067957600080fd5b806391d148541161012057806391d148541461055157806392ff38ec14610564578063974e4d851461056c5780639a7b5f111461058a578063a0931af2146105ff578063a217fddf1461061257600080fd5b8063794e5724146104f35780637d4163d3146104fc5780637e29d6c21461050f578063869bd44a146105225780638bb70831146105355780638be5a39f1461053e57600080fd5b8063385a128f1161020b57806355b4b1a4116101c457806355b4b1a414610472578063570ca7351461049d5780635b44d576146104b057806365cb3a83146104c3578063706c2d1b146104cb57806375b238fc146104de57600080fd5b8063385a128f146103b85780633b7d0946146103cb5780633fecfbf2146103de5780634341e0991461043d5780634a3a3d14146104505780634dc70bac1461046357600080fd5b80631dfa426d1161025d5780631dfa426d14610328578063248a9ca31461033b57806325042fe91461035c5780632f2ff15d1461037f57806336568abe1461039257806336760a1c146103a557600080fd5b806301ffc9a71461029a5780630d757531146102c25780630f5a9d01146102d757806311eac855146102ea57806318a00d8e14610315575b600080fd5b6102ad6102a83660046129c9565b6106f4565b60405190151581526020015b60405180910390f35b6102d56102d0366004612a0f565b61072b565b005b6102d56102e5366004612a3b565b610810565b6002546102fd906001600160a01b031681565b6040516001600160a01b0390911681526020016102b9565b6102d5610323366004612a3b565b6108d5565b6102d5610336366004612a3b565b610978565b61034e610349366004612a56565b610a39565b6040519081526020016102b9565b6102ad61036a366004612a3b565b600e6020526000908152604090205460ff1681565b6102d561038d366004612a0f565b610a5b565b6102d56103a0366004612a0f565b610a7d565b6001546102fd906001600160a01b031681565b6102d56103c6366004612a56565b610ab5565b6102d56103d9366004612a3b565b610b71565b610416604080516060810182526008546001600160a01b031680825260095460208301819052600a5460ff1615159290930182905292565b604080516001600160a01b03909416845260208401929092521515908201526060016102b9565b6102d561044b366004612a6f565b610ca9565b6102d561045e366004612a3b565b610d72565b61034e670de0b6b3a764000081565b61034e610480366004612a6f565b600f60209081526000928352604080842090915290825290205481565b6003546102fd906001600160a01b031681565b6102d56104be366004612a56565b610e3f565b6102d5610eea565b6102d56104d9366004612a99565b610f92565b61034e600080516020612d4b83398151915281565b61034e600c5481565b6102d561050a366004612a3b565b61117b565b6102d561051d366004612a99565b6112b2565b6102d5610530366004612a56565b6114b0565b61034e600d5481565b6102d561054c366004612a56565b611557565b6102ad61055f366004612a0f565b6115a4565b61034e6115dc565b600854600954600a54610416926001600160a01b0316919060ff1683565b6105ce610598366004612a3b565b6004602052600090815260409020805460018201546002909201549091906001600160a01b03811690600160a01b900460ff1684565b6040516102b9949392919093845260208401929092526001600160a01b031660408301521515606082015260800190565b6102d561060d366004612a56565b6115eb565b61034e600081565b6102d5610628366004612a3b565b6116f8565b6102d561063b366004612a3b565b611828565b6102d561064e366004612a3b565b6118ed565b6102d5610661366004612a56565b6119b2565b6102ad610674366004612a6f565b611b5c565b6102ad610687366004612a56565b611b6f565b61034e600b5481565b6102d56106a3366004612a0f565b611b7a565b6102d56106b6366004612a56565b611b96565b6000546102fd906001600160a01b031681565b6102d56106dc366004612ad5565b611c43565b6102d56106ef366004612b37565b611ee2565b60006001600160e01b03198216637965db0b60e01b148061072557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003546001600160a01b0316331461075e5760405162461bcd60e51b815260040161075590612b70565b60405180910390fd5b610766611f47565b600082116107a85760405162461bcd60e51b815260206004820152600f60248201526e2ab737a9329d103d32b9379039b1b960891b6044820152606401610755565b6001600160a01b0381166000818152600460205260409081902060010184905551309033907fade0e16d2bd0d685eef1e5355dc835692faac192ef62225adb31cd0c0b99c8a8906107fc9087815260200190565b60405180910390a461080c611f91565b5050565b600080516020612d4b83398151915261082881611fb7565b610830611f47565b6001600160a01b0382166108865760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f2075736463206164647265737300000000000000006044820152606401610755565b600280546001600160a01b0319166001600160a01b0384169081179091556040517f103c5bd4d1fbed26f9d95c639ecfb64bbece2b8f7d599a45f9aaab41c3e9ded090600090a261080c611f91565b600080516020612d4b8339815191526108ed81611fb7565b6108f5611f47565b6001600160a01b03821661091b5760405162461bcd60e51b815260040161075590612ba7565b600080546001600160a01b0319166001600160a01b038416908117909155604051908152309033907f28e0ff29ad991f2655c48b0b095a69abbf13aec6c8bc181dd526dbb3f8c9d0b99060200160405180910390a361080c611f91565b600080516020612d4b83398151915261099081611fb7565b610998611f47565b6001600160a01b0382166109be5760405162461bcd60e51b815260040161075590612ba7565b604080516060810182526001600160a01b0384168082526000602083018190526001928401839052600880546001600160a01b031916831790556009819055600a805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a261080c611f91565b6000908152600080516020612d2b833981519152602052604090206001015490565b610a6482610a39565b610a6d81611fb7565b610a778383611fc1565b50505050565b6001600160a01b0381163314610aa65760405163334bd91960e11b815260040160405180910390fd5b610ab08282612066565b505050565b6003546001600160a01b03163314610adf5760405162461bcd60e51b815260040161075590612b70565b610ae7611f47565b60008111610b295760405162461bcd60e51b815260206004820152600f60248201526e2ab737a9329d103d32b9379036b1b960891b6044820152606401610755565b600c819055604051818152309033907fa55ee73f4232498ac4c250ffa77f4337343a213648a66147d8848f6660fa3fdf906020015b60405180910390a3610b6e611f91565b50565b600080516020612d4b833981519152610b8981611fb7565b610b91611f47565b6001600160a01b038216600090815260046020526040902060020154600160a01b900460ff16610bd35760405162461bcd60e51b815260040161075590612bd4565b6001600160a01b03821660009081526004602052604090205415610c48576001600160a01b0380831660009081526004602090815260408083206002810154905494168084526007909252909120549091610c2d91612c17565b6001600160a01b039091166000908152600760205260409020555b6001600160a01b0382166000818152600460205260408082208281556001810183905560020180546001600160a81b0319169055517ff54e47602c09e6190ae0c9cba6074e2e211bf36944fd714fbb0bd78aba514cab9190a261080c611f91565b600080516020612d4b833981519152610cc181611fb7565b610cc9611f47565b6001600160a01b038316600090815260046020526040902060020154600160a01b900460ff16610d0b5760405162461bcd60e51b815260040161075590612bd4565b6001600160a01b0380841660009081526004602090815260408083206002015490931680835260079091529181208054859290610d49908490612c2a565b9091555050506001600160a01b0383166000908152600460205260409020829055610ab0611f91565b600080516020612d4b833981519152610d8a81611fb7565b610d92611f47565b6001600160a01b0382166000908152600e602052604090205460ff16610df15760405162461bcd60e51b8152602060048201526014602482015273155b9bd4994e881b9bc81dda1a5d19481b1a5cdd60621b6044820152606401610755565b6001600160a01b0382166000818152600e6020526040808220805460ff19169055517f4151e001c03bfed83a194d10eea2c0edf04f98e382c440c94a947a99d38d2c329190a261080c611f91565b610e47611f47565b33600090815260046020526040902060020154600160a01b900460ff16610e805760405162461bcd60e51b815260040161075590612c3d565b610e8a33826120e2565b610ed65760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f776044820152606401610755565b610ee2338260006121cf565b610b6e611f91565b600080516020612d4b833981519152610f0281611fb7565b610f0a611f47565b600a5460ff16610f2c5760405162461bcd60e51b815260040161075590612bd4565b6000600b819055600880546001600160a01b03198116909155600a805460ff1916905560098290556040516001600160a01b039091169182917fffb315d96bed6cc0b00a9cc39d15fcbcab7d047fca09660a2d73569cfc75817c9190a250610b6e611f91565b600080516020612d4b833981519152610faa81611fb7565b6001600160a01b038416610fd05760405162461bcd60e51b815260040161075590612ba7565b6001600160a01b038416600090815260046020526040902060020154600160a01b900460ff161561103f5760405162461bcd60e51b8152602060048201526019602482015278155b9bd4994e88185b1c9958591e48195e1a5cdd081c1bdbdb603a1b6044820152606401610755565b6001600160a01b03831660009081526006602052604081205460ff16151590036110c9576001600160a01b0383166000818152600660205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191690911790555b60408051608081018252600080825260208083018681526001600160a01b038881168587018181526001606088018181528d851680895260048852978a902098518955945190880155516002909601805493511515600160a01b026001600160a81b0319909416969092169590951791909117905583519283528201859052917f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab91015b60405180910390a250505050565b611183611f47565b600a5460ff16156111cd5760405162461bcd60e51b8152602060048201526014602482015273556e6f52653a20506f6c6963792065786973747360601b6044820152606401610755565b6001546001600160a01b031633146112375760405162461bcd60e51b815260206004820152602760248201527f556e6f52653a206f6e6c792073616c6573506f6c696379466163746f72792063604482015266185b8818d85b1b60ca1b6064820152608401610755565b604080516060810182526001600160a01b0383168082526000602083018190526001928401839052600880546001600160a01b031916831790556009819055600a805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a2610b6e611f91565b336000908152600e602052604090205460ff166112e15760405162461bcd60e51b815260040161075590612b70565b6001600160a01b0383166113075760405162461bcd60e51b815260040161075590612ba7565b6001600160a01b038316600090815260046020526040902060020154600160a01b900460ff16156113765760405162461bcd60e51b8152602060048201526019602482015278155b9bd4994e88185b1c9958591e48195e1a5cdd081c1bdbdb603a1b6044820152606401610755565b6001600160a01b03821660009081526006602052604081205460ff1615159003611400576001600160a01b0382166000818152600660205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191690911790555b60408051608081018252600080825260208083018581526001600160a01b038781168587018181526001606088018181528c851680895260048852978a902098518955945190880155516002909601805493511515600160a01b026001600160a81b0319909416969092169590951791909117905583519283528201849052917f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab910160405180910390a2505050565b600080516020612d4b8339815191526114c881611fb7565b6114d0611f47565b600854604051637a5402e960e01b8152600481018490526000916001600160a01b031690637a5402e99060240160a060405180830381865afa15801561151a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153e9190612c6b565b50505050905061154e838261237e565b5061080c611f91565b61155f611f47565b33600090815260046020526040902060020154600160a01b900460ff166115985760405162461bcd60e51b815260040161075590612c3d565b610ee2338260016121cf565b6000918252600080516020612d2b833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006115e6612486565b905090565b6115f3611f47565b6008546001600160a01b0316331461164d5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206f6e6c792073616c6573506f6c6963792063616e2063616c6c6044820152606401610755565b600a5460ff166116985760405162461bcd60e51b8152602060048201526016602482015275556e6f52653a206e6f20657869737420706f6c69637960501b6044820152606401610755565b6116a1816124f9565b6116ed5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206d6178696d756d206c65766572616765206f766572666c6f776044820152606401610755565b610ee281600161253e565b600080516020612d4b83398151915261171081611fb7565b611718611f47565b6001600160a01b03821661176e5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20706f6f6c206164647265737300000000000000006044820152606401610755565b6001600160a01b0382166000908152600e602052604090205460ff16156117d75760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a207768697465206c69737420616c7265616479000000000000006044820152606401610755565b6001600160a01b0382166000818152600e6020526040808220805460ff19166001179055517f398e8e2ed05e6be725398a28e81fdf023a447b92941bd666e68ce2091b82bcc79190a261080c611f91565b600080516020612d4b83398151915261184081611fb7565b611848611f47565b6001600160a01b03821661189e5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a207a65726f20666163746f7279206164647265737300000000006044820152606401610755565b600180546001600160a01b0319166001600160a01b0384169081179091556040517f6507596e94e343212d1c22479359f82fffb65f099deb3ebcae9eb33c3d06de9e90600090a261080c611f91565b600080516020612d4b83398151915261190581611fb7565b61190d611f47565b6001600160a01b0382166119635760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206f70657261746f722061646472657373000000006044820152606401610755565b600380546001600160a01b0319166001600160a01b0384169081179091556040517f08c5d29613b4e7468e893fe5f104f5a3ea6e28298f00fbbab9dc9394578c89de90600090a261080c611f91565b6119ba611f47565b6008546001600160a01b0316611a125760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f2065786973742073616c6573506f6c69637900000000006044820152606401610755565b600854604051637a5402e960e01b815260048101839052600091829182916001600160a01b031690637a5402e99060240160a060405180830381865afa158015611a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a849190612c6b565b505092509250925060008183611a9a9190612c2a565b421080159150611b5057611aaf84600061253e565b6008546040516352eaf0a160e11b8152600481018790526001600160a01b039091169063a5d5e14290602401600060405180830381600087803b158015611af557600080fd5b505af1158015611b09573d6000803e3d6000fd5b50506008546040518881526001600160a01b0390911692507faf1c77a8196c946ab8e645210cd1e2685b4fb758ddfd474fd918298854dea6fc915060200160405180910390a25b50505050610b6e611f91565b6000611b6883836120e2565b9392505050565b6000610725826124f9565b611b8382610a39565b611b8c81611fb7565b610a778383612066565b6003546001600160a01b03163314611bc05760405162461bcd60e51b815260040161075590612b70565b611bc8611f47565b60008111611c0a5760405162461bcd60e51b815260206004820152600f60248201526e2ab737a9329d103d32b9379036b63960891b6044820152606401610755565b600d819055604051818152309033907fb2f30bd42a6b499419a01b9b79e7b98934167f5a8a8c389ce446e20a8e5df76590602001610b5e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015611c895750825b905060008267ffffffffffffffff166001148015611ca65750303b155b905081158015611cb4575080155b15611cd25760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611cfc57845460ff60401b1916600160401b1785555b6001600160a01b038916611d5c5760405162461bcd60e51b815260206004820152602160248201527f556e6f52653a207a65726f2065786368616e67654167656e74206164647265736044820152607360f81b6064820152608401610755565b6001600160a01b038816611db25760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f2055534443206164647265737300000000000000006044820152606401610755565b6001600160a01b038716611e135760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a207a65726f206d756c746973696777616c6c6574206164647265604482015261737360f01b6064820152608401610755565b600080546001600160a01b03808c166001600160a01b031992831617909255600280548b84169083161790556003805492891692909116919091179055611e58612638565b611e6061264a565b611e78600080516020612d4b83398151915288611fc1565b50611e91600080516020612d4b83398151915280612652565b8315611ed757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b611eea611f47565b33600090815260046020526040902060020154600160a01b900460ff16611f235760405162461bcd60e51b815260040161075590612c3d565b611f2f338460006121cf565b8015611f3f57611f3f83836126b5565b610ab0611f91565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901611f8b57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b610b6e813361280c565b6000600080516020612d2b833981519152611fdc84846115a4565b61205c576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556120123390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610725565b6000915050610725565b6000600080516020612d2b83398151915261208184846115a4565b1561205c576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610725565b6001600160a01b0380831660009081526004602052604081206002015490911681808061210d612486565b6001600160a01b03851660009081526007602052604090205490935061213f90859061213a908990612c17565b612845565b6001600160a01b03881660009081526004602052604090205490925061216c90859061213a908990612c17565b90506000670de0b6b3a7640000600c54856121879190612cc2565b6121919190612cd9565b6001600160a01b03891660009081526004602052604090206001015490841080159250908310159082906121c25750805b9998505050505050505050565b8061223c576001600160a01b03831660009081526004602052604090205482111561223c5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a20706f6f6c206361706974616c206f766572666c6f77000000006044820152606401610755565b6001600160a01b038084166000908152600460205260409020600201541681612288576001600160a01b038416600090815260046020526040902054612283908490612c17565b6122ac565b6001600160a01b0384166000908152600460205260409020546122ac908490612c2a565b6001600160a01b038516600090815260046020526040902055816122f3576001600160a01b0381166000908152600760205260409020546122ee908490612c17565b612317565b6001600160a01b038116600090815260076020526040902054612317908490612c2a565b6001600160a01b038281166000818152600760208181526040808420879055948a1680845260048252858420549490935290815283519283528201939093527f4c54f63d510ce2f2f9bf99bf203458cb67aa75fae97ccab560a1654eba9dbf24910161116d565b6008546001600160a01b03166123d65760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f2065786973742073616c6573506f6c69637900000000006044820152606401610755565b6123e181600061253e565b6008546040516319d9b48f60e11b8152600481018490526001600160a01b03909116906333b3691e90602401600060405180830381600087803b15801561242757600080fd5b505af115801561243b573d6000803e3d6000fd5b50506008546040518581526001600160a01b0390911692507f56b46e5b13fdb3c0b1989f448e91b2ad68cf0c8e8ddd87f996720708ae3a156991506020015b60405180910390a25050565b60008060005b6005548110156124f3576000600582815481106124ab576124ab612cfb565b60009182526020808320909101546001600160a01b031680835260079091526040909120549091506124de908290612845565b6124e89084612c2a565b92505060010161248c565b50919050565b600080612504612486565b9050670de0b6b3a7640000600d548261251d9190612cc2565b6125279190612cd9565b83600b546125359190612c2a565b11159392505050565b80612595576009548211156125955760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a20706f6c69637920636f766572616765206f766572666c6f77006044820152606401610755565b806125ad576009546125a8908390612c17565b6125bb565b6009546125bb908390612c2a565b600955806125d65781600b546125d19190612c17565b6125e4565b81600b546125e49190612c2a565b600b8190556008546009546040805186815260208101929092528101929092526001600160a01b0316907facece99dd8b86cb96519fb17caded4d103b35a8261463d0d11f80a41146073009060600161247a565b612640612978565b6126486129c1565b565b612648612978565b600080516020612d2b833981519152600061266c84610a39565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b600854604051637a5402e960e01b8152600481018390526001600160a01b03909116906000908290637a5402e99060240160a060405180830381865afa158015612703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127279190612c6b565b505050506001600160a01b0383166000908152600f6020908152604080832087845290915290205490915061275c8186612c2a565b8210156127ab5760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a20636f76657261676520616d6f756e74206973206c65737300006044820152606401610755565b6001600160a01b0383166000908152600f60209081526040808320878452909152812080548792906127de908490612c2a565b90915550600090506127f08287612c2a565b83118015915061280457612804858461237e565b505050505050565b61281682826115a4565b61080c5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610755565b60025460009081906001600160a01b0390811690851603612867575081611b68565b6001600160a01b0384166128f15760005460025460405163ba560ed960e01b81526001600160a01b0391821660048201526024810186905291169063ba560ed990604401602060405180830381865afa1580156128c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ec9190612d11565b612970565b600054600254604051631a44cdf360e11b81526001600160a01b0387811660048301529182166024820152604481018690529116906334899be690606401602060405180830381865afa15801561294c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129709190612d11565b949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661264857604051631afcd79f60e31b815260040160405180910390fd5b611f91612978565b6000602082840312156129db57600080fd5b81356001600160e01b031981168114611b6857600080fd5b80356001600160a01b0381168114612a0a57600080fd5b919050565b60008060408385031215612a2257600080fd5b82359150612a32602084016129f3565b90509250929050565b600060208284031215612a4d57600080fd5b611b68826129f3565b600060208284031215612a6857600080fd5b5035919050565b60008060408385031215612a8257600080fd5b612a8b836129f3565b946020939093013593505050565b600080600060608486031215612aae57600080fd5b612ab7846129f3565b9250612ac5602085016129f3565b9150604084013590509250925092565b60008060008060808587031215612aeb57600080fd5b612af4856129f3565b9350612b02602086016129f3565b9250612b10604086016129f3565b9150612b1e606086016129f3565b905092959194509250565b8015158114610b6e57600080fd5b600080600060608486031215612b4c57600080fd5b83359250602084013591506040840135612b6581612b29565b809150509250925092565b6020808252601e908201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e0000604082015260600190565b602080825260139082015272556e6f52653a207a65726f206164647265737360681b604082015260600190565b602080825260139082015272155b9bd4994e881b9bc8195e1a5d081c1bdbdb606a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561072557610725612c01565b8082018082111561072557610725612c01565b6020808252601490820152730556e6f52653a206e6f20657869737420737369760641b604082015260600190565b600080600080600060a08688031215612c8357600080fd5b8551945060208601519350604086015192506060860151612ca381612b29565b6080870151909250612cb481612b29565b809150509295509295909350565b808202811582820484141761072557610725612c01565b600082612cf657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612d2357600080fd5b505191905056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122033ae19fd92d9f96794a1853799e787a550bf1360d5472e3d45dcf573d1cbc63864736f6c63430008170033",
  "devdoc": {
    "details": "update and manage all pools capital and policy utlized amount, whenever user stake and withdraw from the pool and buy policy from salesPolicy notifies to capital agent to update pool capital and policy coverage*",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "SSIPPolicyCaim(uint256,uint256,bool)": {
        "details": "update pool(caller) capital from capital agent, decrease capital of pool by _withdrawAmount, if user claim policy from pool ",
        "params": {
          "_withdrawAmount": "amount to withdraw*"
        }
      },
      "SSIPStaking(uint256)": {
        "details": "update pool(caller) capital from capital agent, increase capital of pool by _stakingAmount, if user stake in pool",
        "params": {
          "_stakingAmount": "amount to deposit*"
        }
      },
      "SSIPWithdraw(uint256)": {
        "details": "update pool(caller) capital from capital agent, decrease capital of pool by _withdrawAmount, if user withdraw from pool remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively",
        "params": {
          "_withdrawAmount": "amount to withdraw*"
        }
      },
      "addPool(address,address,uint256)": {
        "details": "add pool into capitalAgent to stake capital, can only be call by whitelisted pools",
        "params": {
          "_currency": "pool lp currency address",
          "_scr": "pool scr value(minimum capital should maintain in capital agent)*",
          "_ssip": "address of pool to add"
        }
      },
      "addPoolByAdmin(address,address,uint256)": {
        "details": "add pool into capitalAgent to stake capital, can only be call by admin role",
        "params": {
          "_currency": "pool lp currency address",
          "_scr": "pool scr value(minimum capital should maintain in capital agent)*",
          "_ssip": "address of pool to add"
        }
      },
      "addPoolWhiteList(address)": {
        "details": "whitelist pool address, can only be call by admin role",
        "params": {
          "_pool": "address of pool to whitelist*"
        }
      },
      "checkCapitalByMCR(address,uint256)": {
        "details": "return if pool can withdraw this amount, remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively",
        "params": {
          "_pool": "address of pool",
          "_withdrawAmount": "withdraw amount*"
        }
      },
      "checkCoverageByMLR(uint256)": {
        "details": "return if user can buy policy from this coverage amount,  total utlized amount plus coverage should be less than MLR of total capital staked",
        "params": {
          "_coverageAmount": "coverage amount*"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "markToClaimPolicy(uint256)": {
        "details": "update policy status to not exist, can only be called by admin role",
        "params": {
          "_policyId": "policy id to update status*"
        }
      },
      "policySale(uint256)": {
        "details": "update policy coverage if user buy policy from SalesPolicy, only sales policy can call this function",
        "params": {
          "_coverageAmount": "coverage amount*"
        }
      },
      "removePolicy()": {
        "details": "remove sales policy from capital agent, can only be call by admin role*"
      },
      "removePool(address)": {
        "details": "remove pool from capitalAgent, can only be call by admin role",
        "params": {
          "_ssip": "address of pool to remove*"
        }
      },
      "removePoolWhiteList(address)": {
        "details": "remove whitelisted pool, can only be call by admin role",
        "params": {
          "_pool": "address of pool to remove from whitelist*"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setExchangeAgent(address)": {
        "details": "set new exchange agent address, can only be called by admin role",
        "params": {
          "_exchangeAgent": "new exchange agent address*"
        }
      },
      "setMCR(uint256)": {
        "details": "set new MCR, can only be called by operator",
        "params": {
          "_MCR": "new value to update*"
        }
      },
      "setMLR(uint256)": {
        "details": "set new MLR, can only be called by operator",
        "params": {
          "_MLR": "new value to update*"
        }
      },
      "setOperator(address)": {
        "details": "set operator, can only be call by admin role",
        "params": {
          "_operator": "new operator address*"
        }
      },
      "setPolicy(address)": {
        "details": "set sales policy, can only be call by SalesPolicyFactory",
        "params": {
          "_policy": "address of new SalesPolicy*"
        }
      },
      "setPolicyByAdmin(address)": {
        "details": "set sales policy, can only be call by admin role",
        "params": {
          "_policy": "address of new SalesPolicy*"
        }
      },
      "setSCR(uint256,address)": {
        "details": "set new SCR of pool, can only be called by operator",
        "params": {
          "_SCR": "new value to update",
          "_pool": "address of pool*"
        }
      },
      "setSalesPolicyFactory(address)": {
        "details": "set sales policy factory, can only be call by admin role",
        "params": {
          "_factory": "new sales policy factory address*"
        }
      },
      "setUSDCToken(address)": {
        "details": "set usdc token, can only be call by admin role",
        "params": {
          "_usdcToken": "new usdc token address*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalCapitalStaked()": {
        "details": "return total capital in usdc staked in capital agent by pools *"
      },
      "updatePolicyStatus(uint256)": {
        "details": "update policy status, if expired update policy coverage and notify to sales policy",
        "params": {
          "_policyId": "policy id to update status*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5648,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5650,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "salesPolicyFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5652,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "usdcToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5654,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "operator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5675,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolInfo)5663_storage)"
      },
      {
        "astId": 5678,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "currencyList",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5682,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "existedCurrencies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5686,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalCapitalStakedByCurrency",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5689,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "policyInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(PolicyInfo)5670_storage"
      },
      {
        "astId": 5691,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalUtilizedAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5693,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MCR",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5695,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MLR",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5702,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolWhiteList",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5708,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "claimedAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(PoolInfo)5663_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CapitalAgent.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)5663_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PolicyInfo)5670_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PolicyInfo",
        "members": [
          {
            "astId": 5665,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "policy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5667,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "utilizedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5669,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolInfo)5663_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PoolInfo",
        "members": [
          {
            "astId": 5656,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "totalCapital",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5658,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "SCR",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5660,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "currency",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5662,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}