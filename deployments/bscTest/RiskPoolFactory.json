{
  "address": "0xB1B196f42af54538b4161ada303B36F38a2807c0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_cohort",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "newRiskPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf76c957158e7180cbb19140f38bc7842ef307f2317bc515925f0cc6b01b69c14",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0xB1B196f42af54538b4161ada303B36F38a2807c0",
    "transactionIndex": 11,
    "gasUsed": "2709558",
    "logsBloom": "0x
    "blockHash": "0xfb4255dacfc48252c585cbaaef33ac4550e9d3f692fa0563dea01b38b1d63440",
    "transactionHash": "0xf76c957158e7180cbb19140f38bc7842ef307f2317bc515925f0cc6b01b69c14",
    "logs": [],
    "blockNumber": 38142955,
    "cumulativeGasUsed": "3406310",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "11bd76602d7ff2baa745ce016438c15c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cohort\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"newRiskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"newRiskPool(string,string,address,address)\":{\"details\":\"create new RiskPool Contract\",\"params\":{\"_cohort\":\"address of the ssip-ssrp pool\",\"_currency\":\"address of the currency to distribute as a reward to user\",\"_name\":\"name of the risk pool\",\"_symbol\":\"symbol of the risk pool\"},\"returns\":{\"_0\":\"new RiskPool address*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/RiskPoolFactory.sol\":\"RiskPoolFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/RiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./RiskPoolERC20.sol\\\";\\nimport \\\"./interfaces/ISingleSidedReinsurancePool.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract RiskPool is IRiskPool, RiskPoolERC20 {\\n    // ERC20 attributes\\n    string public name;\\n    string public symbol;\\n\\n    address public SSRP;\\n    address public override currency; // for now we should accept only UNO\\n    uint256 public override lpPriceUno;\\n    uint256 public MIN_LP_CAPITAL = 1e7;\\n\\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _amount, uint256 _amountInUno);\\n    event LogPolicyClaim(address indexed _user, uint256 _amount);\\n    event LogMigrateLP(address indexed _user, address indexed _migrateTo, uint256 _unoAmount);\\n    event LogLeaveFromPending(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\\n\\n    constructor(string memory _name, string memory _symbol, address _SSRP, address _currency) {\\n        require(_SSRP != address(0), \\\"UnoRe: zero pool address\\\");\\n        name = _name;\\n        symbol = _symbol;\\n        SSRP = _SSRP;\\n        currency = _currency;\\n        lpPriceUno = 1e18;\\n        if (_currency == address(0)) {\\n            MIN_LP_CAPITAL = 7 * 1e15;\\n        }\\n    }\\n\\n    modifier onlySSRP() {\\n        require(msg.sender == SSRP, \\\"UnoRe: RiskPool Forbidden\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function decimals() external view virtual override returns (uint8) {\\n        return IERC20Metadata(currency).decimals();\\n    }\\n\\n    /**\\n     * @dev Users can stake only through Cohort\\n     */\\n    function enter(address _from, uint256 _amount) external override onlySSRP {\\n        _mint(_from, (_amount * 1e18) / lpPriceUno);\\n    }\\n\\n    /**\\n     * @param _amount UNO amount to withdraw\\n     */\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external override onlySSRP {\\n        require(totalSupply() > 0, \\\"UnoRe: There's no remaining in the pool\\\");\\n        uint256 requestAmountInLP = (_amount * 1e18) / lpPriceUno;\\n        require(\\n            (requestAmountInLP + uint256(withdrawRequestPerUser[_to].pendingAmount)) <= balanceOf(_to),\\n            \\\"UnoRe: lp balance overflow\\\"\\n        );\\n        _withdrawRequest(_to, requestAmountInLP, _amount);\\n    }\\n\\n    /**\\n     * @dev withdraw from pending, only pool contract can call this function\\n     */\\n    function leaveFromPending(address _to, uint256 _amount) external override onlySSRP returns (uint256, uint256) {\\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        uint256 pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\\n        require(_amount <= pendingAmount, \\\"Amount should less than pending amount\\\");\\n        require(cryptoBalance > 0, \\\"UnoRe: zero uno balance\\\");\\n        require(balanceOf(_to) >= _amount, \\\"UnoRe: lp balance overflow\\\");\\n        uint256 amountInUno = (_amount * lpPriceUno) / 1e18;\\n        if (cryptoBalance - MIN_LP_CAPITAL > amountInUno) {\\n            _withdrawImplement(_to);\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, amountInUno);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, amountInUno);\\n            }\\n            emit LogLeaveFromPending(_to, pendingAmount, amountInUno);\\n            return (pendingAmount, amountInUno);\\n        } else {\\n            _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            emit LogLeaveFromPending(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\\n            return (((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n    }\\n\\n    /**\\n     * @dev cancel pending request, only pool contract can call this function\\n     */\\n    function cancelWithdrawRequest(address _to) external override onlySSRP returns (uint256, uint256) {\\n        uint256 _pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\\n        require(_pendingAmount > 0, \\\"UnoRe: zero amount\\\");\\n        _cancelWithdrawRequest(_to);\\n        emit LogCancelWithdrawRequest(_to, _pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\\n        return (_pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\\n    }\\n\\n    /**\\n     * @dev claim policy to `_to` by `_amount`, only pool contract can call this function\\n     */\\n    function policyClaim(address _to, uint256 _amount) external override onlySSRP returns (uint256 realClaimAmount) {\\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        require(totalSupply() > 0, \\\"UnoRe: zero lp balance\\\");\\n        require(cryptoBalance > MIN_LP_CAPITAL, \\\"UnoRe: minimum UNO capital underflow\\\");\\n        if (cryptoBalance - MIN_LP_CAPITAL > _amount) {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, _amount);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, _amount);\\n            }\\n            realClaimAmount = _amount;\\n            emit LogPolicyClaim(_to, _amount);\\n        } else {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            realClaimAmount = cryptoBalance - MIN_LP_CAPITAL;\\n            emit LogPolicyClaim(_to, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        lpPriceUno = (cryptoBalance * 1e18) / totalSupply(); // UNO value per lp\\n    }\\n\\n    /**\\n     * @dev emergency withdraw from pool, this will not harvest rewards, only pool contract can call this function\\n     */\\n    function emergencyWithdraw(address _to, uint256 _amount) external override onlySSRP returns (bool) {\\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        require(cryptoBalance > 0, \\\"UnoRe: zero uno balance\\\");\\n        _emergencyWithdraw(_to);\\n        uint256 amount = (_amount * lpPriceUno) / 1e18;\\n        if (currency != address(0)) {\\n            TransferHelper.safeTransfer(currency, _to, amount);\\n        } else {\\n            TransferHelper.safeTransferETH(_to, amount);\\n        }\\n        return true;\\n    }\\n\\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external override onlySSRP returns (uint256) {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        uint256 migratedAmount;\\n        uint256 cryptoBalance;\\n        if (_isUnLocked && withdrawRequestPerUser[_to].pendingAmount > 0) {\\n            uint256 pendingAmountInUno = (uint256(withdrawRequestPerUser[_to].pendingAmount) * lpPriceUno) / 1e18;\\n            cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n            if (pendingAmountInUno < cryptoBalance - MIN_LP_CAPITAL) {\\n                if (currency != address(0)) {\\n                    TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\\n                } else {\\n                    TransferHelper.safeTransferETH(_to, pendingAmountInUno);\\n                }\\n                _withdrawImplement(_to);\\n            } else {\\n                if (currency != address(0)) {\\n                    TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n                } else {\\n                    TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\\n                }\\n                _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\\n            }\\n        } else {\\n            if (withdrawRequestPerUser[_to].pendingAmount > 0) {\\n                _cancelWithdrawRequest(_to);\\n            }\\n        }\\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        uint256 unoBalance = (balanceOf(_to) * lpPriceUno) / 1e18;\\n        if (unoBalance < cryptoBalance - MIN_LP_CAPITAL) {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _migrateTo, unoBalance);\\n            } else {\\n                TransferHelper.safeTransferETH(_migrateTo, unoBalance);\\n            }\\n            migratedAmount += unoBalance;\\n            emit LogMigrateLP(_to, _migrateTo, unoBalance);\\n        } else {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\\n            } else {\\n                TransferHelper.safeTransferETH(_migrateTo, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            migratedAmount += cryptoBalance - MIN_LP_CAPITAL;\\n            emit LogMigrateLP(_to, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n        _burn(_to, balanceOf(_to));\\n        return migratedAmount;\\n    }\\n\\n    /**\\n     * @dev update min lp capital, only pool call this function\\n     */\\n    function setMinLPCapital(uint256 _minLPCapital) external override onlySSRP {\\n        require(_minLPCapital > 0, \\\"UnoRe: not allow zero value\\\");\\n        MIN_LP_CAPITAL = _minLPCapital;\\n    }\\n\\n    /**\\n     * @dev return user withdraw request amount, amount in uno and time\\n     */\\n    function getWithdrawRequest(address _to) external view override onlySSRP returns (uint256, uint256, uint256) {\\n        return (\\n            uint256(withdrawRequestPerUser[_to].pendingAmount),\\n            uint256(withdrawRequestPerUser[_to].requestTime),\\n            withdrawRequestPerUser[_to].pendingUno\\n        );\\n    }\\n\\n    function getTotalWithdrawRequestAmount() external view override onlySSRP returns (uint256) {\\n        return totalWithdrawPending;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        require(\\n            balanceOf(msg.sender) - uint256(withdrawRequestPerUser[msg.sender].pendingAmount) >= amount,\\n            \\\"ERC20: transfer amount exceeds balance or pending WR\\\"\\n        );\\n        _transfer(msg.sender, recipient, amount);\\n\\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        require(\\n            balanceOf(sender) - uint256(withdrawRequestPerUser[sender].pendingAmount) >= amount,\\n            \\\"ERC20: transfer amount exceeds balance or pending WR\\\"\\n        );\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function setLpPriceUno(uint256 _lpPriceUno) external onlySSRP {\\n        lpPriceUno = _lpPriceUno;\\n    }\\n}\\n\",\"keccak256\":\"0x98fc2b984851b7c40bec354908a6a759163d0bb7dad18a843d46c261e1b8608c\",\"license\":\"GPL-3.0\"},\"contracts/RiskPoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/IRiskPoolERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract RiskPoolERC20 is Context, IRiskPoolERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    struct UserWithdrawRequestInfo {\\n        uint256 pendingAmount;\\n        uint256 requestTime;\\n        uint256 pendingUno;\\n    }\\n    mapping(address => UserWithdrawRequestInfo) internal withdrawRequestPerUser;\\n    uint256 internal totalWithdrawPending;\\n\\n    uint256 private _totalSupply;\\n\\n    uint256[30] __gap;\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    function _withdrawRequest(address _user, uint256 _amount, uint256 _amountInUno) internal {\\n        require(balanceOf(_user) >= _amount, \\\"UnoRe: balance overflow\\\");\\n        require(_amount <= type(uint128).max, \\\"Amount exceeds max uint128\\\");\\n        if (withdrawRequestPerUser[_user].pendingAmount == 0 && withdrawRequestPerUser[_user].requestTime == 0) {\\n            withdrawRequestPerUser[_user] = UserWithdrawRequestInfo({\\n                pendingAmount: _amount,\\n                requestTime: block.timestamp,\\n                pendingUno: _amountInUno\\n            });\\n        } else {\\n            withdrawRequestPerUser[_user].pendingAmount += _amount;\\n            withdrawRequestPerUser[_user].pendingUno += _amountInUno;\\n            withdrawRequestPerUser[_user].requestTime = block.timestamp;\\n        }\\n        totalWithdrawPending += _amount;\\n    }\\n\\n    function _withdrawImplement(address _user) internal {\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \\\"UnoRe: zero claim amount\\\");\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        _burn(_user, _pendingAmount);\\n        delete withdrawRequestPerUser[_user];\\n    }\\n\\n    function _withdrawImplementIrregular(address _user, uint256 _amount) internal {\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \\\"UnoRe: zero claim amount\\\");\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) >= _amount, \\\"UnoRe: pending amount overflow\\\");\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        _burn(_user, _amount);\\n        delete withdrawRequestPerUser[_user];\\n    }\\n\\n    function _emergencyWithdraw(address _user) internal {\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        if (_pendingAmount > 0) {\\n            _burn(_user, _pendingAmount);\\n        }\\n        delete withdrawRequestPerUser[_user];\\n    }\\n\\n    function _cancelWithdrawRequest(address _user) internal {\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        delete withdrawRequestPerUser[_user];\\n    }\\n}\\n\",\"keccak256\":\"0xd6638860947ac3aa5001552db92408dd828133398e83b124c60a562ca69e96f6\",\"license\":\"MIT\"},\"contracts/factories/RiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\nimport \\\"../RiskPool.sol\\\";\\nimport \\\"../interfaces/IRiskPoolFactory.sol\\\";\\n\\ncontract RiskPoolFactory is IRiskPoolFactory {\\n    constructor() {}\\n\\n    /**\\n     * @dev create new RiskPool Contract\\n     * @param _name name of the risk pool\\n     * @param _symbol symbol of the risk pool\\n     * @param _cohort address of the ssip-ssrp pool\\n     * @param _currency address of the currency to distribute as a reward to user\\n     * @return new RiskPool address\\n     **/\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _cohort,\\n        address _currency\\n    ) external override returns (address) {\\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency);\\n        address _riskPoolAddr = address(_riskPool);\\n\\n        return _riskPoolAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x42d70baf81b9e21ae31cc334889fa76db67136fab99d8c024c2d33f23bedbf10\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to, uint256 _amount) external returns (uint256, uint256);\\n\\n    function cancelWithdrawRequest(address _to) external returns (uint256, uint256);\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external returns (uint256);\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to) external view returns (uint256, uint256, uint256);\\n\\n    function lpPriceUno() external view returns (uint256);\\n\\n    function emergencyWithdraw(address _to, uint256 _amount) external returns (bool);\\n\\n    function setLpPriceUno(uint256 _lpPriceUno) external;\\n}\\n\",\"keccak256\":\"0x5d69f0a17e09f42d8ec620ea423f2cf640a5a291c8a3ea655d22baef11f25231\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IRiskPoolERC20 {\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x082a3e0f294ba2355c287f78f879cd77d1c0a1ffe74429df39dcb29ee0b2eaf9\",\"license\":\"MIT\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _pool,\\n        address _currency\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x1822ada2ed41c99cb910cbfa6ff170a7723016983a873f2f31585ccdd04f6e5a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISingleSidedReinsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending(uint256 _amount) external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd79aef6bfa043e9ab1010f8e4acd758e8d9041a5592d6b2999a8482ed99ea1ca\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061300e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630d98e31f14610030575b600080fd5b61004361003e36600461011e565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b600080878787878787604051610074906100ac565b610083969594939291906101d7565b604051809103906000f08015801561009f573d6000803e3d6000fd5b5098975050505050505050565b612db38061022683390190565b60008083601f8401126100cb57600080fd5b50813567ffffffffffffffff8111156100e357600080fd5b6020830191508360208285010111156100fb57600080fd5b9250929050565b80356001600160a01b038116811461011957600080fd5b919050565b6000806000806000806080878903121561013757600080fd5b863567ffffffffffffffff8082111561014f57600080fd5b61015b8a838b016100b9565b9098509650602089013591508082111561017457600080fd5b5061018189828a016100b9565b9095509350610194905060408801610102565b91506101a260608801610102565b90509295509295509295565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6080815260006101eb60808301888a6101ae565b82810360208401526101fe8187896101ae565b6001600160a01b03958616604085015293909416606090920191909152509594505050505056fe6080604052629896806028553480156200001857600080fd5b5060405162002db338038062002db38339810160408190526200003b91620001ee565b6001600160a01b038216620000965760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604482015260640160405180910390fd5b6023620000a485826200030e565b506024620000b384826200030e565b50602580546001600160a01b038085166001600160a01b031992831617909255602680549284169290911682179055670de0b6b3a7640000602755620000ff576618de76816d80006028555b50505050620003da565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013157600080fd5b81516001600160401b03808211156200014e576200014e62000109565b604051601f8301601f19908116603f0116810190828211818310171562000179576200017962000109565b81604052838152602092508660208588010111156200019757600080fd5b600091505b83821015620001bb57858201830151818301840152908201906200019c565b6000602085830101528094505050505092915050565b80516001600160a01b0381168114620001e957600080fd5b919050565b600080600080608085870312156200020557600080fd5b84516001600160401b03808211156200021d57600080fd5b6200022b888389016200011f565b955060208701519150808211156200024257600080fd5b5062000251878288016200011f565b9350506200026260408601620001d1565b91506200027260608601620001d1565b905092959194509250565b600181811c908216806200029257607f821691505b602082108103620002b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000309576000816000526020600020601f850160051c81016020861015620002e45750805b601f850160051c820191505b818110156200030557828155600101620002f0565b5050505b505050565b81516001600160401b038111156200032a576200032a62000109565b62000342816200033b84546200027d565b84620002b9565b602080601f8311600181146200037a5760008415620003615750858301515b600019600386901b1c1916600185901b17855562000305565b600085815260208120601f198616915b82811015620003ab578886015182559484019460019091019084016200038a565b5085821015620003ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6129c980620003ea6000396000f3fe6080604052600436106101855760003560e01c806370a08231116100d1578063a9059cbb1161008a578063e5a6b10f11610064578063e5a6b10f146104cd578063e95aa8d3146104ed578063f3212d2914610502578063f53fb2001461052257600080fd5b8063a9059cbb14610451578063d7e3655a14610471578063dd62ed3e1461048757600080fd5b806370a082311461039c5780637e348b7d146103bc57806393b6b86c146103dc57806395ccea67146103fc57806395d89b411461041c578063a457c2d71461043157600080fd5b80632e4a01421161013e5780633950935111610118578063395093511461030557806347bcdb2a146103255780635d2cd2a7146103475780636ce40c791461037c57600080fd5b80632e4a01421461029e578063313ce567146102be5780633613302f146102e557600080fd5b806306fdde0314610191578063095ea7b3146101bc57806311ca7399146101ec57806318160ddd1461022457806323b872dd146102435780632ccae8961461026357600080fd5b3661018c57005b600080fd5b34801561019d57600080fd5b506101a6610538565b6040516101b39190612669565b60405180910390f35b3480156101c857600080fd5b506101dc6101d73660046126b8565b6105c6565b60405190151581526020016101b3565b3480156101f857600080fd5b5060255461020c906001600160a01b031681565b6040516001600160a01b0390911681526020016101b3565b34801561023057600080fd5b506004545b6040519081526020016101b3565b34801561024f57600080fd5b506101dc61025e3660046126e2565b6105dd565b34801561026f57600080fd5b5061028361027e36600461271e565b61074e565b604080519384526020840192909252908201526060016101b3565b3480156102aa57600080fd5b506102356102b93660046126b8565b6107af565b3480156102ca57600080fd5b506102d3610b07565b60405160ff90911681526020016101b3565b3480156102f157600080fd5b50610235610300366004612751565b610b7a565b34801561031157600080fd5b506101dc6103203660046126b8565b611015565b34801561033157600080fd5b506103456103403660046126b8565b61104c565b005b34801561035357600080fd5b5061036761036236600461271e565b61118c565b604080519283526020830191909152016101b3565b34801561038857600080fd5b506103676103973660046126b8565b6112b0565b3480156103a857600080fd5b506102356103b736600461271e565b61166d565b3480156103c857600080fd5b506103456103d73660046126b8565b611688565b3480156103e857600080fd5b506103456103f7366004612798565b6116e0565b34801561040857600080fd5b506101dc6104173660046126b8565b61175f565b34801561042857600080fd5b506101a66118ce565b34801561043d57600080fd5b506101dc61044c3660046126b8565b6118db565b34801561045d57600080fd5b506101dc61046c3660046126b8565b611976565b34801561047d57600080fd5b5061023560285481565b34801561049357600080fd5b506102356104a23660046127b1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156104d957600080fd5b5060265461020c906001600160a01b031681565b3480156104f957600080fd5b50610235611a3b565b34801561050e57600080fd5b5061034561051d366004612798565b611a6f565b34801561052e57600080fd5b5061023560275481565b60238054610545906127e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610571906127e4565b80156105be5780601f10610593576101008083540402835291602001916105be565b820191906000526020600020905b8154815290600101906020018083116105a157829003601f168201915b505050505081565b60006105d3338484611a9e565b5060015b92915050565b6001600160a01b03831660009081526002602052604081205482906106018661166d565b61060b9190612834565b10156106325760405162461bcd60e51b815260040161062990612847565b60405180910390fd5b61063d848484611bc2565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106c25760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610629565b6106d685336106d18685612834565b611a9e565b6025546040516274d72160e51b81526001600160a01b03878116600483015286811660248301526044820186905290911690630e9ae42090606401600060405180830381600087803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b50600198975050505050505050565b602554600090819081906001600160a01b0316331461077f5760405162461bcd60e51b81526004016106299061289b565b5050506001600160a01b031660009081526002602081905260409091208054600182015491909201549192909190565b6025546000906001600160a01b031633146107dc5760405162461bcd60e51b81526004016106299061289b565b6026546000906001600160a01b03166107f55747610861565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086191906128d2565b9050600061086e60045490565b116108b45760405162461bcd60e51b8152602060048201526016602482015275556e6f52653a207a65726f206c702062616c616e636560501b6044820152606401610629565b60285481116109115760405162461bcd60e51b8152602060048201526024808201527f556e6f52653a206d696e696d756d20554e4f206361706974616c20756e646572604482015263666c6f7760e01b6064820152608401610629565b82602854826109209190612834565b11156109a8576026546001600160a01b0316156109535760265461094e906001600160a01b03168585611d9a565b61095d565b61095d8484611ecb565b829150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def3628460405161099b91815260200190565b60405180910390a2610a54565b6026546001600160a01b0316156109e3576026546028546109de916001600160a01b03169086906109d99085612834565b611d9a565b6109fa565b6109fa84602854836109f59190612834565b611ecb565b602854610a079082612834565b9150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def36260285483610a429190612834565b60405190815260200160405180910390a25b6026546001600160a01b0316610a6a5747610ad6565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad691906128d2565b9050610ae160045490565b610af382670de0b6b3a76400006128eb565b610afd9190612902565b6027555092915050565b6026546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b759190612924565b905090565b6025546000906001600160a01b03163314610ba75760405162461bcd60e51b81526004016106299061289b565b6001600160a01b038316610bf35760405162461bcd60e51b8152602060048201526013602482015272556e6f52653a207a65726f206164647265737360681b6044820152606401610629565b600080838015610c1a57506001600160a01b03861660009081526002602052604090205415155b15610dc0576027546001600160a01b0387166000908152600260205260408120549091670de0b6b3a764000091610c5191906128eb565b610c5b9190612902565b6026549091506001600160a01b0316610c745747610ce0565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce091906128d2565b915060285482610cf09190612834565b811015610d3c576026546001600160a01b031615610d2457602654610d1f906001600160a01b03168883611d9a565b610d2e565b610d2e8782611ecb565b610d3787611fa5565b610dba565b6026546001600160a01b031615610d7257602654602854610d6d916001600160a01b03169089906109d99086612834565b610d84565b610d8487602854846109f59190612834565b610dba8760275460285485610d999190612834565b610dab90670de0b6b3a76400006128eb565b610db59190612902565b612069565b50610de7565b6001600160a01b03861660009081526002602052604090205415610de757610de786612196565b6026546001600160a01b0316610dfd5747610e69565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6991906128d2565b90506000670de0b6b3a7640000602754610e828961166d565b610e8c91906128eb565b610e969190612902565b905060285482610ea69190612834565b811015610f42576026546001600160a01b031615610eda57602654610ed5906001600160a01b03168783611d9a565b610ee4565b610ee48682611ecb565b610eee8184612947565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d541981983604051610f3591815260200190565b60405180910390a3610ff8565b6026546001600160a01b031615610f7857602654602854610f73916001600160a01b03169088906109d99086612834565b610f8a565b610f8a86602854846109f59190612834565b602854610f979083612834565b610fa19084612947565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d541981960285485610fe69190612834565b60405190815260200160405180910390a35b61100a876110058961166d565b6121ef565b509095945050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105d39185906106d1908690612947565b6025546001600160a01b031633146110765760405162461bcd60e51b81526004016106299061289b565b600061108160045490565b116110de5760405162461bcd60e51b815260206004820152602760248201527f556e6f52653a2054686572652773206e6f2072656d61696e696e6720696e20746044820152661a19481c1bdbdb60ca1b6064820152608401610629565b6027546000906110f683670de0b6b3a76400006128eb565b6111009190612902565b905061110b8361166d565b6001600160a01b03841660009081526002602052604090205461112e9083612947565b111561117c5760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a206c702062616c616e6365206f766572666c6f770000000000006044820152606401610629565b611187838284612346565b505050565b60255460009081906001600160a01b031633146111bb5760405162461bcd60e51b81526004016106299061289b565b6001600160a01b038316600090815260026020526040902054806112165760405162461bcd60e51b8152602060048201526012602482015271155b9bd4994e881e995c9bc8185b5bdd5b9d60721b6044820152606401610629565b61121f84612196565b836001600160a01b03167f09c6481cb228ea7f61ceb67c8e708038eb74bbb68cfcc54a9cfca199087ecfb782670de0b6b3a76400006027548561126291906128eb565b61126c9190612902565b6040805192835260208301919091520160405180910390a280670de0b6b3a76400006027548361129c91906128eb565b6112a69190612902565b9250925050915091565b60255460009081906001600160a01b031633146112df5760405162461bcd60e51b81526004016106299061289b565b6026546000906001600160a01b03166112f85747611364565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136491906128d2565b6001600160a01b038616600090815260026020526040902054909150808511156113df5760405162461bcd60e51b815260206004820152602660248201527f416d6f756e742073686f756c64206c657373207468616e2070656e64696e6720604482015265185b5bdd5b9d60d21b6064820152608401610629565b600082116114295760405162461bcd60e51b8152602060048201526017602482015276556e6f52653a207a65726f20756e6f2062616c616e636560481b6044820152606401610629565b846114338761166d565b10156114815760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a206c702062616c616e6365206f766572666c6f770000000000006044820152606401610629565b6000670de0b6b3a76400006027548761149a91906128eb565b6114a49190612902565b905080602854846114b59190612834565b111561154b576114c487611fa5565b6026546001600160a01b0316156114f1576026546114ec906001600160a01b03168883611d9a565b6114fb565b6114fb8782611ecb565b60408051838152602081018390526001600160a01b038916917f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0910160405180910390a290935091506116669050565b6115608760275460285486610d999190612834565b6026546001600160a01b03161561159657602654602854611591916001600160a01b03169089906109d99087612834565b6115a8565b6115a887602854856109f59190612834565b866001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0602754602854866115e49190612834565b6115f690670de0b6b3a76400006128eb565b6116009190612902565b60285461160d9087612834565b6040805192835260208301919091520160405180910390a26027546028546116359085612834565b61164790670de0b6b3a76400006128eb565b6116519190612902565b60285461165e9085612834565b945094505050505b9250929050565b6001600160a01b031660009081526020819052604090205490565b6025546001600160a01b031633146116b25760405162461bcd60e51b81526004016106299061289b565b6116dc8260275483670de0b6b3a76400006116cd91906128eb565b6116d79190612902565b612525565b5050565b6025546001600160a01b0316331461170a5760405162461bcd60e51b81526004016106299061289b565b6000811161175a5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c756500000000006044820152606401610629565b602855565b6025546000906001600160a01b0316331461178c5760405162461bcd60e51b81526004016106299061289b565b6026546000906001600160a01b03166117a55747611811565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181191906128d2565b90506000811161185d5760405162461bcd60e51b8152602060048201526017602482015276556e6f52653a207a65726f20756e6f2062616c616e636560481b6044820152606401610629565b61186684612604565b6000670de0b6b3a76400006027548561187f91906128eb565b6118899190612902565b6026549091506001600160a01b0316156118b9576026546118b4906001600160a01b03168683611d9a565b6118c3565b6118c38582611ecb565b506001949350505050565b60248054610545906127e4565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561195d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610629565b61196c33856106d18685612834565b5060019392505050565b3360008181526002602052604081205490918391906119949061166d565b61199e9190612834565b10156119bc5760405162461bcd60e51b815260040161062990612847565b6119c7338484611bc2565b6025546040516274d72160e51b81523360048201526001600160a01b0385811660248301526044820185905290911690630e9ae42090606401600060405180830381600087803b158015611a1a57600080fd5b505af1158015611a2e573d6000803e3d6000fd5b5060019695505050505050565b6025546000906001600160a01b03163314611a685760405162461bcd60e51b81526004016106299061289b565b5060035490565b6025546001600160a01b03163314611a995760405162461bcd60e51b81526004016106299061289b565b602755565b6001600160a01b038316611b005760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610629565b6001600160a01b038216611b615760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610629565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611c265760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610629565b6001600160a01b038216611c885760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610629565b6001600160a01b03831660009081526020819052604090205481811015611d005760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610629565b611d0a8282612834565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290611d40908490612947565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d8c91815260200190565b60405180910390a350505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611df6919061295a565b6000604051808303816000865af19150503d8060008114611e33576040519150601f19603f3d011682016040523d82523d6000602084013e611e38565b606091505b5091509150818015611e62575080511580611e62575080806020019051810190611e629190612976565b611ec45760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610629565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051611ef5919061295a565b60006040518083038185875af1925050503d8060008114611f32576040519150601f19603f3d011682016040523d82523d6000602084013e611f37565b606091505b50509050806111875760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610629565b6001600160a01b0381166000908152600260205260409020546120055760405162461bcd60e51b8152602060048201526018602482015277155b9bd4994e881e995c9bc818db185a5b48185b5bdd5b9d60421b6044820152606401610629565b6001600160a01b0381166000908152600260205260408120546003805491928392612031908490612834565b90915550612041905082826121ef565b506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b0382166000908152600260205260409020546120c95760405162461bcd60e51b8152602060048201526018602482015277155b9bd4994e881e995c9bc818db185a5b48185b5bdd5b9d60421b6044820152606401610629565b6001600160a01b0382166000908152600260205260409020548111156121315760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a2070656e64696e6720616d6f756e74206f766572666c6f7700006044820152606401610629565b6001600160a01b038216600090815260026020526040812054600380549192839261215d908490612834565b9091555061216d905083836121ef565b50506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b03811660009081526002602052604081205460038054919283926121c2908490612834565b9091555050506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b03821661224f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610629565b6001600160a01b038216600090815260208190526040902054818110156122c35760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610629565b6122cd8282612834565b6001600160a01b038416600090815260208190526040812091909155600480548492906122fb908490612834565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b816123508461166d565b101561239e5760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a2062616c616e6365206f766572666c6f770000000000000000006044820152606401610629565b6fffffffffffffffffffffffffffffffff8211156123fe5760405162461bcd60e51b815260206004820152601a60248201527f416d6f756e742065786365656473206d61782075696e743132380000000000006044820152606401610629565b6001600160a01b03831660009081526002602052604090205415801561243d57506001600160a01b038316600090815260026020526040902060010154155b1561248c57604080516060810182528381524260208083019182528284018581526001600160a01b03881660009081526002928390529490942092518355905160018301559151910155612509565b6001600160a01b038316600090815260026020526040812080548492906124b4908490612947565b90915550506001600160a01b038316600090815260026020819052604082200180548392906124e4908490612947565b90915550506001600160a01b0383166000908152600260205260409020426001909101555b816003600082825461251b9190612947565b9091555050505050565b6001600160a01b03821661257b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610629565b806004600082825461258d9190612947565b90915550506001600160a01b038216600090815260208190526040812080548392906125ba908490612947565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0381166000908152600260205260408120546003805491928392612630908490612834565b909155505080156120415761204182826121ef565b60005b83811015612660578181015183820152602001612648565b50506000910152565b6020815260008251806020840152612688816040850160208701612645565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146126b357600080fd5b919050565b600080604083850312156126cb57600080fd5b6126d48361269c565b946020939093013593505050565b6000806000606084860312156126f757600080fd5b6127008461269c565b925061270e6020850161269c565b9150604084013590509250925092565b60006020828403121561273057600080fd5b6127398261269c565b9392505050565b801515811461274e57600080fd5b50565b60008060006060848603121561276657600080fd5b61276f8461269c565b925061277d6020850161269c565b9150604084013561278d81612740565b809150509250925092565b6000602082840312156127aa57600080fd5b5035919050565b600080604083850312156127c457600080fd5b6127cd8361269c565b91506127db6020840161269c565b90509250929050565b600181811c908216806127f857607f821691505b60208210810361281857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105d7576105d761281e565b60208082526034908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527330b630b731b29037b9103832b73234b733902ba960611b606082015260800190565b60208082526019908201527f556e6f52653a205269736b506f6f6c20466f7262696464656e00000000000000604082015260600190565b6000602082840312156128e457600080fd5b5051919050565b80820281158282048414176105d7576105d761281e565b60008261291f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561293657600080fd5b815160ff8116811461273957600080fd5b808201808211156105d7576105d761281e565b6000825161296c818460208701612645565b9190910192915050565b60006020828403121561298857600080fd5b81516127398161274056fea2646970667358221220dc8c67b9a67173d0f33b9a79fd7706dcc21efd4e5b806ecaa801190bbbd68d3464736f6c63430008170033a2646970667358221220c752bc5d461a65b66902b8e3963e0bdb162df7219c4bdf88e3827dd44d30790d64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630d98e31f14610030575b600080fd5b61004361003e36600461011e565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b600080878787878787604051610074906100ac565b610083969594939291906101d7565b604051809103906000f08015801561009f573d6000803e3d6000fd5b5098975050505050505050565b612db38061022683390190565b60008083601f8401126100cb57600080fd5b50813567ffffffffffffffff8111156100e357600080fd5b6020830191508360208285010111156100fb57600080fd5b9250929050565b80356001600160a01b038116811461011957600080fd5b919050565b6000806000806000806080878903121561013757600080fd5b863567ffffffffffffffff8082111561014f57600080fd5b61015b8a838b016100b9565b9098509650602089013591508082111561017457600080fd5b5061018189828a016100b9565b9095509350610194905060408801610102565b91506101a260608801610102565b90509295509295509295565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6080815260006101eb60808301888a6101ae565b82810360208401526101fe8187896101ae565b6001600160a01b03958616604085015293909416606090920191909152509594505050505056fe6080604052629896806028553480156200001857600080fd5b5060405162002db338038062002db38339810160408190526200003b91620001ee565b6001600160a01b038216620000965760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604482015260640160405180910390fd5b6023620000a485826200030e565b506024620000b384826200030e565b50602580546001600160a01b038085166001600160a01b031992831617909255602680549284169290911682179055670de0b6b3a7640000602755620000ff576618de76816d80006028555b50505050620003da565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013157600080fd5b81516001600160401b03808211156200014e576200014e62000109565b604051601f8301601f19908116603f0116810190828211818310171562000179576200017962000109565b81604052838152602092508660208588010111156200019757600080fd5b600091505b83821015620001bb57858201830151818301840152908201906200019c565b6000602085830101528094505050505092915050565b80516001600160a01b0381168114620001e957600080fd5b919050565b600080600080608085870312156200020557600080fd5b84516001600160401b03808211156200021d57600080fd5b6200022b888389016200011f565b955060208701519150808211156200024257600080fd5b5062000251878288016200011f565b9350506200026260408601620001d1565b91506200027260608601620001d1565b905092959194509250565b600181811c908216806200029257607f821691505b602082108103620002b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000309576000816000526020600020601f850160051c81016020861015620002e45750805b601f850160051c820191505b818110156200030557828155600101620002f0565b5050505b505050565b81516001600160401b038111156200032a576200032a62000109565b62000342816200033b84546200027d565b84620002b9565b602080601f8311600181146200037a5760008415620003615750858301515b600019600386901b1c1916600185901b17855562000305565b600085815260208120601f198616915b82811015620003ab578886015182559484019460019091019084016200038a565b5085821015620003ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6129c980620003ea6000396000f3fe6080604052600436106101855760003560e01c806370a08231116100d1578063a9059cbb1161008a578063e5a6b10f11610064578063e5a6b10f146104cd578063e95aa8d3146104ed578063f3212d2914610502578063f53fb2001461052257600080fd5b8063a9059cbb14610451578063d7e3655a14610471578063dd62ed3e1461048757600080fd5b806370a082311461039c5780637e348b7d146103bc57806393b6b86c146103dc57806395ccea67146103fc57806395d89b411461041c578063a457c2d71461043157600080fd5b80632e4a01421161013e5780633950935111610118578063395093511461030557806347bcdb2a146103255780635d2cd2a7146103475780636ce40c791461037c57600080fd5b80632e4a01421461029e578063313ce567146102be5780633613302f146102e557600080fd5b806306fdde0314610191578063095ea7b3146101bc57806311ca7399146101ec57806318160ddd1461022457806323b872dd146102435780632ccae8961461026357600080fd5b3661018c57005b600080fd5b34801561019d57600080fd5b506101a6610538565b6040516101b39190612669565b60405180910390f35b3480156101c857600080fd5b506101dc6101d73660046126b8565b6105c6565b60405190151581526020016101b3565b3480156101f857600080fd5b5060255461020c906001600160a01b031681565b6040516001600160a01b0390911681526020016101b3565b34801561023057600080fd5b506004545b6040519081526020016101b3565b34801561024f57600080fd5b506101dc61025e3660046126e2565b6105dd565b34801561026f57600080fd5b5061028361027e36600461271e565b61074e565b604080519384526020840192909252908201526060016101b3565b3480156102aa57600080fd5b506102356102b93660046126b8565b6107af565b3480156102ca57600080fd5b506102d3610b07565b60405160ff90911681526020016101b3565b3480156102f157600080fd5b50610235610300366004612751565b610b7a565b34801561031157600080fd5b506101dc6103203660046126b8565b611015565b34801561033157600080fd5b506103456103403660046126b8565b61104c565b005b34801561035357600080fd5b5061036761036236600461271e565b61118c565b604080519283526020830191909152016101b3565b34801561038857600080fd5b506103676103973660046126b8565b6112b0565b3480156103a857600080fd5b506102356103b736600461271e565b61166d565b3480156103c857600080fd5b506103456103d73660046126b8565b611688565b3480156103e857600080fd5b506103456103f7366004612798565b6116e0565b34801561040857600080fd5b506101dc6104173660046126b8565b61175f565b34801561042857600080fd5b506101a66118ce565b34801561043d57600080fd5b506101dc61044c3660046126b8565b6118db565b34801561045d57600080fd5b506101dc61046c3660046126b8565b611976565b34801561047d57600080fd5b5061023560285481565b34801561049357600080fd5b506102356104a23660046127b1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156104d957600080fd5b5060265461020c906001600160a01b031681565b3480156104f957600080fd5b50610235611a3b565b34801561050e57600080fd5b5061034561051d366004612798565b611a6f565b34801561052e57600080fd5b5061023560275481565b60238054610545906127e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610571906127e4565b80156105be5780601f10610593576101008083540402835291602001916105be565b820191906000526020600020905b8154815290600101906020018083116105a157829003601f168201915b505050505081565b60006105d3338484611a9e565b5060015b92915050565b6001600160a01b03831660009081526002602052604081205482906106018661166d565b61060b9190612834565b10156106325760405162461bcd60e51b815260040161062990612847565b60405180910390fd5b61063d848484611bc2565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106c25760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610629565b6106d685336106d18685612834565b611a9e565b6025546040516274d72160e51b81526001600160a01b03878116600483015286811660248301526044820186905290911690630e9ae42090606401600060405180830381600087803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b50600198975050505050505050565b602554600090819081906001600160a01b0316331461077f5760405162461bcd60e51b81526004016106299061289b565b5050506001600160a01b031660009081526002602081905260409091208054600182015491909201549192909190565b6025546000906001600160a01b031633146107dc5760405162461bcd60e51b81526004016106299061289b565b6026546000906001600160a01b03166107f55747610861565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086191906128d2565b9050600061086e60045490565b116108b45760405162461bcd60e51b8152602060048201526016602482015275556e6f52653a207a65726f206c702062616c616e636560501b6044820152606401610629565b60285481116109115760405162461bcd60e51b8152602060048201526024808201527f556e6f52653a206d696e696d756d20554e4f206361706974616c20756e646572604482015263666c6f7760e01b6064820152608401610629565b82602854826109209190612834565b11156109a8576026546001600160a01b0316156109535760265461094e906001600160a01b03168585611d9a565b61095d565b61095d8484611ecb565b829150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def3628460405161099b91815260200190565b60405180910390a2610a54565b6026546001600160a01b0316156109e3576026546028546109de916001600160a01b03169086906109d99085612834565b611d9a565b6109fa565b6109fa84602854836109f59190612834565b611ecb565b602854610a079082612834565b9150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def36260285483610a429190612834565b60405190815260200160405180910390a25b6026546001600160a01b0316610a6a5747610ad6565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad691906128d2565b9050610ae160045490565b610af382670de0b6b3a76400006128eb565b610afd9190612902565b6027555092915050565b6026546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b759190612924565b905090565b6025546000906001600160a01b03163314610ba75760405162461bcd60e51b81526004016106299061289b565b6001600160a01b038316610bf35760405162461bcd60e51b8152602060048201526013602482015272556e6f52653a207a65726f206164647265737360681b6044820152606401610629565b600080838015610c1a57506001600160a01b03861660009081526002602052604090205415155b15610dc0576027546001600160a01b0387166000908152600260205260408120549091670de0b6b3a764000091610c5191906128eb565b610c5b9190612902565b6026549091506001600160a01b0316610c745747610ce0565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce091906128d2565b915060285482610cf09190612834565b811015610d3c576026546001600160a01b031615610d2457602654610d1f906001600160a01b03168883611d9a565b610d2e565b610d2e8782611ecb565b610d3787611fa5565b610dba565b6026546001600160a01b031615610d7257602654602854610d6d916001600160a01b03169089906109d99086612834565b610d84565b610d8487602854846109f59190612834565b610dba8760275460285485610d999190612834565b610dab90670de0b6b3a76400006128eb565b610db59190612902565b612069565b50610de7565b6001600160a01b03861660009081526002602052604090205415610de757610de786612196565b6026546001600160a01b0316610dfd5747610e69565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6991906128d2565b90506000670de0b6b3a7640000602754610e828961166d565b610e8c91906128eb565b610e969190612902565b905060285482610ea69190612834565b811015610f42576026546001600160a01b031615610eda57602654610ed5906001600160a01b03168783611d9a565b610ee4565b610ee48682611ecb565b610eee8184612947565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d541981983604051610f3591815260200190565b60405180910390a3610ff8565b6026546001600160a01b031615610f7857602654602854610f73916001600160a01b03169088906109d99086612834565b610f8a565b610f8a86602854846109f59190612834565b602854610f979083612834565b610fa19084612947565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d541981960285485610fe69190612834565b60405190815260200160405180910390a35b61100a876110058961166d565b6121ef565b509095945050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105d39185906106d1908690612947565b6025546001600160a01b031633146110765760405162461bcd60e51b81526004016106299061289b565b600061108160045490565b116110de5760405162461bcd60e51b815260206004820152602760248201527f556e6f52653a2054686572652773206e6f2072656d61696e696e6720696e20746044820152661a19481c1bdbdb60ca1b6064820152608401610629565b6027546000906110f683670de0b6b3a76400006128eb565b6111009190612902565b905061110b8361166d565b6001600160a01b03841660009081526002602052604090205461112e9083612947565b111561117c5760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a206c702062616c616e6365206f766572666c6f770000000000006044820152606401610629565b611187838284612346565b505050565b60255460009081906001600160a01b031633146111bb5760405162461bcd60e51b81526004016106299061289b565b6001600160a01b038316600090815260026020526040902054806112165760405162461bcd60e51b8152602060048201526012602482015271155b9bd4994e881e995c9bc8185b5bdd5b9d60721b6044820152606401610629565b61121f84612196565b836001600160a01b03167f09c6481cb228ea7f61ceb67c8e708038eb74bbb68cfcc54a9cfca199087ecfb782670de0b6b3a76400006027548561126291906128eb565b61126c9190612902565b6040805192835260208301919091520160405180910390a280670de0b6b3a76400006027548361129c91906128eb565b6112a69190612902565b9250925050915091565b60255460009081906001600160a01b031633146112df5760405162461bcd60e51b81526004016106299061289b565b6026546000906001600160a01b03166112f85747611364565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136491906128d2565b6001600160a01b038616600090815260026020526040902054909150808511156113df5760405162461bcd60e51b815260206004820152602660248201527f416d6f756e742073686f756c64206c657373207468616e2070656e64696e6720604482015265185b5bdd5b9d60d21b6064820152608401610629565b600082116114295760405162461bcd60e51b8152602060048201526017602482015276556e6f52653a207a65726f20756e6f2062616c616e636560481b6044820152606401610629565b846114338761166d565b10156114815760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a206c702062616c616e6365206f766572666c6f770000000000006044820152606401610629565b6000670de0b6b3a76400006027548761149a91906128eb565b6114a49190612902565b905080602854846114b59190612834565b111561154b576114c487611fa5565b6026546001600160a01b0316156114f1576026546114ec906001600160a01b03168883611d9a565b6114fb565b6114fb8782611ecb565b60408051838152602081018390526001600160a01b038916917f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0910160405180910390a290935091506116669050565b6115608760275460285486610d999190612834565b6026546001600160a01b03161561159657602654602854611591916001600160a01b03169089906109d99087612834565b6115a8565b6115a887602854856109f59190612834565b866001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0602754602854866115e49190612834565b6115f690670de0b6b3a76400006128eb565b6116009190612902565b60285461160d9087612834565b6040805192835260208301919091520160405180910390a26027546028546116359085612834565b61164790670de0b6b3a76400006128eb565b6116519190612902565b60285461165e9085612834565b945094505050505b9250929050565b6001600160a01b031660009081526020819052604090205490565b6025546001600160a01b031633146116b25760405162461bcd60e51b81526004016106299061289b565b6116dc8260275483670de0b6b3a76400006116cd91906128eb565b6116d79190612902565b612525565b5050565b6025546001600160a01b0316331461170a5760405162461bcd60e51b81526004016106299061289b565b6000811161175a5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c756500000000006044820152606401610629565b602855565b6025546000906001600160a01b0316331461178c5760405162461bcd60e51b81526004016106299061289b565b6026546000906001600160a01b03166117a55747611811565b6026546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181191906128d2565b90506000811161185d5760405162461bcd60e51b8152602060048201526017602482015276556e6f52653a207a65726f20756e6f2062616c616e636560481b6044820152606401610629565b61186684612604565b6000670de0b6b3a76400006027548561187f91906128eb565b6118899190612902565b6026549091506001600160a01b0316156118b9576026546118b4906001600160a01b03168683611d9a565b6118c3565b6118c38582611ecb565b506001949350505050565b60248054610545906127e4565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561195d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610629565b61196c33856106d18685612834565b5060019392505050565b3360008181526002602052604081205490918391906119949061166d565b61199e9190612834565b10156119bc5760405162461bcd60e51b815260040161062990612847565b6119c7338484611bc2565b6025546040516274d72160e51b81523360048201526001600160a01b0385811660248301526044820185905290911690630e9ae42090606401600060405180830381600087803b158015611a1a57600080fd5b505af1158015611a2e573d6000803e3d6000fd5b5060019695505050505050565b6025546000906001600160a01b03163314611a685760405162461bcd60e51b81526004016106299061289b565b5060035490565b6025546001600160a01b03163314611a995760405162461bcd60e51b81526004016106299061289b565b602755565b6001600160a01b038316611b005760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610629565b6001600160a01b038216611b615760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610629565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611c265760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610629565b6001600160a01b038216611c885760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610629565b6001600160a01b03831660009081526020819052604090205481811015611d005760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610629565b611d0a8282612834565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290611d40908490612947565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d8c91815260200190565b60405180910390a350505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611df6919061295a565b6000604051808303816000865af19150503d8060008114611e33576040519150601f19603f3d011682016040523d82523d6000602084013e611e38565b606091505b5091509150818015611e62575080511580611e62575080806020019051810190611e629190612976565b611ec45760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610629565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051611ef5919061295a565b60006040518083038185875af1925050503d8060008114611f32576040519150601f19603f3d011682016040523d82523d6000602084013e611f37565b606091505b50509050806111875760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610629565b6001600160a01b0381166000908152600260205260409020546120055760405162461bcd60e51b8152602060048201526018602482015277155b9bd4994e881e995c9bc818db185a5b48185b5bdd5b9d60421b6044820152606401610629565b6001600160a01b0381166000908152600260205260408120546003805491928392612031908490612834565b90915550612041905082826121ef565b506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b0382166000908152600260205260409020546120c95760405162461bcd60e51b8152602060048201526018602482015277155b9bd4994e881e995c9bc818db185a5b48185b5bdd5b9d60421b6044820152606401610629565b6001600160a01b0382166000908152600260205260409020548111156121315760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a2070656e64696e6720616d6f756e74206f766572666c6f7700006044820152606401610629565b6001600160a01b038216600090815260026020526040812054600380549192839261215d908490612834565b9091555061216d905083836121ef565b50506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b03811660009081526002602052604081205460038054919283926121c2908490612834565b9091555050506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b03821661224f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610629565b6001600160a01b038216600090815260208190526040902054818110156122c35760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610629565b6122cd8282612834565b6001600160a01b038416600090815260208190526040812091909155600480548492906122fb908490612834565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b816123508461166d565b101561239e5760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a2062616c616e6365206f766572666c6f770000000000000000006044820152606401610629565b6fffffffffffffffffffffffffffffffff8211156123fe5760405162461bcd60e51b815260206004820152601a60248201527f416d6f756e742065786365656473206d61782075696e743132380000000000006044820152606401610629565b6001600160a01b03831660009081526002602052604090205415801561243d57506001600160a01b038316600090815260026020526040902060010154155b1561248c57604080516060810182528381524260208083019182528284018581526001600160a01b03881660009081526002928390529490942092518355905160018301559151910155612509565b6001600160a01b038316600090815260026020526040812080548492906124b4908490612947565b90915550506001600160a01b038316600090815260026020819052604082200180548392906124e4908490612947565b90915550506001600160a01b0383166000908152600260205260409020426001909101555b816003600082825461251b9190612947565b9091555050505050565b6001600160a01b03821661257b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610629565b806004600082825461258d9190612947565b90915550506001600160a01b038216600090815260208190526040812080548392906125ba908490612947565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0381166000908152600260205260408120546003805491928392612630908490612834565b909155505080156120415761204182826121ef565b60005b83811015612660578181015183820152602001612648565b50506000910152565b6020815260008251806020840152612688816040850160208701612645565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146126b357600080fd5b919050565b600080604083850312156126cb57600080fd5b6126d48361269c565b946020939093013593505050565b6000806000606084860312156126f757600080fd5b6127008461269c565b925061270e6020850161269c565b9150604084013590509250925092565b60006020828403121561273057600080fd5b6127398261269c565b9392505050565b801515811461274e57600080fd5b50565b60008060006060848603121561276657600080fd5b61276f8461269c565b925061277d6020850161269c565b9150604084013561278d81612740565b809150509250925092565b6000602082840312156127aa57600080fd5b5035919050565b600080604083850312156127c457600080fd5b6127cd8361269c565b91506127db6020840161269c565b90509250929050565b600181811c908216806127f857607f821691505b60208210810361281857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105d7576105d761281e565b60208082526034908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527330b630b731b29037b9103832b73234b733902ba960611b606082015260800190565b60208082526019908201527f556e6f52653a205269736b506f6f6c20466f7262696464656e00000000000000604082015260600190565b6000602082840312156128e457600080fd5b5051919050565b80820281158282048414176105d7576105d761281e565b60008261291f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561293657600080fd5b815160ff8116811461273957600080fd5b808201808211156105d7576105d761281e565b6000825161296c818460208701612645565b9190910192915050565b60006020828403121561298857600080fd5b81516127398161274056fea2646970667358221220dc8c67b9a67173d0f33b9a79fd7706dcc21efd4e5b806ecaa801190bbbd68d3464736f6c63430008170033a2646970667358221220c752bc5d461a65b66902b8e3963e0bdb162df7219c4bdf88e3827dd44d30790d64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "newRiskPool(string,string,address,address)": {
        "details": "create new RiskPool Contract",
        "params": {
          "_cohort": "address of the ssip-ssrp pool",
          "_currency": "address of the currency to distribute as a reward to user",
          "_name": "name of the risk pool",
          "_symbol": "symbol of the risk pool"
        },
        "returns": {
          "_0": "new RiskPool address*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}