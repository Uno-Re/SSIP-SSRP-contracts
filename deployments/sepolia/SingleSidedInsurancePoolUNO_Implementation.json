{
  "address": "0x00c014D654BCB279351B108911fa148FBcC75029",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "EmergencyWithdraw",
          "type": "bool"
        }
      ],
      "name": "EmergencyWithdrawToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payout",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsurancePayoutSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_killed",
          "type": "bool"
        }
      ],
      "name": "KillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestAmount",
          "type": "uint256"
        }
      ],
      "name": "LeftPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_cancelAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_cancelAmountInUno",
          "type": "uint256"
        }
      ],
      "name": "LogCancelWithdrawRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "LogCreateRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_riskPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawLpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawUnoAmount",
          "type": "uint256"
        }
      ],
      "name": "LogLeaveFromPendingSSIP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "LogLpTransferInSSIP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_migrateTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_migratedAmount",
          "type": "uint256"
        }
      ],
      "name": "LogMigrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "name": "LogSetCapitalAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lockTime",
          "type": "uint256"
        }
      ],
      "name": "LogSetLockTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_migrateTo",
          "type": "address"
        }
      ],
      "name": "LogSetMigrateTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minLPCapital",
          "type": "uint256"
        }
      ],
      "name": "LogSetMinLPCapital",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "LogSetRewardMultiplier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "LogSetRole",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "LogSetStakingStartTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastRewardBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_accUnoPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogUserUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimAmount",
          "type": "uint256"
        }
      ],
      "name": "PolicyClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_alive",
          "type": "bool"
        }
      ],
      "name": "PoolAlived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_fail",
          "type": "bool"
        }
      ],
      "name": "PoolFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "RiskPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "_staker",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RollOverReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "StakedInPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_UNO_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_PROCESSOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelWithdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "createRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_SCR",
          "type": "uint256"
        }
      ],
      "name": "createRiskPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterInPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "getStakedAmountPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalWithdrawPendingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawRequestPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingAmountInUno",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originUnoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveFromPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveFromPoolInPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lpTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "pendingUno",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "policies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "insuranceAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "payoutAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accUnoPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unoMultiplierPerBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revivePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "riskPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roleLockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_to",
          "type": "address[]"
        }
      ],
      "name": "rollOverReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_accUnoPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastRewardBlock",
          "type": "uint256"
        }
      ],
      "name": "setAccUnoPerShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "name": "setCapitalAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockTime",
          "type": "uint256"
        }
      ],
      "name": "setLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpPriceUno",
          "type": "uint256"
        }
      ],
      "name": "setLpPriceInRiskPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrateTo",
          "type": "address"
        }
      ],
      "name": "setMigrateTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLPCapital",
          "type": "uint256"
        }
      ],
      "name": "setMinLPCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setRewardMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "setRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setStakingStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardDebt",
          "type": "uint256"
        }
      ],
      "name": "setUserDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_payout",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "settlePayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeInCapitalAgent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleEmergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleRollOver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpausePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastWithdrawTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isNotRollOver",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0e7fed6fb6e4a0b8c2d26c62c19563163c29b82b5767e625211ebbecd742ce8",
  "receipt": {
    "to": null,
    "from": "0x3ad22Ae2dE3dCF105E8DaA12acDd15bD47596863",
    "contractAddress": "0x00c014D654BCB279351B108911fa148FBcC75029",
    "transactionIndex": 34,
    "gasUsed": "4330869",
    "logsBloom": "0x
    "blockHash": "0x2d79bc12d59f88a8560a0e2e284a5ee7ec58fc7ddda53779267bd6d22c7f50e1",
    "transactionHash": "0xd0e7fed6fb6e4a0b8c2d26c62c19563163c29b82b5767e625211ebbecd742ce8",
    "logs": [],
    "blockNumber": 5734135,
    "cumulativeGasUsed": "8380002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "31ed929ad90199322654dbe351562488",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"EmergencyWithdraw\",\"type\":\"bool\"}],\"name\":\"EmergencyWithdrawToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsurancePayoutSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_killed\",\"type\":\"bool\"}],\"name\":\"KillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestAmount\",\"type\":\"uint256\"}],\"name\":\"LeftPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cancelAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cancelAmountInUno\",\"type\":\"uint256\"}],\"name\":\"LogCancelWithdrawRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"LogCreateRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_riskPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawLpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawUnoAmount\",\"type\":\"uint256\"}],\"name\":\"LogLeaveFromPendingSSIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogLpTransferInSSIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_migrateTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_migratedAmount\",\"type\":\"uint256\"}],\"name\":\"LogMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"name\":\"LogSetCapitalAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"LogSetLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_migrateTo\",\"type\":\"address\"}],\"name\":\"LogSetMigrateTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minLPCapital\",\"type\":\"uint256\"}],\"name\":\"LogSetMinLPCapital\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"LogSetRewardMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"LogSetRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"LogSetStakingStartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_accUnoPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogUserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"PolicyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_alive\",\"type\":\"bool\"}],\"name\":\"PoolAlived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_fail\",\"type\":\"bool\"}],\"name\":\"PoolFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"RiskPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"_staker\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RollOverReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakedInPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_UNO_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_PROCESSOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"createRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SCR\",\"type\":\"uint256\"}],\"name\":\"createRiskPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterInPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getStakedAmountPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWithdrawPendingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawRequestPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmountInUno\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originUnoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveFromPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveFromPoolInPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lpTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"pendingUno\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accUnoPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unoMultiplierPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roleLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"rollOverReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accUnoPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"setAccUnoPerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"name\":\"setCapitalAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpPriceUno\",\"type\":\"uint256\"}],\"name\":\"setLpPriceInRiskPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrateTo\",\"type\":\"address\"}],\"name\":\"setMigrateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLPCapital\",\"type\":\"uint256\"}],\"name\":\"setMinLPCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStakingStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDebt\",\"type\":\"uint256\"}],\"name\":\"setUserDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payout\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"settlePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeInCapitalAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRollOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNotRollOver\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"cancelWithdrawRequest()\":{\"details\":\"user can cancel its pending withdraw request\"},\"createRewarder(address,address,address)\":{\"details\":\"create rewarder with UNO token\"},\"createRiskPool(string,string,address,address,uint256,uint256)\":{\"details\":\"create Risk pool with UNO from SSIP owner\"},\"enterInPool(uint256)\":{\"details\":\"stake user collateral, update user reward per block\",\"params\":{\"_amount\":\"amount to deposit to pool\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStakedAmountPerUser(address)\":{\"details\":\"return user staked currency corresponding to current lp price of uno\"},\"getTotalWithdrawPendingAmount()\":{\"details\":\"get total withdraw request amount in pending for the risk pool in UNO\"},\"getWithdrawRequestPerUser(address)\":{\"details\":\"get withdraw request amount in pending per user in UNO\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"harvest(address)\":{\"details\":\"withdraw user pending uno\",\"params\":{\"_to\":\"user address\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"killPool()\":{\"details\":\"kill pool to restrict pool functionality, can only by called by admin role\"},\"leaveFromPending(uint256)\":{\"details\":\"user can submit claim again and receive his funds into his wallet after 10 days since last WR.\"},\"leaveFromPoolInPending(uint256)\":{\"details\":\"WR will be in pending for 10 days at least\"},\"migrate()\":{\"details\":\"migrate user to new version\"},\"pausePool()\":{\"details\":\"pause pool to restrict pool functionality, can only by called by admin role\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingUno(address)\":{\"details\":\"return pending uno to claim of `_to` address\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revivePool()\":{\"details\":\"revive pool, can only by called by admin role\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"rollOverReward(address[])\":{\"details\":\"user roll over its pending uno to stake\"},\"setCapitalAgent(address)\":{\"details\":\"set new capital agent, can only by called by admin role\",\"params\":{\"_capitalAgent\":\"new capital agent address\"}},\"setLockTime(uint256)\":{\"details\":\"lock time, only admin role call this function\"},\"setMigrateTo(address)\":{\"details\":\"set migrate address, can only by called by admin role\",\"params\":{\"_migrateTo\":\"new migrate address\"}},\"setMinLPCapital(uint256)\":{\"details\":\"update min lp capital, only admin role call this function\"},\"setRewardMultiplier(uint256)\":{\"details\":\"update reward muiltiplier, can only by called by admin role\",\"params\":{\"_rewardMultiplier\":\"value to set\"}},\"setStakingStartTime(uint256)\":{\"details\":\"set staking start time, only admin role call this function\"},\"settlePayout(uint256,address,uint256)\":{\"details\":\"claim policy to payout, can only be called by claim processor role\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"toggleEmergencyWithdraw()\":{\"details\":\"toggle emergency withdraw bool to restrict or use this emergency withdraw, only admin role call this function\"},\"toggleRollOver()\":{\"details\":\"user can toggle its roll over bool\"},\"unpausePool()\":{\"details\":\"unpause pool, can only by called by admin role\"},\"updatePool()\":{\"details\":\"update pool last reward and accumulated uno per share, update every time when use enter, withdraw from pool\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleSidedInsurancePool.sol\":\"SingleSidedInsurancePool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/SingleSidedInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ICapitalAgent.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/IRiskPoolFactory.sol\\\";\\nimport \\\"./interfaces/ISingleSidedInsurancePool.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SingleSidedInsurancePool is\\n    ISingleSidedInsurancePool,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    bytes32 public constant CLAIM_PROCESSOR_ROLE = keccak256(\\\"CLAIM_PROCESSOR_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant BOT_ROLE = keccak256(\\\"BOT_ROLE\\\");\\n\\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\\n\\n    address public migrateTo;\\n    address public capitalAgent;\\n\\n    bool public killed;\\n    bool public emergencyWithdrawAllowed;\\n    address public rewarder;\\n\\n    address public override riskPool;\\n\\n    uint256 public lockTime;\\n    uint256 public stakingStartTime;\\n\\n    struct PoolInfo {\\n        uint256 lastRewardBlock;\\n        uint256 accUnoPerShare;\\n        uint256 unoMultiplierPerBlock;\\n    }\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n        bool isNotRollOver;\\n    }\\n\\n    struct Policy {\\n        uint256 insuranceAmount;\\n        address payoutAddress;\\n        bool settled;\\n    }\\n\\n    mapping(bytes32 => mapping(address => uint256)) public roleLockTime;\\n\\n    mapping(uint256 => Policy) public policies;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    PoolInfo public poolInfo;\\n\\n    event RiskPoolCreated(address indexed _SSIP, address indexed _pool);\\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogLeaveFromPendingSSIP(\\n        address indexed _user,\\n        address indexed _riskPool,\\n        uint256 _withdrawLpAmount,\\n        uint256 _withdrawUnoAmount\\n    );\\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\\n    event LogLpTransferInSSIP(address indexed _from, address indexed _to, uint256 _amount);\\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _cancelAmount, uint256 _cancelAmountInUno);\\n    event LogMigrate(address indexed _user, address indexed _migrateTo, uint256 _migratedAmount);\\n    event LogSetCapitalAgent(address indexed _SSIP, address indexed _capitalAgent);\\n    event LogSetRewardMultiplier(address indexed _SSIP, uint256 _rewardPerBlock);\\n    event LogSetRole(address indexed _SSIP, bytes32 _role, address indexed _account);\\n    event LogSetMigrateTo(address indexed _SSIP, address indexed _migrateTo);\\n    event LogSetMinLPCapital(address indexed _SSIP, uint256 _minLPCapital);\\n    event LogSetLockTime(address indexed _SSIP, uint256 _lockTime);\\n    event LogSetStakingStartTime(address indexed _SSIP, uint256 _startTime);\\n    event PoolAlived(address indexed _owner, bool _alive);\\n    event PoolFailed(address indexed _owner, bool _fail);\\n    event KillPool(address indexed _owner, bool _killed);\\n    event InsurancePayoutSettled(uint256 indexed policyId, address indexed payout, uint256 amount);\\n    event RollOverReward(address[] indexed _staker, address indexed _pool, uint256 _amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event EmergencyWithdrawToggled(address indexed user, bool EmergencyWithdraw);\\n    event LogUserUpdated(address indexed pool, address indexed user, uint256 amount);\\n\\n    function initialize(address _capitalAgent, address _multiSigWallet) external initializer {\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multisigwallet address\\\");\\n        capitalAgent = _capitalAgent;\\n        lockTime = 10 days;\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        __AccessControl_init();\\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(CLAIM_PROCESSOR_ROLE, ADMIN_ROLE); // TODO\\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\\n    }\\n\\n    modifier isStartTime() {\\n        require(block.timestamp >= stakingStartTime, \\\"UnoRe: not available time\\\");\\n        _;\\n    }\\n\\n    modifier roleLockTimePassed(bytes32 _role) {\\n        require(block.timestamp >= roleLockTime[_role][msg.sender], \\\"UnoRe: roll lock time not passed\\\");\\n        _;\\n    }\\n\\n    modifier isAlive() {\\n        require(!killed, \\\"UnoRe: pool is killed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev pause pool to restrict pool functionality, can only by called by admin role\\n     */\\n    function pausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, can only by called by admin role\\n     */\\n    function unpausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev kill pool to restrict pool functionality, can only by called by admin role\\n     */\\n    function killPool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        killed = true;\\n        emit KillPool(msg.sender, true);\\n    }\\n\\n    /**\\n     * @dev revive pool, can only by called by admin role\\n     */\\n    function revivePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        killed = false;\\n        emit PoolAlived(msg.sender, false);\\n    }\\n\\n    function setRole(\\n        bytes32 _role,\\n        address _account\\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) whenNotPaused isAlive {\\n        require(_account != address(0), \\\"UnoRe: zero address\\\");\\n        roleLockTime[_role][_account] = block.timestamp + lockTime;\\n        _grantRole(_role, _account);\\n        emit LogSetRole(address(this), _role, _account);\\n    }\\n\\n    /**\\n     * @dev set new capital agent, can only by called by admin role\\n     * @param _capitalAgent new capital agent address\\n     */\\n    function setCapitalAgent(address _capitalAgent) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero address\\\");\\n        capitalAgent = _capitalAgent;\\n        emit LogSetCapitalAgent(address(this), _capitalAgent);\\n    }\\n\\n    /**\\n     * @dev update reward muiltiplier, can only by called by admin role\\n     * @param _rewardMultiplier value to set\\n     */\\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        require(_rewardMultiplier > 0, \\\"UnoRe: zero value\\\");\\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\\n        emit LogSetRewardMultiplier(address(this), _rewardMultiplier);\\n    }\\n\\n    /**\\n     * @dev set migrate address, can only by called by admin role\\n     * @param _migrateTo new migrate address\\n     */\\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n        emit LogSetMigrateTo(address(this), _migrateTo);\\n    }\\n\\n    /**\\n     * @dev update min lp capital, only admin role call this function\\n     */\\n    function setMinLPCapital(uint256 _minLPCapital) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        require(_minLPCapital > 0, \\\"UnoRe: not allow zero value\\\");\\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\\n        emit LogSetMinLPCapital(address(this), _minLPCapital);\\n    }\\n\\n    /**\\n     * @dev lock time, only admin role call this function\\n     */\\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        require(_lockTime > 0, \\\"UnoRe: not allow zero lock time\\\");\\n        lockTime = _lockTime;\\n        emit LogSetLockTime(address(this), _lockTime);\\n    }\\n\\n    /**\\n     * @dev set staking start time, only admin role call this function\\n     */\\n    function setStakingStartTime(uint256 _startTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        stakingStartTime = _startTime + block.timestamp;\\n        emit LogSetStakingStartTime(address(this), stakingStartTime);\\n    }\\n\\n    /**\\n     * @dev toggle emergency withdraw bool to restrict or use this emergency withdraw,\\n     * only admin role call this function\\n     */\\n    function toggleEmergencyWithdraw() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        emergencyWithdrawAllowed = !emergencyWithdrawAllowed;\\n        emit EmergencyWithdrawToggled(address(this), emergencyWithdrawAllowed);\\n    }\\n\\n    /**\\n     * @dev create Risk pool with UNO from SSIP owner\\n     */\\n    function createRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _factory,\\n        address _currency,\\n        uint256 _rewardMultiplier,\\n        uint256 _SCR\\n    ) external nonReentrant onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        require(_factory != address(0), \\\"UnoRe: zero factory address\\\");\\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\\n        poolInfo.lastRewardBlock = block.number;\\n        poolInfo.accUnoPerShare = 0;\\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\\n        ICapitalAgent(capitalAgent).addPool(address(this), _currency, _SCR);\\n        emit RiskPoolCreated(address(this), riskPool);\\n    }\\n\\n    /**\\n     * @dev create rewarder with UNO token\\n     */\\n    function createRewarder(\\n        address _operator,\\n        address _factory,\\n        address _currency\\n    ) external nonReentrant onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        require(_operator != address(0), \\\"UnoRe: zero operator address\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    /**\\n     * @dev migrate user to new version\\n     */\\n    function migrate() external nonReentrant whenNotPaused isAlive {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > lockTime;\\n        uint256 migratedAmount = IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim(migratedAmount, 0, false);\\n        IMigration(migrateTo).onMigration(msg.sender, migratedAmount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n        userInfo[msg.sender].rewardDebt = 0;\\n        emit LogMigrate(msg.sender, migrateTo, migratedAmount);\\n    }\\n\\n    /**\\n     * @dev return pending uno to claim of `_to` address\\n     */\\n    function pendingUno(address _to) external view returns (uint256 pending) {\\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\\n        uint256 accUnoPerShare = poolInfo.accUnoPerShare;\\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\\n            accUnoPerShare = accUnoPerShare + (unoReward * ACC_UNO_PRECISION) / tokenSupply;\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    /**\\n     * @dev update pool last reward and accumulated uno per share,\\n     * update every time when use enter, withdraw from pool\\n     */\\n    function updatePool() public override {\\n        if (block.number > poolInfo.lastRewardBlock) {\\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\\n            if (tokenSupply > 0) {\\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + ((unoReward * ACC_UNO_PRECISION) / tokenSupply);\\n            }\\n            poolInfo.lastRewardBlock = block.number;\\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\\n        }\\n    }\\n\\n    /**\\n     * @dev stake user collateral, update user reward per block\\n     * @param _amount amount to deposit to pool\\n     */\\n    function enterInPool(uint256 _amount) external payable override whenNotPaused isAlive isStartTime nonReentrant {\\n        _depositIn(_amount);\\n        _enterInPool(_amount, msg.sender);\\n        emit StakedInPool(msg.sender, riskPool, _amount);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override whenNotPaused isStartTime nonReentrant {\\n        _harvest(msg.sender);\\n        require(ICapitalAgent(capitalAgent).checkCapitalByMCR(address(this), _amount), \\\"UnoRe: minimum capital underflow\\\");\\n        // Withdraw desired amount from pool\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\\n        require(amount - pendingAmount >= (_amount * 1e18) / lpPriceUno, \\\"UnoRe: withdraw amount overflow\\\");\\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\\n\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n        emit LeftPool(msg.sender, riskPool, _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending(uint256 _amount) external override isStartTime whenNotPaused nonReentrant {\\n        require(_amount > 0, \\\"Withdraw amount should be greator than zero\\\");\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n\\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender, _amount);\\n\\n        ICapitalAgent(capitalAgent).SSIPWithdraw(withdrawAmountInUNO);\\n\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        userInfo[msg.sender].rewardDebt =\\n            accumulatedUno -\\n            ((withdrawAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n\\n        userInfo[msg.sender].amount = amount - withdrawAmount;\\n\\n        emit LogLeaveFromPendingSSIP(msg.sender, riskPool, withdrawAmount, withdrawAmountInUNO);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw() public nonReentrant whenNotPaused {\\n        require(emergencyWithdrawAllowed, \\\"Unore: emergencyWithdraw is not allowed\\\");\\n        UserInfo memory user = userInfo[msg.sender];\\n        uint256 amount = user.amount;\\n        require(amount > 0, \\\"Unore: Zero user amount\\\");\\n        delete userInfo[msg.sender];\\n        IRiskPool(riskPool).emergencyWithdraw(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, amount);\\n    }\\n\\n    function lpTransfer(address _from, address _to, uint256 _amount) external override nonReentrant whenNotPaused isAlive {\\n        require(msg.sender == address(riskPool), \\\"UnoRe: not allow others transfer\\\");\\n        _harvest(_from);\\n        uint256 amount = userInfo[_from].amount;\\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\\n        require(amount - pendingAmount >= _amount, \\\"UnoRe: balance overflow\\\");\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n        userInfo[_from].amount = amount - _amount;\\n\\n        userInfo[_to].rewardDebt = userInfo[_to].rewardDebt + ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n        userInfo[_to].amount = userInfo[_to].amount + _amount;\\n\\n        emit LogLpTransferInSSIP(_from, _to, _amount);\\n    }\\n\\n    /**\\n     * @dev withdraw user pending uno\\n     * @param _to user address\\n     */\\n    function harvest(address _to) external override whenNotPaused isAlive isStartTime nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n\\n        (uint256 _pendingUno, uint256 _amount) = _updateReward(_to);\\n\\n        if (rewarder != address(0) && _pendingUno != 0) {\\n            IRewarder(rewarder).onReward(_to, _pendingUno, _amount);\\n        }\\n\\n        emit Harvest(msg.sender, _to, _pendingUno);\\n    }\\n\\n    /**\\n     * @dev user can toggle its roll over bool\\n     */\\n    function toggleRollOver() external {\\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\\n    }\\n\\n    /**\\n     * @dev user roll over its pending uno to stake\\n     */\\n    function rollOverReward(address[] memory _to) external isStartTime whenNotPaused isAlive onlyRole(BOT_ROLE) nonReentrant {\\n        require(IRiskPool(riskPool).currency() == IRewarder(rewarder).currency(), \\\"UnoRe: currency not matched\\\");\\n        updatePool();\\n        uint256 _totalPendingUno;\\n        uint256 _accumulatedAmount;\\n        for (uint256 i; i < _to.length; i++) {\\n            require(!userInfo[_to[i]].isNotRollOver, \\\"UnoRe: rollover is not set\\\");\\n\\n            (uint256 _pendingUno, uint256 _amount) = _updateReward(_to[i]);\\n            _totalPendingUno += _pendingUno;\\n            _accumulatedAmount += _amount;\\n            _enterInPool(_pendingUno, _to[i]);\\n        }\\n\\n        if (rewarder != address(0) && _totalPendingUno != 0 && _accumulatedAmount > 0) {\\n            IRewarder(rewarder).onReward(riskPool, _totalPendingUno, _accumulatedAmount);\\n        }\\n        emit RollOverReward(_to, riskPool, _totalPendingUno);\\n    }\\n\\n    /**\\n     * @dev user can cancel its pending withdraw request\\n     */\\n    function cancelWithdrawRequest() external nonReentrant whenNotPaused isAlive {\\n        (uint256 cancelAmount, uint256 cancelAmountInUno) = IRiskPool(riskPool).cancelWithdrawRequest(msg.sender);\\n        emit LogCancelWithdrawRequest(msg.sender, cancelAmount, cancelAmountInUno);\\n    }\\n\\n    /**\\n     * @dev return user staked currency corresponding to current lp price of uno\\n     */\\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\\n        lpAmount = userInfo[_to].amount;\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\\n    }\\n\\n    /**\\n     * @dev get withdraw request amount in pending per user in UNO\\n     */\\n    function getWithdrawRequestPerUser(\\n        address _user\\n    ) external view returns (uint256 pendingAmount, uint256 pendingAmountInUno, uint256 originUnoAmount, uint256 requestTime) {\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\\n    }\\n\\n    /**\\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\\n     */\\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\\n    }\\n\\n    /**\\n     * @dev claim policy to payout, can only be called by claim processor role\\n     */\\n    function settlePayout(\\n        uint256 _policyId,\\n        address _payout,\\n        uint256 _amount\\n    ) public whenNotPaused isAlive onlyRole(CLAIM_PROCESSOR_ROLE) roleLockTimePassed(CLAIM_PROCESSOR_ROLE) {\\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_payout, _amount);\\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim(realClaimAmount, uint256(_policyId), true);\\n\\n        emit InsurancePayoutSettled(_policyId, _payout, _amount);\\n    }\\n\\n    function setUserDetails(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        userInfo[_user].amount = _amount;\\n        userInfo[_user].rewardDebt = _rewardDebt;\\n        IRiskPool(riskPool).enter(_user, _amount);\\n\\n        emit LogUserUpdated(address(this), _user, _amount);\\n    }\\n\\n    function setLpPriceInRiskPool(uint256 _lpPriceUno) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        IRiskPool(riskPool).setLpPriceUno(_lpPriceUno);\\n    }\\n\\n    function setAccUnoPerShare(\\n        uint256 _accUnoPerShare,\\n        uint256 _lastRewardBlock\\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\\n        poolInfo.accUnoPerShare = _accUnoPerShare;\\n        poolInfo.lastRewardBlock = _lastRewardBlock;\\n    }\\n\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) public override isAlive whenNotPaused onlyRole(getRoleAdmin(role)) roleLockTimePassed(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function _revokeRole(\\n        bytes32 role,\\n        address account\\n    ) internal override isAlive whenNotPaused roleLockTimePassed(getRoleAdmin(role)) returns (bool) {\\n        return super._revokeRole(role, account);\\n    }\\n\\n    function _enterInPool(uint256 _amount, address _to) internal {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        IRiskPool(riskPool).enter(_to, _amount);\\n        UserInfo memory _userInfo = userInfo[_to];\\n        _userInfo.rewardDebt =\\n            _userInfo.rewardDebt +\\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\\n            ACC_UNO_PRECISION;\\n        _userInfo.amount = _userInfo.amount + ((_amount * 1e18) / lpPriceUno);\\n        userInfo[_to] = _userInfo;\\n        ICapitalAgent(capitalAgent).SSIPStaking(_amount);\\n    }\\n\\n    function _updateReward(address _to) internal returns (uint256, uint256) {\\n        uint256 requestTime;\\n        (, requestTime, ) = IRiskPool(riskPool).getWithdrawRequest(_to);\\n        if (requestTime > 0) {\\n            return (0, 0);\\n        }\\n\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[_to].rewardDebt = accumulatedUno;\\n        return (_pendingUno, amount);\\n    }\\n\\n    function _depositIn(uint256 _amount) internal {\\n        address token = IRiskPool(riskPool).currency();\\n        if (token == address(0)) {\\n            require(msg.value >= _amount, \\\"UnoRe: insufficient paid\\\");\\n            if (msg.value > _amount) {\\n                TransferHelper.safeTransferETH(msg.sender, msg.value - _amount);\\n            }\\n            TransferHelper.safeTransferETH(riskPool, _amount);\\n        } else {\\n            TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\\n        }\\n    }\\n    function stakeInCapitalAgent(uint256 amount) external onlyRole(ADMIN_ROLE) returns (bool) {\\n        ICapitalAgent(capitalAgent).SSIPStaking(amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xac26d0edf6ccf31f2098450bbb8f2a1c1022615ea9347bd44eb85e1518667608\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\\n\\n    function setPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isMigrate) external;\\n\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\\n\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(uint256 _policyId) external;\\n\\n    function getPolicyInfo() external returns(address, uint256, bool);\\n\\n    function claimedAmount(address _policy, uint256 _policyId) external returns(uint256);\\n\\n    function exchangeAgent() external view returns(address);\\n\\n    function getPoolInfo(address _pool) external view returns(uint256, uint256, address, bool);\\n}\\n\",\"keccak256\":\"0xec078d273b686a48f5ab4ec0cc0b44ba84830305d5a893078755a260ce1aa918\",\"license\":\"MIT\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface IMigration {\\n    function onMigration(address who_, uint256 amount_, bytes memory data_) external;\\n}\\n\",\"keccak256\":\"0x188d20aa6fe4544987fe651e4cd7c7068c1d42b5d5b9630f7385d1abe931ed0a\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount, uint256 accumulatedAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x872a26d3eb031782763b46626fc021cd02a7f3acf1d3564dd5811b5869084f41\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(address _operator, address _currency, address _pool) external returns (address);\\n}\\n\",\"keccak256\":\"0xb2169c5d0bf598726c67dfdc8bceab45390d7514afd6463b52efccd1b6bbd78e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to, uint256 _amount) external returns (uint256, uint256);\\n\\n    function cancelWithdrawRequest(address _to) external returns (uint256, uint256);\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external returns (uint256);\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to) external view returns (uint256, uint256, uint256);\\n\\n    function lpPriceUno() external view returns (uint256);\\n\\n    function emergencyWithdraw(address _to, uint256 _amount) external returns (bool);\\n\\n    function setLpPriceUno(uint256 _lpPriceUno) external;\\n}\\n\",\"keccak256\":\"0x5d69f0a17e09f42d8ec620ea423f2cf640a5a291c8a3ea655d22baef11f25231\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _pool,\\n        address _currency\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x1822ada2ed41c99cb910cbfa6ff170a7723016983a873f2f31585ccdd04f6e5a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISingleSidedInsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external payable;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending(uint256 _amount) external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\\n\\n    function riskPool() external view returns (address);\\n\\n    function settlePayout(uint256 _policyId, address _payout, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa5bcd329319b9d62543c54bfd87773b27b1e276a884495ea0b8f133b411de6ce\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061038c5760003560e01c806391d14854116101dc578063c4e5dacf11610102578063e08c5de1116100a0578063e3824a381161006f578063e3824a3814610b4c578063f1daf24c14610b5f578063fd91db9614610b7f578063fe30e7e614610b9f57600080fd5b8063e08c5de114610aca578063e0c8d9a514610aea578063e19e716814610b22578063e3161ddd14610b3757600080fd5b8063db2e21bc116100dc578063db2e21bc14610a55578063dc740ca914610a6a578063dcc3e06e14610a8a578063dff8720314610aaa57600080fd5b8063c4e5dacf146109a7578063d3e89483146109c7578063d547741f14610a3557600080fd5b8063aceda7f91161017a578063ba61945711610149578063ba61945714610912578063c2eb8eb914610947578063c3dcfcf114610967578063c4d87fe21461098757600080fd5b8063aceda7f91461087d578063ae04d45d1461089e578063af16d6e0146108be578063b1503774146108de57600080fd5b806398c6e760116101b657806398c6e7601461081e578063a217fddf1461083e578063a3bdd63214610853578063aa09d5b71461086857600080fd5b806391d148541461079e5780639336f406146107be57806393b6b86c146107fe57600080fd5b806336568abe116102c15780636abfd1831161025f5780637da2a4a71161022e5780637da2a4a7146107195780638395206c1461074d57806389919b711461076d5780638fd3ab801461078957600080fd5b80636abfd183146106ac578063736ec05c146106c257806375b238fc146106e25780637a39b8d81461070457600080fd5b80635a2f3d091161029b5780635a2f3d09146106185780635c975abb146106525780635d90bad914610677578063677554151461069757600080fd5b806336568abe146105a057806342198160146105c0578063485cc955146105f857600080fd5b80630e5c011e1161032e5780631959a002116103085780631959a002146104d85780631f3a0e411461053f578063248a9ca3146105605780632f2ff15d1461058057600080fd5b80630e5c011e146104785780630e9ae420146104985780630f4c3c4f146104b857600080fd5b8063093cf18f1161036a578063093cf18f1461040d5780630bd075a1146104225780630d668087146104425780630e2be5061461045857600080fd5b806301ffc9a714610391578063068cc514146103c6578063078fa9bc146103dd575b600080fd5b34801561039d57600080fd5b506103b16103ac3660046145e9565b610bbf565b60405190151581526020015b60405180910390f35b3480156103d257600080fd5b506103db610bf6565b005b3480156103e957600080fd5b506103ff600080516020614ccb83398151915281565b6040519081526020016103bd565b34801561041957600080fd5b506103db610c6f565b34801561042e57600080fd5b506103db61043d36600461461a565b610d3b565b34801561044e57600080fd5b506103ff60045481565b34801561046457600080fd5b506103db610473366004614633565b610e23565b34801561048457600080fd5b506103db61049336600461467a565b610e94565b3480156104a457600080fd5b506103db6104b3366004614697565b610f04565b3480156104c457600080fd5b506103db6104d336600461461a565b6111fe565b3480156104e457600080fd5b5061051d6104f336600461467a565b60086020526000908152604090208054600182015460028301546003909301549192909160ff1684565b60408051948552602085019390935291830152151560608201526080016103bd565b34801561054b57600080fd5b506001546103b190600160a01b900460ff1681565b34801561056c57600080fd5b506103ff61057b36600461461a565b6112c5565b34801561058c57600080fd5b506103db61059b3660046146d8565b6112e7565b3480156105ac57600080fd5b506103db6105bb3660046146d8565b61137e565b3480156105cc57600080fd5b506001546105e0906001600160a01b031681565b6040516001600160a01b0390911681526020016103bd565b34801561060457600080fd5b506103db610613366004614708565b6113b1565b34801561062457600080fd5b50600954600a54600b5461063792919083565b604080519384526020840192909252908201526060016103bd565b34801561065e57600080fd5b50600080516020614ceb8339815191525460ff166103b1565b34801561068357600080fd5b506103db61069236600461461a565b6115e2565b3480156106a357600080fd5b506103db611687565b3480156106b857600080fd5b506103ff60055481565b3480156106ce57600080fd5b506103db6106dd36600461467a565b61172b565b3480156106ee57600080fd5b506103ff600080516020614d0b83398151915281565b34801561071057600080fd5b506103db611802565b34801561072557600080fd5b506103db336000908152600860205260409020600301805460ff19811660ff90911615179055565b34801561075957600080fd5b506103db61076836600461461a565b6118ab565b34801561077957600080fd5b506103ff670de0b6b3a764000081565b34801561079557600080fd5b506103db611bd7565b3480156107aa57600080fd5b506103b16107b93660046146d8565b611e33565b3480156107ca57600080fd5b506107de6107d936600461467a565b611e6b565b6040805194855260208501939093529183015260608201526080016103bd565b34801561080a57600080fd5b506103db61081936600461461a565b611f89565b34801561082a57600080fd5b506000546105e0906001600160a01b031681565b34801561084a57600080fd5b506103ff600081565b34801561085f57600080fd5b506103ff6120cd565b34801561087457600080fd5b506103db612140565b34801561088957600080fd5b506001546103b190600160a81b900460ff1681565b3480156108aa57600080fd5b506103db6108b936600461461a565b6121ac565b3480156108ca57600080fd5b506103db6108d9366004614736565b612297565b3480156108ea57600080fd5b506103ff7f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b81565b34801561091e57600080fd5b5061093261092d36600461467a565b61248a565b604080519283526020830191909152016103bd565b34801561095357600080fd5b506103db61096236600461467a565b612536565b34801561097357600080fd5b506103db6109823660046147ca565b61260e565b34801561099357600080fd5b506103db6109a2366004614871565b612824565b3480156109b357600080fd5b506003546105e0906001600160a01b031681565b3480156109d357600080fd5b50610a106109e236600461461a565b600760205260009081526040902080546001909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b0390921660208401521515908201526060016103bd565b348015610a4157600080fd5b506103db610a503660046146d8565b612954565b348015610a6157600080fd5b506103db612976565b348015610a7657600080fd5b506103b1610a8536600461461a565b612b64565b348015610a9657600080fd5b506002546105e0906001600160a01b031681565b348015610ab657600080fd5b506103db610ac53660046146d8565b612be5565b348015610ad657600080fd5b506103ff610ae536600461467a565b612d22565b348015610af657600080fd5b506103ff610b053660046146d8565b600660209081526000928352604080842090915290825290205481565b348015610b2e57600080fd5b506103db612e5c565b348015610b4357600080fd5b506103db612f46565b6103db610b5a36600461461a565b613066565b348015610b6b57600080fd5b506103db610b7a36600461461a565b613121565b348015610b8b57600080fd5b506103db610b9a3660046148bc565b6133e4565b348015610bab57600080fd5b506103db610bba366004614981565b6137d8565b60006001600160e01b03198216637965db0b60e01b1480610bf057506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020614d0b833981519152610c0e816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b83398151915290421015610c635760405162461bcd60e51b8152600401610c5a906149a8565b60405180910390fd5b610c6b6139bf565b5050565b600080516020614d0b833981519152610c87816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b83398151915290421015610cd35760405162461bcd60e51b8152600401610c5a906149a8565b6001805460ff600160a81b808304821615810260ff60a81b19909316929092179283905560405130937f4a1fbdd1e9ef46cfe9e097f622e1d79f51dcd6762c86122e6a8198c5394d640193610d2f939104161515815260200190565b60405180910390a25050565b600080516020614d0b833981519152610d53816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b83398151915290421015610d9f5760405162461bcd60e51b8152600401610c5a906149a8565b60008311610de35760405162461bcd60e51b8152602060048201526011602482015270556e6f52653a207a65726f2076616c756560781b6044820152606401610c5a565b600b83905560405183815230907fbd1dd13c6a5b4a28ebd27fdcb8fdd01aba6bbb9f67599306248f465bcdf9817f906020015b60405180910390a2505050565b600080516020614d0b833981519152610e3b816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b83398151915290421015610e875760405162461bcd60e51b8152600401610c5a906149a8565b5050600a91909155600955565b610e9c613a19565b600154600160a01b900460ff1615610ec65760405162461bcd60e51b8152600401610c5a906149dd565b600554421015610ee85760405162461bcd60e51b8152600401610c5a90614a0c565b610ef0613a4a565b610ef981613a94565b610f01613b90565b50565b610f0c613a4a565b610f14613a19565b600154600160a01b900460ff1615610f3e5760405162461bcd60e51b8152600401610c5a906149dd565b6003546001600160a01b03163314610f985760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206e6f7420616c6c6f77206f7468657273207472616e736665726044820152606401610c5a565b610fa183613a94565b6001600160a01b03838116600081815260086020526040808220600201546003549151631665744b60e11b81526004810194909452939192911690632ccae89690602401606060405180830381865afa158015611002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110269190614a43565b505090508281836110379190614a87565b10156110855760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a2062616c616e6365206f766572666c6f770000000000000000006044820152606401610c5a565b600a54600090670de0b6b3a76400009061109f9085614a9a565b6110a99190614ab1565b600a54909150670de0b6b3a7640000906110c39086614a9a565b6110cd9190614ab1565b6110d79082614a87565b6001600160a01b0387166000908152600860205260409020600101556110fd8484614a87565b6001600160a01b038716600090815260086020526040902060020155600a54670de0b6b3a7640000906111309086614a9a565b61113a9190614ab1565b6001600160a01b0386166000908152600860205260409020600101546111609190614ad3565b6001600160a01b038616600090815260086020526040902060018101919091556002015461118f908590614ad3565b6001600160a01b0380871660008181526008602052604090819020600201939093559151908816907fabc254a3e8b16a8605ce22e693a6e493e375434011c1a7ff082d09e2a84ad121906111e69088815260200190565b60405180910390a35050506111f9613b90565b505050565b600080516020614d0b833981519152611216816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b833981519152904210156112625760405162461bcd60e51b8152600401610c5a906149a8565b60035460405163f3212d2960e01b8152600481018590526001600160a01b039091169063f3212d2990602401600060405180830381600087803b1580156112a857600080fd5b505af11580156112bc573d6000803e3d6000fd5b50505050505050565b6000908152600080516020614cab833981519152602052604090206001015490565b600154600160a01b900460ff16156113115760405162461bcd60e51b8152600401610c5a906149dd565b611319613a19565b611322826112c5565b61132b816139b5565b611334836112c5565b600081815260066020908152604080832033845290915290205442101561136d5760405162461bcd60e51b8152600401610c5a906149a8565b6113778484613bb6565b5050505050565b6001600160a01b03811633146113a75760405163334bd91960e11b815260040160405180910390fd5b6111f98282613c5b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156113f75750825b905060008267ffffffffffffffff1660011480156114145750303b155b905081158015611422575080155b156114405760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561146a57845460ff60401b1916600160401b1785555b6001600160a01b0386166114cb5760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a207a65726f206d756c746973696777616c6c6574206164647265604482015261737360f01b6064820152608401610c5a565b600180546001600160a01b0319166001600160a01b038916179055620d2f006004556114f5613ce4565b6114fd613cf4565b611505613d04565b61151d600080516020614d0b83398151915287613bb6565b50611536600080516020614d0b83398151915280613d0c565b61155c600080516020614ccb833981519152600080516020614d0b833981519152613d0c565b6115947f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b600080516020614d0b833981519152613d0c565b83156112bc57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a150505050505050565b600080516020614d0b8339815191526115fa816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b833981519152904210156116465760405162461bcd60e51b8152600401610c5a906149a8565b6116504284614ad3565b600581905560405190815230907fa8aa08cc14eef7b97ab4cd52f37082e23f7526bccc98cf91e6a1d412494b905190602001610e16565b600080516020614d0b83398151915261169f816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b833981519152904210156116eb5760405162461bcd60e51b8152600401610c5a906149a8565b6001805460ff60a01b191690556040516000815233907f77337fcf1b48e6e024b256962b66c49de98c9f606b2cd9937cc0edbc7a0fb70990602001610d2f565b600080516020614d0b833981519152611743816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b8339815191529042101561178f5760405162461bcd60e51b8152600401610c5a906149a8565b6001600160a01b0383166117b55760405162461bcd60e51b8152600401610c5a90614ae6565b600080546001600160a01b0319166001600160a01b0385169081178255604051909130917f877238238dbd7134e89b00809ea73fabb50da117ace807a6b31c733bbf55d3699190a3505050565b600080516020614d0b83398151915261181a816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b833981519152904210156118665760405162461bcd60e51b8152600401610c5a906149a8565b6001805460ff60a01b1916600160a01b17815560405190815233907f7c952f2e528aa25b4eaf8b6c07af29184b27ce591295e543ced0a27b167dc79490602001610d2f565b6118b3613a19565b6005544210156118d55760405162461bcd60e51b8152600401610c5a90614a0c565b6118dd613a4a565b6118e633613a94565b60015460405163c139b04f60e01b8152306004820152602481018390526001600160a01b039091169063c139b04f90604401602060405180830381865afa158015611935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119599190614b13565b6119a55760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f776044820152606401610c5a565b336000908152600860209081526040808320600201546003548251627a9fd960e91b815292519194936001600160a01b039091169263f53fb20092600480830193928290030181865afa158015611a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a249190614b35565b600354604051631665744b60e11b81523360048201529192506000916001600160a01b0390911690632ccae89690602401606060405180830381865afa158015611a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a969190614a43565b505090508184670de0b6b3a7640000611aaf9190614a9a565b611ab99190614ab1565b611ac38285614a87565b1015611b115760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f77006044820152606401610c5a565b6003546040516323de6d9560e11b8152336004820152602481018690526001600160a01b03909116906347bcdb2a90604401600060405180830381600087803b158015611b5d57600080fd5b505af1158015611b71573d6000803e3d6000fd5b50503360008181526008602090815260409182902042905560035491518981526001600160a01b0390921694509192507f940a14c75c418e7230a2e65567722d2dda5a6713cf71b369bd0fa219fdc1ac5e910160405180910390a3505050610f01613b90565b611bdf613a4a565b611be7613a19565b600154600160a01b900460ff1615611c115760405162461bcd60e51b8152600401610c5a906149dd565b6000546001600160a01b0316611c395760405162461bcd60e51b8152600401610c5a90614ae6565b611c4233613a94565b60045433600090815260086020526040812054909190611c629042614a87565b60035460008054604051633613302f60e01b81523360048201526001600160a01b0391821660248201529490931160448501819052945092911690633613302f906064016020604051808303816000875af1158015611cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce99190614b35565b60015460405163fb6cb84760e01b81526004810183905260006024820181905260448201529192506001600160a01b03169063fb6cb84790606401600060405180830381600087803b158015611d3e57600080fd5b505af1158015611d52573d6000803e3d6000fd5b50506000805460405163ed59344b60e01b8152336004820152602481018690526060604482015260648101929092526001600160a01b0316925063ed59344b9150608401600060405180830381600087803b158015611db057600080fd5b505af1158015611dc4573d6000803e3d6000fd5b505033600081815260086020908152604080832060028101849055600101839055915491518681526001600160a01b0390921694509192507ff0fee1f70845d356d6a3e0baa0944ce846437b6469ea89416dad2cd7067919a4910160405180910390a35050611e31613b90565b565b6000918252600080516020614cab833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806000806000600360009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eea9190614b35565b600354604051631665744b60e11b81526001600160a01b038981166004830152929350911690632ccae89690602401606060405180830381865afa158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a9190614a43565b9196509093509150670de0b6b3a7640000611f758287614a9a565b611f7f9190614ab1565b9350509193509193565b600080516020614d0b833981519152611fa1816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b83398151915290421015611fed5760405162461bcd60e51b8152600401610c5a906149a8565b6000831161203d5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c756500000000006044820152606401610c5a565b6003546040516324edae1b60e21b8152600481018590526001600160a01b03909116906393b6b86c90602401600060405180830381600087803b15801561208357600080fd5b505af1158015612097573d6000803e3d6000fd5b50506040518581523092507f353ac2778fe09bc60cf3070bb11d548faf4037e4217a06977c16463087474aab9150602001610e16565b6003546040805163e95aa8d360e01b815290516000926001600160a01b03169163e95aa8d39160048083019260209291908290030181865afa158015612117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213b9190614b35565b905090565b600080516020614d0b833981519152612158816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b833981519152904210156121a45760405162461bcd60e51b8152600401610c5a906149a8565b610c6b613d6f565b600080516020614d0b8339815191526121c4816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b833981519152904210156122105760405162461bcd60e51b8152600401610c5a906149a8565b600083116122605760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d65006044820152606401610c5a565b600483905560405183815230907f2c2c43c64e937ae35257af782c222986dc5adb4f56dc0881594e79bf83658d8c90602001610e16565b61229f613a4a565b600080516020614d0b8339815191526122b7816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b833981519152904210156123035760405162461bcd60e51b8152600401610c5a906149a8565b6001600160a01b0384166123595760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a20726577617264657220666163746f7279206e6f2065786973746044820152606401610c5a565b6001600160a01b0385166123af5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206f70657261746f722061646472657373000000006044820152606401610c5a565b6040516369ee745160e01b81526001600160a01b03868116600483015284811660248301523060448301528516906369ee7451906064016020604051808303816000875af1158015612405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124299190614b4e565b600280546001600160a01b0319166001600160a01b0392831690811790915560405191851682529030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b9060200160405180910390a350506111f9613b90565b6001600160a01b038082166000908152600860209081526040808320600201546003548251627a9fd960e91b81529251949591948694919092169263f53fb20092600480830193928290030181865afa1580156124eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250f9190614b35565b9050670de0b6b3a76400006125248284614a9a565b61252e9190614ab1565b925050915091565b600080516020614d0b83398151915261254e816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b8339815191529042101561259a5760405162461bcd60e51b8152600401610c5a906149a8565b6001600160a01b0383166125c05760405162461bcd60e51b8152600401610c5a90614ae6565b600180546001600160a01b0319166001600160a01b03851690811790915560405130907fdf8e7a62b39a2ec070924d5c5dce9a1957d75476af59af5a7e7ce2ee48bc777490600090a3505050565b612616613a4a565b600080516020614d0b83398151915261262e816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b8339815191529042101561267a5760405162461bcd60e51b8152600401610c5a906149a8565b6001600160a01b0386166126d05760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a207a65726f20666163746f7279206164647265737300000000006044820152606401610c5a565b604051630d98e31f60e01b81526001600160a01b03871690630d98e31f90612706908d908d908d908d9030908d90600401614b94565b6020604051808303816000875af1158015612725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127499190614b4e565b600380546001600160a01b0319166001600160a01b03928316179055436009556000600a55600b859055600154604051633f14eb6160e11b8152306004820152878316602482015260448101869052911690637e29d6c290606401600060405180830381600087803b1580156127be57600080fd5b505af11580156127d2573d6000803e3d6000fd5b50506003546040516001600160a01b0390911692503091507f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd5838021790600090a3505061281a613b90565b5050505050505050565b600080516020614d0b83398151915261283c816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b833981519152904210156128885760405162461bcd60e51b8152600401610c5a906149a8565b6001600160a01b0385811660008181526008602052604090819020600281018890556001018690556003549051637e348b7d60e01b815260048101929092526024820187905290911690637e348b7d90604401600060405180830381600087803b1580156128f557600080fd5b505af1158015612909573d6000803e3d6000fd5b50506040518681526001600160a01b03881692503091507f465dd1981de2fdd0163048712ba5bbf7ff0ff09e5f6bd26f566a19079909594a9060200160405180910390a35050505050565b61295d826112c5565b612966816139b5565b6129708383613c5b565b50505050565b61297e613a4a565b612986613a19565b600154600160a81b900460ff166129ef5760405162461bcd60e51b815260206004820152602760248201527f556e6f72653a20656d657267656e63795769746864726177206973206e6f7420604482015266185b1b1bddd95960ca1b6064820152608401610c5a565b3360009081526008602090815260409182902082516080810184528154815260018201549281019290925260028101549282018390526003015460ff16151560608201529080612a815760405162461bcd60e51b815260206004820152601760248201527f556e6f72653a205a65726f207573657220616d6f756e740000000000000000006044820152606401610c5a565b336000818152600860205260408082208281556001810183905560028101929092556003918201805460ff19169055905490516395ccea6760e01b81526004810192909252602482018390526001600160a01b0316906395ccea67906044016020604051808303816000875af1158015612aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b239190614b13565b5060405181815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695906020015b60405180910390a25050611e31613b90565b6000600080516020614d0b833981519152612b7e816139b5565b600154604051638be5a39f60e01b8152600481018590526001600160a01b0390911690638be5a39f90602401600060405180830381600087803b158015612bc457600080fd5b505af1158015612bd8573d6000803e3d6000fd5b5060019695505050505050565b600080516020614d0b833981519152612bfd816139b5565b336000908152600080516020614c8b8339815191526020526040902054600080516020614d0b83398151915290421015612c495760405162461bcd60e51b8152600401610c5a906149a8565b612c51613a19565b600154600160a01b900460ff1615612c7b5760405162461bcd60e51b8152600401610c5a906149dd565b6001600160a01b038316612ca15760405162461bcd60e51b8152600401610c5a90614ae6565b600454612cae9042614ad3565b60008581526006602090815260408083206001600160a01b0388168452909152902055612cdb8484613bb6565b506040518481526001600160a01b0384169030907faa08bed1c8e2500452096c9af125a3944be2a139782a1853abaef7a74bd7dd519060200160405180910390a350505050565b600080600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9c9190614b35565b600a546009549192509043118015612db357508115155b15612e0957600954600090612dc89043614a87565b600b54909150600090612ddb9083614a9a565b905083612df0670de0b6b3a764000083614a9a565b612dfa9190614ab1565b612e049084614ad3565b925050505b6001600160a01b03841660009081526008602052604090206002810154600190910154670de0b6b3a7640000612e3f8484614a9a565b612e499190614ab1565b612e539190614a87565b95945050505050565b612e64613a4a565b612e6c613a19565b600154600160a01b900460ff1615612e965760405162461bcd60e51b8152600401610c5a906149dd565b600354604051635d2cd2a760e01b815233600482015260009182916001600160a01b0390911690635d2cd2a79060240160408051808303816000875af1158015612ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f089190614be2565b604080518381526020810183905292945090925033917f09c6481cb228ea7f61ceb67c8e708038eb74bbb68cfcc54a9cfca199087ecfb79101612b52565b600954431115611e3157600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015612f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbe9190614b35565b9050801561301b57600954600090612fd69043614a87565b600b54909150600090612fe99083614a9a565b905082612ffe670de0b6b3a764000083614a9a565b6130089190614ab1565b600a546130159190614ad3565b600a5550505b436009819055600a5460408051928352602083018490528201527f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f7853906060015b60405180910390a150565b61306e613a19565b600154600160a01b900460ff16156130985760405162461bcd60e51b8152600401610c5a906149dd565b6005544210156130ba5760405162461bcd60e51b8152600401610c5a90614a0c565b6130c2613a4a565b6130cb81613db8565b6130d58133613ed1565b6003546040518281526001600160a01b039091169033907fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f9060200160405180910390a3610f01613b90565b6005544210156131435760405162461bcd60e51b8152600401610c5a90614a0c565b61314b613a19565b613153613a4a565b600081116131b75760405162461bcd60e51b815260206004820152602b60248201527f576974686472617720616d6f756e742073686f756c642062652067726561746f60448201526a72207468616e207a65726f60a81b6064820152608401610c5a565b600454336000908152600860205260409020546131d49042614a87565b10156132175760405162461bcd60e51b8152602060048201526012602482015271556e6f52653a204c6f636b65642074696d6560701b6044820152606401610c5a565b61322033613a94565b33600081815260086020526040808220600201546003549151636ce40c7960e01b81526004810194909452602484018590529282916001600160a01b031690636ce40c799060440160408051808303816000875af1158015613286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132aa9190614be2565b600154604051632da26abb60e11b8152600481018390529294509092506001600160a01b031690635b44d57690602401600060405180830381600087803b1580156132f457600080fd5b505af1158015613308573d6000803e3d6000fd5b5050600a5460009250670de0b6b3a764000091506133269086614a9a565b6133309190614ab1565b600a54909150670de0b6b3a76400009061334a9085614a9a565b6133549190614ab1565b61335e9082614a87565b3360009081526008602052604090206001015561337b8385614a87565b336000818152600860209081526040918290206002019390935560035481518781529384018690526001600160a01b0316927fced2424eb51507abd1611ac0d9893e5bc6b6d0a0596b53f86d24d31fc75a5d60910160405180910390a350505050610f01613b90565b6005544210156134065760405162461bcd60e51b8152600401610c5a90614a0c565b61340e613a19565b600154600160a01b900460ff16156134385760405162461bcd60e51b8152600401610c5a906149dd565b7f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b613462816139b5565b61346a613a4a565b600260009054906101000a90046001600160a01b03166001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e19190614b4e565b6001600160a01b0316600360009054906101000a90046001600160a01b03166001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561353d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135619190614b4e565b6001600160a01b0316146135b75760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a2063757272656e6379206e6f74206d61746368656400000000006044820152606401610c5a565b6135bf612f46565b60008060005b84518110156136ca57600860008683815181106135e4576135e4614c06565b6020908102919091018101516001600160a01b031682528101919091526040016000206003015460ff161561365b5760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a20726f6c6c6f766572206973206e6f74207365740000000000006044820152606401610c5a565b60008061368087848151811061367357613673614c06565b602002602001015161415c565b909250905061368f8286614ad3565b945061369b8185614ad3565b93506136c0828885815181106136b3576136b3614c06565b6020026020010151613ed1565b50506001016135c5565b506002546001600160a01b0316158015906136e457508115155b80156136f05750600081115b1561377757600254600354604051631963b13960e21b81526001600160a01b039182166004820152602481018590526044810184905291169063658ec4e4906064016020604051808303816000875af1158015613751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137759190614b35565b505b6003546040516001600160a01b0390911690613794908690614c1c565b604051908190038120848252907f2b1ab5aad08854cca1e3b3cd94bbb4acc5cf06bd794383289c30ae264d03121d9060200160405180910390a35050610c6b613b90565b6137e0613a19565b600154600160a01b900460ff161561380a5760405162461bcd60e51b8152600401610c5a906149dd565b600080516020614ccb833981519152613822816139b5565b3360009081527f91a0c6d16784d279cd653f0105de5bc1074659b9682f36410ea0c34f270c6e746020526040902054600080516020614ccb833981519152904210156138805760405162461bcd60e51b8152600401610c5a906149a8565b60035460405163172500a160e11b81526001600160a01b038681166004830152602482018690526000921690632e4a0142906044016020604051808303816000875af11580156138d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f89190614b35565b6001805460405163fb6cb84760e01b815260048101849052602481018a905260448101929092529192506001600160a01b039091169063fb6cb84790606401600060405180830381600087803b15801561395157600080fd5b505af1158015613965573d6000803e3d6000fd5b50505050846001600160a01b0316867fa57c8f00bb515630e1e4af145f087299b8d5ac5d871605bb0a9c0479b7b2d65b866040516139a591815260200190565b60405180910390a3505050505050565b610f01813361427a565b6139c76142b3565b600080516020614ceb833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200161305b565b600080516020614ceb8339815191525460ff1615611e315760405163d93c066560e01b815260040160405180910390fd5b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901613a8e57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b613a9c612f46565b600080613aa88361415c565b60025491935091506001600160a01b031615801590613ac657508115155b15613b4b57600254604051631963b13960e21b81526001600160a01b03858116600483015260248201859052604482018490529091169063658ec4e4906064016020604051808303816000875af1158015613b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b499190614b35565b505b6040518281526001600160a01b0384169033907fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec267979060200160405180910390a3505050565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6000600080516020614cab833981519152613bd18484611e33565b613c51576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055613c073390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610bf0565b6000915050610bf0565b600154600090600160a01b900460ff1615613c885760405162461bcd60e51b8152600401610c5a906149dd565b613c90613a19565b613c99836112c5565b6000818152600660209081526040808320338452909152902054421015613cd25760405162461bcd60e51b8152600401610c5a906149a8565b613cdc84846142e3565b949350505050565b613cec61435f565b611e316143a8565b613cfc61435f565b611e316143b0565b611e3161435f565b600080516020614cab8339815191526000613d26846112c5565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b613d77613a19565b600080516020614ceb833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833613a01565b6003546040805163e5a6b10f60e01b815290516000926001600160a01b03169163e5a6b10f9160048083019260209291908290030181865afa158015613e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e269190614b4e565b90506001600160a01b038116613eb75781341015613e865760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a20696e73756666696369656e74207061696400000000000000006044820152606401610c5a565b81341115613ea157613ea133613e9c8434614a87565b6143d1565b600354610c6b906001600160a01b0316836143d1565b600354610c6b90829033906001600160a01b0316856144ab565b81600003613f155760405162461bcd60e51b8152602060048201526011602482015270556e6f52653a205a45524f2056616c756560781b6044820152606401610c5a565b613f1d612f46565b60035460408051627a9fd960e91b815290516000926001600160a01b03169163f53fb2009160048083019260209291908290030181865afa158015613f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8a9190614b35565b600354604051637e348b7d60e01b81526001600160a01b03858116600483015260248201879052929350911690637e348b7d90604401600060405180830381600087803b158015613fda57600080fd5b505af1158015613fee573d6000803e3d6000fd5b505050506001600160a01b03821660009081526008602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff1615156060820152600a54670de0b6b3a764000090839061405b8784614a9a565b6140659190614a9a565b61406f9190614ab1565b6140799190614ab1565b81602001516140889190614ad3565b6020820152816140a085670de0b6b3a7640000614a9a565b6140aa9190614ab1565b81604001516140b99190614ad3565b60408281019182526001600160a01b038581166000908152600860209081529083902085518155908501516001808301919091559351600282015560608501516003909101805460ff191691151591909117905591549051638be5a39f60e01b815260048101879052911690638be5a39f90602401600060405180830381600087803b15801561414857600080fd5b505af115801561281a573d6000803e3d6000fd5b600354604051631665744b60e11b81526001600160a01b0383811660048301526000928392839290911690632ccae89690602401606060405180830381865afa1580156141ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d19190614a43565b5091505080156141e75750600093849350915050565b6001600160a01b038416600090815260086020526040812060020154600a54909190670de0b6b3a76400009061421d9084614a9a565b6142279190614ab1565b6001600160a01b038716600090815260086020526040812060010154919250906142519083614a87565b6001600160a01b0390971660009081526008602052604090206001019190915550939492505050565b6142848282611e33565b610c6b5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610c5a565b600080516020614ceb8339815191525460ff16611e3157604051638dfc202b60e01b815260040160405180910390fd5b6000600080516020614cab8339815191526142fe8484611e33565b15613c51576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610bf0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611e3157604051631afcd79f60e31b815260040160405180910390fd5b613b9061435f565b6143b861435f565b600080516020614ceb833981519152805460ff19169055565b604080516000808252602082019092526001600160a01b0384169083906040516143fb9190614c5b565b60006040518083038185875af1925050503d8060008114614438576040519150601f19603f3d011682016040523d82523d6000602084013e61443d565b606091505b50509050806111f95760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610c5a565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161450f9190614c5b565b6000604051808303816000865af19150503d806000811461454c576040519150601f19603f3d011682016040523d82523d6000602084013e614551565b606091505b509150915081801561457b57508051158061457b57508080602001905181019061457b9190614b13565b6145e15760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610c5a565b505050505050565b6000602082840312156145fb57600080fd5b81356001600160e01b03198116811461461357600080fd5b9392505050565b60006020828403121561462c57600080fd5b5035919050565b6000806040838503121561464657600080fd5b50508035926020909101359150565b6001600160a01b0381168114610f0157600080fd5b803561467581614655565b919050565b60006020828403121561468c57600080fd5b813561461381614655565b6000806000606084860312156146ac57600080fd5b83356146b781614655565b925060208401356146c781614655565b929592945050506040919091013590565b600080604083850312156146eb57600080fd5b8235915060208301356146fd81614655565b809150509250929050565b6000806040838503121561471b57600080fd5b823561472681614655565b915060208301356146fd81614655565b60008060006060848603121561474b57600080fd5b833561475681614655565b9250602084013561476681614655565b9150604084013561477681614655565b809150509250925092565b60008083601f84011261479357600080fd5b50813567ffffffffffffffff8111156147ab57600080fd5b6020830191508360208285010111156147c357600080fd5b9250929050565b60008060008060008060008060c0898b0312156147e657600080fd5b883567ffffffffffffffff808211156147fe57600080fd5b61480a8c838d01614781565b909a50985060208b013591508082111561482357600080fd5b506148308b828c01614781565b909750955050604089013561484481614655565b9350606089013561485481614655565b979a969950949793969295929450505060808201359160a0013590565b60008060006060848603121561488657600080fd5b833561489181614655565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156148cf57600080fd5b823567ffffffffffffffff808211156148e757600080fd5b818501915085601f8301126148fb57600080fd5b81358181111561490d5761490d6148a6565b8060051b604051601f19603f83011681018181108582111715614932576149326148a6565b60405291825284820192508381018501918883111561495057600080fd5b938501935b82851015614975576149668561466a565b84529385019392850192614955565b98975050505050505050565b60008060006060848603121561499657600080fd5b8335925060208401356146c781614655565b6020808252818101527f556e6f52653a20726f6c6c206c6f636b2074696d65206e6f7420706173736564604082015260600190565b602080825260159082015274155b9bd4994e881c1bdbdb081a5cc81ada5b1b1959605a1b604082015260600190565b60208082526019908201527f556e6f52653a206e6f7420617661696c61626c652074696d6500000000000000604082015260600190565b600080600060608486031215614a5857600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b81810381811115610bf057610bf0614a71565b8082028115828204841417610bf057610bf0614a71565b600082614ace57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610bf057610bf0614a71565b602080825260139082015272556e6f52653a207a65726f206164647265737360681b604082015260600190565b600060208284031215614b2557600080fd5b8151801515811461461357600080fd5b600060208284031215614b4757600080fd5b5051919050565b600060208284031215614b6057600080fd5b815161461381614655565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b608081526000614ba860808301888a614b6b565b8281036020840152614bbb818789614b6b565b6001600160a01b039586166040850152939094166060909201919091525095945050505050565b60008060408385031215614bf557600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b815160009082906020808601845b83811015614c4f5781516001600160a01b031685529382019390820190600101614c2a565b50929695505050505050565b6000825160005b81811015614c7c5760208186018101518583015201614c62565b50600092019182525091905056fe0c3bb05773fb95f6688e1e7d9c896674dccd66884026cf30a3d5e3a9bfecd81102dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268003b745c09aefb8f732a168ec71c3c87b50c0a4cfd1d104649ae3c04a4623b26bfcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b3b031af2aa4d61ffcf42c8e3cb42b3d71ce1f00be26afe3171e54007082e61464736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "cancelWithdrawRequest()": {
        "details": "user can cancel its pending withdraw request"
      },
      "createRewarder(address,address,address)": {
        "details": "create rewarder with UNO token"
      },
      "createRiskPool(string,string,address,address,uint256,uint256)": {
        "details": "create Risk pool with UNO from SSIP owner"
      },
      "enterInPool(uint256)": {
        "details": "stake user collateral, update user reward per block",
        "params": {
          "_amount": "amount to deposit to pool"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getStakedAmountPerUser(address)": {
        "details": "return user staked currency corresponding to current lp price of uno"
      },
      "getTotalWithdrawPendingAmount()": {
        "details": "get total withdraw request amount in pending for the risk pool in UNO"
      },
      "getWithdrawRequestPerUser(address)": {
        "details": "get withdraw request amount in pending per user in UNO"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "harvest(address)": {
        "details": "withdraw user pending uno",
        "params": {
          "_to": "user address"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "killPool()": {
        "details": "kill pool to restrict pool functionality, can only by called by admin role"
      },
      "leaveFromPending(uint256)": {
        "details": "user can submit claim again and receive his funds into his wallet after 10 days since last WR."
      },
      "leaveFromPoolInPending(uint256)": {
        "details": "WR will be in pending for 10 days at least"
      },
      "migrate()": {
        "details": "migrate user to new version"
      },
      "pausePool()": {
        "details": "pause pool to restrict pool functionality, can only by called by admin role"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingUno(address)": {
        "details": "return pending uno to claim of `_to` address"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revivePool()": {
        "details": "revive pool, can only by called by admin role"
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "rollOverReward(address[])": {
        "details": "user roll over its pending uno to stake"
      },
      "setCapitalAgent(address)": {
        "details": "set new capital agent, can only by called by admin role",
        "params": {
          "_capitalAgent": "new capital agent address"
        }
      },
      "setLockTime(uint256)": {
        "details": "lock time, only admin role call this function"
      },
      "setMigrateTo(address)": {
        "details": "set migrate address, can only by called by admin role",
        "params": {
          "_migrateTo": "new migrate address"
        }
      },
      "setMinLPCapital(uint256)": {
        "details": "update min lp capital, only admin role call this function"
      },
      "setRewardMultiplier(uint256)": {
        "details": "update reward muiltiplier, can only by called by admin role",
        "params": {
          "_rewardMultiplier": "value to set"
        }
      },
      "setStakingStartTime(uint256)": {
        "details": "set staking start time, only admin role call this function"
      },
      "settlePayout(uint256,address,uint256)": {
        "details": "claim policy to payout, can only be called by claim processor role"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "toggleEmergencyWithdraw()": {
        "details": "toggle emergency withdraw bool to restrict or use this emergency withdraw, only admin role call this function"
      },
      "toggleRollOver()": {
        "details": "user can toggle its roll over bool"
      },
      "unpausePool()": {
        "details": "unpause pool, can only by called by admin role"
      },
      "updatePool()": {
        "details": "update pool last reward and accumulated uno per share, update every time when use enter, withdraw from pool"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2896,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "migrateTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2898,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "capitalAgent",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2900,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "killed",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2902,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "emergencyWithdrawAllowed",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2904,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "rewarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2907,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "riskPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2909,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "lockTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2911,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "stakingStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2940,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "roleLockTime",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2945,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "policies",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Policy)2934_storage)"
      },
      {
        "astId": 2950,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserInfo)2927_storage)"
      },
      {
        "astId": 2953,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(PoolInfo)2918_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)2927_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SingleSidedInsurancePool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2927_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Policy)2934_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SingleSidedInsurancePool.Policy)",
        "numberOfBytes": "32",
        "value": "t_struct(Policy)2934_storage"
      },
      "t_struct(Policy)2934_storage": {
        "encoding": "inplace",
        "label": "struct SingleSidedInsurancePool.Policy",
        "members": [
          {
            "astId": 2929,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "insuranceAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2931,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "payoutAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2933,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "settled",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)2918_storage": {
        "encoding": "inplace",
        "label": "struct SingleSidedInsurancePool.PoolInfo",
        "members": [
          {
            "astId": 2913,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2915,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "accUnoPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2917,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "unoMultiplierPerBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)2927_storage": {
        "encoding": "inplace",
        "label": "struct SingleSidedInsurancePool.UserInfo",
        "members": [
          {
            "astId": 2920,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "lastWithdrawTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2922,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2924,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2926,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "isNotRollOver",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}