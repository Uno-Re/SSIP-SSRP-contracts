{
  "address": "0x4Aa3aEb01D5a0365971B01BA54E91A02192BfB34",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uno_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "LogSetPremiumPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_mcr",
          "type": "uint256"
        }
      ],
      "name": "LogSetProtocolMCR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_salesPolicy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        }
      ],
      "name": "ProtocolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UNO_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_productType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_premiumDescription",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_coverDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_protocolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolCurrency",
          "type": "address"
        }
      ],
      "name": "addProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allProtocolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        }
      ],
      "name": "approvePremiumInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "getProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mcr",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolCurrency",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "productType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "premiumDescription",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "salesPolicy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        }
      ],
      "name": "getProtocolData",
      "outputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "productType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_maxDeadline",
          "type": "uint256"
        }
      ],
      "name": "setBuyPolicyMaxDeadlineInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgentInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "setPremiumPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "setPremiumPoolInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_mcr",
          "type": "uint256"
        }
      ],
      "name": "setProtocolMCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setProtocolURIInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf8df8b0b0e11bb8b3d88faf8f689807575833e6ebd213146d3deebfda46b8d2",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0x4Aa3aEb01D5a0365971B01BA54E91A02192BfB34",
    "transactionIndex": 1,
    "gasUsed": "4564889",
    "logsBloom": "0x
    "blockHash": "0x27e880e0c0f6b3848a9b79fbd65584d4b81e01ed4c74e35ea1b4db4b0c65104d",
    "transactionHash": "0xaf8df8b0b0e11bb8b3d88faf8f689807575833e6ebd213146d3deebfda46b8d2",
    "logs": [],
    "blockNumber": 9870445,
    "cumulativeGasUsed": "4591566",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "0x40c035016AD732b6cFce34c3F881040B6C6cf71E",
    "0x53fb43BaE4C13d6AFAD37fB37c3fC49f3Af433F5",
    "0xf97Eb2a102Ba485020c9d2EA0ac4BAAC19092Ee9",
    "0x3fCDBcbBb567d7A326b133439A938cC052FAdf1c",
    "0x5371d874949DcdD3f2F6Cd0852a88140F77BfcEF"
  ],
  "solcInputHash": "850ee7ecdab72c01fbce930f264cd00b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uno_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"LogSetPremiumPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mcr\",\"type\":\"uint256\"}],\"name\":\"LogSetProtocolMCR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_salesPolicy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"}],\"name\":\"ProtocolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNO_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_productType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_premiumDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_coverDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_protocolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolCurrency\",\"type\":\"address\"}],\"name\":\"addProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allProtocolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"}],\"name\":\"approvePremiumInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"getProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolCurrency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"productType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"premiumDescription\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"salesPolicy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"}],\"name\":\"getProtocolData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"productType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeadline\",\"type\":\"uint256\"}],\"name\":\"setBuyPolicyMaxDeadlineInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgentInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"setPremiumPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"setPremiumPoolInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_mcr\",\"type\":\"uint256\"}],\"name\":\"setProtocolMCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setProtocolURIInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/SalesPolicyFactory.sol\":\"SalesPolicyFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/EIP712MetaTransaction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/EIP712Base.sol\\\";\\n\\ncontract EIP712MetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\n        keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n    mapping(address => uint256) private nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    constructor(string memory name, string memory version) EIP712Base(name, version) {}\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 32))\\n        }\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\\n        require(destinationFunctionSig != msg.sig, \\\"functionSignature can not be of executeMetaTransaction method\\\");\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n        // Append userAddress at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n\\n        require(success, \\\"Function call not successful\\\");\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature)));\\n    }\\n\\n    function getNonce(address user) external view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address user,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        address signer = ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n        require(signer != address(0), \\\"Invalid signature\\\");\\n        return signer == user;\\n    }\\n\\n    function msgSender() internal view returns (address sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\",\"keccak256\":\"0xb7061cf29e0b88fe896e858e0c8bcd6bdc5c6112b6092e2cc81a3d34ae25c73d\",\"license\":\"MIT\"},\"contracts/SalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/ICapitalAgent.sol\\\";\\nimport \\\"./interfaces/ISingleSidedReinsurancePool.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./interfaces/IPremiumPool.sol\\\";\\nimport \\\"./interfaces/ISalesPolicy.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./EIP712MetaTransaction.sol\\\";\\n\\ncontract SalesPolicy is EIP712MetaTransaction(\\\"BuyPolicyMetaTransaction\\\", \\\"1\\\"), ERC721, ISalesPolicy, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n\\n    address public immutable factory;\\n    struct Policy {\\n        uint256 coverStartAt;\\n        uint256 coverageDuration;\\n        uint256 coverageAmount;\\n        uint256 policyPriceInUSDC;\\n        uint256 premiumPaid;\\n        address premiumCurrency;\\n        bool exist;\\n        bool expired;\\n    }\\n\\n    uint256 public maxDeadline;\\n    uint16 public protocolIdx;\\n    address private exchangeAgent;\\n    address public premiumPool;\\n    address public capitalAgent;\\n    address private immutable UNORE_TOKEN; // 0x474021845C4643113458ea4414bdb7fB74A01A77\\n    address public immutable USDC_TOKEN; //\\n\\n    string private protocolURI;\\n\\n    Counters.Counter private policyIdx;\\n\\n    mapping(uint256 => Policy) public getPolicy;\\n\\n    uint256 private MAX_INTEGER = type(uint256).max;\\n\\n    event BuyPolicy(\\n        uint256 indexed _protocolIdx,\\n        uint256 indexed _policyIdx,\\n        address _owner,\\n        uint256 _coverageAmount,\\n        uint256 _policyPriceInUSDC,\\n        address _premiumCurrency,\\n        uint256 _premiumPaid\\n    );\\n    event LogSetExchangeAgentInPolicy(address indexed _exchangeAgent, address indexed _policyAddress, uint16 _protocolIdx);\\n    event LogSetPremiumPoolInPolicy(address indexed _premiumPool, address indexed _policyAddress, uint16 _protocolIdx);\\n    event LogSetProtocolURIInPolicy(uint16 _protocolIdx, address indexed _policyAddress, string _uri);\\n    event LogSetBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline, address indexed _policyAddress, uint16 _protocolIdx);\\n    event LogapprovePremiumIInPolicy(\\n        uint16 _protocolIdx,\\n        address indexed _policyAddress,\\n        address indexed _premiumCurrency,\\n        address premiumPool\\n    );\\n\\n    constructor(\\n        address _factory,\\n        address _exchangeAgent,\\n        address _premiumPool,\\n        address _capitalAgent,\\n        address _unoToken,\\n        address _usdcToken,\\n        string memory _protocolURI,\\n        uint16 _protocolIdx\\n    ) ERC721(\\\"Policy insurance\\\", \\\"Policy insurance\\\") {\\n        factory = _factory;\\n        protocolIdx = _protocolIdx;\\n        exchangeAgent = _exchangeAgent;\\n        capitalAgent = _capitalAgent;\\n        UNORE_TOKEN = _unoToken;\\n        USDC_TOKEN = _usdcToken;\\n        premiumPool = _premiumPool;\\n        maxDeadline = 7 days;\\n        protocolURI = _protocolURI;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msgSender() == factory, \\\"UnoRe: SalesPolicy Forbidden\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function buyPolicy(\\n        uint256 _coverageAmount,\\n        uint256 _coverageDuration,\\n        uint256 _policyPriceInUSDC,\\n        uint256 _signedTime,\\n        address _premiumCurrency\\n    ) external payable nonReentrant {\\n        require(_signedTime <= block.timestamp && block.timestamp - _signedTime < maxDeadline, \\\"UnoRe: signature expired\\\");\\n\\n        uint256 lastIdx = policyIdx.current();\\n\\n        uint256 premiumPaid = 0;\\n        if (_premiumCurrency == address(0)) {\\n            premiumPaid = IExchangeAgent(exchangeAgent).getETHAmountForUSDC(_policyPriceInUSDC);\\n            require(msg.value >= premiumPaid, \\\"UnoRe: insufficient paid\\\");\\n            if (msg.value > premiumPaid) {\\n                TransferHelper.safeTransferETH(msgSender(), msg.value - premiumPaid);\\n            }\\n            TransferHelper.safeTransferETH(premiumPool, premiumPaid);\\n            IPremiumPool(premiumPool).collectPremiumInETH(premiumPaid);\\n        } else if (_premiumCurrency != USDC_TOKEN) {\\n            premiumPaid = IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_premiumCurrency, _policyPriceInUSDC);\\n            TransferHelper.safeTransferFrom(_premiumCurrency, msgSender(), address(this), premiumPaid);\\n            IPremiumPool(premiumPool).collectPremium(_premiumCurrency, premiumPaid);\\n        } else {\\n            premiumPaid = _policyPriceInUSDC;\\n            TransferHelper.safeTransferFrom(_premiumCurrency, msgSender(), address(this), _policyPriceInUSDC);\\n            IPremiumPool(premiumPool).collectPremium(_premiumCurrency, _policyPriceInUSDC);\\n        }\\n\\n        getPolicy[lastIdx] = Policy({\\n            coverageAmount: _coverageAmount,\\n            coverageDuration: _coverageDuration,\\n            coverStartAt: block.timestamp,\\n            policyPriceInUSDC: _policyPriceInUSDC,\\n            premiumPaid: premiumPaid,\\n            premiumCurrency: _premiumCurrency,\\n            exist: true,\\n            expired: false\\n        });\\n\\n        _mint(msgSender(), lastIdx);\\n\\n        ICapitalAgent(capitalAgent).policySale(_coverageAmount);\\n\\n        policyIdx.increment();\\n        emit BuyPolicy(protocolIdx, lastIdx, msgSender(), _coverageAmount, _policyPriceInUSDC, _premiumCurrency, premiumPaid);\\n    }\\n\\n    function approvePremium(address _premiumCurrency) external override onlyFactory {\\n        require(_premiumCurrency != address(0), \\\"UnoRe: zero address\\\");\\n        require(premiumPool != address(0), \\\"UnoRe: not defiend premiumPool\\\");\\n        TransferHelper.safeApprove(_premiumCurrency, premiumPool, MAX_INTEGER);\\n        emit LogapprovePremiumIInPolicy(protocolIdx, address(this), _premiumCurrency, premiumPool);\\n    }\\n\\n    function setProtocolURI(string memory newURI) external override onlyFactory {\\n        protocolURI = newURI;\\n        emit LogSetProtocolURIInPolicy(protocolIdx, address(this), newURI);\\n    }\\n\\n    function setPremiumPool(address _premiumPool) external override onlyFactory {\\n        require(_premiumPool != address(0), \\\"UnoRe: zero address\\\");\\n        premiumPool = _premiumPool;\\n        emit LogSetPremiumPoolInPolicy(_premiumPool, address(this), protocolIdx);\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external override onlyFactory {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit LogSetExchangeAgentInPolicy(_exchangeAgent, address(this), protocolIdx);\\n    }\\n\\n    function setCapitalAgent(address _capitalAgent) external override onlyFactory {\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero address\\\");\\n        capitalAgent = _capitalAgent;\\n        emit LogSetExchangeAgentInPolicy(_capitalAgent, address(this), protocolIdx);\\n    }\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external override onlyFactory {\\n        require(_maxDeadline > 0, \\\"UnoRe: zero max signedTime\\\");\\n        maxDeadline = _maxDeadline;\\n        emit LogSetBuyPolicyMaxDeadlineInPolicy(_maxDeadline, address(this), protocolIdx);\\n    }\\n\\n    function markToClaim(uint256 _policyId) external override nonReentrant {\\n        require(getPolicy[_policyId].exist, \\\"UnoRe: marked to claim already\\\");\\n        getPolicy[_policyId].exist = false;\\n        _burn(_policyId);\\n    }\\n\\n    function updatePolicyExpired(uint256 _policyId) external override nonReentrant {\\n        require(!getPolicy[_policyId].exist, \\\"UnoRe: expired already\\\");\\n        getPolicy[_policyId].expired = true;\\n        _burn(_policyId);\\n    }\\n\\n    function allPoliciesLength() external view override returns (uint256) {\\n        return policyIdx.current();\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return protocolURI;\\n    }\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 coverageAmount = getPolicy[_policyId].coverageAmount;\\n        uint256 coverageDuration = getPolicy[_policyId].coverageDuration;\\n        uint256 coverStartAt = uint256(getPolicy[_policyId].coverStartAt);\\n        uint256 premiumPaid = getPolicy[_policyId].policyPriceInUSDC;\\n        return (coverageAmount, coverageDuration, coverStartAt, premiumPaid);\\n    }\\n}\\n\",\"keccak256\":\"0x045d18c741f19b2344b37780a0749fa418d2278d2495b7eb4f3d3c103b2ed4c6\",\"license\":\"GPL-3.0\"},\"contracts/factories/SalesPolicyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"../SalesPolicy.sol\\\";\\nimport \\\"../interfaces/ISalesPolicy.sol\\\";\\nimport \\\"../interfaces/ISalesPolicyFactory.sol\\\";\\n\\ncontract SalesPolicyFactory is ISalesPolicyFactory, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n    // It should be okay if Protocol is struct\\n    struct Protocol {\\n        uint256 coverDuration; // Duration of the protocol cover products\\n        uint256 mcr; // Maximum Capital Requirement Ratio of that protocol\\n        address protocolAddress; // Address of that protocol\\n        address protocolCurrency;\\n        string name; // protocol name\\n        string productType; // Type of product i.e. Wallet insurance, smart contract bug insurance, etc.\\n        string premiumDescription;\\n        address salesPolicy;\\n        bool exist; // initial true\\n    }\\n\\n    address public premiumPool;\\n    address public owner;\\n    address public exchangeAgent;\\n    address public capitalAgent;\\n\\n    mapping(uint16 => Protocol) public getProtocol;\\n    Counters.Counter private protocolIds;\\n\\n    address public USDT_TOKEN;\\n    address public UNO_TOKEN;\\n\\n    event ProtocolCreated(address indexed _salesPolicy, uint16 _protocolIdx);\\n    event LogSetProtocolMCR(uint16 _protocolIdx, uint256 _mcr);\\n    event LogSetPremiumPool(address indexed _premiumPool);\\n\\n    constructor(\\n        address _owner,\\n        address _usdt_token,\\n        address _uno_token,\\n        address _exchangeAgent,\\n        address _premiumPool,\\n        address _capitalAgent\\n    ) {\\n        USDT_TOKEN = _usdt_token;\\n        UNO_TOKEN = _uno_token;\\n        owner = _owner;\\n        premiumPool = _premiumPool;\\n        exchangeAgent = _exchangeAgent;\\n        capitalAgent = _capitalAgent;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    // This action can be done only by SSIP owner\\n    function addProtocol(\\n        string calldata _name,\\n        string calldata _productType,\\n        string calldata _premiumDescription,\\n        uint256 _coverDuration,\\n        address _protocolAddress,\\n        address _protocolCurrency\\n    ) external onlyOwner nonReentrant {\\n        uint16 lastIdx = uint16(protocolIds.current());\\n        address currency = _protocolCurrency;\\n        address _salesPolicy = newSalesPolicy(lastIdx, exchangeAgent, premiumPool, capitalAgent, \\\"\\\");\\n        ICapitalAgent(capitalAgent).addPolicy(_salesPolicy);\\n\\n        getProtocol[lastIdx] = Protocol({\\n            name: _name,\\n            coverDuration: _coverDuration,\\n            mcr: 1,\\n            protocolAddress: _protocolAddress,\\n            protocolCurrency: currency,\\n            productType: _productType,\\n            premiumDescription: _premiumDescription,\\n            salesPolicy: _salesPolicy,\\n            exist: true\\n        });\\n\\n        protocolIds.increment();\\n        emit ProtocolCreated(_salesPolicy, lastIdx);\\n    }\\n\\n    function newSalesPolicy(\\n        uint16 _protocolIdx,\\n        address _twapPriceFeed,\\n        address _premiumPool,\\n        address _capitalAgent,\\n        string memory _protocolURI\\n    ) private returns (address) {\\n        SalesPolicy _salesPolicy = new SalesPolicy(\\n            address(this),\\n            _twapPriceFeed,\\n            _premiumPool,\\n            _capitalAgent,\\n            UNO_TOKEN,\\n            USDT_TOKEN,\\n            _protocolURI,\\n            _protocolIdx\\n        );\\n        address _salesPolicyAddr = address(_salesPolicy);\\n\\n        return _salesPolicyAddr;\\n    }\\n\\n    function allProtocolsLength() external view returns (uint256) {\\n        return protocolIds.current();\\n    }\\n\\n    function setPremiumPool(address _premiumPool) external onlyOwner {\\n        require(_premiumPool != address(0), \\\"UnoRe: zero address\\\");\\n        premiumPool = _premiumPool;\\n        emit LogSetPremiumPool(_premiumPool);\\n    }\\n\\n    function setExchangeAgentInPolicy(uint16 _protocolIdx, address _exchangeAgent) external onlyOwner {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\\n        ISalesPolicy(salesPolicy).setExchangeAgent(_exchangeAgent);\\n    }\\n\\n    function setBuyPolicyMaxDeadlineInPolicy(uint16 _protocolIdx, uint256 _maxDeadline) external onlyOwner {\\n        require(_maxDeadline > 0, \\\"UnoRe: zero max deadline\\\");\\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\\n        ISalesPolicy(salesPolicy).setBuyPolicyMaxDeadline(_maxDeadline);\\n    }\\n\\n    function setPremiumPoolInPolicy(uint16 _protocolIdx, address _premiumPool) external onlyOwner {\\n        require(_premiumPool != address(0), \\\"UnoRe: zero address\\\");\\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\\n        ISalesPolicy(salesPolicy).setPremiumPool(_premiumPool);\\n    }\\n\\n    function setProtocolMCR(uint16 _protocolIdx, uint256 _mcr) external onlyOwner {\\n        require(_mcr > 0, \\\"UnoRe: zero mcr\\\");\\n        Protocol storage _protocol = getProtocol[_protocolIdx];\\n        _protocol.mcr = _mcr;\\n        emit LogSetProtocolMCR(_protocolIdx, _mcr);\\n    }\\n\\n    function setProtocolURIInPolicy(uint16 _protocolIdx, string memory _uri) external onlyOwner {\\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\\n        ISalesPolicy(salesPolicy).setProtocolURI(_uri);\\n    }\\n\\n    function approvePremiumInPolicy(uint16 _protocolIdx, address _premiumCurrency) external onlyOwner {\\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\\n        ISalesPolicy(salesPolicy).approvePremium(_premiumCurrency);\\n    }\\n\\n    function getProtocolData(uint16 _protocolIdx)\\n        external\\n        view\\n        override\\n        returns (\\n            string memory protocolName,\\n            string memory productType,\\n            address protocolAddress\\n        )\\n    {\\n        return (getProtocol[_protocolIdx].name, getProtocol[_protocolIdx].productType, getProtocol[_protocolIdx].protocolAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xd31fec45fc289c886563bdc51216caa8951ff9fa054a1de6eebc45f01d0ec925\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip) external;\\n\\n    function addPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount) external;\\n\\n    function checkCapitalByMCR(uint256 _withdrawAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(address _policy, uint256 _policyId) external;\\n}\\n\",\"keccak256\":\"0x305864f7d21f12ad8da6f1f8c8632f01ae87d2b283cc85b1326b773b4e7131a2\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IExchangeAgent {\\n    function USDC_TOKEN() external view returns (address);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external view returns (uint256);\\n\\n    function convertForToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xac695d6d1b861eb9f84ac2009f97fd5b00d44500b6735fb9256f1c227323e07e\",\"license\":\"MIT\"},\"contracts/interfaces/IPremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IPremiumPool {\\n    function collectPremium(address _premiumCurrency, uint256 _premiumAmount) external;\\n\\n    function collectPremiumInETH(uint256 _premiumAmount) external payable;\\n\\n    function withdrawPremium(\\n        address _currency,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x36c312b352ca4c6e6e841a0a96ded174df6751c13e3b036365ea3e99a66f182a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISalesPolicy {\\n    function setPremiumPool(address _premiumPool) external;\\n\\n    function setExchangeAgent(address _exchangeAgent) external;\\n\\n    function setCapitalAgent(address _capitalAgent) external;\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\\n\\n    function approvePremium(address _premiumCurrency) external;\\n\\n    function setProtocolURI(string memory newURI) external;\\n\\n    function updatePolicyExpired(uint256 _policyId) external;\\n\\n    function markToClaim(uint256 _policyId) external;\\n\\n    function allPoliciesLength() external view returns (uint256);\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x105ccbe9773d165bfb1baeb2573b8d77b5fb2835480bdcbd128f5a2090dae75e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISalesPolicyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISalesPolicyFactory {\\n    function getProtocolData(uint16 _protocolIdx)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            string memory productType,\\n            address protocolAddress\\n        );\\n\\n    // function newSalesPolicy(\\n    //     uint16 _protocolIdx,\\n    //     address _exchangeAgent,\\n    //     address _premiumPool,\\n    //     address _capitalAgent,\\n    //     string memory _protocolURI\\n    // ) external returns (address);\\n}\\n\",\"keccak256\":\"0xebc93e0caa5e08dd93a472d236c0426925c4fa962426f8b4a218fa54287dab55\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISingleSidedReinsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x049a33080ab7bd863f3bcb8faaf66866fbe2066b3be9c4f5a15558c421e95ce7\",\"license\":\"GPL-3.0\"},\"contracts/libraries/EIP712Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract EIP712Base {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"));\\n\\n    bytes32 internal domainSeparator;\\n\\n    constructor(string memory name, string memory version) {\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                bytes32(getChainID())\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function getDomainSeparator() private view returns (bytes32) {\\n        return domainSeparator;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), messageHash));\\n    }\\n}\\n\",\"keccak256\":\"0x9e2506036e346e52c68a4b64edb25252a40220428362a26cedcac28d8b0aaf08\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200502f3803806200502f8339810160408190526200003491620000cb565b60016000819055600780546001600160a01b03199081166001600160a01b03988916179091556008805482169688169690961790955560028054861697871697909717909655855484169185169190911790945560038054831691841691909117905560048054909116929091169190911790556200014b565b80516001600160a01b0381168114620000c657600080fd5b919050565b60008060008060008060c08789031215620000e4578182fd5b620000ef87620000ae565b9550620000ff60208801620000ae565b94506200010f60408801620000ae565b93506200011f60608801620000ae565b92506200012f60808801620000ae565b91506200013f60a08801620000ae565b90509295509295509295565b614ed4806200015b6000396000f3fe60806040523480156200001157600080fd5b5060043610620001245760003560e01c806377b330c911620000b1578063bbd9d8e1116200007b578063bbd9d8e11462000218578063d2c7c2a41462000240578063d9203b91146200026e578063db5b7c981462000278578063edb13bbb146200028f5762000124565b806377b330c914620001d45780638da5cb5b14620001de578063ab17ef8214620001e8578063b381ff8214620001ff5762000124565b80634219816011620000f35780634219816014620001925780634762dfae146200019c5780634ba69faa14620001b3578063721b70c814620001bd5762000124565b80630ea3b56314620001295780630f97b97b14620001425780631bcc2472146200016457806320f721cd146200017b575b600080fd5b620001406200013a366004620011ff565b620002a6565b005b6200014c6200035b565b6040516200015b919062001279565b60405180910390f35b620001406200017536600462000ffa565b6200036a565b620001406200018c366004620011ff565b6200040a565b6200014c620004dc565b62000140620001ad36600462001108565b620004eb565b6200014c6200058a565b62000140620001ce3660046200113f565b62000599565b6200014c6200060f565b6200014c6200061e565b62000140620001f93660046200101e565b6200062d565b620002096200098a565b6040516200015b919062001484565b6200022f62000229366004620010eb565b6200099d565b6040516200015b939291906200130b565b6200025762000251366004620010eb565b62000b07565b6040516200015b999897969594939291906200148d565b6200014c62000d1d565b620001406200028936600462001108565b62000d2c565b62000140620002a036600462001108565b62000dcb565b6002546001600160a01b03163314620002dc5760405162461bcd60e51b8152600401620002d390620013bc565b60405180910390fd5b60008111620002ff5760405162461bcd60e51b8152600401620002d39062001385565b61ffff8216600090815260056020526040908190206001810183905590517fce9bfac800790847f5a11bfe3df969c5563f99ea96e4544a235410640627154d906200034e908590859062001470565b60405180910390a1505050565b6008546001600160a01b031681565b6002546001600160a01b03163314620003975760405162461bcd60e51b8152600401620002d390620013bc565b6001600160a01b038116620003c05760405162461bcd60e51b8152600401620002d3906200134e565b600180546001600160a01b0319166001600160a01b0383169081179091556040517faa0150507cbcab99f33127173fcbdd580e5710d253406b99952e1feda3cdcc0e90600090a250565b6002546001600160a01b03163314620004375760405162461bcd60e51b8152600401620002d390620013bc565b600081116200045a5760405162461bcd60e51b8152600401620002d390620013f3565b61ffff82166000908152600560205260409081902060070154905163fda2071d60e01b81526001600160a01b0390911690819063fda2071d90620004a390859060040162001484565b600060405180830381600087803b158015620004be57600080fd5b505af1158015620004d3573d6000803e3d6000fd5b50505050505050565b6004546001600160a01b031681565b6002546001600160a01b03163314620005185760405162461bcd60e51b8152600401620002d390620013bc565b6001600160a01b038116620005415760405162461bcd60e51b8152600401620002d3906200134e565b61ffff821660009081526005602052604090819020600701549051630c5006c760e11b81526001600160a01b039091169081906318a00d8e90620004a390859060040162001279565b6001546001600160a01b031681565b6002546001600160a01b03163314620005c65760405162461bcd60e51b8152600401620002d390620013bc565b61ffff8216600090815260056020526040908190206007015490516313b41ce760e31b81526001600160a01b03909116908190639da0e73890620004a3908590600401620012f6565b6007546001600160a01b031681565b6002546001600160a01b031681565b6002546001600160a01b031633146200065a5760405162461bcd60e51b8152600401620002d390620013bc565b60026000541415620006805760405162461bcd60e51b8152600401620002d3906200142a565b6002600090815562000693600662000e41565b60035460015460045460408051602081019091526000808252949550869493620006d19387936001600160a01b039283169391831692169062000e49565b6004805460405163b84ef08160e01b81529293506001600160a01b03169163b84ef08191620007039185910162001279565b600060405180830381600087803b1580156200071e57600080fd5b505af115801562000733573d6000803e3d6000fd5b5050505060405180610120016040528087815260200160018152602001866001600160a01b03168152602001836001600160a01b031681526020018d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8e018190048102820181019092528c815291810191908d908d9081908401838280828437600092019190915250505090825250604080516020601f8c018190048102820181019092528a815291810191908b908b908190840183828082843760009201829052509385525050506001600160a01b038085166020808501919091526001604094850181905261ffff891684526005825292849020855181558582015193810193909355928401516002830180549183166001600160a01b03199283161790556060850151600384018054919093169116179055608083015180519192620008a59260048501929091019062000ed1565b5060a08201518051620008c391600584019160209091019062000ed1565b5060c08201518051620008e191600684019160209091019062000ed1565b5060e082015160079091018054610100909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b0319909416939093179190911691909117905562000934600662000ec8565b806001600160a01b03167fbcf8a46c68576cc4e52eb8fbc678b3ce3adbeadb33126980d791f827ccff4111846040516200096f919062001461565b60405180910390a25050600160005550505050505050505050565b600062000998600662000e41565b905090565b61ffff81166000908152600560208190526040822060028101546004820180546060958695909492939201916001600160a01b0316908390620009e09062001511565b80601f016020809104026020016040519081016040528092919081815260200182805462000a0e9062001511565b801562000a5f5780601f1062000a335761010080835404028352916020019162000a5f565b820191906000526020600020905b81548152906001019060200180831162000a4157829003601f168201915b5050505050925081805462000a749062001511565b80601f016020809104026020016040519081016040528092919081815260200182805462000aa29062001511565b801562000af35780601f1062000ac75761010080835404028352916020019162000af3565b820191906000526020600020905b81548152906001019060200180831162000ad557829003601f168201915b505050505091509250925092509193909250565b60056020526000908152604090208054600182015460028301546003840154600485018054949593946001600160a01b0393841694929093169262000b4c9062001511565b80601f016020809104026020016040519081016040528092919081815260200182805462000b7a9062001511565b801562000bcb5780601f1062000b9f5761010080835404028352916020019162000bcb565b820191906000526020600020905b81548152906001019060200180831162000bad57829003601f168201915b50505050509080600501805462000be29062001511565b80601f016020809104026020016040519081016040528092919081815260200182805462000c109062001511565b801562000c615780601f1062000c355761010080835404028352916020019162000c61565b820191906000526020600020905b81548152906001019060200180831162000c4357829003601f168201915b50505050509080600601805462000c789062001511565b80601f016020809104026020016040519081016040528092919081815260200182805462000ca69062001511565b801562000cf75780601f1062000ccb5761010080835404028352916020019162000cf7565b820191906000526020600020905b81548152906001019060200180831162000cd957829003601f168201915b505050600790930154919250506001600160a01b0381169060ff600160a01b9091041689565b6003546001600160a01b031681565b6002546001600160a01b0316331462000d595760405162461bcd60e51b8152600401620002d390620013bc565b6001600160a01b03811662000d825760405162461bcd60e51b8152600401620002d3906200134e565b61ffff821660009081526005602052604090819020600701549051630de6123960e11b81526001600160a01b03909116908190631bcc247290620004a390859060040162001279565b6002546001600160a01b0316331462000df85760405162461bcd60e51b8152600401620002d390620013bc565b61ffff8216600090815260056020526040908190206007015490516321ecf70160e01b81526001600160a01b039091169081906321ecf70190620004a390859060040162001279565b80545b919050565b60008030868686600860009054906101000a90046001600160a01b0316600760009054906101000a90046001600160a01b0316888d60405162000e8c9062000f60565b62000e9f9897969594939291906200128d565b604051809103906000f08015801562000ebc573d6000803e3d6000fd5b50979650505050505050565b80546001019055565b82805462000edf9062001511565b90600052602060002090601f01602090048101928262000f03576000855562000f4e565b82601f1062000f1e57805160ff191683800117855562000f4e565b8280016001018555821562000f4e579182015b8281111562000f4e57825182559160200191906001019062000f31565b5062000f5c92915062000f6e565b5090565b61393a806200156583390190565b5b8082111562000f5c576000815560010162000f6f565b80356001600160a01b038116811462000e4457600080fd5b60008083601f84011262000faf578081fd5b50813567ffffffffffffffff81111562000fc7578182fd5b60208301915083602082850101111562000fe057600080fd5b9250929050565b803561ffff8116811462000e4457600080fd5b6000602082840312156200100c578081fd5b620010178262000f85565b9392505050565b600080600080600080600080600060c08a8c0312156200103c578485fd5b893567ffffffffffffffff8082111562001054578687fd5b620010628d838e0162000f9d565b909b50995060208c01359150808211156200107b578687fd5b620010898d838e0162000f9d565b909950975060408c0135915080821115620010a2578687fd5b50620010b18c828d0162000f9d565b90965094505060608a01359250620010cc60808b0162000f85565b9150620010dc60a08b0162000f85565b90509295985092959850929598565b600060208284031215620010fd578081fd5b620010178262000fe7565b600080604083850312156200111b578182fd5b620011268362000fe7565b9150620011366020840162000f85565b90509250929050565b6000806040838503121562001152578182fd5b6200115d8362000fe7565b915060208084013567ffffffffffffffff808211156200117b578384fd5b818601915086601f8301126200118f578384fd5b813581811115620011a457620011a46200154e565b604051601f8201601f1916810185018381118282101715620011ca57620011ca6200154e565b6040528181528382018501891015620011e1578586fd5b81858501868301378585838301015280955050505050509250929050565b6000806040838503121562001212578182fd5b6200121d8362000fe7565b946020939093013593505050565b60008151808452815b81811015620012525760208185018101518683018201520162001234565b81811115620012645782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60006101006001600160a01b03808c168452808b166020850152808a1660408501528089166060850152808816608085015280871660a0850152508060c0840152620012dc818401866200122b565b91505061ffff831660e08301529998505050505050505050565b6000602082526200101760208301846200122b565b6000606082526200132060608301866200122b565b82810360208401526200133481866200122b565b9150506001600160a01b0383166040830152949350505050565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252600f908201527f556e6f52653a207a65726f206d63720000000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b60208082526018908201527f556e6f52653a207a65726f206d617820646561646c696e650000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff91909116815260200190565b61ffff929092168252602082015260400190565b90815260200190565b60006101208b83528a60208401526001600160a01b03808b166040850152808a166060850152816080850152620014c78285018a6200122b565b915083820360a0850152620014dd82896200122b565b915083820360c0850152620014f382886200122b565b951660e0840152505090151561010090910152979650505050505050565b6002810460018216806200152657607f821691505b602082108114156200154857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfe60e06040526000196010553480156200001757600080fd5b506040516200393a3803806200393a8339810160408190526200003a916200030c565b6040518060400160405280601081526020016f506f6c69637920696e737572616e636560801b8152506040518060400160405280601081526020016f506f6c69637920696e737572616e636560801b8152506040518060400160405280601881526020017f427579506f6c6963794d6574615472616e73616374696f6e0000000000000000815250604051806040016040528060018152602001603160f81b81525081816040518060800160405280604f8152602001620038eb604f9139805190602001208280519060200120828051906020012030620001206200023260201b60201c565b6040516200013695949392919060200162000461565b60408051601f19818403018152919052805160209182012060005586516200016a9550600294509087019250905062000236565b5080516200018090600390602084019062000236565b5050600160085550606088811b6001600160601b0319908116608052600a805461ffff191661ffff85161762010000600160b01b031916620100006001600160a01b038c81169190910291909117909155600c80546001600160a01b03199081168a84161790915587841b831660a0529286901b90911660c052600b805490921690881617905562093a8060095581516200022390600d90602085019062000236565b505050505050505050620004e0565b4690565b82805462000244906200048d565b90600052602060002090601f016020900481019282620002685760008555620002b3565b82601f106200028357805160ff1916838001178555620002b3565b82800160010185558215620002b3579182015b82811115620002b357825182559160200191906001019062000296565b50620002c1929150620002c5565b5090565b5b80821115620002c15760008155600101620002c6565b80516001600160a01b0381168114620002f457600080fd5b919050565b805161ffff81168114620002f457600080fd5b600080600080600080600080610100898b03121562000329578384fd5b6200033489620002dc565b9750602062000345818b01620002dc565b97506200035560408b01620002dc565b96506200036560608b01620002dc565b95506200037560808b01620002dc565b94506200038560a08b01620002dc565b60c08b01519094506001600160401b0380821115620003a2578485fd5b818c0191508c601f830112620003b6578485fd5b815181811115620003cb57620003cb620004ca565b604051601f8201601f1916810185018381118282101715620003f157620003f1620004ca565b60405281815283820185018f101562000408578687fd5b8692505b818310156200042b57838301850151818401860152918401916200040c565b818311156200043c57868583830101525b80965050505050506200045260e08a01620002f9565b90509295985092959890939650565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b600281046001821680620004a257607f821691505b60208210811415620004c457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c60c05160601c6133a46200054760003960008181610c4001526117770152600050506000818161098a01528181610f60015281816110350152818161136c015281816115b60152818161168b015261179b01526133a46000f3fe6080604052600436106101f25760003560e01c80634d8dbb3c1161010d578063b88d4fde116100a0578063d341960b1161006f578063d341960b14610592578063de4e4201146105a7578063e985e9c5146105bc578063fa569274146105dc578063fda2071d146105f1576101f9565b8063b88d4fde1461051d578063c2eb8eb91461053d578063c45a01551461055d578063c87b56dd14610572576101f9565b806395d89b41116100dc57806395d89b41146104a85780639da0e738146104bd578063a22cb465146104dd578063a5d5e142146104fd576101f9565b80634d8dbb3c146104165780636352211e1461043857806370a08231146104585780637a5402e914610478576101f9565b806321ecf7011161018557806333b3691e1161015457806333b3691e146103ac57806342198160146103cc57806342842e0e146103e15780634ba69faa14610401576101f9565b806321ecf7011461030b57806323b872dd1461032b5780632b07fce31461034b5780632d0335ab1461037f576101f9565b80630c53c51c116101c15780630c53c51c146102a557806318a00d8e146102b85780631a6315bf146102d85780631bcc2472146102eb576101f9565b806301ffc9a7146101fe57806306fdde0314610234578063081812fc14610256578063095ea7b314610283576101f9565b366101f957005b600080fd5b34801561020a57600080fd5b5061021e610219366004612603565b610611565b60405161022b91906128b7565b60405180910390f35b34801561024057600080fd5b50610249610659565b60405161022b9190612904565b34801561026257600080fd5b50610276610271366004612681565b6106ec565b60405161022b91906127c2565b34801561028f57600080fd5b506102a361029e3660046125be565b610738565b005b6102496102b3366004612545565b6107d0565b3480156102c457600080fd5b506102a36102d3366004612422565b610988565b6102a36102e63660046126b1565b610a7c565b3480156102f757600080fd5b506102a3610306366004612422565b610f5e565b34801561031757600080fd5b506102a3610326366004612422565b611033565b34801561033757600080fd5b506102a361034636600461246e565b611143565b34801561035757600080fd5b5061036b610366366004612681565b61117b565b60405161022b9897969594939291906131a6565b34801561038b57600080fd5b5061039f61039a366004612422565b6111cf565b60405161022b9190613170565b3480156103b857600080fd5b506102a36103c7366004612681565b6111ea565b3480156103d857600080fd5b50610276611277565b3480156103ed57600080fd5b506102a36103fc36600461246e565b611286565b34801561040d57600080fd5b506102766112a1565b34801561042257600080fd5b5061042b6112b0565b60405161022b9190613127565b34801561044457600080fd5b50610276610453366004612681565b6112ba565b34801561046457600080fd5b5061039f610473366004612422565b6112ef565b34801561048457600080fd5b50610498610493366004612681565b611333565b60405161022b949392919061318b565b3480156104b457600080fd5b5061024961135b565b3480156104c957600080fd5b506102a36104d836600461263b565b61136a565b3480156104e957600080fd5b506102a36104f836600461250f565b61141b565b34801561050957600080fd5b506102a3610518366004612681565b6114e9565b34801561052957600080fd5b506102a36105383660046124a9565b611575565b34801561054957600080fd5b506102a3610558366004612422565b6115b4565b34801561056957600080fd5b50610276611689565b34801561057e57600080fd5b5061024961058d366004612681565b6116ad565b34801561059e57600080fd5b5061039f611730565b3480156105b357600080fd5b5061039f611741565b3480156105c857600080fd5b5061021e6105d736600461243c565b611747565b3480156105e857600080fd5b50610276611775565b3480156105fd57600080fd5b506102a361060c366004612681565b611799565b60006001600160e01b031982166380ac58cd60e01b148061064257506001600160e01b03198216635b5e139f60e01b145b80610651575061065182611852565b90505b919050565b60606002805461066890613258565b80601f016020809104026020016040519081016040528092919081815260200182805461069490613258565b80156106e15780601f106106b6576101008083540402835291602001916106e1565b820191906000526020600020905b8154815290600101906020018083116106c457829003601f168201915b505050505090505b90565b60006106f78261186b565b61071c5760405162461bcd60e51b815260040161071390612e66565b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610743826112ba565b9050806001600160a01b0316836001600160a01b031614156107775760405162461bcd60e51b81526004016107139061301b565b806001600160a01b0316610789611888565b6001600160a01b031614806107a557506107a5816105d7611888565b6107c15760405162461bcd60e51b815260040161071390612cd3565b6107cb838361188c565b505050565b606060006107dd866118fa565b90506000356001600160e01b0319908116908216141561080f5760405162461bcd60e51b815260040161071390612a50565b604080516060810182526001600160a01b0389166000818152600160209081529084902054835282015290810187905261084c8882888888611916565b6108685760405162461bcd60e51b815260040161071390612efb565b6001600160a01b03881660009081526001602081905260409091205461088d916131e9565b6001600160a01b03891660009081526001602090815260408083209390935591519091829130916108c2918c918e9101612741565b60408051601f19818403018152908290526108dc91612725565b6000604051808303816000865af19150503d8060008114610919576040519150601f19603f3d011682016040523d82523d6000602084013e61091e565b606091505b5091509150816109405760405162461bcd60e51b8152600401610713906129e2565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b604051610973939291906127d6565b60405180910390a19998505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109ba6119c2565b6001600160a01b0316146109e05760405162461bcd60e51b815260040161071390612e2f565b6001600160a01b038116610a065760405162461bcd60e51b8152600401610713906129ab565b600a805475ffffffffffffffffffffffffffffffffffffffff00001916620100006001600160a01b038416908102919091179182905560405130927fc3177381220e3683a27c54985d092dbe1cb47c9120f3053c10284834dfda5f1b91610a719161ffff1690613127565b60405180910390a350565b60026008541415610a9f5760405162461bcd60e51b8152600401610713906130f0565b6002600855428211801590610abe5750600954610abc8342613215565b105b610ada5760405162461bcd60e51b815260040161071390612c9c565b6000610ae6600e611a1e565b905060006001600160a01b038316610c3e57600a5460405163531a221160e01b8152620100009091046001600160a01b03169063531a221190610b2d908890600401613170565b60206040518083038186803b158015610b4557600080fd5b505afa158015610b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7d9190612699565b905080341015610b9f5760405162461bcd60e51b8152600401610713906130b9565b80341115610bc157610bc1610bb26119c2565b610bbc8334613215565b611a22565b600b54610bd7906001600160a01b031682611a22565b600b5460405163d830c71560e01b81526001600160a01b039091169063d830c71590610c07908490600401613170565b600060405180830381600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b50505050610dbf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614610d4557600a5460405163a9a12d4360e01b8152620100009091046001600160a01b03169063a9a12d4390610cae908690899060040161286b565b60206040518083038186803b158015610cc657600080fd5b505afa158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe9190612699565b9050610d1383610d0c6119c2565b3084611aaf565b600b54604051638c8ac76d60e01b81526001600160a01b0390911690638c8ac76d90610c07908690859060040161286b565b5083610d5a83610d536119c2565b3088611aaf565b600b54604051638c8ac76d60e01b81526001600160a01b0390911690638c8ac76d90610d8c908690899060040161286b565b600060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b505050505b604080516101008101825242815260208082018981528284018b8152606084018a8152608085018781526001600160a01b03808b1660a08801908152600160c08901818152600060e08b018181528e8252600f909a529a909a20985189559551958801959095559251600287015590516003860155516004850155905160059093018054945192511515600160a81b0260ff60a81b19931515600160a01b0260ff60a01b19959093166001600160a01b031990961695909517939093161716919091179055610e95610e8f6119c2565b83611b9f565b600c546040516350498d7960e11b81526001600160a01b039091169063a0931af290610ec5908a90600401613170565b600060405180830381600087803b158015610edf57600080fd5b505af1158015610ef3573d6000803e3d6000fd5b50505050610f01600e611c7e565b600a54829061ffff167f74ce76e2ace91f83f8188aaa1002ebcab81a9668c13e09d5c89f9a6647bfebdd610f336119c2565b8a898887604051610f48959493929190612884565b60405180910390a3505060016008555050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f906119c2565b6001600160a01b031614610fb65760405162461bcd60e51b815260040161071390612e2f565b6001600160a01b038116610fdc5760405162461bcd60e51b8152600401610713906129ab565b600b80546001600160a01b0319166001600160a01b038316908117909155600a546040513092917f94128e4300bfd33abb55528d41b5b229e819cf4f2abedfc04ff18c8abab199c491610a719161ffff1690613127565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110656119c2565b6001600160a01b03161461108b5760405162461bcd60e51b815260040161071390612e2f565b6001600160a01b0381166110b15760405162461bcd60e51b8152600401610713906129ab565b600b546001600160a01b03166110d95760405162461bcd60e51b815260040161071390612f99565b600b546010546110f69183916001600160a01b0390911690611c87565b600a54600b546040516001600160a01b038481169330937f722454f4bb0415a0cbc72420f236cd42ec5e56259afafb401deaa9c284c02d5393610a719361ffff9093169290911690613136565b61115461114e611888565b82611d74565b6111705760405162461bcd60e51b81526004016107139061305c565b6107cb838383611df9565b600f6020526000908152604090208054600182015460028301546003840154600485015460059095015493949293919290916001600160a01b0381169060ff600160a01b8204811691600160a81b90041688565b6001600160a01b031660009081526001602052604090205490565b6002600854141561120d5760405162461bcd60e51b8152600401610713906130f0565b60026008556000818152600f6020526040902060050154600160a01b900460ff1661124a5760405162461bcd60e51b815260040161071390612aad565b6000818152600f60205260409020600501805460ff60a01b1916905561126f81611f26565b506001600855565b600c546001600160a01b031681565b6107cb83838360405180602001604052806000815250611575565b600b546001600160a01b031681565b600a5461ffff1681565b6000818152600460205260408120546001600160a01b0316806106515760405162461bcd60e51b815260040161071390612d7a565b60006001600160a01b0382166113175760405162461bcd60e51b815260040161071390612d30565b506001600160a01b031660009081526005602052604090205490565b6000908152600f60205260409020600281015460018201548254600390930154919390929190565b60606003805461066890613258565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661139c6119c2565b6001600160a01b0316146113c25760405162461bcd60e51b815260040161071390612e2f565b80516113d590600d9060208401906122e3565b50600a5460405130917f23ff632ee616fb8c7e8f7e3cbd753181800ea4c090ac021dd7a68f79b7acbd21916114109161ffff16908590613153565b60405180910390a250565b611423611888565b6001600160a01b0316826001600160a01b031614156114545760405162461bcd60e51b815260040161071390612be2565b8060076000611461611888565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556114a5611888565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114dd91906128b7565b60405180910390a35050565b6002600854141561150c5760405162461bcd60e51b8152600401610713906130f0565b60026008556000818152600f6020526040902060050154600160a01b900460ff161561154a5760405162461bcd60e51b815260040161071390612917565b6000818152600f60205260409020600501805460ff60a81b1916600160a81b17905561126f81611f26565b611586611580611888565b83611d74565b6115a25760405162461bcd60e51b81526004016107139061305c565b6115ae84848484611fcd565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166115e66119c2565b6001600160a01b03161461160c5760405162461bcd60e51b815260040161071390612e2f565b6001600160a01b0381166116325760405162461bcd60e51b8152600401610713906129ab565b600c80546001600160a01b0319166001600160a01b038316908117909155600a546040513092917fc3177381220e3683a27c54985d092dbe1cb47c9120f3053c10284834dfda5f1b91610a719161ffff1690613127565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606116b88261186b565b6116d45760405162461bcd60e51b815260040161071390612f3c565b60006116de612000565b905060008151116116fe5760405180602001604052806000815250611729565b806117088461200f565b604051602001611719929190612778565b6040516020818303038152906040525b9392505050565b600061173c600e611a1e565b905090565b60095481565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166117cb6119c2565b6001600160a01b0316146117f15760405162461bcd60e51b815260040161071390612e2f565b600081116118115760405162461bcd60e51b815260040161071390612dc3565b6009819055600a5460405130917f317b924d7be379083195d8458727e3bbbe596f3c7229ee96f2ad885fd7e0f4419161141091859161ffff90911690613179565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600460205260409020546001600160a01b0316151590565b3390565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118c1826112ba565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081516000141561190e57506000610654565b506020015190565b600080600161192c61192788612142565b6121a0565b8487876040516000815260200160405260405161194c94939291906128e6565b6020604051602081039080840390855afa15801561196e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166119a15760405162461bcd60e51b815260040161071390612c19565b866001600160a01b0316816001600160a01b03161491505095945050505050565b600033301415611a1957600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506106e99050565b503390565b5490565b604080516000808252602082019092526001600160a01b038416908390604051611a4c9190612725565b60006040518083038185875af1925050503d8060008114611a89576040519150601f19603f3d011682016040523d82523d6000602084013e611a8e565b606091505b50509050806107cb5760405162461bcd60e51b815260040161071390612b41565b600080856001600160a01b03166323b872dd868686604051602401611ad69392919061280b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611b0f9190612725565b6000604051808303816000865af19150503d8060008114611b4c576040519150601f19603f3d011682016040523d82523d6000602084013e611b51565b606091505b5091509150818015611b7b575080511580611b7b575080806020019051810190611b7b91906125e7565b611b975760405162461bcd60e51b815260040161071390612ae4565b505050505050565b6001600160a01b038216611bc55760405162461bcd60e51b815260040161071390612dfa565b611bce8161186b565b15611beb5760405162461bcd60e51b815260040161071390612a19565b611bf7600083836107cb565b6001600160a01b0382166000908152600560205260408120805460019290611c209084906131e9565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b600080846001600160a01b031663095ea7b38585604051602401611cac92919061286b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611ce59190612725565b6000604051808303816000865af19150503d8060008114611d22576040519150601f19603f3d011682016040523d82523d6000602084013e611d27565b606091505b5091509150818015611d51575080511580611d51575080806020019051810190611d5191906125e7565b611d6d5760405162461bcd60e51b815260040161071390612fd0565b5050505050565b6000611d7f8261186b565b611d9b5760405162461bcd60e51b815260040161071390612c50565b6000611da6836112ba565b9050806001600160a01b0316846001600160a01b03161480611de15750836001600160a01b0316611dd6846106ec565b6001600160a01b0316145b80611df15750611df18185611747565b949350505050565b826001600160a01b0316611e0c826112ba565b6001600160a01b031614611e325760405162461bcd60e51b815260040161071390612eb2565b6001600160a01b038216611e585760405162461bcd60e51b815260040161071390612b9e565b611e638383836107cb565b611e6e60008261188c565b6001600160a01b0383166000908152600560205260408120805460019290611e97908490613215565b90915550506001600160a01b0382166000908152600560205260408120805460019290611ec59084906131e9565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611f31826112ba565b9050611f3f816000846107cb565b611f4a60008361188c565b6001600160a01b0381166000908152600560205260408120805460019290611f73908490613215565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b611fd8848484611df9565b611fe4848484846121bc565b6115ae5760405162461bcd60e51b81526004016107139061294e565b6060600d805461066890613258565b60608161203457506040805180820190915260018152600360fc1b6020820152610654565b8160005b811561205e578061204881613293565b91506120579050600a83613201565b9150612038565b60008167ffffffffffffffff81111561208757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120b1576020820181803683370190505b5090505b8415611df1576120c6600183613215565b91506120d3600a866132ae565b6120de9060306131e9565b60f81b81838151811061210157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061213b600a86613201565b94506120b5565b600060405180608001604052806043815260200161332c604391398051602091820120835184830151604080870151805190860120905161218395016128c2565b604051602081830303815290604052805190602001209050919050565b60006121aa6122d7565b826040516020016121839291906127a7565b60006121d0846001600160a01b03166122dd565b156122cc57836001600160a01b031663150b7a026121ec611888565b8786866040518563ffffffff1660e01b815260040161220e949392919061282f565b602060405180830381600087803b15801561222857600080fd5b505af1925050508015612258575060408051601f3d908101601f191682019092526122559181019061261f565b60015b6122b2573d808015612286576040519150601f19603f3d011682016040523d82523d6000602084013e61228b565b606091505b5080516122aa5760405162461bcd60e51b81526004016107139061294e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611df1565b506001949350505050565b60005490565b3b151590565b8280546122ef90613258565b90600052602060002090601f0160209004810192826123115760008555612357565b82601f1061232a57805160ff1916838001178555612357565b82800160010185558215612357579182015b8281111561235757825182559160200191906001019061233c565b50612363929150612367565b5090565b5b808211156123635760008155600101612368565b600067ffffffffffffffff80841115612397576123976132ee565b604051601f8501601f1916810160200182811182821017156123bb576123bb6132ee565b6040528481529150818385018610156123d357600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461065457600080fd5b600082601f830112612413578081fd5b6117298383356020850161237c565b600060208284031215612433578081fd5b611729826123ec565b6000806040838503121561244e578081fd5b612457836123ec565b9150612465602084016123ec565b90509250929050565b600080600060608486031215612482578081fd5b61248b846123ec565b9250612499602085016123ec565b9150604084013590509250925092565b600080600080608085870312156124be578081fd5b6124c7856123ec565b93506124d5602086016123ec565b925060408501359150606085013567ffffffffffffffff8111156124f7578182fd5b61250387828801612403565b91505092959194509250565b60008060408385031215612521578182fd5b61252a836123ec565b9150602083013561253a81613304565b809150509250929050565b600080600080600060a0868803121561255c578081fd5b612565866123ec565b9450602086013567ffffffffffffffff811115612580578182fd5b61258c88828901612403565b9450506040860135925060608601359150608086013560ff811681146125b0578182fd5b809150509295509295909350565b600080604083850312156125d0578182fd5b6125d9836123ec565b946020939093013593505050565b6000602082840312156125f8578081fd5b815161172981613304565b600060208284031215612614578081fd5b813561172981613315565b600060208284031215612630578081fd5b815161172981613315565b60006020828403121561264c578081fd5b813567ffffffffffffffff811115612662578182fd5b8201601f81018413612672578182fd5b611df18482356020840161237c565b600060208284031215612692578081fd5b5035919050565b6000602082840312156126aa578081fd5b5051919050565b600080600080600060a086880312156126c8578283fd5b853594506020860135935060408601359250606086013591506126ed608087016123ec565b90509295509295909350565b6000815180845261271181602086016020860161322c565b601f01601f19169290920160200192915050565b6000825161273781846020870161322c565b9190910192915050565b6000835161275381846020880161322c565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b6000835161278a81846020880161322c565b83519083019061279e81836020880161322c565b01949350505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b60006001600160a01b0380861683528085166020840152506060604083015261280260608301846126f9565b95945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261286160808301846126f9565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b901515815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261172960208301846126f9565b60208082526016908201527f556e6f52653a206578706972656420616c726561647900000000000000000000604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252603d908201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060408201527f657865637574654d6574615472616e73616374696f6e206d6574686f64000000606082015260800190565b6020808252601e908201527f556e6f52653a206d61726b656420746f20636c61696d20616c72656164790000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526011908201527f496e76616c6964207369676e6174757265000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526018908201527f556e6f52653a207369676e617475726520657870697265640000000000000000604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252601a908201527f556e6f52653a207a65726f206d6178207369676e656454696d65000000000000604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252601c908201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e00000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606082015260800190565b6020808252601e908201527f556e6f52653a206e6f742064656669656e64207072656d69756d506f6f6c0000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b60208082526018908201527f556e6f52653a20696e73756666696369656e7420706169640000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff91909116815260200190565b61ffff9290921682526001600160a01b0316602082015260400190565b600061ffff8416825260406020830152611df160408301846126f9565b90815260200190565b91825261ffff16602082015260400190565b93845260208401929092526040830152606082015260800190565b97885260208801969096526040870194909452606086019290925260808501526001600160a01b031660a0840152151560c0830152151560e08201526101000190565b600082198211156131fc576131fc6132c2565b500190565b600082613210576132106132d8565b500490565b600082821015613227576132276132c2565b500390565b60005b8381101561324757818101518382015260200161322f565b838111156115ae5750506000910152565b60028104600182168061326c57607f821691505b6020821081141561328d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132a7576132a76132c2565b5060010190565b6000826132bd576132bd6132d8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461331257600080fd5b50565b6001600160e01b03198116811461331257600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a26469706673582212201ffc8060e4bbd221844d67776e2cbaac2336f5302edfe66bb1301d65ab175f8364736f6c63430008000033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429a2646970667358221220c3cbb4ed8f104a95b32050bfd6bacdd3c40b9466fa9465fd09f2448d73af756b64736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 12682,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "premiumPool",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12684,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12686,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12688,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "capitalAgent",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12693,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "getProtocol",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_struct(Protocol)12680_storage)"
      },
      {
        "astId": 12696,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "protocolIds",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)2094_storage"
      },
      {
        "astId": 12698,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "USDT_TOKEN",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 12700,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "UNO_TOKEN",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint16,t_struct(Protocol)12680_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct SalesPolicyFactory.Protocol)",
        "numberOfBytes": "32",
        "value": "t_struct(Protocol)12680_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2094_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2093,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Protocol)12680_storage": {
        "encoding": "inplace",
        "label": "struct SalesPolicyFactory.Protocol",
        "members": [
          {
            "astId": 12663,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "coverDuration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12665,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "mcr",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12667,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "protocolAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12669,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "protocolCurrency",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 12671,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "name",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 12673,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "productType",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 12675,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "premiumDescription",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 12677,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "salesPolicy",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 12679,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "exist",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}