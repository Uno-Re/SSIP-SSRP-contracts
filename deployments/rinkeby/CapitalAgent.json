{
  "address": "0x6371c237bDeD3Aa2352c48617A8624436104AfA2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UNO_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT_TOKEN",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_salesPolicy",
          "type": "address"
        }
      ],
      "name": "LogAddPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "LogAddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogMarkToClaimPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyUtilized",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalUtilizedAmount",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyCoverage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_poolCapital",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCapital",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePoolCapital",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MLR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNO_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        }
      ],
      "name": "addPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "checkCapitalByMCR",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "markToClaimPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "policyInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "utilizedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "policyList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coverageAmount",
          "type": "uint256"
        }
      ],
      "name": "policySale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCapital",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MCR",
          "type": "uint256"
        }
      ],
      "name": "setMCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MLR",
          "type": "uint256"
        }
      ],
      "name": "setMLR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCapitalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUtilizedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "updatePolicyStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x387b66bdfd2016cddcecbc0a80385e865273b3e0d336ab6b10956661b4fc1910",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0x6371c237bDeD3Aa2352c48617A8624436104AfA2",
    "transactionIndex": 0,
    "gasUsed": "1380506",
    "logsBloom": "0x
    "blockHash": "0x93f2b0352dd473bd3f10f3baefef96018c27523beb6294ae9a78206e49081821",
    "transactionHash": "0x387b66bdfd2016cddcecbc0a80385e865273b3e0d336ab6b10956661b4fc1910",
    "logs": [],
    "blockNumber": 9863606,
    "cumulativeGasUsed": "1380506",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA51A923E3719b460C2F4889407522CAADE2763b1",
    "0x53fb43BaE4C13d6AFAD37fB37c3fC49f3Af433F5",
    "0x40c035016AD732b6cFce34c3F881040B6C6cf71E"
  ],
  "solcInputHash": "8b4d273543ae78586be14fde7d603ae7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UNO_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT_TOKEN\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_salesPolicy\",\"type\":\"address\"}],\"name\":\"LogAddPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"LogAddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogMarkToClaimPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyUtilized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalUtilizedAmount\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyCoverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolCapital\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCapital\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePoolCapital\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MLR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNO_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"addPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"checkCapitalByMCR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"markToClaimPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"policyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"utilizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"policySale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCapital\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MCR\",\"type\":\"uint256\"}],\"name\":\"setMCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MLR\",\"type\":\"uint256\"}],\"name\":\"setMLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCapitalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUtilizedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"updatePolicyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CapitalAgent.sol\":\"CapitalAgent\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"contracts/CapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/ISalesPolicy.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./interfaces/ISingleSidedInsurancePool.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./interfaces/ICapitalAgent.sol\\\";\\n\\ncontract CapitalAgent is ICapitalAgent, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n\\n    address public owner;\\n    address public exchangeAgent;\\n    address public UNO_TOKEN;\\n    address public USDT_TOKEN;\\n\\n    struct PoolInfo {\\n        uint256 totalCapital;\\n        bool exist;\\n    }\\n\\n    struct PolicyInfo {\\n        uint256 utilizedAmount;\\n        bool exist;\\n    }\\n\\n    mapping(address => PoolInfo) public poolInfo;\\n    address[] public poolList;\\n    Counters.Counter private poolIds;\\n\\n    uint256 public totalCapitalStaked;\\n\\n    mapping(address => PolicyInfo) public policyInfo;\\n    address[] public policyList;\\n    Counters.Counter private policyIds;\\n\\n    uint256 public totalUtilizedAmount;\\n\\n    uint256 public MCR;\\n    uint256 public MLR;\\n\\n    uint256 public CALC_PRECISION = 1e18;\\n\\n    event LogAddPool(address indexed _ssip);\\n    event LogAddPolicy(address indexed _salesPolicy);\\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\\n    event LogUpdatePolicyCoverage(\\n        address indexed _policy,\\n        uint256 _amount,\\n        uint256 _policyUtilized,\\n        uint256 _totalUtilizedAmount\\n    );\\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\\n\\n    constructor(\\n        address _exchangeAgent,\\n        address _UNO_TOKEN,\\n        address _USDT_TOKEN\\n    ) {\\n        owner = msg.sender;\\n        exchangeAgent = _exchangeAgent;\\n        UNO_TOKEN = _UNO_TOKEN;\\n        USDT_TOKEN = _USDT_TOKEN;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"UnoRe: Capital Agent Forbidden\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function addPool(address _ssip) external override {\\n        require(!poolInfo[_ssip].exist, \\\"UnoRe: already exist pool\\\");\\n        poolList.push(_ssip);\\n\\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, exist: true});\\n\\n        poolIds.increment();\\n\\n        emit LogAddPool(_ssip);\\n    }\\n\\n    function addPolicy(address _policy) external override nonReentrant {\\n        require(!policyInfo[_policy].exist, \\\"UnoRe: already exist policy\\\");\\n        policyList.push(_policy);\\n\\n        policyInfo[_policy] = PolicyInfo({utilizedAmount: 0, exist: true});\\n\\n        policyIds.increment();\\n\\n        emit LogAddPolicy(_policy);\\n    }\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        require(_checkCapitalByMCR(_withdrawAmount), \\\"UnoRe: minimum capital underflow\\\");\\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\\n    }\\n\\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\\n    }\\n\\n    function checkCapitalByMCR(uint256 _withdrawAmount) external view override returns (bool) {\\n        return _checkCapitalByMCR(_withdrawAmount);\\n    }\\n\\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\\n        require(policyInfo[msg.sender].exist, \\\"UnoRe: no exist policy\\\");\\n        require(_checkCoverageByMLR(_coverageAmount), \\\"UnoRe: maximum leverage overflow\\\");\\n        _updatePolicyCoverage(msg.sender, _coverageAmount, true);\\n    }\\n\\n    function updatePolicyStatus(address _policyAddr, uint256 _policyId) external override nonReentrant {\\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt, ) = ISalesPolicy(_policyAddr).getPolicyData(\\n            _policyId\\n        );\\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\\n        if (isExpired) {\\n            _updatePolicyCoverage(_policyAddr, _coverageAmount, false);\\n            ISalesPolicy(_policyAddr).updatePolicyExpired(_policyId);\\n            emit LogUpdatePolicyExpired(_policyAddr, _policyId);\\n        }\\n    }\\n\\n    function markToClaimPolicy(address _policy, uint256 _policyId) external onlyOwner nonReentrant {\\n        (uint256 _coverageAmount, , , ) = ISalesPolicy(_policy).getPolicyData(_policyId);\\n        _updatePolicyCoverage(_policy, _coverageAmount, false);\\n        ISalesPolicy(_policy).markToClaim(_policyId);\\n        emit LogMarkToClaimPolicy(_policy, _policyId);\\n    }\\n\\n    function _updatePoolCapital(\\n        address _pool,\\n        uint256 _amount,\\n        bool isAdd\\n    ) private {\\n        if (!isAdd) {\\n            require(poolInfo[_pool].totalCapital >= _amount, \\\"UnoRe: pool capital overflow\\\");\\n        }\\n        poolInfo[_pool].totalCapital = isAdd ? poolInfo[_pool].totalCapital + _amount : poolInfo[_pool].totalCapital - _amount;\\n        totalCapitalStaked = isAdd ? totalCapitalStaked + _amount : totalCapitalStaked - _amount;\\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStaked);\\n    }\\n\\n    function _updatePolicyCoverage(\\n        address _policy,\\n        uint256 _amount,\\n        bool isAdd\\n    ) private {\\n        if (!isAdd) {\\n            require(policyInfo[_policy].utilizedAmount >= _amount, \\\"UnoRe: policy coverage overflow\\\");\\n        }\\n        policyInfo[_policy].utilizedAmount = isAdd\\n            ? policyInfo[_policy].utilizedAmount + _amount\\n            : policyInfo[_policy].utilizedAmount - _amount;\\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\\n        emit LogUpdatePolicyCoverage(_policy, _amount, policyInfo[_policy].utilizedAmount, totalUtilizedAmount);\\n    }\\n\\n    function _checkCapitalByMCR(uint256 _withdrawAmount) private view returns (bool) {\\n        return totalCapitalStaked - _withdrawAmount >= (totalCapitalStaked * MCR) / CALC_PRECISION;\\n    }\\n\\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\\n        uint256 totalCapitalStakedInUSDT = IExchangeAgent(exchangeAgent).getNeededTokenAmount(\\n            UNO_TOKEN,\\n            USDT_TOKEN,\\n            totalCapitalStaked\\n        );\\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStakedInUSDT * MLR) / CALC_PRECISION;\\n    }\\n\\n    function setMCR(uint256 _MCR) external onlyOwner nonReentrant {\\n        require(_MCR > 0, \\\"UnoRe: zero mcr\\\");\\n        MCR = _MCR;\\n    }\\n\\n    function setMLR(uint256 _MLR) external onlyOwner nonReentrant {\\n        require(_MLR > 0, \\\"UnoRe: zero mcr\\\");\\n        MLR = _MLR;\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner nonReentrant {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n    }\\n}\\n\",\"keccak256\":\"0x87c36a71652a37f0b073dd51ce0a66cfd48cf507ffc2d6cf770cd28fca19203d\",\"license\":\"MIT\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip) external;\\n\\n    function addPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function checkCapitalByMCR(uint256 _withdrawAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(address _policy, uint256 _policyId) external;\\n}\\n\",\"keccak256\":\"0x9b7dac88ea3d0ead81f4ad14f8b55892d717f64d186de47e796108ff95f9ba07\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IExchangeAgent {\\n    function USDT_TOKEN() external view returns (address);\\n\\n    function getTokenAmountForUSDT(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDT(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external view returns (uint256);\\n\\n    function convertForToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x473a1a780dcd71387aa5854b621d4fde775f5d596d6f93a84f68c2665cc7f2d0\",\"license\":\"MIT\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to) external returns (uint256, uint256);\\n\\n    function cancelWithrawRequest(address _to) external;\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(\\n        address _to,\\n        address _migrateTo,\\n        bool _isUnLocked\\n    ) external;\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function lpPriceUno() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a5eddf6f3d2f487eefb107a6bbe9547e30f16356a63f63d1cc9bffcf6d97118\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISalesPolicy {\\n    function setPremiumPool(address _premiumPool) external;\\n\\n    function setExchangeAgent(address _exchangeAgent) external;\\n\\n    function setCapitalAgent(address _capitalAgent) external;\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\\n\\n    function approvePremium(address _premiumCurrency) external;\\n\\n    function setProtocolURI(string memory newURI) external;\\n\\n    function updatePolicyExpired(uint256 _policyId) external;\\n\\n    function markToClaim(uint256 _policyId) external;\\n\\n    function allPoliciesLength() external view returns (uint256);\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x105ccbe9773d165bfb1baeb2573b8d77b5fb2835480bdcbd128f5a2090dae75e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISingleSidedInsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f34cb3f24d9ab3a8272c3bb9ea752afe5c6f9fe84ff65a9c1a22cee27165052\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a7640000600f553480156200001d57600080fd5b5060405162001691380380620016918339810160408190526200004091620000b0565b6001600081905580546001600160a01b03199081163317909155600280546001600160a01b03958616908316179055600380549385169382169390931790925560048054919093169116179055620000f9565b80516001600160a01b0381168114620000ab57600080fd5b919050565b600080600060608486031215620000c5578283fd5b620000d08462000093565b9250620000e06020850162000093565b9150620000f06040850162000093565b90509250925092565b61158880620001096000396000f3fe60806040526004361061018f5760003560e01c80638be5a39f116100d6578063be304cf01161007f578063d914cd4b11610059578063d914cd4b14610423578063d9203b9114610443578063f3ae60271461045857610196565b8063be304cf0146103c1578063d4688a45146103ee578063d8c5c8631461040357610196565b80639a7b5f11116100b05780639a7b5f1114610353578063a0931af214610381578063b84ef081146103a157610196565b80638be5a39f146103095780638da5cb5b1461032957806392ff38ec1461033e57610196565b806356704ace11610138578063794e572411610112578063794e5724146102bf57806386e4c2ad146102d45780638bb70831146102f457610196565b806356704ace1461026a5780635b44d5761461028a57806377b330c9146102aa57610196565b8063385a128f11610169578063385a128f146102085780634dc70bac146102285780634fdc9ea91461024a57610196565b80630f97b97b1461019b57806318a00d8e146101c65780632a48235b146101e857610196565b3661019657005b600080fd5b3480156101a757600080fd5b506101b0610478565b6040516101bd91906111be565b60405180910390f35b3480156101d257600080fd5b506101e66101e136600461110f565b610487565b005b3480156101f457600080fd5b506101b0610203366004611159565b61052f565b34801561021457600080fd5b506101e6610223366004611159565b610559565b34801561023457600080fd5b5061023d6105d2565b6040516101bd9190611491565b34801561025657600080fd5b506101b0610265366004611159565b6105d8565b34801561027657600080fd5b506101e6610285366004611130565b6105e8565b34801561029657600080fd5b506101e66102a5366004611159565b610769565b3480156102b657600080fd5b506101b06107fb565b3480156102cb57600080fd5b5061023d61080a565b3480156102e057600080fd5b506101e66102ef366004611130565b610810565b34801561030057600080fd5b5061023d61099a565b34801561031557600080fd5b506101e6610324366004611159565b6109a0565b34801561033557600080fd5b506101b0610a05565b34801561034a57600080fd5b5061023d610a14565b34801561035f57600080fd5b5061037361036e36600461110f565b610a1a565b6040516101bd92919061149a565b34801561038d57600080fd5b506101e661039c366004611159565b610a36565b3480156103ad57600080fd5b506101e66103bc36600461110f565b610ac0565b3480156103cd57600080fd5b506103e16103dc366004611159565b610beb565b6040516101bd91906111f6565b3480156103fa57600080fd5b5061023d610bfe565b34801561040f57600080fd5b506101e661041e366004611159565b610c04565b34801561042f57600080fd5b506101e661043e36600461110f565b610c7d565b34801561044f57600080fd5b506101b0610d7c565b34801561046457600080fd5b5061037361047336600461110f565b610d8b565b6003546001600160a01b031681565b6001546001600160a01b031633146104ba5760405162461bcd60e51b81526004016104b190611236565b60405180910390fd5b600260005414156104dd5760405162461bcd60e51b81526004016104b1906113ec565b60026000556001600160a01b0381166105085760405162461bcd60e51b81526004016104b19061126d565b600280546001600160a01b0319166001600160a01b03929092169190911790556001600055565b6006818154811061053f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146105835760405162461bcd60e51b81526004016104b190611236565b600260005414156105a65760405162461bcd60e51b81526004016104b1906113ec565b6002600055806105c85760405162461bcd60e51b81526004016104b1906112a4565b600d556001600055565b600f5481565b600a818154811061053f57600080fd5b6002600054141561060b5760405162461bcd60e51b81526004016104b1906113ec565b60026000908155604051637a5402e960e01b8152819081906001600160a01b03861690637a5402e990610642908790600401611491565b60806040518083038186803b15801561065a57600080fd5b505afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190611189565b509194509250905060006106a682846114ce565b42108015915061075c576106bc86856000610da7565b6040516352eaf0a160e11b81526001600160a01b0387169063a5d5e142906106e8908890600401611491565b600060405180830381600087803b15801561070257600080fd5b505af1158015610716573d6000803e3d6000fd5b50505050856001600160a01b03167faf1c77a8196c946ab8e645210cd1e2685b4fb758ddfd474fd918298854dea6fc866040516107539190611491565b60405180910390a25b5050600160005550505050565b6002600054141561078c5760405162461bcd60e51b81526004016104b1906113ec565b600260009081553381526005602052604090206001015460ff166107c25760405162461bcd60e51b81526004016104b1906113b5565b6107cb81610ed5565b6107e75760405162461bcd60e51b81526004016104b190611349565b6107f333826000610f0a565b506001600055565b6004546001600160a01b031681565b600d5481565b6001546001600160a01b0316331461083a5760405162461bcd60e51b81526004016104b190611236565b6002600054141561085d5760405162461bcd60e51b81526004016104b1906113ec565b60026000908155604051637a5402e960e01b81526001600160a01b03841690637a5402e990610890908590600401611491565b60806040518083038186803b1580156108a857600080fd5b505afa1580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e09190611189565b50505090506108f183826000610da7565b6040516319d9b48f60e11b81526001600160a01b038416906333b3691e9061091d908590600401611491565b600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b50505050826001600160a01b03167f56b46e5b13fdb3c0b1989f448e91b2ad68cf0c8e8ddd87f996720708ae3a1569836040516109889190611491565b60405180910390a25050600160005550565b600e5481565b600260005414156109c35760405162461bcd60e51b81526004016104b1906113ec565b600260009081553381526005602052604090206001015460ff166109f95760405162461bcd60e51b81526004016104b1906113b5565b6107f333826001610f0a565b6001546001600160a01b031681565b60085481565b6005602052600090815260409020805460019091015460ff1682565b60026000541415610a595760405162461bcd60e51b81526004016104b1906113ec565b600260009081553381526009602052604090206001015460ff16610a8f5760405162461bcd60e51b81526004016104b19061137e565b610a9881611029565b610ab45760405162461bcd60e51b81526004016104b190611201565b6107f333826001610da7565b60026000541415610ae35760405162461bcd60e51b81526004016104b1906113ec565b600260009081556001600160a01b03821681526009602052604090206001015460ff1615610b235760405162461bcd60e51b81526004016104b19061145a565b600a805460018082019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b0384169081179091556040805180820182526000808252602080830186815294825260099052919091209051815590519101805460ff1916911515919091179055610baf600b6110ef565b6040516001600160a01b038216907f0789738a8762772f9c60cff4d99f9abd7acfc972d634b64eeb4c98370cce70ee90600090a2506001600055565b6000610bf682610ed5565b90505b919050565b600c5481565b6001546001600160a01b03163314610c2e5760405162461bcd60e51b81526004016104b190611236565b60026000541415610c515760405162461bcd60e51b81526004016104b1906113ec565b600260005580610c735760405162461bcd60e51b81526004016104b1906112a4565b600e556001600055565b6001600160a01b03811660009081526005602052604090206001015460ff1615610cb95760405162461bcd60e51b81526004016104b190611312565b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0384169081179091556040805180820182526000808252602080830186815294825260059052919091209051815590519101805460ff1916911515919091179055610d4560076110ef565b6040516001600160a01b038216907f0efea706f79fea31d38bda2770598b35fe0bf3c0332f91d3fb62bf987f3b2e3390600090a250565b6002546001600160a01b031681565b6009602052600090815260409020805460019091015460ff1682565b80610de4576001600160a01b038316600090815260096020526040902054821115610de45760405162461bcd60e51b81526004016104b1906112db565b80610e12576001600160a01b038316600090815260096020526040902054610e0d908390611525565b610e36565b6001600160a01b038316600090815260096020526040902054610e369083906114ce565b6001600160a01b03841660009081526009602052604090205580610e675781600c54610e629190611525565b610e75565b81600c54610e7591906114ce565b600c8190556001600160a01b0384166000818152600960205260409081902054905191927facece99dd8b86cb96519fb17caded4d103b35a8261463d0d11f80a411460730092610ec892879290916114b8565b60405180910390a2505050565b6000600f54600d54600854610eea9190611506565b610ef491906114e6565b82600854610f029190611525565b101592915050565b80610f47576001600160a01b038316600090815260056020526040902054821115610f475760405162461bcd60e51b81526004016104b190611423565b80610f75576001600160a01b038316600090815260056020526040902054610f70908390611525565b610f99565b6001600160a01b038316600090815260056020526040902054610f999083906114ce565b6001600160a01b03841660009081526005602052604090205580610fca5781600854610fc59190611525565b610fd8565b81600854610fd891906114ce565b60088190556001600160a01b0384166000818152600560205260409081902054905191927f4c54f63d510ce2f2f9bf99bf203458cb67aa75fae97ccab560a1654eba9dbf2492610ec89291906114aa565b60025460035460048054600854604051631a44cdf360e11b815260009586956001600160a01b03918216956334899be69561106b9592841694931692016111d2565b60206040518083038186803b15801561108357600080fd5b505afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bb9190611171565b9050600f54600e54826110ce9190611506565b6110d891906114e6565b83600c546110e691906114ce565b11159392505050565b80546001019055565b80356001600160a01b0381168114610bf957600080fd5b600060208284031215611120578081fd5b611129826110f8565b9392505050565b60008060408385031215611142578081fd5b61114b836110f8565b946020939093013593505050565b60006020828403121561116a578081fd5b5035919050565b600060208284031215611182578081fd5b5051919050565b6000806000806080858703121561119e578182fd5b505082516020840151604085015160609095015191969095509092509050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b6020808252818101527f556e6f52653a206d6178696d756d206c65766572616765206f766572666c6f77604082015260600190565b6020808252601e908201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e0000604082015260600190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252600f908201527f556e6f52653a207a65726f206d63720000000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20706f6c69637920636f766572616765206f766572666c6f7700604082015260600190565b60208082526019908201527f556e6f52653a20616c726561647920657869737420706f6f6c00000000000000604082015260600190565b6020808252818101527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f77604082015260600190565b60208082526016908201527f556e6f52653a206e6f20657869737420706f6c69637900000000000000000000604082015260600190565b60208082526014908201527f556e6f52653a206e6f2065786973742073736970000000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601c908201527f556e6f52653a20706f6f6c206361706974616c206f766572666c6f7700000000604082015260600190565b6020808252601b908201527f556e6f52653a20616c726561647920657869737420706f6c6963790000000000604082015260600190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b600082198211156114e1576114e161153c565b500190565b60008261150157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156115205761152061153c565b500290565b6000828210156115375761153761153c565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205e8ef1cfc13ef4a8fc18e66f110b93760e0fcc87ee1e9e663d27a36dd90c009964736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c80638be5a39f116100d6578063be304cf01161007f578063d914cd4b11610059578063d914cd4b14610423578063d9203b9114610443578063f3ae60271461045857610196565b8063be304cf0146103c1578063d4688a45146103ee578063d8c5c8631461040357610196565b80639a7b5f11116100b05780639a7b5f1114610353578063a0931af214610381578063b84ef081146103a157610196565b80638be5a39f146103095780638da5cb5b1461032957806392ff38ec1461033e57610196565b806356704ace11610138578063794e572411610112578063794e5724146102bf57806386e4c2ad146102d45780638bb70831146102f457610196565b806356704ace1461026a5780635b44d5761461028a57806377b330c9146102aa57610196565b8063385a128f11610169578063385a128f146102085780634dc70bac146102285780634fdc9ea91461024a57610196565b80630f97b97b1461019b57806318a00d8e146101c65780632a48235b146101e857610196565b3661019657005b600080fd5b3480156101a757600080fd5b506101b0610478565b6040516101bd91906111be565b60405180910390f35b3480156101d257600080fd5b506101e66101e136600461110f565b610487565b005b3480156101f457600080fd5b506101b0610203366004611159565b61052f565b34801561021457600080fd5b506101e6610223366004611159565b610559565b34801561023457600080fd5b5061023d6105d2565b6040516101bd9190611491565b34801561025657600080fd5b506101b0610265366004611159565b6105d8565b34801561027657600080fd5b506101e6610285366004611130565b6105e8565b34801561029657600080fd5b506101e66102a5366004611159565b610769565b3480156102b657600080fd5b506101b06107fb565b3480156102cb57600080fd5b5061023d61080a565b3480156102e057600080fd5b506101e66102ef366004611130565b610810565b34801561030057600080fd5b5061023d61099a565b34801561031557600080fd5b506101e6610324366004611159565b6109a0565b34801561033557600080fd5b506101b0610a05565b34801561034a57600080fd5b5061023d610a14565b34801561035f57600080fd5b5061037361036e36600461110f565b610a1a565b6040516101bd92919061149a565b34801561038d57600080fd5b506101e661039c366004611159565b610a36565b3480156103ad57600080fd5b506101e66103bc36600461110f565b610ac0565b3480156103cd57600080fd5b506103e16103dc366004611159565b610beb565b6040516101bd91906111f6565b3480156103fa57600080fd5b5061023d610bfe565b34801561040f57600080fd5b506101e661041e366004611159565b610c04565b34801561042f57600080fd5b506101e661043e36600461110f565b610c7d565b34801561044f57600080fd5b506101b0610d7c565b34801561046457600080fd5b5061037361047336600461110f565b610d8b565b6003546001600160a01b031681565b6001546001600160a01b031633146104ba5760405162461bcd60e51b81526004016104b190611236565b60405180910390fd5b600260005414156104dd5760405162461bcd60e51b81526004016104b1906113ec565b60026000556001600160a01b0381166105085760405162461bcd60e51b81526004016104b19061126d565b600280546001600160a01b0319166001600160a01b03929092169190911790556001600055565b6006818154811061053f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146105835760405162461bcd60e51b81526004016104b190611236565b600260005414156105a65760405162461bcd60e51b81526004016104b1906113ec565b6002600055806105c85760405162461bcd60e51b81526004016104b1906112a4565b600d556001600055565b600f5481565b600a818154811061053f57600080fd5b6002600054141561060b5760405162461bcd60e51b81526004016104b1906113ec565b60026000908155604051637a5402e960e01b8152819081906001600160a01b03861690637a5402e990610642908790600401611491565b60806040518083038186803b15801561065a57600080fd5b505afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190611189565b509194509250905060006106a682846114ce565b42108015915061075c576106bc86856000610da7565b6040516352eaf0a160e11b81526001600160a01b0387169063a5d5e142906106e8908890600401611491565b600060405180830381600087803b15801561070257600080fd5b505af1158015610716573d6000803e3d6000fd5b50505050856001600160a01b03167faf1c77a8196c946ab8e645210cd1e2685b4fb758ddfd474fd918298854dea6fc866040516107539190611491565b60405180910390a25b5050600160005550505050565b6002600054141561078c5760405162461bcd60e51b81526004016104b1906113ec565b600260009081553381526005602052604090206001015460ff166107c25760405162461bcd60e51b81526004016104b1906113b5565b6107cb81610ed5565b6107e75760405162461bcd60e51b81526004016104b190611349565b6107f333826000610f0a565b506001600055565b6004546001600160a01b031681565b600d5481565b6001546001600160a01b0316331461083a5760405162461bcd60e51b81526004016104b190611236565b6002600054141561085d5760405162461bcd60e51b81526004016104b1906113ec565b60026000908155604051637a5402e960e01b81526001600160a01b03841690637a5402e990610890908590600401611491565b60806040518083038186803b1580156108a857600080fd5b505afa1580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e09190611189565b50505090506108f183826000610da7565b6040516319d9b48f60e11b81526001600160a01b038416906333b3691e9061091d908590600401611491565b600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b50505050826001600160a01b03167f56b46e5b13fdb3c0b1989f448e91b2ad68cf0c8e8ddd87f996720708ae3a1569836040516109889190611491565b60405180910390a25050600160005550565b600e5481565b600260005414156109c35760405162461bcd60e51b81526004016104b1906113ec565b600260009081553381526005602052604090206001015460ff166109f95760405162461bcd60e51b81526004016104b1906113b5565b6107f333826001610f0a565b6001546001600160a01b031681565b60085481565b6005602052600090815260409020805460019091015460ff1682565b60026000541415610a595760405162461bcd60e51b81526004016104b1906113ec565b600260009081553381526009602052604090206001015460ff16610a8f5760405162461bcd60e51b81526004016104b19061137e565b610a9881611029565b610ab45760405162461bcd60e51b81526004016104b190611201565b6107f333826001610da7565b60026000541415610ae35760405162461bcd60e51b81526004016104b1906113ec565b600260009081556001600160a01b03821681526009602052604090206001015460ff1615610b235760405162461bcd60e51b81526004016104b19061145a565b600a805460018082019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b0384169081179091556040805180820182526000808252602080830186815294825260099052919091209051815590519101805460ff1916911515919091179055610baf600b6110ef565b6040516001600160a01b038216907f0789738a8762772f9c60cff4d99f9abd7acfc972d634b64eeb4c98370cce70ee90600090a2506001600055565b6000610bf682610ed5565b90505b919050565b600c5481565b6001546001600160a01b03163314610c2e5760405162461bcd60e51b81526004016104b190611236565b60026000541415610c515760405162461bcd60e51b81526004016104b1906113ec565b600260005580610c735760405162461bcd60e51b81526004016104b1906112a4565b600e556001600055565b6001600160a01b03811660009081526005602052604090206001015460ff1615610cb95760405162461bcd60e51b81526004016104b190611312565b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0384169081179091556040805180820182526000808252602080830186815294825260059052919091209051815590519101805460ff1916911515919091179055610d4560076110ef565b6040516001600160a01b038216907f0efea706f79fea31d38bda2770598b35fe0bf3c0332f91d3fb62bf987f3b2e3390600090a250565b6002546001600160a01b031681565b6009602052600090815260409020805460019091015460ff1682565b80610de4576001600160a01b038316600090815260096020526040902054821115610de45760405162461bcd60e51b81526004016104b1906112db565b80610e12576001600160a01b038316600090815260096020526040902054610e0d908390611525565b610e36565b6001600160a01b038316600090815260096020526040902054610e369083906114ce565b6001600160a01b03841660009081526009602052604090205580610e675781600c54610e629190611525565b610e75565b81600c54610e7591906114ce565b600c8190556001600160a01b0384166000818152600960205260409081902054905191927facece99dd8b86cb96519fb17caded4d103b35a8261463d0d11f80a411460730092610ec892879290916114b8565b60405180910390a2505050565b6000600f54600d54600854610eea9190611506565b610ef491906114e6565b82600854610f029190611525565b101592915050565b80610f47576001600160a01b038316600090815260056020526040902054821115610f475760405162461bcd60e51b81526004016104b190611423565b80610f75576001600160a01b038316600090815260056020526040902054610f70908390611525565b610f99565b6001600160a01b038316600090815260056020526040902054610f999083906114ce565b6001600160a01b03841660009081526005602052604090205580610fca5781600854610fc59190611525565b610fd8565b81600854610fd891906114ce565b60088190556001600160a01b0384166000818152600560205260409081902054905191927f4c54f63d510ce2f2f9bf99bf203458cb67aa75fae97ccab560a1654eba9dbf2492610ec89291906114aa565b60025460035460048054600854604051631a44cdf360e11b815260009586956001600160a01b03918216956334899be69561106b9592841694931692016111d2565b60206040518083038186803b15801561108357600080fd5b505afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bb9190611171565b9050600f54600e54826110ce9190611506565b6110d891906114e6565b83600c546110e691906114ce565b11159392505050565b80546001019055565b80356001600160a01b0381168114610bf957600080fd5b600060208284031215611120578081fd5b611129826110f8565b9392505050565b60008060408385031215611142578081fd5b61114b836110f8565b946020939093013593505050565b60006020828403121561116a578081fd5b5035919050565b600060208284031215611182578081fd5b5051919050565b6000806000806080858703121561119e578182fd5b505082516020840151604085015160609095015191969095509092509050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b6020808252818101527f556e6f52653a206d6178696d756d206c65766572616765206f766572666c6f77604082015260600190565b6020808252601e908201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e0000604082015260600190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252600f908201527f556e6f52653a207a65726f206d63720000000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20706f6c69637920636f766572616765206f766572666c6f7700604082015260600190565b60208082526019908201527f556e6f52653a20616c726561647920657869737420706f6f6c00000000000000604082015260600190565b6020808252818101527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f77604082015260600190565b60208082526016908201527f556e6f52653a206e6f20657869737420706f6c69637900000000000000000000604082015260600190565b60208082526014908201527f556e6f52653a206e6f2065786973742073736970000000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601c908201527f556e6f52653a20706f6f6c206361706974616c206f766572666c6f7700000000604082015260600190565b6020808252601b908201527f556e6f52653a20616c726561647920657869737420706f6c6963790000000000604082015260600190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b600082198211156114e1576114e161153c565b500190565b60008261150157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156115205761152061153c565b500290565b6000828210156115375761153761153c565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205e8ef1cfc13ef4a8fc18e66f110b93760e0fcc87ee1e9e663d27a36dd90c009964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2421,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2423,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2425,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "UNO_TOKEN",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2427,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "USDT_TOKEN",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2442,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(PoolInfo)2432_storage)"
      },
      {
        "astId": 2445,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolList",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2448,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)2094_storage"
      },
      {
        "astId": 2450,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalCapitalStaked",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2455,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "policyInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(PolicyInfo)2437_storage)"
      },
      {
        "astId": 2458,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "policyList",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2461,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "policyIds",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)2094_storage"
      },
      {
        "astId": 2463,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalUtilizedAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2465,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MCR",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2467,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MLR",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2470,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "CALC_PRECISION",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(PolicyInfo)2437_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CapitalAgent.PolicyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyInfo)2437_storage"
      },
      "t_mapping(t_address,t_struct(PoolInfo)2432_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CapitalAgent.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)2432_storage"
      },
      "t_struct(Counter)2094_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2093,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PolicyInfo)2437_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PolicyInfo",
        "members": [
          {
            "astId": 2434,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "utilizedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2436,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)2432_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PoolInfo",
        "members": [
          {
            "astId": 2429,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "totalCapital",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2431,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}