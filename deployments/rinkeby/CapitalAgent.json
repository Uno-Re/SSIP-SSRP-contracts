{
  "address": "0x5371d874949DcdD3f2F6Cd0852a88140F77BfcEF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UNO_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT_TOKEN",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_salesPolicy",
          "type": "address"
        }
      ],
      "name": "LogAddPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "LogAddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogMarkToClaimPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyUtilized",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalUtilizedAmount",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyCoverage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_poolCapital",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCapital",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePoolCapital",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MLR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPPolicyCaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNO_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        }
      ],
      "name": "addPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "checkCapitalByMCR",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "markToClaimPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "policyInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "utilizedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "policyList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coverageAmount",
          "type": "uint256"
        }
      ],
      "name": "policySale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCapital",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MCR",
          "type": "uint256"
        }
      ],
      "name": "setMCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MLR",
          "type": "uint256"
        }
      ],
      "name": "setMLR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCapitalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUtilizedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "updatePolicyStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4902ea5bdf192e0a2eefb5bdce88b4dc7320c7095b981d807e71deb85781d115",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0x5371d874949DcdD3f2F6Cd0852a88140F77BfcEF",
    "transactionIndex": 5,
    "gasUsed": "1409021",
    "logsBloom": "0x
    "blockHash": "0x67587df05dba0185ab4eca25f5a1c452673f8140e597b35ae028897f7d40d887",
    "transactionHash": "0x4902ea5bdf192e0a2eefb5bdce88b4dc7320c7095b981d807e71deb85781d115",
    "logs": [],
    "blockNumber": 9870443,
    "cumulativeGasUsed": "1590680",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf97Eb2a102Ba485020c9d2EA0ac4BAAC19092Ee9",
    "0x53fb43BaE4C13d6AFAD37fB37c3fC49f3Af433F5",
    "0x40c035016AD732b6cFce34c3F881040B6C6cf71E"
  ],
  "solcInputHash": "850ee7ecdab72c01fbce930f264cd00b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UNO_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT_TOKEN\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_salesPolicy\",\"type\":\"address\"}],\"name\":\"LogAddPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"LogAddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogMarkToClaimPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyUtilized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalUtilizedAmount\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyCoverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolCapital\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCapital\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePoolCapital\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MLR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPPolicyCaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNO_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"addPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"checkCapitalByMCR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"markToClaimPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"policyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"utilizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"policySale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCapital\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MCR\",\"type\":\"uint256\"}],\"name\":\"setMCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MLR\",\"type\":\"uint256\"}],\"name\":\"setMLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCapitalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUtilizedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"updatePolicyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CapitalAgent.sol\":\"CapitalAgent\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"contracts/CapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/ISalesPolicy.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./interfaces/ISingleSidedInsurancePool.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./interfaces/ICapitalAgent.sol\\\";\\n\\ncontract CapitalAgent is ICapitalAgent, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n\\n    address public owner;\\n    address public exchangeAgent;\\n    address public UNO_TOKEN;\\n    address public USDT_TOKEN;\\n\\n    struct PoolInfo {\\n        uint256 totalCapital;\\n        bool exist;\\n    }\\n\\n    struct PolicyInfo {\\n        uint256 utilizedAmount;\\n        bool exist;\\n    }\\n\\n    mapping(address => PoolInfo) public poolInfo;\\n    address[] public poolList;\\n    Counters.Counter private poolIds;\\n\\n    uint256 public totalCapitalStaked;\\n\\n    mapping(address => PolicyInfo) public policyInfo;\\n    address[] public policyList;\\n    Counters.Counter private policyIds;\\n\\n    uint256 public totalUtilizedAmount;\\n\\n    uint256 public MCR;\\n    uint256 public MLR;\\n\\n    uint256 public CALC_PRECISION = 1e18;\\n\\n    event LogAddPool(address indexed _ssip);\\n    event LogAddPolicy(address indexed _salesPolicy);\\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\\n    event LogUpdatePolicyCoverage(\\n        address indexed _policy,\\n        uint256 _amount,\\n        uint256 _policyUtilized,\\n        uint256 _totalUtilizedAmount\\n    );\\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\\n\\n    constructor(\\n        address _exchangeAgent,\\n        address _UNO_TOKEN,\\n        address _USDT_TOKEN\\n    ) {\\n        owner = msg.sender;\\n        exchangeAgent = _exchangeAgent;\\n        UNO_TOKEN = _UNO_TOKEN;\\n        USDT_TOKEN = _USDT_TOKEN;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"UnoRe: Capital Agent Forbidden\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function addPool(address _ssip) external override {\\n        require(!poolInfo[_ssip].exist, \\\"UnoRe: already exist pool\\\");\\n        poolList.push(_ssip);\\n\\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, exist: true});\\n\\n        poolIds.increment();\\n\\n        emit LogAddPool(_ssip);\\n    }\\n\\n    function addPolicy(address _policy) external override nonReentrant {\\n        require(!policyInfo[_policy].exist, \\\"UnoRe: already exist policy\\\");\\n        policyList.push(_policy);\\n\\n        policyInfo[_policy] = PolicyInfo({utilizedAmount: 0, exist: true});\\n\\n        policyIds.increment();\\n\\n        emit LogAddPolicy(_policy);\\n    }\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        require(_checkCapitalByMCR(_withdrawAmount), \\\"UnoRe: minimum capital underflow\\\");\\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\\n    }\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\\n    }\\n\\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\\n    }\\n\\n    function checkCapitalByMCR(uint256 _withdrawAmount) external view override returns (bool) {\\n        return _checkCapitalByMCR(_withdrawAmount);\\n    }\\n\\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\\n        require(policyInfo[msg.sender].exist, \\\"UnoRe: no exist policy\\\");\\n        require(_checkCoverageByMLR(_coverageAmount), \\\"UnoRe: maximum leverage overflow\\\");\\n        _updatePolicyCoverage(msg.sender, _coverageAmount, true);\\n    }\\n\\n    function updatePolicyStatus(address _policyAddr, uint256 _policyId) external override nonReentrant {\\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt, ) = ISalesPolicy(_policyAddr).getPolicyData(\\n            _policyId\\n        );\\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\\n        if (isExpired) {\\n            _updatePolicyCoverage(_policyAddr, _coverageAmount, false);\\n            ISalesPolicy(_policyAddr).updatePolicyExpired(_policyId);\\n            emit LogUpdatePolicyExpired(_policyAddr, _policyId);\\n        }\\n    }\\n\\n    function markToClaimPolicy(address _policy, uint256 _policyId) external onlyOwner nonReentrant {\\n        (uint256 _coverageAmount, , , ) = ISalesPolicy(_policy).getPolicyData(_policyId);\\n        _updatePolicyCoverage(_policy, _coverageAmount, false);\\n        ISalesPolicy(_policy).markToClaim(_policyId);\\n        emit LogMarkToClaimPolicy(_policy, _policyId);\\n    }\\n\\n    function _updatePoolCapital(\\n        address _pool,\\n        uint256 _amount,\\n        bool isAdd\\n    ) private {\\n        if (!isAdd) {\\n            require(poolInfo[_pool].totalCapital >= _amount, \\\"UnoRe: pool capital overflow\\\");\\n        }\\n        poolInfo[_pool].totalCapital = isAdd ? poolInfo[_pool].totalCapital + _amount : poolInfo[_pool].totalCapital - _amount;\\n        totalCapitalStaked = isAdd ? totalCapitalStaked + _amount : totalCapitalStaked - _amount;\\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStaked);\\n    }\\n\\n    function _updatePolicyCoverage(\\n        address _policy,\\n        uint256 _amount,\\n        bool isAdd\\n    ) private {\\n        if (!isAdd) {\\n            require(policyInfo[_policy].utilizedAmount >= _amount, \\\"UnoRe: policy coverage overflow\\\");\\n        }\\n        policyInfo[_policy].utilizedAmount = isAdd\\n            ? policyInfo[_policy].utilizedAmount + _amount\\n            : policyInfo[_policy].utilizedAmount - _amount;\\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\\n        emit LogUpdatePolicyCoverage(_policy, _amount, policyInfo[_policy].utilizedAmount, totalUtilizedAmount);\\n    }\\n\\n    function _checkCapitalByMCR(uint256 _withdrawAmount) private view returns (bool) {\\n        return totalCapitalStaked - _withdrawAmount >= (totalCapitalStaked * MCR) / CALC_PRECISION;\\n    }\\n\\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\\n        uint256 totalCapitalStakedInUSDT = IExchangeAgent(exchangeAgent).getNeededTokenAmount(\\n            UNO_TOKEN,\\n            USDT_TOKEN,\\n            totalCapitalStaked\\n        );\\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStakedInUSDT * MLR) / CALC_PRECISION;\\n    }\\n\\n    function setMCR(uint256 _MCR) external onlyOwner nonReentrant {\\n        require(_MCR > 0, \\\"UnoRe: zero mcr\\\");\\n        MCR = _MCR;\\n    }\\n\\n    function setMLR(uint256 _MLR) external onlyOwner nonReentrant {\\n        require(_MLR > 0, \\\"UnoRe: zero mcr\\\");\\n        MLR = _MLR;\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner nonReentrant {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n    }\\n}\\n\",\"keccak256\":\"0x1cf05aa919c78be05d31c5e6cc1a19b3a80f8ac77d5eed9dd84e4ef112d3b7d7\",\"license\":\"MIT\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip) external;\\n\\n    function addPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount) external;\\n\\n    function checkCapitalByMCR(uint256 _withdrawAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(address _policy, uint256 _policyId) external;\\n}\\n\",\"keccak256\":\"0x305864f7d21f12ad8da6f1f8c8632f01ae87d2b283cc85b1326b773b4e7131a2\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IExchangeAgent {\\n    function USDC_TOKEN() external view returns (address);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external view returns (uint256);\\n\\n    function convertForToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xac695d6d1b861eb9f84ac2009f97fd5b00d44500b6735fb9256f1c227323e07e\",\"license\":\"MIT\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to) external returns (uint256, uint256);\\n\\n    function cancelWithrawRequest(address _to) external;\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(\\n        address _to,\\n        address _migrateTo,\\n        bool _isUnLocked\\n    ) external;\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function lpPriceUno() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a5eddf6f3d2f487eefb107a6bbe9547e30f16356a63f63d1cc9bffcf6d97118\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISalesPolicy {\\n    function setPremiumPool(address _premiumPool) external;\\n\\n    function setExchangeAgent(address _exchangeAgent) external;\\n\\n    function setCapitalAgent(address _capitalAgent) external;\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\\n\\n    function approvePremium(address _premiumCurrency) external;\\n\\n    function setProtocolURI(string memory newURI) external;\\n\\n    function updatePolicyExpired(uint256 _policyId) external;\\n\\n    function markToClaim(uint256 _policyId) external;\\n\\n    function allPoliciesLength() external view returns (uint256);\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x105ccbe9773d165bfb1baeb2573b8d77b5fb2835480bdcbd128f5a2090dae75e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISingleSidedInsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f34cb3f24d9ab3a8272c3bb9ea752afe5c6f9fe84ff65a9c1a22cee27165052\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061019a5760003560e01c80638be5a39f116100e1578063b84ef0811161008a578063d8c5c86311610064578063d8c5c8631461042e578063d914cd4b1461044e578063d9203b911461046e578063f3ae602714610483576101a1565b8063b84ef081146103cc578063be304cf0146103ec578063d4688a4514610419576101a1565b80639a7b5f11116100bb5780639a7b5f111461035e578063a0931af21461038c578063b3d7f728146103ac576101a1565b80638be5a39f146103145780638da5cb5b1461033457806392ff38ec14610349576101a1565b806356704ace11610143578063794e57241161011d578063794e5724146102ca57806386e4c2ad146102df5780638bb70831146102ff576101a1565b806356704ace146102755780635b44d5761461029557806377b330c9146102b5576101a1565b8063385a128f11610174578063385a128f146102135780634dc70bac146102335780634fdc9ea914610255576101a1565b80630f97b97b146101a657806318a00d8e146101d15780632a48235b146101f3576101a1565b366101a157005b600080fd5b3480156101b257600080fd5b506101bb6104a3565b6040516101c89190611242565b60405180910390f35b3480156101dd57600080fd5b506101f16101ec366004611193565b6104b2565b005b3480156101ff57600080fd5b506101bb61020e3660046111dd565b61055a565b34801561021f57600080fd5b506101f161022e3660046111dd565b610584565b34801561023f57600080fd5b506102486105fd565b6040516101c89190611515565b34801561026157600080fd5b506101bb6102703660046111dd565b610603565b34801561028157600080fd5b506101f16102903660046111b4565b610613565b3480156102a157600080fd5b506101f16102b03660046111dd565b610794565b3480156102c157600080fd5b506101bb610826565b3480156102d657600080fd5b50610248610835565b3480156102eb57600080fd5b506101f16102fa3660046111b4565b61083b565b34801561030b57600080fd5b506102486109c5565b34801561032057600080fd5b506101f161032f3660046111dd565b6109cb565b34801561034057600080fd5b506101bb610a30565b34801561035557600080fd5b50610248610a3f565b34801561036a57600080fd5b5061037e610379366004611193565b610a45565b6040516101c892919061151e565b34801561039857600080fd5b506101f16103a73660046111dd565b610a61565b3480156103b857600080fd5b506101f16103c73660046111dd565b610aeb565b3480156103d857600080fd5b506101f16103e7366004611193565b610b44565b3480156103f857600080fd5b5061040c6104073660046111dd565b610c6f565b6040516101c8919061127a565b34801561042557600080fd5b50610248610c82565b34801561043a57600080fd5b506101f16104493660046111dd565b610c88565b34801561045a57600080fd5b506101f1610469366004611193565b610d01565b34801561047a57600080fd5b506101bb610e00565b34801561048f57600080fd5b5061037e61049e366004611193565b610e0f565b6003546001600160a01b031681565b6001546001600160a01b031633146104e55760405162461bcd60e51b81526004016104dc906112ba565b60405180910390fd5b600260005414156105085760405162461bcd60e51b81526004016104dc90611470565b60026000556001600160a01b0381166105335760405162461bcd60e51b81526004016104dc906112f1565b600280546001600160a01b0319166001600160a01b03929092169190911790556001600055565b6006818154811061056a57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146105ae5760405162461bcd60e51b81526004016104dc906112ba565b600260005414156105d15760405162461bcd60e51b81526004016104dc90611470565b6002600055806105f35760405162461bcd60e51b81526004016104dc90611328565b600d556001600055565b600f5481565b600a818154811061056a57600080fd5b600260005414156106365760405162461bcd60e51b81526004016104dc90611470565b60026000908155604051637a5402e960e01b8152819081906001600160a01b03861690637a5402e99061066d908790600401611515565b60806040518083038186803b15801561068557600080fd5b505afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd919061120d565b509194509250905060006106d18284611552565b421080159150610787576106e786856000610e2b565b6040516352eaf0a160e11b81526001600160a01b0387169063a5d5e14290610713908890600401611515565b600060405180830381600087803b15801561072d57600080fd5b505af1158015610741573d6000803e3d6000fd5b50505050856001600160a01b03167faf1c77a8196c946ab8e645210cd1e2685b4fb758ddfd474fd918298854dea6fc8660405161077e9190611515565b60405180910390a25b5050600160005550505050565b600260005414156107b75760405162461bcd60e51b81526004016104dc90611470565b600260009081553381526005602052604090206001015460ff166107ed5760405162461bcd60e51b81526004016104dc90611439565b6107f681610f59565b6108125760405162461bcd60e51b81526004016104dc906113cd565b61081e33826000610f8e565b506001600055565b6004546001600160a01b031681565b600d5481565b6001546001600160a01b031633146108655760405162461bcd60e51b81526004016104dc906112ba565b600260005414156108885760405162461bcd60e51b81526004016104dc90611470565b60026000908155604051637a5402e960e01b81526001600160a01b03841690637a5402e9906108bb908590600401611515565b60806040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b919061120d565b505050905061091c83826000610e2b565b6040516319d9b48f60e11b81526001600160a01b038416906333b3691e90610948908590600401611515565b600060405180830381600087803b15801561096257600080fd5b505af1158015610976573d6000803e3d6000fd5b50505050826001600160a01b03167f56b46e5b13fdb3c0b1989f448e91b2ad68cf0c8e8ddd87f996720708ae3a1569836040516109b39190611515565b60405180910390a25050600160005550565b600e5481565b600260005414156109ee5760405162461bcd60e51b81526004016104dc90611470565b600260009081553381526005602052604090206001015460ff16610a245760405162461bcd60e51b81526004016104dc90611439565b61081e33826001610f8e565b6001546001600160a01b031681565b60085481565b6005602052600090815260409020805460019091015460ff1682565b60026000541415610a845760405162461bcd60e51b81526004016104dc90611470565b600260009081553381526009602052604090206001015460ff16610aba5760405162461bcd60e51b81526004016104dc90611402565b610ac3816110ad565b610adf5760405162461bcd60e51b81526004016104dc90611285565b61081e33826001610e2b565b60026000541415610b0e5760405162461bcd60e51b81526004016104dc90611470565b600260009081553381526005602052604090206001015460ff166108125760405162461bcd60e51b81526004016104dc90611439565b60026000541415610b675760405162461bcd60e51b81526004016104dc90611470565b600260009081556001600160a01b03821681526009602052604090206001015460ff1615610ba75760405162461bcd60e51b81526004016104dc906114de565b600a805460018082019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b0384169081179091556040805180820182526000808252602080830186815294825260099052919091209051815590519101805460ff1916911515919091179055610c33600b611173565b6040516001600160a01b038216907f0789738a8762772f9c60cff4d99f9abd7acfc972d634b64eeb4c98370cce70ee90600090a2506001600055565b6000610c7a82610f59565b90505b919050565b600c5481565b6001546001600160a01b03163314610cb25760405162461bcd60e51b81526004016104dc906112ba565b60026000541415610cd55760405162461bcd60e51b81526004016104dc90611470565b600260005580610cf75760405162461bcd60e51b81526004016104dc90611328565b600e556001600055565b6001600160a01b03811660009081526005602052604090206001015460ff1615610d3d5760405162461bcd60e51b81526004016104dc90611396565b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0384169081179091556040805180820182526000808252602080830186815294825260059052919091209051815590519101805460ff1916911515919091179055610dc96007611173565b6040516001600160a01b038216907f0efea706f79fea31d38bda2770598b35fe0bf3c0332f91d3fb62bf987f3b2e3390600090a250565b6002546001600160a01b031681565b6009602052600090815260409020805460019091015460ff1682565b80610e68576001600160a01b038316600090815260096020526040902054821115610e685760405162461bcd60e51b81526004016104dc9061135f565b80610e96576001600160a01b038316600090815260096020526040902054610e919083906115a9565b610eba565b6001600160a01b038316600090815260096020526040902054610eba908390611552565b6001600160a01b03841660009081526009602052604090205580610eeb5781600c54610ee691906115a9565b610ef9565b81600c54610ef99190611552565b600c8190556001600160a01b0384166000818152600960205260409081902054905191927facece99dd8b86cb96519fb17caded4d103b35a8261463d0d11f80a411460730092610f4c928792909161153c565b60405180910390a2505050565b6000600f54600d54600854610f6e919061158a565b610f78919061156a565b82600854610f8691906115a9565b101592915050565b80610fcb576001600160a01b038316600090815260056020526040902054821115610fcb5760405162461bcd60e51b81526004016104dc906114a7565b80610ff9576001600160a01b038316600090815260056020526040902054610ff49083906115a9565b61101d565b6001600160a01b03831660009081526005602052604090205461101d908390611552565b6001600160a01b0384166000908152600560205260409020558061104e578160085461104991906115a9565b61105c565b8160085461105c9190611552565b60088190556001600160a01b0384166000818152600560205260409081902054905191927f4c54f63d510ce2f2f9bf99bf203458cb67aa75fae97ccab560a1654eba9dbf2492610f4c92919061152e565b60025460035460048054600854604051631a44cdf360e11b815260009586956001600160a01b03918216956334899be6956110ef959284169493169201611256565b60206040518083038186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f91906111f5565b9050600f54600e5482611152919061158a565b61115c919061156a565b83600c5461116a9190611552565b11159392505050565b80546001019055565b80356001600160a01b0381168114610c7d57600080fd5b6000602082840312156111a4578081fd5b6111ad8261117c565b9392505050565b600080604083850312156111c6578081fd5b6111cf8361117c565b946020939093013593505050565b6000602082840312156111ee578081fd5b5035919050565b600060208284031215611206578081fd5b5051919050565b60008060008060808587031215611222578182fd5b505082516020840151604085015160609095015191969095509092509050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b6020808252818101527f556e6f52653a206d6178696d756d206c65766572616765206f766572666c6f77604082015260600190565b6020808252601e908201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e0000604082015260600190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252600f908201527f556e6f52653a207a65726f206d63720000000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20706f6c69637920636f766572616765206f766572666c6f7700604082015260600190565b60208082526019908201527f556e6f52653a20616c726561647920657869737420706f6f6c00000000000000604082015260600190565b6020808252818101527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f77604082015260600190565b60208082526016908201527f556e6f52653a206e6f20657869737420706f6c69637900000000000000000000604082015260600190565b60208082526014908201527f556e6f52653a206e6f2065786973742073736970000000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601c908201527f556e6f52653a20706f6f6c206361706974616c206f766572666c6f7700000000604082015260600190565b6020808252601b908201527f556e6f52653a20616c726561647920657869737420706f6c6963790000000000604082015260600190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60008219821115611565576115656115c0565b500190565b60008261158557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156115a4576115a46115c0565b500290565b6000828210156115bb576115bb6115c0565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212209af9b755d7e31071aeee484dacc497c65829452f6eda0beb2839950f71f8ebc264736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2421,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2423,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2425,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "UNO_TOKEN",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2427,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "USDT_TOKEN",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2442,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(PoolInfo)2432_storage)"
      },
      {
        "astId": 2445,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolList",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2448,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)2094_storage"
      },
      {
        "astId": 2450,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalCapitalStaked",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2455,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "policyInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(PolicyInfo)2437_storage)"
      },
      {
        "astId": 2458,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "policyList",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2461,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "policyIds",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)2094_storage"
      },
      {
        "astId": 2463,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalUtilizedAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2465,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MCR",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2467,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MLR",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2470,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "CALC_PRECISION",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(PolicyInfo)2437_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CapitalAgent.PolicyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyInfo)2437_storage"
      },
      "t_mapping(t_address,t_struct(PoolInfo)2432_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CapitalAgent.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)2432_storage"
      },
      "t_struct(Counter)2094_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2093,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PolicyInfo)2437_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PolicyInfo",
        "members": [
          {
            "astId": 2434,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "utilizedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2436,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)2432_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PoolInfo",
        "members": [
          {
            "astId": 2429,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "totalCapital",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2431,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}