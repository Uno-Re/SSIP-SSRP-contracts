{
  "address": "0xA8a49A457d5cd42d01A935002f7d593127Bf661F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_claimAssessor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestAmount",
          "type": "uint256"
        }
      ],
      "name": "LeftPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSRP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "LogCreateRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSRP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_syntheticSSRP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "LogCreateSyntheticSSRP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawLpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawUnoAmount",
          "type": "uint256"
        }
      ],
      "name": "LogLeaveFromPendingSSRP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "LogLpTransferInSSRP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_lastRewardBlock",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_accUnoPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimAmount",
          "type": "uint256"
        }
      ],
      "name": "PolicyClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSRP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "RiskPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "StakedInPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_UNO_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelWithdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAssessor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "createRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "createRiskPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "createSyntheticSSRP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterInPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "getStakedAmountPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalWithdrawPendingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawRequestPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingAmountInUno",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originUnoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leaveFromPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveFromPoolInPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lpTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "pendingUno",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "policyClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "lastRewardBlock",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "accUnoPerShare",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "unoMultiplierPerBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "riskPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimAssessor",
          "type": "address"
        }
      ],
      "name": "setClaimAssessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockTime",
          "type": "uint256"
        }
      ],
      "name": "setLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrateTo",
          "type": "address"
        }
      ],
      "name": "setMigrateTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLPCapital",
          "type": "uint256"
        }
      ],
      "name": "setMinLPCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setRewardMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticSSRP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastWithdrawTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b720ddd3abb74411e06b55a4813931453d17751342330af6667bb841c102795",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0xA8a49A457d5cd42d01A935002f7d593127Bf661F",
    "transactionIndex": 4,
    "gasUsed": "2556841",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9b84a12a548a0bfac47fd26c165f88c137fcae2d1ec34f65265a6ba92cc410e3",
    "transactionHash": "0x3b720ddd3abb74411e06b55a4813931453d17751342330af6667bb841c102795",
    "logs": [],
    "blockNumber": 9870457,
    "cumulativeGasUsed": "8238512",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "0x5569BDF4e02cec3fE459796e3d0e741616029fA4"
  ],
  "solcInputHash": "850ee7ecdab72c01fbce930f264cd00b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestAmount\",\"type\":\"uint256\"}],\"name\":\"LeftPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSRP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"LogCreateRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSRP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_syntheticSSRP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"LogCreateSyntheticSSRP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawLpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawUnoAmount\",\"type\":\"uint256\"}],\"name\":\"LogLeaveFromPendingSSRP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogLpTransferInSSRP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_lastRewardBlock\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_accUnoPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"PolicyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSRP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"RiskPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakedInPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_UNO_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAssessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"createRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"createRiskPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"createSyntheticSSRP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getStakedAmountPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWithdrawPendingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawRequestPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmountInUno\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originUnoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveFromPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveFromPoolInPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lpTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"pendingUno\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"policyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastRewardBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"accUnoPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"unoMultiplierPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"}],\"name\":\"setClaimAssessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrateTo\",\"type\":\"address\"}],\"name\":\"setMigrateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLPCapital\",\"type\":\"uint256\"}],\"name\":\"setMinLPCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticSSRP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createRiskPool(string,string,address,address,uint256)\":{\"details\":\"create Risk pool with UNO from SSRP owner\"},\"getTotalWithdrawPendingAmount()\":{\"details\":\"get total withdraw request amount in pending for the risk pool in UNO\"},\"getWithdrawRequestPerUser(address)\":{\"details\":\"get withdraw request amount in pending per user in UNO\"},\"leaveFromPending()\":{\"details\":\"user can submit claim again and receive his funds into his wallet after 10 days since last WR.\"},\"leaveFromPoolInPending(uint256)\":{\"details\":\"WR will be in pending for 10 days at least\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleSidedReinsurancePool.sol\":\"SingleSidedReinsurancePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/SingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRiskPoolFactory.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/ISingleSidedReinsurancePool.sol\\\";\\nimport \\\"./interfaces/ISyntheticSSRPFactory.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SingleSidedReinsurancePool is ISingleSidedReinsurancePool, ReentrancyGuard {\\n    address public owner;\\n    address public claimAssessor;\\n    address public migrateTo;\\n    address public syntheticSSRP;\\n\\n    uint256 public LOCK_TIME = 1 days;\\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\\n\\n    address public rewarder;\\n    address public override riskPool;\\n    struct PoolInfo {\\n        uint128 lastRewardBlock;\\n        uint128 accUnoPerShare;\\n        uint256 unoMultiplierPerBlock;\\n    }\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    PoolInfo public poolInfo;\\n\\n    event RiskPoolCreated(address indexed _SSRP, address indexed _pool);\\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogUpdatePool(uint128 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogLeaveFromPendingSSRP(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\\n    event LogLpTransferInSSRP(address indexed _from, address indexed _to, uint256 _amount);\\n    event LogCreateRewarder(address indexed _SSRP, address indexed _rewarder, address _currency);\\n    event LogCreateSyntheticSSRP(address indexed _SSRP, address indexed _syntheticSSRP, address indexed _lpToken);\\n\\n    constructor(address _owner, address _claimAssessor) {\\n        owner = _owner;\\n        claimAssessor = _claimAssessor;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyClaimAssessor() {\\n        require(msg.sender == claimAssessor, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyOwner {\\n        require(_rewardMultiplier > 0, \\\"UnoRe: zero value\\\");\\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\\n    }\\n\\n    function setClaimAssessor(address _claimAssessor) external onlyOwner {\\n        require(_claimAssessor != address(0), \\\"UnoRe: zero address\\\");\\n        claimAssessor = _claimAssessor;\\n    }\\n\\n    function setMigrateTo(address _migrateTo) external onlyOwner {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n    }\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external onlyOwner {\\n        require(_minLPCapital > 0, \\\"UnoRe: not allow zero value\\\");\\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\\n    }\\n\\n    function setLockTime(uint256 _lockTime) external onlyOwner {\\n        require(_lockTime > 0, \\\"UnoRe: not allow zero lock time\\\");\\n        LOCK_TIME = _lockTime;\\n    }\\n\\n    /**\\n     * @dev create Risk pool with UNO from SSRP owner\\n     */\\n    function createRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _factory,\\n        address _currency,\\n        uint256 _rewardMultiplier\\n    ) external onlyOwner nonReentrant {\\n        require(riskPool == address(0), \\\"UnoRe: risk pool created already\\\");\\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\\n        poolInfo.lastRewardBlock = uint128(block.number);\\n        poolInfo.accUnoPerShare = 0;\\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\\n        emit RiskPoolCreated(address(this), riskPool);\\n    }\\n\\n    function createRewarder(\\n        address _operator,\\n        address _factory,\\n        address _currency\\n    ) external onlyOwner nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    function createSyntheticSSRP(address _owner, address _factory) external onlyOwner nonReentrant {\\n        require(_owner != address(0), \\\"UnoRe: zero owner address\\\");\\n        require(_factory != address(0), \\\"UnoRe:zero factory address\\\");\\n        require(riskPool != address(0), \\\"UnoRe:zero LP token address\\\");\\n        syntheticSSRP = ISyntheticSSRPFactory(_factory).newSyntheticSSRP(_owner, riskPool);\\n        emit LogCreateSyntheticSSRP(address(this), syntheticSSRP, riskPool);\\n    }\\n\\n    function migrate() external nonReentrant {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > LOCK_TIME;\\n        IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\\n        IMigration(migrateTo).onMigration(msg.sender, amount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n        userInfo[msg.sender].rewardDebt = 0;\\n    }\\n\\n    function pendingUno(address _to) external view returns (uint256 pending) {\\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\\n        uint128 accUnoPerShare = poolInfo.accUnoPerShare;\\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\\n            accUnoPerShare = accUnoPerShare + uint128((unoReward * ACC_UNO_PRECISION) / tokenSupply);\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    function updatePool() public override {\\n        if (block.number > poolInfo.lastRewardBlock) {\\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\\n            if (tokenSupply > 0) {\\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + uint128(((unoReward * ACC_UNO_PRECISION) / tokenSupply));\\n            }\\n            poolInfo.lastRewardBlock = uint128(block.number);\\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\\n        }\\n    }\\n\\n    function enterInPool(uint256 _amount) external override nonReentrant {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        address token = IRiskPool(riskPool).currency();\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\\n        IRiskPool(riskPool).enter(msg.sender, _amount);\\n        userInfo[msg.sender].rewardDebt =\\n            userInfo[msg.sender].rewardDebt +\\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\\n            ACC_UNO_PRECISION;\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + ((_amount * 1e18) / lpPriceUno);\\n        emit StakedInPool(msg.sender, riskPool, _amount);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\\n        _harvest(msg.sender);\\n        // Withdraw desired amount from pool\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\\n        require(((amount - pendingAmount) * lpPriceUno) / 1e18 >= _amount, \\\"UnoRe: withdraw amount overflow\\\");\\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\\n\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n        emit LeftPool(msg.sender, riskPool, _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending() external override nonReentrant {\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        userInfo[msg.sender].rewardDebt =\\n            accumulatedUno -\\n            ((pendingAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender);\\n        userInfo[msg.sender].amount = amount - withdrawAmount;\\n        emit LogLeaveFromPendingSSRP(msg.sender, withdrawAmount, withdrawAmountInUNO);\\n    }\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        require(msg.sender == address(riskPool), \\\"UnoRe: not allow others transfer\\\");\\n        if (_from != syntheticSSRP && _to != syntheticSSRP) {\\n            _harvest(_from);\\n            uint256 amount = userInfo[_from].amount;\\n            (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\\n            require(amount - pendingAmount >= _amount, \\\"UnoRe: balance overflow\\\");\\n            uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n            userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n            userInfo[_from].amount = amount - _amount;\\n\\n            userInfo[_to].rewardDebt =\\n                userInfo[_to].rewardDebt +\\n                ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n            userInfo[_to].amount = userInfo[_to].amount + _amount;\\n\\n            emit LogLpTransferInSSRP(_from, _to, _amount);\\n        }\\n    }\\n\\n    function harvest(address _to) external override nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[msg.sender].rewardDebt = accumulatedUno;\\n        uint256 rewardAmount = 0;\\n\\n        if (rewarder != address(0) && _pendingUno != 0) {\\n            rewardAmount = IRewarder(rewarder).onReward(_to, _pendingUno);\\n        }\\n\\n        emit Harvest(msg.sender, _to, rewardAmount);\\n    }\\n\\n    function cancelWithdrawRequest() external nonReentrant {\\n        IRiskPool(riskPool).cancelWithrawRequest(msg.sender);\\n    }\\n\\n    function policyClaim(address _to, uint256 _amount) external onlyClaimAssessor nonReentrant {\\n        require(_to != address(0), \\\"UnoRe: zero address\\\");\\n        require(_amount > 0, \\\"UnoRe: zero amount\\\");\\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_to, _amount);\\n        emit PolicyClaim(_to, realClaimAmount);\\n    }\\n\\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\\n        lpAmount = userInfo[_to].amount;\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\\n    }\\n\\n    /**\\n     * @dev get withdraw request amount in pending per user in UNO\\n     */\\n    function getWithdrawRequestPerUser(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingAmount,\\n            uint256 pendingAmountInUno,\\n            uint256 originUnoAmount,\\n            uint256 requestTime\\n        )\\n    {\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\\n    }\\n\\n    /**\\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\\n     */\\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\\n    }\\n}\\n\",\"keccak256\":\"0x7f5ecdf8128ca99af9741fce35a3099079368fc24b60daadc9c31eb4268fd221\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IMigration {\\n    function onMigration(\\n        address who_,\\n        uint256 amount_,\\n        bytes memory data_\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b25ec77b6df9db73050a67b9ce4147154c5be596b6637d47484fd6236965069\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6e37fd84127d6039965b097e57e45f79630c1313d9d841176ce8a8e2ec16b83b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(\\n        address _operator,\\n        address _currency,\\n        address _pool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x14d54228edcd08203983b293cfa44cc13cf1fb450019172ef57a1ebccf89f4a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to) external returns (uint256, uint256);\\n\\n    function cancelWithrawRequest(address _to) external;\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(\\n        address _to,\\n        address _migrateTo,\\n        bool _isUnLocked\\n    ) external;\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function lpPriceUno() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a5eddf6f3d2f487eefb107a6bbe9547e30f16356a63f63d1cc9bffcf6d97118\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _pool,\\n        address _currency\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x2822333ced0a43d8bf0c0a4a4a0ed6718e2b5cfd55792fd89e5d06211f57898e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISingleSidedReinsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x049a33080ab7bd863f3bcb8faaf66866fbe2066b3be9c4f5a15558c421e95ce7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISyntheticSSRPFactory {\\n    function newSyntheticSSRP(address _owner, address _lpToken) external returns (address);\\n}\\n\",\"keccak256\":\"0x5a5af783ff3bd53ffff55c77a8d9e7d24e8debe261e3100e6694841075362c05\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052620151806005553480156200001857600080fd5b5060405162002c7c38038062002c7c8339810160408190526200003b916200008f565b6001600081905580546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055620000c6565b80516001600160a01b03811681146200008a57600080fd5b919050565b60008060408385031215620000a2578182fd5b620000ad8362000072565b9150620000bd6020840162000072565b90509250929050565b612ba680620000d66000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80639336f4061161010f578063bc8f8828116100a2578063e08c5de111610071578063e08c5de1146103c8578063e19e7168146103db578063e3161ddd146103e3578063e3824a38146103eb576101e5565b8063bc8f8828146103a8578063c4e5dacf146103b0578063c6e89915146103b8578063dcc3e06e146103c0576101e5565b8063a3bdd632116100de578063a3bdd63214610359578063ae04d45d14610361578063af16d6e014610374578063ba61945714610387576101e5565b80639336f4061461030857806393b6b86c1461032b57806398c6e7601461033e5780639cdf6c2714610346576101e5565b80634c0323661161018757806389919b711161015657806389919b71146102dd5780638ba04b17146102e55780638da5cb5b146102f85780638fd3ab8014610300576101e5565b80634c0323661461028b5780635a2f3d09146102a0578063736ec05c146102b75780638395206c146102ca576101e5565b8063157f71ed116101c3578063157f71ed146102255780631959a002146102385780632e4a014214610263578063413d9c3a14610276576101e5565b80630bd075a1146101ea5780630e5c011e146101ff5780630e9ae42014610212575b600080fd5b6101fd6101f8366004612411565b6103fe565b005b6101fd61020d366004612228565b610456565b6101fd6102203660046122e9565b61048f565b6101fd610233366004612228565b610787565b61024b610246366004612228565b6107f9565b60405161025a93929190612a78565b60405180910390f35b6101fd610271366004612329565b61081a565b61027e610984565b60405161025a9190612a61565b61029361098a565b60405161025a91906124f4565b6102a8610999565b60405161025a93929190612a1a565b6101fd6102c5366004612228565b6109b7565b6101fd6102d8366004612411565b610a29565b61027e610c86565b6101fd6102f3366004612374565b610c92565b610293610e1e565b6101fd610e2d565b61031b610316366004612228565b610fa5565b60405161025a9493929190612a8e565b6101fd610339366004612411565b6110e3565b610293611192565b6101fd610354366004612267565b6111a1565b61027e611349565b6101fd61036f366004612411565b6113cb565b6101fd61038236600461229f565b61141a565b61039a610395366004612228565b611579565b60405161025a929190612a6a565b6101fd611634565b6102936118b0565b6102936118bf565b6102936118ce565b61027e6103d6366004612228565b6118dd565b6101fd611a47565b6101fd611ad8565b6101fd6103f9366004612411565b611c6e565b6001546001600160a01b031633146104315760405162461bcd60e51b81526004016104289061290b565b60405180910390fd5b600081116104515760405162461bcd60e51b8152600401610428906127c1565b600a55565b600260005414156104795760405162461bcd60e51b815260040161042890612977565b600260005561048781611f4a565b506001600055565b600260005414156104b25760405162461bcd60e51b815260040161042890612977565b60026000556007546001600160a01b031633146104e15760405162461bcd60e51b8152600401610428906129e5565b6004546001600160a01b0384811691161480159061050d57506004546001600160a01b03838116911614155b1561077d5761051b83611f4a565b6001600160a01b03808416600090815260086020526040808220600201546007549151631665744b60e11b815290939190911690632ccae896906105639088906004016124f4565b60606040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190612464565b505090508281836105c49190612b2b565b10156105e25760405162461bcd60e51b81526004016104289061271e565b600954600090670de0b6b3a76400009061060c90600160801b90046001600160801b031685612b0c565b6106169190612aec565b600954909150670de0b6b3a76400009061064090600160801b90046001600160801b031686612b0c565b61064a9190612aec565b6106549082612b2b565b6001600160a01b03871660009081526008602052604090206001015561067a8484612b2b565b6001600160a01b038716600090815260086020526040902060020155600954670de0b6b3a7640000906106bd90600160801b90046001600160801b031686612b0c565b6106c79190612aec565b6001600160a01b0386166000908152600860205260409020600101546106ed9190612ad4565b6001600160a01b038616600090815260086020526040902060018101919091556002015461071c908590612ad4565b6001600160a01b0380871660008181526008602052604090819020600201939093559151908816907fe97af49bf17de46bed3f953a242569bed68114f89f39c1afe4012bba1c5963d490610771908890612a61565b60405180910390a35050505b5050600160005550565b6001546001600160a01b031633146107b15760405162461bcd60e51b81526004016104289061290b565b6001600160a01b0381166107d75760405162461bcd60e51b81526004016104289061261c565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60086020526000908152604090208054600182015460029092015490919083565b6002546001600160a01b031633146108445760405162461bcd60e51b81526004016104289061290b565b600260005414156108675760405162461bcd60e51b815260040161042890612977565b60026000556001600160a01b0382166108925760405162461bcd60e51b81526004016104289061261c565b600081116108b25760405162461bcd60e51b8152600401610428906127f8565b60075460405163172500a160e11b81526000916001600160a01b031690632e4a0142906108e5908690869060040161258d565b602060405180830381600087803b1580156108ff57600080fd5b505af1158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190612429565b9050826001600160a01b03167f6420c9536b9a539410a930b1fd8d115dc296d8b71426dcc0ab64f2f736b7d59f826040516109729190612a61565b60405180910390a25050600160005550565b60055481565b6004546001600160a01b031681565b600954600a546001600160801b0380831692600160801b9004169083565b6001546001600160a01b031633146109e15760405162461bcd60e51b81526004016104289061290b565b6001600160a01b038116610a075760405162461bcd60e51b81526004016104289061261c565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415610a4c5760405162461bcd60e51b815260040161042890612977565b6002600055610a5a33611f4a565b336000908152600860209081526040808320600201546007548251627a9fd960e91b815292519194936001600160a01b039091169263f53fb2009260048083019392829003018186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190612429565b600754604051631665744b60e11b81529192506000916001600160a01b0390911690632ccae89690610b1e9033906004016124f4565b60606040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e9190612464565b5050905083670de0b6b3a7640000838386610b899190612b2b565b610b939190612b0c565b610b9d9190612aec565b1015610bbb5760405162461bcd60e51b81526004016104289061268a565b6007546040516323de6d9560e11b81526001600160a01b03909116906347bcdb2a90610bed903390889060040161258d565b600060405180830381600087803b158015610c0757600080fd5b505af1158015610c1b573d6000803e3d6000fd5b5050336000818152600860205260409081902042905560075490516001600160a01b0390911693509091507f940a14c75c418e7230a2e65567722d2dda5a6713cf71b369bd0fa219fdc1ac5e90610c73908890612a61565b60405180910390a3505060016000555050565b670de0b6b3a764000081565b6001546001600160a01b03163314610cbc5760405162461bcd60e51b81526004016104289061290b565b60026000541415610cdf5760405162461bcd60e51b815260040161042890612977565b60026000556007546001600160a01b031615610d0d5760405162461bcd60e51b815260040161042890612755565b604051630d98e31f60e01b81526001600160a01b03841690630d98e31f90610d43908a908a908a908a9030908a906004016125ce565b602060405180830381600087803b158015610d5d57600080fd5b505af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d95919061224b565b600780546001600160a01b0319166001600160a01b039283161790819055600980546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117169055600a83905560405191169030907f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd5838021790600090a3505060016000555050505050565b6001546001600160a01b031681565b60026000541415610e505760405162461bcd60e51b815260040161042890612977565b60026000556003546001600160a01b0316610e7d5760405162461bcd60e51b81526004016104289061261c565b610e8633611f4a565b3360009081526008602052604081206002810154600554915490929190610ead9042612b2b565b600754600354604051633613302f60e01b81529390921193506001600160a01b0390811692633613302f92610eeb9233929116908690600401612545565b600060405180830381600087803b158015610f0557600080fd5b505af1158015610f19573d6000803e3d6000fd5b505060035460405163ed59344b60e01b81526001600160a01b03909116925063ed59344b9150610f4f90339086906004016125a6565b600060405180830381600087803b158015610f6957600080fd5b505af1158015610f7d573d6000803e3d6000fd5b5050336000908152600860205260408120600281018290556001908101829055905550505050565b6000806000806000600760009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffb57600080fd5b505afa15801561100f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110339190612429565b600754604051631665744b60e11b81529192506001600160a01b031690632ccae896906110649089906004016124f4565b60606040518083038186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b49190612464565b9196509093509150670de0b6b3a76400006110cf8287612b0c565b6110d99190612aec565b9350509193509193565b6001546001600160a01b0316331461110d5760405162461bcd60e51b81526004016104289061290b565b6000811161112d5760405162461bcd60e51b8152600401610428906129ae565b6007546040516324edae1b60e21b81526001600160a01b03909116906393b6b86c9061115d908490600401612a61565b600060405180830381600087803b15801561117757600080fd5b505af115801561118b573d6000803e3d6000fd5b5050505050565b6003546001600160a01b031681565b6001546001600160a01b031633146111cb5760405162461bcd60e51b81526004016104289061290b565b600260005414156111ee5760405162461bcd60e51b815260040161042890612977565b60026000556001600160a01b0382166112195760405162461bcd60e51b815260040161042890612866565b6001600160a01b03811661123f5760405162461bcd60e51b815260040161042890612653565b6007546001600160a01b03166112675760405162461bcd60e51b81526004016104289061282f565b6007546040516377b3d99760e01b81526001600160a01b03808416926377b3d997926112999287921690600401612508565b602060405180830381600087803b1580156112b357600080fd5b505af11580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb919061224b565b600480546001600160a01b0319166001600160a01b03928316179081905560075460405190831692919091169030907f3d2362862a7867eb0f64552c1fa638b6adf3907a7defe349eab238f6a0b2d83190600090a450506001600055565b6007546040805163e95aa8d360e01b815290516000926001600160a01b03169163e95aa8d3916004808301926020929190829003018186803b15801561138e57600080fd5b505afa1580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190612429565b905090565b6001546001600160a01b031633146113f55760405162461bcd60e51b81526004016104289061290b565b600081116114155760405162461bcd60e51b81526004016104289061289d565b600555565b6001546001600160a01b031633146114445760405162461bcd60e51b81526004016104289061290b565b600260005414156114675760405162461bcd60e51b815260040161042890612977565b60026000556001600160a01b0382166114925760405162461bcd60e51b815260040161042890612942565b6040516369ee745160e01b81526001600160a01b038316906369ee7451906114c290869085903090600401612522565b602060405180830381600087803b1580156114dc57600080fd5b505af11580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611514919061224b565b600680546001600160a01b0319166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b906115679085906124f4565b60405180910390a35050600160005550565b6001600160a01b038082166000908152600860209081526040808320600201546007548251627a9fd960e91b81529251949591948694919092169263f53fb2009260048083019392829003018186803b1580156115d557600080fd5b505afa1580156115e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160d9190612429565b9050670de0b6b3a76400006116228284612b0c565b61162c9190612aec565b925050915091565b600260005414156116575760405162461bcd60e51b815260040161042890612977565b6002600090815560055433825260086020526040909120546116799042612b2b565b10156116975760405162461bcd60e51b81526004016104289061278a565b6116a033611f4a565b33600081815260086020526040808220600201546007549151631665744b60e11b815290936001600160a01b0390921691632ccae896916116e491906004016124f4565b60606040518083038186803b1580156116fc57600080fd5b505afa158015611710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117349190612464565b5050600954909150600090670de0b6b3a76400009061176390600160801b90046001600160801b031685612b0c565b61176d9190612aec565b600954909150670de0b6b3a76400009061179790600160801b90046001600160801b031684612b0c565b6117a19190612aec565b6117ab9082612b2b565b3360008181526008602052604080822060010193909355600754925163b20ecd1560e01b8152909283926001600160a01b039091169163b20ecd15916117f3916004016124f4565b6040805180830381600087803b15801561180c57600080fd5b505af1158015611820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118449190612441565b90925090506118538286612b2b565b33600081815260086020526040908190206002019290925590517f617c612e91653c86cd4538e3de94b98c8dd628b41e343380d1cf858f95c0674a9061189c9085908590612a6a565b60405180910390a250506001600055505050565b6007546001600160a01b031681565b6002546001600160a01b031681565b6006546001600160a01b031681565b600080600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192e57600080fd5b505afa158015611942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119669190612429565b6009549091506001600160801b03600160801b8204811691164311801561198c57508115155b156119eb576009546000906119aa906001600160801b031643612b2b565b600a549091506000906119bd9083612b0c565b9050836119d2670de0b6b3a764000083612b0c565b6119dc9190612aec565b6119e69084612aa9565b925050505b6001600160a01b03841660009081526008602052604090206002810154600190910154670de0b6b3a7640000611a2a6001600160801b03851684612b0c565b611a349190612aec565b611a3e9190612b2b565b95945050505050565b60026000541415611a6a5760405162461bcd60e51b815260040161042890612977565b60026000556007546040516306e6829960e51b81526001600160a01b039091169063dcd0532090611a9f9033906004016124f4565b600060405180830381600087803b158015611ab957600080fd5b505af1158015611acd573d6000803e3d6000fd5b505060016000555050565b6009546001600160801b0316431115611c6c57600754604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611b3057600080fd5b505afa158015611b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b689190612429565b90508015611bf857600954600090611b89906001600160801b031643612b2b565b600a54909150600090611b9c9083612b0c565b905082611bb1670de0b6b3a764000083612b0c565b611bbb9190612aec565b600954611bd89190600160801b90046001600160801b0316612aa9565b600980546001600160801b03928316600160801b02921691909117905550505b600980546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117918290556040517f982b813c7d00a9ffce9441ba40f429b2e4a35068d75532f496d0c63585c2fa6892611c6292818116928692600160801b900490911690612a3e565b60405180910390a1505b565b60026000541415611c915760405162461bcd60e51b815260040161042890612977565b600260005580611cb35760405162461bcd60e51b8152600401610428906128d4565b611cbb611ad8565b6007546040805163e5a6b10f60e01b815290516000926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b158015611d0057600080fd5b505afa158015611d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d38919061224b565b90506000600760009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8a57600080fd5b505afa158015611d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc29190612429565b600754909150611ddf90839033906001600160a01b0316866120dc565b600754604051637e348b7d60e01b81526001600160a01b0390911690637e348b7d90611e11903390879060040161258d565b600060405180830381600087803b158015611e2b57600080fd5b505af1158015611e3f573d6000803e3d6000fd5b5050600954670de0b6b3a76400009250839150600160801b90046001600160801b0316611e6c8684612b0c565b611e769190612b0c565b611e809190612aec565b611e8a9190612aec565b33600090815260086020526040902060010154611ea79190612ad4565b3360009081526008602052604090206001015580611ecd84670de0b6b3a7640000612b0c565b611ed79190612aec565b33600090815260086020526040902060020154611ef49190612ad4565b33600081815260086020526040908190206002019290925560075491516001600160a01b03909216917fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f90611567908790612a61565b611f52611ad8565b6001600160a01b038116600090815260086020526040812060020154600954909190670de0b6b3a764000090611f9890600160801b90046001600160801b031684612b0c565b611fa29190612aec565b6001600160a01b03841660009081526008602052604081206001015491925090611fcc9083612b2b565b336000908152600860205260408120600101849055600654919250906001600160a01b031615801590611ffe57508115155b1561208a5760065460405163186e465160e31b81526001600160a01b039091169063c372328890612035908890869060040161258d565b602060405180830381600087803b15801561204f57600080fd5b505af1158015612063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120879190612429565b90505b846001600160a01b0316336001600160a01b03167fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec26797836040516120cd9190612a61565b60405180910390a35050505050565b600080856001600160a01b03166323b872dd86868660405160240161210393929190612569565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161215191906124bb565b6000604051808303816000865af19150503d806000811461218e576040519150601f19603f3d011682016040523d82523d6000602084013e612193565b606091505b50915091508180156121bd5750805115806121bd5750808060200190518101906121bd9190612354565b6121d95760405162461bcd60e51b8152600401610428906126c1565b505050505050565b60008083601f8401126121f2578182fd5b50813567ffffffffffffffff811115612209578182fd5b60208301915083602082850101111561222157600080fd5b9250929050565b600060208284031215612239578081fd5b813561224481612b58565b9392505050565b60006020828403121561225c578081fd5b815161224481612b58565b60008060408385031215612279578081fd5b823561228481612b58565b9150602083013561229481612b58565b809150509250929050565b6000806000606084860312156122b3578081fd5b83356122be81612b58565b925060208401356122ce81612b58565b915060408401356122de81612b58565b809150509250925092565b6000806000606084860312156122fd578283fd5b833561230881612b58565b9250602084013561231881612b58565b929592945050506040919091013590565b6000806040838503121561233b578182fd5b823561234681612b58565b946020939093013593505050565b600060208284031215612365578081fd5b81518015158114612244578182fd5b600080600080600080600060a0888a03121561238e578283fd5b873567ffffffffffffffff808211156123a5578485fd5b6123b18b838c016121e1565b909950975060208a01359150808211156123c9578485fd5b506123d68a828b016121e1565b90965094505060408801356123ea81612b58565b925060608801356123fa81612b58565b809250506080880135905092959891949750929550565b600060208284031215612422578081fd5b5035919050565b60006020828403121561243a578081fd5b5051919050565b60008060408385031215612453578182fd5b505080516020909101519092909150565b600080600060608486031215612478578283fd5b8351925060208401519150604084015190509250925092565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251815b818110156124db57602081860181015185830152016124c1565b818111156124e95782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b6000608082526125e260808301888a612491565b82810360208401526125f5818789612491565b9150506001600160a01b038085166040840152808416606084015250979650505050505050565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601a908201527f556e6f52653a7a65726f20666163746f72792061646472657373000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526017908201527f556e6f52653a2062616c616e6365206f766572666c6f77000000000000000000604082015260600190565b6020808252818101527f556e6f52653a207269736b20706f6f6c206372656174656420616c7265616479604082015260600190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b6020808252601b908201527f556e6f52653a7a65726f204c5020746f6b656e20616464726573730000000000604082015260600190565b60208082526019908201527f556e6f52653a207a65726f206f776e6572206164647265737300000000000000604082015260600190565b6020808252601f908201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d6500604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c75650000000000604082015260600190565b6020808252818101527f556e6f52653a206e6f7420616c6c6f77206f7468657273207472616e73666572604082015260600190565b6001600160801b039384168152919092166020820152604081019190915260600190565b6001600160801b0393841681526020810192909252909116604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60006001600160801b03808316818516808303821115612acb57612acb612b42565b01949350505050565b60008219821115612ae757612ae7612b42565b500190565b600082612b0757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b2657612b26612b42565b500290565b600082821015612b3d57612b3d612b42565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612b6d57600080fd5b5056fea26469706673582212202a659f109bad5ae8fa8c91a14517217620b0db6ab6448abf7eb237b50a7a002264736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80639336f4061161010f578063bc8f8828116100a2578063e08c5de111610071578063e08c5de1146103c8578063e19e7168146103db578063e3161ddd146103e3578063e3824a38146103eb576101e5565b8063bc8f8828146103a8578063c4e5dacf146103b0578063c6e89915146103b8578063dcc3e06e146103c0576101e5565b8063a3bdd632116100de578063a3bdd63214610359578063ae04d45d14610361578063af16d6e014610374578063ba61945714610387576101e5565b80639336f4061461030857806393b6b86c1461032b57806398c6e7601461033e5780639cdf6c2714610346576101e5565b80634c0323661161018757806389919b711161015657806389919b71146102dd5780638ba04b17146102e55780638da5cb5b146102f85780638fd3ab8014610300576101e5565b80634c0323661461028b5780635a2f3d09146102a0578063736ec05c146102b75780638395206c146102ca576101e5565b8063157f71ed116101c3578063157f71ed146102255780631959a002146102385780632e4a014214610263578063413d9c3a14610276576101e5565b80630bd075a1146101ea5780630e5c011e146101ff5780630e9ae42014610212575b600080fd5b6101fd6101f8366004612411565b6103fe565b005b6101fd61020d366004612228565b610456565b6101fd6102203660046122e9565b61048f565b6101fd610233366004612228565b610787565b61024b610246366004612228565b6107f9565b60405161025a93929190612a78565b60405180910390f35b6101fd610271366004612329565b61081a565b61027e610984565b60405161025a9190612a61565b61029361098a565b60405161025a91906124f4565b6102a8610999565b60405161025a93929190612a1a565b6101fd6102c5366004612228565b6109b7565b6101fd6102d8366004612411565b610a29565b61027e610c86565b6101fd6102f3366004612374565b610c92565b610293610e1e565b6101fd610e2d565b61031b610316366004612228565b610fa5565b60405161025a9493929190612a8e565b6101fd610339366004612411565b6110e3565b610293611192565b6101fd610354366004612267565b6111a1565b61027e611349565b6101fd61036f366004612411565b6113cb565b6101fd61038236600461229f565b61141a565b61039a610395366004612228565b611579565b60405161025a929190612a6a565b6101fd611634565b6102936118b0565b6102936118bf565b6102936118ce565b61027e6103d6366004612228565b6118dd565b6101fd611a47565b6101fd611ad8565b6101fd6103f9366004612411565b611c6e565b6001546001600160a01b031633146104315760405162461bcd60e51b81526004016104289061290b565b60405180910390fd5b600081116104515760405162461bcd60e51b8152600401610428906127c1565b600a55565b600260005414156104795760405162461bcd60e51b815260040161042890612977565b600260005561048781611f4a565b506001600055565b600260005414156104b25760405162461bcd60e51b815260040161042890612977565b60026000556007546001600160a01b031633146104e15760405162461bcd60e51b8152600401610428906129e5565b6004546001600160a01b0384811691161480159061050d57506004546001600160a01b03838116911614155b1561077d5761051b83611f4a565b6001600160a01b03808416600090815260086020526040808220600201546007549151631665744b60e11b815290939190911690632ccae896906105639088906004016124f4565b60606040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190612464565b505090508281836105c49190612b2b565b10156105e25760405162461bcd60e51b81526004016104289061271e565b600954600090670de0b6b3a76400009061060c90600160801b90046001600160801b031685612b0c565b6106169190612aec565b600954909150670de0b6b3a76400009061064090600160801b90046001600160801b031686612b0c565b61064a9190612aec565b6106549082612b2b565b6001600160a01b03871660009081526008602052604090206001015561067a8484612b2b565b6001600160a01b038716600090815260086020526040902060020155600954670de0b6b3a7640000906106bd90600160801b90046001600160801b031686612b0c565b6106c79190612aec565b6001600160a01b0386166000908152600860205260409020600101546106ed9190612ad4565b6001600160a01b038616600090815260086020526040902060018101919091556002015461071c908590612ad4565b6001600160a01b0380871660008181526008602052604090819020600201939093559151908816907fe97af49bf17de46bed3f953a242569bed68114f89f39c1afe4012bba1c5963d490610771908890612a61565b60405180910390a35050505b5050600160005550565b6001546001600160a01b031633146107b15760405162461bcd60e51b81526004016104289061290b565b6001600160a01b0381166107d75760405162461bcd60e51b81526004016104289061261c565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60086020526000908152604090208054600182015460029092015490919083565b6002546001600160a01b031633146108445760405162461bcd60e51b81526004016104289061290b565b600260005414156108675760405162461bcd60e51b815260040161042890612977565b60026000556001600160a01b0382166108925760405162461bcd60e51b81526004016104289061261c565b600081116108b25760405162461bcd60e51b8152600401610428906127f8565b60075460405163172500a160e11b81526000916001600160a01b031690632e4a0142906108e5908690869060040161258d565b602060405180830381600087803b1580156108ff57600080fd5b505af1158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190612429565b9050826001600160a01b03167f6420c9536b9a539410a930b1fd8d115dc296d8b71426dcc0ab64f2f736b7d59f826040516109729190612a61565b60405180910390a25050600160005550565b60055481565b6004546001600160a01b031681565b600954600a546001600160801b0380831692600160801b9004169083565b6001546001600160a01b031633146109e15760405162461bcd60e51b81526004016104289061290b565b6001600160a01b038116610a075760405162461bcd60e51b81526004016104289061261c565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415610a4c5760405162461bcd60e51b815260040161042890612977565b6002600055610a5a33611f4a565b336000908152600860209081526040808320600201546007548251627a9fd960e91b815292519194936001600160a01b039091169263f53fb2009260048083019392829003018186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190612429565b600754604051631665744b60e11b81529192506000916001600160a01b0390911690632ccae89690610b1e9033906004016124f4565b60606040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e9190612464565b5050905083670de0b6b3a7640000838386610b899190612b2b565b610b939190612b0c565b610b9d9190612aec565b1015610bbb5760405162461bcd60e51b81526004016104289061268a565b6007546040516323de6d9560e11b81526001600160a01b03909116906347bcdb2a90610bed903390889060040161258d565b600060405180830381600087803b158015610c0757600080fd5b505af1158015610c1b573d6000803e3d6000fd5b5050336000818152600860205260409081902042905560075490516001600160a01b0390911693509091507f940a14c75c418e7230a2e65567722d2dda5a6713cf71b369bd0fa219fdc1ac5e90610c73908890612a61565b60405180910390a3505060016000555050565b670de0b6b3a764000081565b6001546001600160a01b03163314610cbc5760405162461bcd60e51b81526004016104289061290b565b60026000541415610cdf5760405162461bcd60e51b815260040161042890612977565b60026000556007546001600160a01b031615610d0d5760405162461bcd60e51b815260040161042890612755565b604051630d98e31f60e01b81526001600160a01b03841690630d98e31f90610d43908a908a908a908a9030908a906004016125ce565b602060405180830381600087803b158015610d5d57600080fd5b505af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d95919061224b565b600780546001600160a01b0319166001600160a01b039283161790819055600980546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117169055600a83905560405191169030907f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd5838021790600090a3505060016000555050505050565b6001546001600160a01b031681565b60026000541415610e505760405162461bcd60e51b815260040161042890612977565b60026000556003546001600160a01b0316610e7d5760405162461bcd60e51b81526004016104289061261c565b610e8633611f4a565b3360009081526008602052604081206002810154600554915490929190610ead9042612b2b565b600754600354604051633613302f60e01b81529390921193506001600160a01b0390811692633613302f92610eeb9233929116908690600401612545565b600060405180830381600087803b158015610f0557600080fd5b505af1158015610f19573d6000803e3d6000fd5b505060035460405163ed59344b60e01b81526001600160a01b03909116925063ed59344b9150610f4f90339086906004016125a6565b600060405180830381600087803b158015610f6957600080fd5b505af1158015610f7d573d6000803e3d6000fd5b5050336000908152600860205260408120600281018290556001908101829055905550505050565b6000806000806000600760009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffb57600080fd5b505afa15801561100f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110339190612429565b600754604051631665744b60e11b81529192506001600160a01b031690632ccae896906110649089906004016124f4565b60606040518083038186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b49190612464565b9196509093509150670de0b6b3a76400006110cf8287612b0c565b6110d99190612aec565b9350509193509193565b6001546001600160a01b0316331461110d5760405162461bcd60e51b81526004016104289061290b565b6000811161112d5760405162461bcd60e51b8152600401610428906129ae565b6007546040516324edae1b60e21b81526001600160a01b03909116906393b6b86c9061115d908490600401612a61565b600060405180830381600087803b15801561117757600080fd5b505af115801561118b573d6000803e3d6000fd5b5050505050565b6003546001600160a01b031681565b6001546001600160a01b031633146111cb5760405162461bcd60e51b81526004016104289061290b565b600260005414156111ee5760405162461bcd60e51b815260040161042890612977565b60026000556001600160a01b0382166112195760405162461bcd60e51b815260040161042890612866565b6001600160a01b03811661123f5760405162461bcd60e51b815260040161042890612653565b6007546001600160a01b03166112675760405162461bcd60e51b81526004016104289061282f565b6007546040516377b3d99760e01b81526001600160a01b03808416926377b3d997926112999287921690600401612508565b602060405180830381600087803b1580156112b357600080fd5b505af11580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb919061224b565b600480546001600160a01b0319166001600160a01b03928316179081905560075460405190831692919091169030907f3d2362862a7867eb0f64552c1fa638b6adf3907a7defe349eab238f6a0b2d83190600090a450506001600055565b6007546040805163e95aa8d360e01b815290516000926001600160a01b03169163e95aa8d3916004808301926020929190829003018186803b15801561138e57600080fd5b505afa1580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190612429565b905090565b6001546001600160a01b031633146113f55760405162461bcd60e51b81526004016104289061290b565b600081116114155760405162461bcd60e51b81526004016104289061289d565b600555565b6001546001600160a01b031633146114445760405162461bcd60e51b81526004016104289061290b565b600260005414156114675760405162461bcd60e51b815260040161042890612977565b60026000556001600160a01b0382166114925760405162461bcd60e51b815260040161042890612942565b6040516369ee745160e01b81526001600160a01b038316906369ee7451906114c290869085903090600401612522565b602060405180830381600087803b1580156114dc57600080fd5b505af11580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611514919061224b565b600680546001600160a01b0319166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b906115679085906124f4565b60405180910390a35050600160005550565b6001600160a01b038082166000908152600860209081526040808320600201546007548251627a9fd960e91b81529251949591948694919092169263f53fb2009260048083019392829003018186803b1580156115d557600080fd5b505afa1580156115e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160d9190612429565b9050670de0b6b3a76400006116228284612b0c565b61162c9190612aec565b925050915091565b600260005414156116575760405162461bcd60e51b815260040161042890612977565b6002600090815560055433825260086020526040909120546116799042612b2b565b10156116975760405162461bcd60e51b81526004016104289061278a565b6116a033611f4a565b33600081815260086020526040808220600201546007549151631665744b60e11b815290936001600160a01b0390921691632ccae896916116e491906004016124f4565b60606040518083038186803b1580156116fc57600080fd5b505afa158015611710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117349190612464565b5050600954909150600090670de0b6b3a76400009061176390600160801b90046001600160801b031685612b0c565b61176d9190612aec565b600954909150670de0b6b3a76400009061179790600160801b90046001600160801b031684612b0c565b6117a19190612aec565b6117ab9082612b2b565b3360008181526008602052604080822060010193909355600754925163b20ecd1560e01b8152909283926001600160a01b039091169163b20ecd15916117f3916004016124f4565b6040805180830381600087803b15801561180c57600080fd5b505af1158015611820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118449190612441565b90925090506118538286612b2b565b33600081815260086020526040908190206002019290925590517f617c612e91653c86cd4538e3de94b98c8dd628b41e343380d1cf858f95c0674a9061189c9085908590612a6a565b60405180910390a250506001600055505050565b6007546001600160a01b031681565b6002546001600160a01b031681565b6006546001600160a01b031681565b600080600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192e57600080fd5b505afa158015611942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119669190612429565b6009549091506001600160801b03600160801b8204811691164311801561198c57508115155b156119eb576009546000906119aa906001600160801b031643612b2b565b600a549091506000906119bd9083612b0c565b9050836119d2670de0b6b3a764000083612b0c565b6119dc9190612aec565b6119e69084612aa9565b925050505b6001600160a01b03841660009081526008602052604090206002810154600190910154670de0b6b3a7640000611a2a6001600160801b03851684612b0c565b611a349190612aec565b611a3e9190612b2b565b95945050505050565b60026000541415611a6a5760405162461bcd60e51b815260040161042890612977565b60026000556007546040516306e6829960e51b81526001600160a01b039091169063dcd0532090611a9f9033906004016124f4565b600060405180830381600087803b158015611ab957600080fd5b505af1158015611acd573d6000803e3d6000fd5b505060016000555050565b6009546001600160801b0316431115611c6c57600754604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611b3057600080fd5b505afa158015611b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b689190612429565b90508015611bf857600954600090611b89906001600160801b031643612b2b565b600a54909150600090611b9c9083612b0c565b905082611bb1670de0b6b3a764000083612b0c565b611bbb9190612aec565b600954611bd89190600160801b90046001600160801b0316612aa9565b600980546001600160801b03928316600160801b02921691909117905550505b600980546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117918290556040517f982b813c7d00a9ffce9441ba40f429b2e4a35068d75532f496d0c63585c2fa6892611c6292818116928692600160801b900490911690612a3e565b60405180910390a1505b565b60026000541415611c915760405162461bcd60e51b815260040161042890612977565b600260005580611cb35760405162461bcd60e51b8152600401610428906128d4565b611cbb611ad8565b6007546040805163e5a6b10f60e01b815290516000926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b158015611d0057600080fd5b505afa158015611d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d38919061224b565b90506000600760009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8a57600080fd5b505afa158015611d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc29190612429565b600754909150611ddf90839033906001600160a01b0316866120dc565b600754604051637e348b7d60e01b81526001600160a01b0390911690637e348b7d90611e11903390879060040161258d565b600060405180830381600087803b158015611e2b57600080fd5b505af1158015611e3f573d6000803e3d6000fd5b5050600954670de0b6b3a76400009250839150600160801b90046001600160801b0316611e6c8684612b0c565b611e769190612b0c565b611e809190612aec565b611e8a9190612aec565b33600090815260086020526040902060010154611ea79190612ad4565b3360009081526008602052604090206001015580611ecd84670de0b6b3a7640000612b0c565b611ed79190612aec565b33600090815260086020526040902060020154611ef49190612ad4565b33600081815260086020526040908190206002019290925560075491516001600160a01b03909216917fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f90611567908790612a61565b611f52611ad8565b6001600160a01b038116600090815260086020526040812060020154600954909190670de0b6b3a764000090611f9890600160801b90046001600160801b031684612b0c565b611fa29190612aec565b6001600160a01b03841660009081526008602052604081206001015491925090611fcc9083612b2b565b336000908152600860205260408120600101849055600654919250906001600160a01b031615801590611ffe57508115155b1561208a5760065460405163186e465160e31b81526001600160a01b039091169063c372328890612035908890869060040161258d565b602060405180830381600087803b15801561204f57600080fd5b505af1158015612063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120879190612429565b90505b846001600160a01b0316336001600160a01b03167fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec26797836040516120cd9190612a61565b60405180910390a35050505050565b600080856001600160a01b03166323b872dd86868660405160240161210393929190612569565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161215191906124bb565b6000604051808303816000865af19150503d806000811461218e576040519150601f19603f3d011682016040523d82523d6000602084013e612193565b606091505b50915091508180156121bd5750805115806121bd5750808060200190518101906121bd9190612354565b6121d95760405162461bcd60e51b8152600401610428906126c1565b505050505050565b60008083601f8401126121f2578182fd5b50813567ffffffffffffffff811115612209578182fd5b60208301915083602082850101111561222157600080fd5b9250929050565b600060208284031215612239578081fd5b813561224481612b58565b9392505050565b60006020828403121561225c578081fd5b815161224481612b58565b60008060408385031215612279578081fd5b823561228481612b58565b9150602083013561229481612b58565b809150509250929050565b6000806000606084860312156122b3578081fd5b83356122be81612b58565b925060208401356122ce81612b58565b915060408401356122de81612b58565b809150509250925092565b6000806000606084860312156122fd578283fd5b833561230881612b58565b9250602084013561231881612b58565b929592945050506040919091013590565b6000806040838503121561233b578182fd5b823561234681612b58565b946020939093013593505050565b600060208284031215612365578081fd5b81518015158114612244578182fd5b600080600080600080600060a0888a03121561238e578283fd5b873567ffffffffffffffff808211156123a5578485fd5b6123b18b838c016121e1565b909950975060208a01359150808211156123c9578485fd5b506123d68a828b016121e1565b90965094505060408801356123ea81612b58565b925060608801356123fa81612b58565b809250506080880135905092959891949750929550565b600060208284031215612422578081fd5b5035919050565b60006020828403121561243a578081fd5b5051919050565b60008060408385031215612453578182fd5b505080516020909101519092909150565b600080600060608486031215612478578283fd5b8351925060208401519150604084015190509250925092565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251815b818110156124db57602081860181015185830152016124c1565b818111156124e95782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b6000608082526125e260808301888a612491565b82810360208401526125f5818789612491565b9150506001600160a01b038085166040840152808416606084015250979650505050505050565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601a908201527f556e6f52653a7a65726f20666163746f72792061646472657373000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526017908201527f556e6f52653a2062616c616e6365206f766572666c6f77000000000000000000604082015260600190565b6020808252818101527f556e6f52653a207269736b20706f6f6c206372656174656420616c7265616479604082015260600190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b6020808252601b908201527f556e6f52653a7a65726f204c5020746f6b656e20616464726573730000000000604082015260600190565b60208082526019908201527f556e6f52653a207a65726f206f776e6572206164647265737300000000000000604082015260600190565b6020808252601f908201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d6500604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c75650000000000604082015260600190565b6020808252818101527f556e6f52653a206e6f7420616c6c6f77206f7468657273207472616e73666572604082015260600190565b6001600160801b039384168152919092166020820152604081019190915260600190565b6001600160801b0393841681526020810192909252909116604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60006001600160801b03808316818516808303821115612acb57612acb612b42565b01949350505050565b60008219821115612ae757612ae7612b42565b500190565b600082612b0757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b2657612b26612b42565b500290565b600082821015612b3d57612b3d612b42565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612b6d57600080fd5b5056fea26469706673582212202a659f109bad5ae8fa8c91a14517217620b0db6ab6448abf7eb237b50a7a002264736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createRiskPool(string,string,address,address,uint256)": {
        "details": "create Risk pool with UNO from SSRP owner"
      },
      "getTotalWithdrawPendingAmount()": {
        "details": "get total withdraw request amount in pending for the risk pool in UNO"
      },
      "getWithdrawRequestPerUser(address)": {
        "details": "get withdraw request amount in pending per user in UNO"
      },
      "leaveFromPending()": {
        "details": "user can submit claim again and receive his funds into his wallet after 10 days since last WR."
      },
      "leaveFromPoolInPending(uint256)": {
        "details": "WR will be in pending for 10 days at least"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9455,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9457,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "claimAssessor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9459,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "migrateTo",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9461,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "syntheticSSRP",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9464,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "LOCK_TIME",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9469,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "rewarder",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9472,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "riskPool",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9491,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserInfo)9486_storage)"
      },
      {
        "astId": 9494,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(PoolInfo)9479_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)9486_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SingleSidedReinsurancePool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)9486_storage"
      },
      "t_struct(PoolInfo)9479_storage": {
        "encoding": "inplace",
        "label": "struct SingleSidedReinsurancePool.PoolInfo",
        "members": [
          {
            "astId": 9474,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9476,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "accUnoPerShare",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9478,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "unoMultiplierPerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)9486_storage": {
        "encoding": "inplace",
        "label": "struct SingleSidedReinsurancePool.UserInfo",
        "members": [
          {
            "astId": 9481,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "lastWithdrawTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9483,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9485,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}