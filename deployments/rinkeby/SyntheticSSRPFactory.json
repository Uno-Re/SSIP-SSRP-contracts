{
  "address": "0x5cdAaF3C99BbdDE717eC335e047f1120CDfbA791",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "newSyntheticSSRP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf9634a428d5465259cc3df95cffff742d8e539db35d6b8c0d1b8292bb6a097a",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0x5cdAaF3C99BbdDE717eC335e047f1120CDfbA791",
    "transactionIndex": 2,
    "gasUsed": "1735515",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6c35059782a816b881c5ca60842e01ef9c47045cf1629a37d13352b1d8311c28",
    "transactionHash": "0xdf9634a428d5465259cc3df95cffff742d8e539db35d6b8c0d1b8292bb6a097a",
    "logs": [],
    "blockNumber": 10028833,
    "cumulativeGasUsed": "1876526",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9c34ee606f87ff608005a3853a8c7b58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"newSyntheticSSRP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/SyntheticSSRPFactory.sol\":\"SyntheticSSRPFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/SyntheticSSRP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/ISyntheticSSRP.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SyntheticSSRP is ISyntheticSSRP, ReentrancyGuard, Ownable {\\n    address public migrateTo;\\n\\n    uint256 public LOCK_TIME = 10 days;\\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\\n\\n    address public rewarder;\\n    address public lpToken;\\n\\n    uint256 lastRewardBlock;\\n    uint256 accRewardPerShare;\\n    uint256 public rewardPerBlock;\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n        uint256 pendingWithdrawAmount;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public totalStakedLPAmount;\\n    uint256 public totalWithdrawPending;\\n\\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accRewardPerShare);\\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\\n    event LogCreateRewarder(address indexed _SSRP, address indexed _rewarder, address _currency);\\n    event LogSetRewardPerBlock(address indexed _pool, uint256 _rewardPerBlock);\\n    event LogSetMigrateTo(address indexed _pool, address indexed _migrateTo);\\n    event LogSetLockTime(address indexed _pool, uint256 _lockTime);\\n    event LogMigrate(address indexed _user, address indexed _pool, address indexed _migrateTo, uint256 amount);\\n\\n    constructor(address _lpToken, address _multiSigWallet) {\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multiSigWallet address\\\");\\n        require(_lpToken != address(0), \\\"UnoRe: zero lp token address\\\");\\n        lpToken = _lpToken;\\n        rewardPerBlock = 1e18;\\n        transferOwnership(_multiSigWallet);\\n    }\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        require(_rewardPerBlock > 0, \\\"UnoRe: zero value\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n        emit LogSetRewardPerBlock(address(this), _rewardPerBlock);\\n    }\\n\\n    function setMigrateTo(address _migrateTo) external onlyOwner {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n        emit LogSetMigrateTo(address(this), _migrateTo);\\n    }\\n\\n    function setLockTime(uint256 _lockTime) external onlyOwner {\\n        require(_lockTime > 0, \\\"UnoRe: not allow zero lock time\\\");\\n        LOCK_TIME = _lockTime;\\n        emit LogSetLockTime(address(this), _lockTime);\\n    }\\n\\n    function createRewarder(\\n        address _operator,\\n        address _factory,\\n        address _currency\\n    ) external onlyOwner nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        require(_operator != address(0), \\\"UnoRe: zero operator address\\\");\\n        require(_currency != address(0), \\\"UnoRe: zero currency address\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    function migrate() external nonReentrant {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        if (\\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME\\n        ) {\\n            _leaveFromPending();\\n        } else {\\n            _cancelWithdrawRequest();\\n        }\\n        uint256 amount = userInfo[msg.sender].amount;\\n        TransferHelper.safeTransfer(lpToken, migrateTo, amount);\\n        IMigration(migrateTo).onMigration(msg.sender, amount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n        emit LogMigrate(msg.sender, address(this), migrateTo, amount);\\n    }\\n\\n    function pendingReward(address _to) external view returns (uint256 pending) {\\n        uint256 currentAccRewardPerShare = accRewardPerShare;\\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\\n            uint256 blocks = block.number - lastRewardBlock;\\n            uint256 rewardAmount = blocks * rewardPerBlock;\\n            currentAccRewardPerShare = accRewardPerShare + (rewardAmount * ACC_REWARD_PRECISION) / totalStakedLPAmount;\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * currentAccRewardPerShare) / ACC_REWARD_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    function updatePool() public override {\\n        if (block.number > lastRewardBlock) {\\n            if (totalStakedLPAmount > 0) {\\n                uint256 blocks = block.number - lastRewardBlock;\\n                uint256 rewardAmount = blocks * rewardPerBlock;\\n                accRewardPerShare = accRewardPerShare + ((rewardAmount * ACC_REWARD_PRECISION) / totalStakedLPAmount);\\n            }\\n            lastRewardBlock = block.number;\\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accRewardPerShare);\\n        }\\n    }\\n\\n    function enterInPool(uint256 _amount) external override nonReentrant {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\\n        userInfo[msg.sender].rewardDebt = userInfo[msg.sender].rewardDebt + (_amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + _amount;\\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\\n        emit LogStakedInPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\\n        // Withdraw desired amount from pool\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        require(amount - pendingWR >= _amount, \\\"UnoRe: withdraw amount overflow\\\");\\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n\\n        totalWithdrawPending = totalWithdrawPending + _amount;\\n\\n        emit LogLeftPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending() external override nonReentrant {\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        _leaveFromPending();\\n    }\\n\\n    function _leaveFromPending() private {\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n\\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\\n\\n        userInfo[msg.sender].rewardDebt = accumulatedReward - ((pendingWR * accRewardPerShare) / ACC_REWARD_PRECISION);\\n        userInfo[msg.sender].amount = amount - pendingWR;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\\n    }\\n\\n    function harvest(address _to) external override nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        uint256 _pendingReward = accumulatedReward - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[msg.sender].rewardDebt = accumulatedReward;\\n\\n        uint256 realRewardAmount = 0;\\n        if (rewarder != address(0) && _pendingReward > 0) {\\n            realRewardAmount = IRewarder(rewarder).onReward(_to, _pendingReward);\\n        }\\n\\n        emit LogHarvest(msg.sender, _to, realRewardAmount);\\n    }\\n\\n    function cancelWithdrawRequest() external nonReentrant {\\n        _cancelWithdrawRequest();\\n    }\\n\\n    function _cancelWithdrawRequest() private {\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\\n    }\\n}\\n\",\"keccak256\":\"0x401bb9d5b6db835c198ae6e984ec2e469689f283c619f9a98ac4e22fa7702557\",\"license\":\"GPL-3.0\"},\"contracts/factories/SyntheticSSRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../SyntheticSSRP.sol\\\";\\nimport \\\"../interfaces/ISyntheticSSRPFactory.sol\\\";\\n\\ncontract SyntheticSSRPFactory is ISyntheticSSRPFactory {\\n    constructor() {}\\n\\n    function newSyntheticSSRP(address _owner, address _lpToken) external override returns (address) {\\n        SyntheticSSRP _ssip = new SyntheticSSRP(_owner, _lpToken);\\n        address _ssipAddr = address(_ssip);\\n        return _ssipAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x0de19d2ac1a0d2ea6ab88eb31618a3a6ece65c0117b579ebccc59729171dbf3d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IMigration {\\n    function onMigration(\\n        address who_,\\n        uint256 amount_,\\n        bytes memory data_\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b25ec77b6df9db73050a67b9ce4147154c5be596b6637d47484fd6236965069\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6e37fd84127d6039965b097e57e45f79630c1313d9d841176ce8a8e2ec16b83b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(\\n        address _operator,\\n        address _currency,\\n        address _pool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x14d54228edcd08203983b293cfa44cc13cf1fb450019172ef57a1ebccf89f4a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSRP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISyntheticSSRP {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n}\\n\",\"keccak256\":\"0x41a34b4a18b886cf5ffab5069fdac253ca4f636a38c9be719163237276c055c2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISyntheticSSRPFactory {\\n    function newSyntheticSSRP(address _owner, address _lpToken) external returns (address);\\n}\\n\",\"keccak256\":\"0x5a5af783ff3bd53ffff55c77a8d9e7d24e8debe261e3100e6694841075362c05\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806377b3d99714610030575b600080fd5b61004361003e3660046100d0565b610059565b6040516100509190610102565b60405180910390f35b600080838360405161006a9061009a565b610075929190610123565b604051809103906000f080158015610091573d6000803e3d6000fd5b50949350505050565b611cf78061014b83390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100cb57600080fd5b919050565b600080604083850312156100e2578182fd5b6100eb836100a7565b91506100f9602084016100a7565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9283168152911660208201526040019056fe6080604052620d2f006003553480156200001857600080fd5b5060405162001cf738038062001cf78339810160408190526200003b91620001e8565b6001600055620000546200004e620000e9565b620000ed565b6001600160a01b038116620000865760405162461bcd60e51b81526004016200007d90620002d1565b60405180910390fd5b6001600160a01b038216620000af5760405162461bcd60e51b81526004016200007d9062000265565b600580546001600160a01b0319166001600160a01b038416179055670de0b6b3a7640000600855620000e1816200013f565b505062000313565b3390565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000149620000e9565b6001600160a01b03166200015c620001bc565b6001600160a01b031614620001855760405162461bcd60e51b81526004016200007d906200029c565b6001600160a01b038116620001ae5760405162461bcd60e51b81526004016200007d906200021f565b620001b981620000ed565b50565b6001546001600160a01b031690565b80516001600160a01b0381168114620001e357600080fd5b919050565b60008060408385031215620001fb578182fd5b6200020683620001cb565b91506200021660208401620001cb565b90509250929050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f556e6f52653a207a65726f206c7020746f6b656e206164647265737300000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f556e6f52653a207a65726f206d756c746953696757616c6c6574206164647265604082015261737360f01b606082015260800190565b6119d480620003236000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806398c6e760116100e3578063dcc3e06e1161008c578063e3824a3811610066578063e3824a38146102c7578063f2fde38b146102da578063f40f0f52146102ed57610198565b8063dcc3e06e146102af578063e19e7168146102b7578063e3161ddd146102bf57610198565b8063bb872b4a116100bd578063bb872b4a1461028c578063bc8f88281461029f578063d1c6a231146102a757610198565b806398c6e7601461025e578063ae04d45d14610266578063af16d6e01461027957610198565b8063715018a6116101455780638ae39cac1161011f5780638ae39cac146102465780638da5cb5b1461024e5780638fd3ab801461025657610198565b8063715018a614610218578063736ec05c146102205780638395206c1461023357610198565b806336642c211161017657806336642c21146101f3578063413d9c3a146101fb5780635fcbd2851461020357610198565b80630e5c011e1461019d57806313a10036146101b25780631959a002146101d0575b600080fd5b6101b06101ab3660046113ad565b610300565b005b6101ba610342565b6040516101c791906118cb565b60405180910390f35b6101e36101de3660046113ad565b610348565b6040516101c794939291906118ea565b6101ba61036f565b6101ba610375565b61020b61037b565b6040516101c791906114bf565b6101b061038a565b6101b061022e3660046113ad565b6103d5565b6101b0610241366004611456565b610493565b6101ba610596565b61020b61059c565b6101b06105ab565b61020b610759565b6101b0610274366004611456565b610768565b6101b06102873660046113ec565b610809565b6101b061029a366004611456565b6109c4565b6101b0610a5a565b6101ba610ad5565b61020b610ae1565b6101b0610af0565b6101b0610b20565b6101b06102d5366004611456565b610bd1565b6101b06102e83660046113ad565b610d02565b6101ba6102fb3660046113ad565b610d73565b6002600054141561032c5760405162461bcd60e51b815260040161032390611894565b60405180910390fd5b600260005561033a81610e39565b506001600055565b600a5481565b60096020526000908152604090208054600182015460028301546003909301549192909184565b600b5481565b60035481565b6005546001600160a01b031681565b610392610fbb565b6001600160a01b03166103a361059c565b6001600160a01b0316146103c95760405162461bcd60e51b815260040161032390611796565b6103d36000610fbf565b565b6103dd610fbb565b6001600160a01b03166103ee61059c565b6001600160a01b0316146104145760405162461bcd60e51b815260040161032390611796565b6001600160a01b03811661043a5760405162461bcd60e51b8152600401610323906115ef565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811790915560405130907f877238238dbd7134e89b00809ea73fabb50da117ace807a6b31c733bbf55d36990600090a350565b600260005414156104b65760405162461bcd60e51b815260040161032390611894565b60026000556104c433610e39565b3360009081526009602052604090206002810154600390910154826104e9828461195c565b10156105075760405162461bcd60e51b815260040161032390611626565b33600090815260096020526040902060030154610525908490611905565b3360009081526009602052604090206003810191909155429055600b5461054d908490611905565b600b55604051309033907fd60ea263bba686471127787b82c1f8b19bddbd87f52b83498879e720d839d51f906105849087906118cb565b60405180910390a35050600160005550565b60085481565b6001546001600160a01b031690565b600260005414156105ce5760405162461bcd60e51b815260040161032390611894565b60026000819055546001600160a01b03166105fb5760405162461bcd60e51b8152600401610323906115ef565b61060433610e39565b336000908152600960205260409020600301541580159061064057506003543360009081526009602052604090205461063d904261195c565b10155b156106525761064d61101e565b61065a565b61065a61113f565b3360009081526009602052604090206002908101546005549154909161068d916001600160a01b039182169116836111a6565b60025460405163ed59344b60e01b81526001600160a01b039091169063ed59344b906106bf9033908590600401611533565b600060405180830381600087803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b505033600081815260096020526040808220600290810192909255905490516001600160a01b0390911693503092507f49208a4dfe6cade3e0d45c2c52e5e68917971aeb5714c4b3151c74337e9e860f906107499086906118cb565b60405180910390a4506001600055565b6002546001600160a01b031681565b610770610fbb565b6001600160a01b031661078161059c565b6001600160a01b0316146107a75760405162461bcd60e51b815260040161032390611796565b600081116107c75760405162461bcd60e51b81526004016103239061175f565b600381905560405130907f2c2c43c64e937ae35257af782c222986dc5adb4f56dc0881594e79bf83658d8c906107fe9084906118cb565b60405180910390a250565b610811610fbb565b6001600160a01b031661082261059c565b6001600160a01b0316146108485760405162461bcd60e51b815260040161032390611796565b6002600054141561086b5760405162461bcd60e51b815260040161032390611894565b60026000556001600160a01b0382166108965760405162461bcd60e51b815260040161032390611802565b6001600160a01b0383166108bc5760405162461bcd60e51b815260040161032390611728565b6001600160a01b0381166108e25760405162461bcd60e51b81526004016103239061155b565b6040516369ee745160e01b81526001600160a01b038316906369ee745190610912908690859030906004016114d3565b602060405180830381600087803b15801561092c57600080fd5b505af1158015610940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096491906113d0565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b906105849085906114bf565b6109cc610fbb565b6001600160a01b03166109dd61059c565b6001600160a01b031614610a035760405162461bcd60e51b815260040161032390611796565b60008111610a235760405162461bcd60e51b8152600401610323906116f1565b600881905560405130907f5cd67ede94fe3507535f0408ae70afe426103c9d5d51a909bd9dbd931e09875c906107fe9084906118cb565b60026000541415610a7d5760405162461bcd60e51b815260040161032390611894565b600260009081556003543382526009602052604090912054610a9f904261195c565b1015610abd5760405162461bcd60e51b8152600401610323906116ba565b610ac633610e39565b610ace61101e565b6001600055565b670de0b6b3a764000081565b6004546001600160a01b031681565b60026000541415610b135760405162461bcd60e51b815260040161032390611894565b6002600055610ace61113f565b6006544311156103d357600a5415610b8957600060065443610b42919061195c565b9050600060085482610b54919061193d565b600a54909150610b6c670de0b6b3a76400008361193d565b610b76919061191d565b600754610b839190611905565b60075550505b436006819055600a546007546040517f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f785393610bc793909290916118d4565b60405180910390a1565b60026000541415610bf45760405162461bcd60e51b815260040161032390611894565b600260005580610c165760405162461bcd60e51b8152600401610323906117cb565b610c1e610b20565b600554610c36906001600160a01b03163330846112a8565b670de0b6b3a764000060075482610c4d919061193d565b610c57919061191d565b33600090815260096020526040902060010154610c749190611905565b336000908152600960205260409020600181019190915560020154610c9a908290611905565b33600090815260096020526040902060020155600a54610cbb908290611905565b600a55604051309033907f19db7bd0d4b3b497594ec1221d3c790b31e985baeb3c80851231d930db53578b90610cf29085906118cb565b60405180910390a3506001600055565b610d0a610fbb565b6001600160a01b0316610d1b61059c565b6001600160a01b031614610d415760405162461bcd60e51b815260040161032390611796565b6001600160a01b038116610d675760405162461bcd60e51b815260040161032390611592565b610d7081610fbf565b50565b6007546006546000919043118015610d8c5750600a5415155b15610de757600060065443610da1919061195c565b9050600060085482610db3919061193d565b600a54909150610dcb670de0b6b3a76400008361193d565b610dd5919061191d565b600754610de29190611905565b925050505b6001600160a01b03831660009081526009602052604090206002810154600190910154670de0b6b3a7640000610e1d848461193d565b610e27919061191d565b610e31919061195c565b949350505050565b610e41610b20565b6001600160a01b038116600090815260096020526040812060020154600754909190670de0b6b3a764000090610e77908461193d565b610e81919061191d565b6001600160a01b03841660009081526009602052604081206001015491925090610eab908361195c565b336000908152600960205260408120600101849055600454919250906001600160a01b031615801590610ede5750600082115b15610f69576004805460405163186e465160e31b81526001600160a01b039091169163c372328891610f1491899187910161151a565b602060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f66919061146e565b90505b846001600160a01b0316336001600160a01b03167f1501dd260e02a8825a24ab4e4875600b0093dd977e06b49bba75faaebe28364783604051610fac91906118cb565b60405180910390a35050505050565b3390565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b336000908152600960205260408120600281015460039091015460075491929091670de0b6b3a764000090611053908561193d565b61105d919061191d565b600554909150611077906001600160a01b031633846111a6565b670de0b6b3a76400006007548361108e919061193d565b611098919061191d565b6110a2908261195c565b336000908152600960205260409020600101556110bf828461195c565b3360009081526009602052604081206002810192909255600390910155600b546110ea90839061195c565b600b55600a546110fb90839061195c565b600a55604051309033907f082897d5a3548ef5742607ecedf0f1b9e4c355dcc81c81d5bfda47f2b49084a7906111329086906118cb565b60405180910390a3505050565b3360009081526009602052604081206003018054919055600b5461116490829061195c565b600b55604051309033907faa15bd4bbb83b4c5e5bf28548326ffc2e718d46db45779599cf4d87b42fbd1049061119b9085906118cb565b60405180910390a350565b600080846001600160a01b031663a9059cbb85856040516024016111cb92919061151a565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516112199190611486565b6000604051808303816000865af19150503d8060008114611256576040519150601f19603f3d011682016040523d82523d6000602084013e61125b565b606091505b50915091508180156112855750805115806112855750808060200190518101906112859190611436565b6112a15760405162461bcd60e51b815260040161032390611837565b5050505050565b600080856001600160a01b03166323b872dd8686866040516024016112cf939291906114f6565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161131d9190611486565b6000604051808303816000865af19150503d806000811461135a576040519150601f19603f3d011682016040523d82523d6000602084013e61135f565b606091505b50915091508180156113895750805115806113895750808060200190518101906113899190611436565b6113a55760405162461bcd60e51b81526004016103239061165d565b505050505050565b6000602082840312156113be578081fd5b81356113c981611989565b9392505050565b6000602082840312156113e1578081fd5b81516113c981611989565b600080600060608486031215611400578182fd5b833561140b81611989565b9250602084013561141b81611989565b9150604084013561142b81611989565b809150509250925092565b600060208284031215611447578081fd5b815180151581146113c9578182fd5b600060208284031215611467578081fd5b5035919050565b60006020828403121561147f578081fd5b5051919050565b60008251815b818110156114a6576020818601810151858301520161148c565b818111156114b45782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b6020808252601c908201527f556e6f52653a207a65726f2063757272656e6379206164647265737300000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b6020808252601c908201527f556e6f52653a207a65726f206f70657261746f72206164647265737300000000604082015260600190565b6020808252601f908201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d6500604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6000821982111561191857611918611973565b500190565b60008261193857634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561195757611957611973565b500290565b60008282101561196e5761196e611973565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d7057600080fdfea26469706673582212202e9bcac9b93689d998f97f7e3eba6c087848c1fe89644d835e702d2e8bba55ba64736f6c63430008000033a2646970667358221220b7c2078d022321965de1d7c3a3d260626e5f3ade0db21030141d082ee9f0f1a764736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}