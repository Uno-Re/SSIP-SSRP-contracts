{
  "address": "0xdCA26fa2b8fC3d16a7CE5c15d3C003D6045e34BB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "newSyntheticSSIP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3eca50ae353716765d4bafecb3bd910ca29e16db01dc33bfe13a17b88ad46d84",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0xdCA26fa2b8fC3d16a7CE5c15d3C003D6045e34BB",
    "transactionIndex": 0,
    "gasUsed": "1367160",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x29c054c85556a60e1f866739c426ba8ea8c1679cced9d586238d73210cc05ab2",
    "transactionHash": "0x3eca50ae353716765d4bafecb3bd910ca29e16db01dc33bfe13a17b88ad46d84",
    "logs": [],
    "blockNumber": 9863612,
    "cumulativeGasUsed": "1367160",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8b4d273543ae78586be14fde7d603ae7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"newSyntheticSSIP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/SyntheticSSIPFactory.sol\":\"SyntheticSSIPFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/SyntheticSSIP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/ISyntheticSSIP.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SyntheticSSIP is ISyntheticSSIP, ReentrancyGuard {\\n    address public owner;\\n    address public migrateTo;\\n\\n    uint256 public LOCK_TIME = 1 days;\\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\\n\\n    address public rewarder;\\n    address public lpToken;\\n\\n    uint256 lastRewardBlock;\\n    uint256 accRewardPerShare;\\n    uint256 rewardPerBlock;\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n        uint256 pendingWithdrawAmount;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public totalStakedLPAmount;\\n    uint256 public totalWithdrawPending;\\n\\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accRewardPerShare);\\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\\n\\n    constructor(address _owner, address _lpToken) {\\n        owner = _owner;\\n        lpToken = _lpToken;\\n        rewardPerBlock = 1e18;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        require(_rewardPerBlock > 0, \\\"UnoRe: zero value\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function setMigrateTo(address _migrateTo) external onlyOwner {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n    }\\n\\n    function setLockTime(uint256 _lockTime) external onlyOwner {\\n        require(_lockTime > 0, \\\"UnoRe: not allow zero lock time\\\");\\n        LOCK_TIME = _lockTime;\\n    }\\n\\n    function createRewarder(\\n        address _operator,\\n        address _factory,\\n        address _currency\\n    ) external onlyOwner nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    function migrate() external nonReentrant {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        if (\\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME\\n        ) {\\n            _leaveFromPending();\\n        } else {\\n            _cancelWithdrawRequest();\\n        }\\n        uint256 amount = userInfo[msg.sender].amount;\\n        IMigration(migrateTo).onMigration(msg.sender, amount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n    }\\n\\n    function pendingReward(address _to) external view returns (uint256 pending) {\\n        uint256 currentAccRewardPerShare = accRewardPerShare;\\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\\n            uint256 blocks = block.number - lastRewardBlock;\\n            uint256 rewards = blocks * rewardPerBlock;\\n            currentAccRewardPerShare = accRewardPerShare + (rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount;\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * currentAccRewardPerShare) / ACC_REWARD_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    function updatePool() public override {\\n        if (block.number > lastRewardBlock) {\\n            if (totalStakedLPAmount > 0) {\\n                uint256 blocks = block.number - lastRewardBlock;\\n                uint256 rewards = blocks * rewardPerBlock;\\n                accRewardPerShare = accRewardPerShare + ((rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount);\\n            }\\n            lastRewardBlock = block.number;\\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accRewardPerShare);\\n        }\\n    }\\n\\n    function enterInPool(uint256 _amount) external override nonReentrant {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\\n        userInfo[msg.sender].rewardDebt = userInfo[msg.sender].rewardDebt + (_amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + _amount;\\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\\n        emit LogStakedInPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\\n        // Withdraw desired amount from pool\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        require(amount - pendingWR >= _amount, \\\"UnoRe: withdraw amount overflow\\\");\\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n\\n        totalWithdrawPending = totalWithdrawPending + _amount;\\n\\n        emit LogLeftPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending() external override nonReentrant {\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        _leaveFromPending();\\n    }\\n\\n    function _leaveFromPending() private {\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n\\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\\n\\n        userInfo[msg.sender].rewardDebt = accumulatedReward - ((pendingWR * accRewardPerShare) / ACC_REWARD_PRECISION);\\n        userInfo[msg.sender].amount = amount - pendingWR;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\\n    }\\n\\n    function harvest(address _to) external override nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        uint256 _pendingReward = accumulatedReward - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[msg.sender].rewardDebt = accumulatedReward;\\n\\n        uint256 realRewardAmount = 0;\\n        if (rewarder != address(0) && _pendingReward > 0) {\\n            realRewardAmount = IRewarder(rewarder).onReward(_to, _pendingReward);\\n        }\\n\\n        emit LogHarvest(msg.sender, _to, realRewardAmount);\\n    }\\n\\n    function cancelWithdrawRequest() external nonReentrant {\\n        _cancelWithdrawRequest();\\n    }\\n\\n    function _cancelWithdrawRequest() private {\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\\n    }\\n}\\n\",\"keccak256\":\"0xf57f518ec1a4e27b3b14da0cc343e9715be9501db5320503544fa2cdcb486ce3\",\"license\":\"GPL-3.0\"},\"contracts/factories/SyntheticSSIPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../SyntheticSSIP.sol\\\";\\nimport \\\"../interfaces/ISyntheticSSIPFactory.sol\\\";\\n\\ncontract SyntheticSSIPFactory is ISyntheticSSIPFactory {\\n    constructor() {}\\n\\n    function newSyntheticSSIP(address _owner, address _lpToken) external override returns (address) {\\n        SyntheticSSIP _ssip = new SyntheticSSIP(_owner, _lpToken);\\n        address _ssipAddr = address(_ssip);\\n        return _ssipAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x876e5ede9f12bf68cc651f9c387fcc9e904c1ef066c33f3d1fce39e5bb8c41b6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IMigration {\\n    function onMigration(\\n        address who_,\\n        uint256 amount_,\\n        bytes memory data_\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b25ec77b6df9db73050a67b9ce4147154c5be596b6637d47484fd6236965069\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6e37fd84127d6039965b097e57e45f79630c1313d9d841176ce8a8e2ec16b83b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(\\n        address _operator,\\n        address _currency,\\n        address _pool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x14d54228edcd08203983b293cfa44cc13cf1fb450019172ef57a1ebccf89f4a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSIP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISyntheticSSIP {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n}\\n\",\"keccak256\":\"0xd1c8e01736abd164fa3946a04ddfac2698e0dfb984a396e84b6adaa6b30bbf17\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSIPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISyntheticSSIPFactory {\\n    function newSyntheticSSIP(address _owner, address _lpToken) external returns (address);\\n}\\n\",\"keccak256\":\"0xfea09577a47f75aee3718d3f0173853ecfc3768fa86bc97da50e3f736c49725d\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117cb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633515167614610030575b600080fd5b61004361003e3660046100c3565b610059565b60405161005091906100f5565b60405180910390f35b600080838360405161006a9061009a565b610075929190610109565b604051809103906000f080158015610091573d6000803e3d6000fd5b50949350505050565b6116728061012483390190565b80356001600160a01b03811681146100be57600080fd5b919050565b600080604083850312156100d5578182fd5b6100de836100a7565b91506100ec602084016100a7565b90509250929050565b6001600160a01b0391909116815260200190565b6001600160a01b039283168152911660208201526040019056fe60806040526201518060035534801561001757600080fd5b50604051620016723803806200167283398101604081905261003891610096565b6001600081905580546001600160a01b039384166001600160a01b03199182161790915560058054929093169116179055670de0b6b3a76400006008556100c8565b80516001600160a01b038116811461009157600080fd5b919050565b600080604083850312156100a8578182fd5b6100b18361007a565b91506100bf6020840161007a565b90509250929050565b61159a80620000d86000396000f3fe608060405234801561001057600080fd5b50600436106101475760003560e01c806398c6e760116100c8578063d1c6a2311161008c578063e3161ddd11610066578063e3161ddd1461025e578063e3824a3814610266578063f40f0f521461027957610147565b8063d1c6a23114610246578063dcc3e06e1461024e578063e19e71681461025657610147565b806398c6e760146101fd578063ae04d45d14610205578063af16d6e014610218578063bb872b4a1461022b578063bc8f88281461023e57610147565b80635fcbd2851161010f5780635fcbd285146101b2578063736ec05c146101c75780638395206c146101da5780638da5cb5b146101ed5780638fd3ab80146101f557610147565b80630e5c011e1461014c57806313a10036146101615780631959a0021461017f57806336642c21146101a2578063413d9c3a146101aa575b600080fd5b61015f61015a366004611049565b61028c565b005b6101696102ce565b604051610176919061148e565b60405180910390f35b61019261018d366004611049565b6102d4565b60405161017694939291906114ad565b6101696102fb565b610169610301565b6101ba610307565b604051610176919061115b565b61015f6101d5366004611049565b610316565b61015f6101e83660046110f2565b610395565b6101ba610498565b61015f6104a7565b6101ba6105ec565b61015f6102133660046110f2565b6105fb565b61015f610226366004611088565b61064a565b61015f6102393660046110f2565b6107a4565b61015f6107f3565b61016961086e565b6101ba61087a565b61015f610889565b61015f6108b9565b61015f6102743660046110f2565b61096b565b610169610287366004611049565b610a9c565b600260005414156102b85760405162461bcd60e51b81526004016102af90611457565b60405180910390fd5b60026000556102c681610b62565b506001600055565b600a5481565b60096020526000908152604090208054600182015460028301546003909301549192909184565b600b5481565b60035481565b6005546001600160a01b031681565b6001546001600160a01b031633146103405760405162461bcd60e51b81526004016102af9061139e565b6001600160a01b0381166103665760405162461bcd60e51b81526004016102af906111f7565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600260005414156103b85760405162461bcd60e51b81526004016102af90611457565b60026000556103c633610b62565b3360009081526009602052604090206002810154600390910154826103eb828461151f565b10156104095760405162461bcd60e51b81526004016102af9061122e565b336000908152600960205260409020600301546104279084906114c8565b3360009081526009602052604090206003810191909155429055600b5461044f9084906114c8565b600b55604051309033907fd60ea263bba686471127787b82c1f8b19bddbd87f52b83498879e720d839d51f9061048690879061148e565b60405180910390a35050600160005550565b6001546001600160a01b031681565b600260005414156104ca5760405162461bcd60e51b81526004016102af90611457565b60026000819055546001600160a01b03166104f75760405162461bcd60e51b81526004016102af906111f7565b61050033610b62565b336000908152600960205260409020600301541580159061053c575060035433600090815260096020526040902054610539904261151f565b10155b1561054e57610549610ce4565b610556565b610556610e05565b33600081815260096020526040908190206002908101549054915163ed59344b60e01b815290926001600160a01b039092169163ed59344b9161059e919085906004016111cf565b600060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b505033600090815260096020526040812060020181905560019055505050565b6002546001600160a01b031681565b6001546001600160a01b031633146106255760405162461bcd60e51b81526004016102af9061139e565b600081116106455760405162461bcd60e51b81526004016102af90611330565b600355565b6001546001600160a01b031633146106745760405162461bcd60e51b81526004016102af9061139e565b600260005414156106975760405162461bcd60e51b81526004016102af90611457565b60026000556001600160a01b0382166106c25760405162461bcd60e51b81526004016102af906113d5565b6040516369ee745160e01b81526001600160a01b038316906369ee7451906106f29086908590309060040161116f565b602060405180830381600087803b15801561070c57600080fd5b505af1158015610720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610744919061106c565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b9061048690859061115b565b6001546001600160a01b031633146107ce5760405162461bcd60e51b81526004016102af9061139e565b600081116107ee5760405162461bcd60e51b81526004016102af906112f9565b600855565b600260005414156108165760405162461bcd60e51b81526004016102af90611457565b600260009081556003543382526009602052604090912054610838904261151f565b10156108565760405162461bcd60e51b81526004016102af906112c2565b61085f33610b62565b610867610ce4565b6001600055565b670de0b6b3a764000081565b6004546001600160a01b031681565b600260005414156108ac5760405162461bcd60e51b81526004016102af90611457565b6002600055610867610e05565b60065443111561096957600a5415610922576000600654436108db919061151f565b90506000600854826108ed9190611500565b600a54909150610905670de0b6b3a764000083611500565b61090f91906114e0565b60075461091c91906114c8565b60075550505b436006819055600a546007546040517f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f7853936109609390929091611497565b60405180910390a15b565b6002600054141561098e5760405162461bcd60e51b81526004016102af90611457565b6002600055806109b05760405162461bcd60e51b81526004016102af90611367565b6109b86108b9565b6005546109d0906001600160a01b0316333084610e6c565b670de0b6b3a7640000600754826109e79190611500565b6109f191906114e0565b33600090815260096020526040902060010154610a0e91906114c8565b336000908152600960205260409020600181019190915560020154610a349082906114c8565b33600090815260096020526040902060020155600a54610a559082906114c8565b600a55604051309033907f19db7bd0d4b3b497594ec1221d3c790b31e985baeb3c80851231d930db53578b90610a8c90859061148e565b60405180910390a3506001600055565b6007546006546000919043118015610ab55750600a5415155b15610b1057600060065443610aca919061151f565b9050600060085482610adc9190611500565b600a54909150610af4670de0b6b3a764000083611500565b610afe91906114e0565b600754610b0b91906114c8565b925050505b6001600160a01b03831660009081526009602052604090206002810154600190910154670de0b6b3a7640000610b468484611500565b610b5091906114e0565b610b5a919061151f565b949350505050565b610b6a6108b9565b6001600160a01b038116600090815260096020526040812060020154600754909190670de0b6b3a764000090610ba09084611500565b610baa91906114e0565b6001600160a01b03841660009081526009602052604081206001015491925090610bd4908361151f565b336000908152600960205260408120600101849055600454919250906001600160a01b031615801590610c075750600082115b15610c92576004805460405163186e465160e31b81526001600160a01b039091169163c372328891610c3d9189918791016111b6565b602060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f919061110a565b90505b846001600160a01b0316336001600160a01b03167f1501dd260e02a8825a24ab4e4875600b0093dd977e06b49bba75faaebe28364783604051610cd5919061148e565b60405180910390a35050505050565b336000908152600960205260408120600281015460039091015460075491929091670de0b6b3a764000090610d199085611500565b610d2391906114e0565b600554909150610d3d906001600160a01b03163384610f5c565b670de0b6b3a764000060075483610d549190611500565b610d5e91906114e0565b610d68908261151f565b33600090815260096020526040902060010155610d85828461151f565b3360009081526009602052604081206002810192909255600390910155600b54610db090839061151f565b600b55600a54610dc190839061151f565b600a55604051309033907f082897d5a3548ef5742607ecedf0f1b9e4c355dcc81c81d5bfda47f2b49084a790610df890869061148e565b60405180910390a3505050565b3360009081526009602052604081206003018054919055600b54610e2a90829061151f565b600b55604051309033907faa15bd4bbb83b4c5e5bf28548326ffc2e718d46db45779599cf4d87b42fbd10490610e6190859061148e565b60405180910390a350565b600080856001600160a01b03166323b872dd868686604051602401610e9393929190611192565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610ecc9190611122565b6000604051808303816000865af19150503d8060008114610f09576040519150601f19603f3d011682016040523d82523d6000602084013e610f0e565b606091505b5091509150818015610f38575080511580610f38575080806020019051810190610f3891906110d2565b610f545760405162461bcd60e51b81526004016102af90611265565b505050505050565b600080846001600160a01b031663a9059cbb8585604051602401610f819291906111b6565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610fba9190611122565b6000604051808303816000865af19150503d8060008114610ff7576040519150601f19603f3d011682016040523d82523d6000602084013e610ffc565b606091505b509150915081801561102657508051158061102657508080602001905181019061102691906110d2565b6110425760405162461bcd60e51b81526004016102af9061140a565b5050505050565b60006020828403121561105a578081fd5b81356110658161154c565b9392505050565b60006020828403121561107d578081fd5b81516110658161154c565b60008060006060848603121561109c578182fd5b83356110a78161154c565b925060208401356110b78161154c565b915060408401356110c78161154c565b809150509250925092565b6000602082840312156110e3578081fd5b81518015158114611065578182fd5b600060208284031215611103578081fd5b5035919050565b60006020828403121561111b578081fd5b5051919050565b60008251815b818110156111425760208186018101518583015201611128565b818111156111505782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d6500604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b600082198211156114db576114db611536565b500190565b6000826114fb57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561151a5761151a611536565b500290565b60008282101561153157611531611536565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461156157600080fd5b5056fea26469706673582212209e7e3beb3bfd830aeeca06322d3170e59c6ef35081dde0018ecad0bf8ce0166464736f6c63430008000033a26469706673582212204a20c1086b81630fe5efdb93d6435b5f0b62ee09aca68a601033b131753d4db464736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80633515167614610030575b600080fd5b61004361003e3660046100c3565b610059565b60405161005091906100f5565b60405180910390f35b600080838360405161006a9061009a565b610075929190610109565b604051809103906000f080158015610091573d6000803e3d6000fd5b50949350505050565b6116728061012483390190565b80356001600160a01b03811681146100be57600080fd5b919050565b600080604083850312156100d5578182fd5b6100de836100a7565b91506100ec602084016100a7565b90509250929050565b6001600160a01b0391909116815260200190565b6001600160a01b039283168152911660208201526040019056fe60806040526201518060035534801561001757600080fd5b50604051620016723803806200167283398101604081905261003891610096565b6001600081905580546001600160a01b039384166001600160a01b03199182161790915560058054929093169116179055670de0b6b3a76400006008556100c8565b80516001600160a01b038116811461009157600080fd5b919050565b600080604083850312156100a8578182fd5b6100b18361007a565b91506100bf6020840161007a565b90509250929050565b61159a80620000d86000396000f3fe608060405234801561001057600080fd5b50600436106101475760003560e01c806398c6e760116100c8578063d1c6a2311161008c578063e3161ddd11610066578063e3161ddd1461025e578063e3824a3814610266578063f40f0f521461027957610147565b8063d1c6a23114610246578063dcc3e06e1461024e578063e19e71681461025657610147565b806398c6e760146101fd578063ae04d45d14610205578063af16d6e014610218578063bb872b4a1461022b578063bc8f88281461023e57610147565b80635fcbd2851161010f5780635fcbd285146101b2578063736ec05c146101c75780638395206c146101da5780638da5cb5b146101ed5780638fd3ab80146101f557610147565b80630e5c011e1461014c57806313a10036146101615780631959a0021461017f57806336642c21146101a2578063413d9c3a146101aa575b600080fd5b61015f61015a366004611049565b61028c565b005b6101696102ce565b604051610176919061148e565b60405180910390f35b61019261018d366004611049565b6102d4565b60405161017694939291906114ad565b6101696102fb565b610169610301565b6101ba610307565b604051610176919061115b565b61015f6101d5366004611049565b610316565b61015f6101e83660046110f2565b610395565b6101ba610498565b61015f6104a7565b6101ba6105ec565b61015f6102133660046110f2565b6105fb565b61015f610226366004611088565b61064a565b61015f6102393660046110f2565b6107a4565b61015f6107f3565b61016961086e565b6101ba61087a565b61015f610889565b61015f6108b9565b61015f6102743660046110f2565b61096b565b610169610287366004611049565b610a9c565b600260005414156102b85760405162461bcd60e51b81526004016102af90611457565b60405180910390fd5b60026000556102c681610b62565b506001600055565b600a5481565b60096020526000908152604090208054600182015460028301546003909301549192909184565b600b5481565b60035481565b6005546001600160a01b031681565b6001546001600160a01b031633146103405760405162461bcd60e51b81526004016102af9061139e565b6001600160a01b0381166103665760405162461bcd60e51b81526004016102af906111f7565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600260005414156103b85760405162461bcd60e51b81526004016102af90611457565b60026000556103c633610b62565b3360009081526009602052604090206002810154600390910154826103eb828461151f565b10156104095760405162461bcd60e51b81526004016102af9061122e565b336000908152600960205260409020600301546104279084906114c8565b3360009081526009602052604090206003810191909155429055600b5461044f9084906114c8565b600b55604051309033907fd60ea263bba686471127787b82c1f8b19bddbd87f52b83498879e720d839d51f9061048690879061148e565b60405180910390a35050600160005550565b6001546001600160a01b031681565b600260005414156104ca5760405162461bcd60e51b81526004016102af90611457565b60026000819055546001600160a01b03166104f75760405162461bcd60e51b81526004016102af906111f7565b61050033610b62565b336000908152600960205260409020600301541580159061053c575060035433600090815260096020526040902054610539904261151f565b10155b1561054e57610549610ce4565b610556565b610556610e05565b33600081815260096020526040908190206002908101549054915163ed59344b60e01b815290926001600160a01b039092169163ed59344b9161059e919085906004016111cf565b600060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b505033600090815260096020526040812060020181905560019055505050565b6002546001600160a01b031681565b6001546001600160a01b031633146106255760405162461bcd60e51b81526004016102af9061139e565b600081116106455760405162461bcd60e51b81526004016102af90611330565b600355565b6001546001600160a01b031633146106745760405162461bcd60e51b81526004016102af9061139e565b600260005414156106975760405162461bcd60e51b81526004016102af90611457565b60026000556001600160a01b0382166106c25760405162461bcd60e51b81526004016102af906113d5565b6040516369ee745160e01b81526001600160a01b038316906369ee7451906106f29086908590309060040161116f565b602060405180830381600087803b15801561070c57600080fd5b505af1158015610720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610744919061106c565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b9061048690859061115b565b6001546001600160a01b031633146107ce5760405162461bcd60e51b81526004016102af9061139e565b600081116107ee5760405162461bcd60e51b81526004016102af906112f9565b600855565b600260005414156108165760405162461bcd60e51b81526004016102af90611457565b600260009081556003543382526009602052604090912054610838904261151f565b10156108565760405162461bcd60e51b81526004016102af906112c2565b61085f33610b62565b610867610ce4565b6001600055565b670de0b6b3a764000081565b6004546001600160a01b031681565b600260005414156108ac5760405162461bcd60e51b81526004016102af90611457565b6002600055610867610e05565b60065443111561096957600a5415610922576000600654436108db919061151f565b90506000600854826108ed9190611500565b600a54909150610905670de0b6b3a764000083611500565b61090f91906114e0565b60075461091c91906114c8565b60075550505b436006819055600a546007546040517f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f7853936109609390929091611497565b60405180910390a15b565b6002600054141561098e5760405162461bcd60e51b81526004016102af90611457565b6002600055806109b05760405162461bcd60e51b81526004016102af90611367565b6109b86108b9565b6005546109d0906001600160a01b0316333084610e6c565b670de0b6b3a7640000600754826109e79190611500565b6109f191906114e0565b33600090815260096020526040902060010154610a0e91906114c8565b336000908152600960205260409020600181019190915560020154610a349082906114c8565b33600090815260096020526040902060020155600a54610a559082906114c8565b600a55604051309033907f19db7bd0d4b3b497594ec1221d3c790b31e985baeb3c80851231d930db53578b90610a8c90859061148e565b60405180910390a3506001600055565b6007546006546000919043118015610ab55750600a5415155b15610b1057600060065443610aca919061151f565b9050600060085482610adc9190611500565b600a54909150610af4670de0b6b3a764000083611500565b610afe91906114e0565b600754610b0b91906114c8565b925050505b6001600160a01b03831660009081526009602052604090206002810154600190910154670de0b6b3a7640000610b468484611500565b610b5091906114e0565b610b5a919061151f565b949350505050565b610b6a6108b9565b6001600160a01b038116600090815260096020526040812060020154600754909190670de0b6b3a764000090610ba09084611500565b610baa91906114e0565b6001600160a01b03841660009081526009602052604081206001015491925090610bd4908361151f565b336000908152600960205260408120600101849055600454919250906001600160a01b031615801590610c075750600082115b15610c92576004805460405163186e465160e31b81526001600160a01b039091169163c372328891610c3d9189918791016111b6565b602060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f919061110a565b90505b846001600160a01b0316336001600160a01b03167f1501dd260e02a8825a24ab4e4875600b0093dd977e06b49bba75faaebe28364783604051610cd5919061148e565b60405180910390a35050505050565b336000908152600960205260408120600281015460039091015460075491929091670de0b6b3a764000090610d199085611500565b610d2391906114e0565b600554909150610d3d906001600160a01b03163384610f5c565b670de0b6b3a764000060075483610d549190611500565b610d5e91906114e0565b610d68908261151f565b33600090815260096020526040902060010155610d85828461151f565b3360009081526009602052604081206002810192909255600390910155600b54610db090839061151f565b600b55600a54610dc190839061151f565b600a55604051309033907f082897d5a3548ef5742607ecedf0f1b9e4c355dcc81c81d5bfda47f2b49084a790610df890869061148e565b60405180910390a3505050565b3360009081526009602052604081206003018054919055600b54610e2a90829061151f565b600b55604051309033907faa15bd4bbb83b4c5e5bf28548326ffc2e718d46db45779599cf4d87b42fbd10490610e6190859061148e565b60405180910390a350565b600080856001600160a01b03166323b872dd868686604051602401610e9393929190611192565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610ecc9190611122565b6000604051808303816000865af19150503d8060008114610f09576040519150601f19603f3d011682016040523d82523d6000602084013e610f0e565b606091505b5091509150818015610f38575080511580610f38575080806020019051810190610f3891906110d2565b610f545760405162461bcd60e51b81526004016102af90611265565b505050505050565b600080846001600160a01b031663a9059cbb8585604051602401610f819291906111b6565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610fba9190611122565b6000604051808303816000865af19150503d8060008114610ff7576040519150601f19603f3d011682016040523d82523d6000602084013e610ffc565b606091505b509150915081801561102657508051158061102657508080602001905181019061102691906110d2565b6110425760405162461bcd60e51b81526004016102af9061140a565b5050505050565b60006020828403121561105a578081fd5b81356110658161154c565b9392505050565b60006020828403121561107d578081fd5b81516110658161154c565b60008060006060848603121561109c578182fd5b83356110a78161154c565b925060208401356110b78161154c565b915060408401356110c78161154c565b809150509250925092565b6000602082840312156110e3578081fd5b81518015158114611065578182fd5b600060208284031215611103578081fd5b5035919050565b60006020828403121561111b578081fd5b5051919050565b60008251815b818110156111425760208186018101518583015201611128565b818111156111505782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d6500604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b600082198211156114db576114db611536565b500190565b6000826114fb57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561151a5761151a611536565b500290565b60008282101561153157611531611536565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461156157600080fd5b5056fea26469706673582212209e7e3beb3bfd830aeeca06322d3170e59c6ef35081dde0018ecad0bf8ce0166464736f6c63430008000033a26469706673582212204a20c1086b81630fe5efdb93d6435b5f0b62ee09aca68a601033b131753d4db464736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}