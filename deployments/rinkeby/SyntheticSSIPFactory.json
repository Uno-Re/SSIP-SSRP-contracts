{
  "address": "0x923651BeDA601B0C773Be7276376d9d6968cD7B9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "newSyntheticSSIP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bf9b0f1599ec6a95550cdd0ed1fd8addd6ffb1e943dbf82ffe5603a608e599c",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0x923651BeDA601B0C773Be7276376d9d6968cD7B9",
    "transactionIndex": 3,
    "gasUsed": "1455376",
    "logsBloom": "0x
    "blockHash": "0x13cd0f97cefab0caeee6d3f385ceb360126ed94ed81fd1ee452c936ec4172f72",
    "transactionHash": "0x5bf9b0f1599ec6a95550cdd0ed1fd8addd6ffb1e943dbf82ffe5603a608e599c",
    "logs": [],
    "blockNumber": 10002391,
    "cumulativeGasUsed": "1615167",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bf649fb54ad93792de572409f0dce774",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"newSyntheticSSIP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/SyntheticSSIPFactory.sol\":\"SyntheticSSIPFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/SyntheticSSIP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/ISyntheticSSIP.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SyntheticSSIP is ISyntheticSSIP, ReentrancyGuard {\\n    address public owner;\\n    address public migrateTo;\\n\\n    uint256 public LOCK_TIME = 10 days;\\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\\n\\n    address public rewarder;\\n    address public lpToken;\\n\\n    uint256 lastRewardBlock;\\n    uint256 accRewardPerShare;\\n    uint256 public rewardPerBlock;\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n        uint256 pendingWithdrawAmount;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public totalStakedLPAmount;\\n    uint256 public totalWithdrawPending;\\n\\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accRewardPerShare);\\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\\n\\n    constructor(address _owner, address _lpToken) {\\n        require(_owner != address(0), \\\"UnoRe: zero owner address\\\");\\n        require(_lpToken != address(0), \\\"UnoRe: zero lp token address\\\");\\n        owner = _owner;\\n        lpToken = _lpToken;\\n        rewardPerBlock = 1e18;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        require(_rewardPerBlock > 0, \\\"UnoRe: zero value\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function setMigrateTo(address _migrateTo) external onlyOwner {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n    }\\n\\n    function setLockTime(uint256 _lockTime) external onlyOwner {\\n        require(_lockTime > 0, \\\"UnoRe: not allow zero lock time\\\");\\n        LOCK_TIME = _lockTime;\\n    }\\n\\n    function createRewarder(\\n        address _operator,\\n        address _factory,\\n        address _currency\\n    ) external onlyOwner nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    function migrate() external nonReentrant {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        if (\\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME\\n        ) {\\n            _leaveFromPending();\\n        } else {\\n            _cancelWithdrawRequest();\\n        }\\n        uint256 amount = userInfo[msg.sender].amount;\\n        TransferHelper.safeTransfer(lpToken, migrateTo, amount);\\n        IMigration(migrateTo).onMigration(msg.sender, amount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n    }\\n\\n    function pendingReward(address _to) external view returns (uint256 pending) {\\n        uint256 currentAccRewardPerShare = accRewardPerShare;\\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\\n            uint256 blocks = block.number - lastRewardBlock;\\n            uint256 rewards = blocks * rewardPerBlock;\\n            currentAccRewardPerShare = accRewardPerShare + (rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount;\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * currentAccRewardPerShare) / ACC_REWARD_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    function updatePool() public override {\\n        if (block.number > lastRewardBlock) {\\n            if (totalStakedLPAmount > 0) {\\n                uint256 blocks = block.number - lastRewardBlock;\\n                uint256 rewards = blocks * rewardPerBlock;\\n                accRewardPerShare = accRewardPerShare + ((rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount);\\n            }\\n            lastRewardBlock = block.number;\\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accRewardPerShare);\\n        }\\n    }\\n\\n    function enterInPool(uint256 _amount) external override nonReentrant {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\\n        userInfo[msg.sender].rewardDebt = userInfo[msg.sender].rewardDebt + (_amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + _amount;\\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\\n        emit LogStakedInPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\\n        // Withdraw desired amount from pool\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        require(amount - pendingWR >= _amount, \\\"UnoRe: withdraw amount overflow\\\");\\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n\\n        totalWithdrawPending = totalWithdrawPending + _amount;\\n\\n        emit LogLeftPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending() external override nonReentrant {\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        _leaveFromPending();\\n    }\\n\\n    function _leaveFromPending() private {\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n\\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\\n\\n        userInfo[msg.sender].rewardDebt = accumulatedReward - ((pendingWR * accRewardPerShare) / ACC_REWARD_PRECISION);\\n        userInfo[msg.sender].amount = amount - pendingWR;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\\n    }\\n\\n    function harvest(address _to) external override nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        uint256 _pendingReward = accumulatedReward - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[msg.sender].rewardDebt = accumulatedReward;\\n\\n        uint256 realRewardAmount = 0;\\n        if (rewarder != address(0) && _pendingReward > 0) {\\n            realRewardAmount = IRewarder(rewarder).onReward(_to, _pendingReward);\\n        }\\n\\n        emit LogHarvest(msg.sender, _to, realRewardAmount);\\n    }\\n\\n    function cancelWithdrawRequest() external nonReentrant {\\n        _cancelWithdrawRequest();\\n    }\\n\\n    function _cancelWithdrawRequest() private {\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\\n    }\\n}\\n\",\"keccak256\":\"0xe11cf7c8ce2cf0a73a3c795d5a6b4dd23704e8e22aad8a62886e203f71f2ed99\",\"license\":\"GPL-3.0\"},\"contracts/factories/SyntheticSSIPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../SyntheticSSIP.sol\\\";\\nimport \\\"../interfaces/ISyntheticSSIPFactory.sol\\\";\\n\\ncontract SyntheticSSIPFactory is ISyntheticSSIPFactory {\\n    constructor() {}\\n\\n    function newSyntheticSSIP(address _owner, address _lpToken) external override returns (address) {\\n        SyntheticSSIP _ssip = new SyntheticSSIP(_owner, _lpToken);\\n        address _ssipAddr = address(_ssip);\\n        return _ssipAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x876e5ede9f12bf68cc651f9c387fcc9e904c1ef066c33f3d1fce39e5bb8c41b6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IMigration {\\n    function onMigration(\\n        address who_,\\n        uint256 amount_,\\n        bytes memory data_\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b25ec77b6df9db73050a67b9ce4147154c5be596b6637d47484fd6236965069\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6e37fd84127d6039965b097e57e45f79630c1313d9d841176ce8a8e2ec16b83b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(\\n        address _operator,\\n        address _currency,\\n        address _pool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x14d54228edcd08203983b293cfa44cc13cf1fb450019172ef57a1ebccf89f4a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSIP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISyntheticSSIP {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n}\\n\",\"keccak256\":\"0xd1c8e01736abd164fa3946a04ddfac2698e0dfb984a396e84b6adaa6b30bbf17\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSIPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISyntheticSSIPFactory {\\n    function newSyntheticSSIP(address _owner, address _lpToken) external returns (address);\\n}\\n\",\"keccak256\":\"0xfea09577a47f75aee3718d3f0173853ecfc3768fa86bc97da50e3f736c49725d\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611965806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633515167614610030575b600080fd5b61004361003e3660046100d0565b610059565b6040516100509190610102565b60405180910390f35b600080838360405161006a9061009a565b610075929190610123565b604051809103906000f080158015610091573d6000803e3d6000fd5b50949350505050565b6117e58061014b83390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100cb57600080fd5b919050565b600080604083850312156100e2578182fd5b6100eb836100a7565b91506100f9602084016100a7565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9283168152911660208201526040019056fe6080604052620d2f006003553480156200001857600080fd5b50604051620017e5380380620017e58339810160408190526200003b91620000f6565b60016000556001600160a01b038216620000725760405162461bcd60e51b8152600401620000699062000164565b60405180910390fd5b6001600160a01b0381166200009b5760405162461bcd60e51b815260040162000069906200012d565b600180546001600160a01b039384166001600160a01b03199182161790915560058054929093169116179055670de0b6b3a76400006008556200019b565b80516001600160a01b0381168114620000f157600080fd5b919050565b6000806040838503121562000109578182fd5b6200011483620000d9565b91506200012460208401620000d9565b90509250929050565b6020808252601c908201527f556e6f52653a207a65726f206c7020746f6b656e206164647265737300000000604082015260600190565b60208082526019908201527f556e6f52653a207a65726f206f776e6572206164647265737300000000000000604082015260600190565b61163a80620001ab6000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806398c6e760116100d8578063d1c6a2311161008c578063e3161ddd11610066578063e3161ddd146102a1578063e3824a38146102a9578063f40f0f52146102bc57610182565b8063d1c6a23114610289578063dcc3e06e14610291578063e19e71681461029957610182565b8063af16d6e0116100bd578063af16d6e01461025b578063bb872b4a1461026e578063bc8f88281461028157610182565b806398c6e76014610240578063ae04d45d1461024857610182565b80635fcbd2851161013a5780638ae39cac116101145780638ae39cac146102285780638da5cb5b146102305780638fd3ab801461023857610182565b80635fcbd285146101ed578063736ec05c146102025780638395206c1461021557610182565b80631959a0021161016b5780631959a002146101ba57806336642c21146101dd578063413d9c3a146101e557610182565b80630e5c011e1461018757806313a100361461019c575b600080fd5b61019a6101953660046110d9565b6102cf565b005b6101a4610311565b6040516101b1919061152e565b60405180910390f35b6101cd6101c83660046110d9565b610317565b6040516101b1949392919061154d565b6101a461033e565b6101a4610344565b6101f561034a565b6040516101b191906111eb565b61019a6102103660046110d9565b610359565b61019a610223366004611182565b6103d8565b6101a46104db565b6101f56104e1565b61019a6104f0565b6101f5610652565b61019a610256366004611182565b610661565b61019a610269366004611118565b6106b0565b61019a61027c366004611182565b61080a565b61019a610859565b6101a46108d4565b6101f56108e0565b61019a6108ef565b61019a61091f565b61019a6102b7366004611182565b6109d1565b6101a46102ca3660046110d9565b610b02565b600260005414156102fb5760405162461bcd60e51b81526004016102f2906114f7565b60405180910390fd5b600260005561030981610bc8565b506001600055565b600a5481565b60096020526000908152604090208054600182015460028301546003909301549192909184565b600b5481565b60035481565b6005546001600160a01b031681565b6001546001600160a01b031633146103835760405162461bcd60e51b81526004016102f29061142e565b6001600160a01b0381166103a95760405162461bcd60e51b81526004016102f290611287565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600260005414156103fb5760405162461bcd60e51b81526004016102f2906114f7565b600260005561040933610bc8565b33600090815260096020526040902060028101546003909101548261042e82846115bf565b101561044c5760405162461bcd60e51b81526004016102f2906112be565b3360009081526009602052604090206003015461046a908490611568565b3360009081526009602052604090206003810191909155429055600b54610492908490611568565b600b55604051309033907fd60ea263bba686471127787b82c1f8b19bddbd87f52b83498879e720d839d51f906104c990879061152e565b60405180910390a35050600160005550565b60085481565b6001546001600160a01b031681565b600260005414156105135760405162461bcd60e51b81526004016102f2906114f7565b60026000819055546001600160a01b03166105405760405162461bcd60e51b81526004016102f290611287565b61054933610bc8565b336000908152600960205260409020600301541580159061058557506003543360009081526009602052604090205461058290426115bf565b10155b1561059757610592610d4a565b61059f565b61059f610e6b565b336000908152600960205260409020600290810154600554915490916105d2916001600160a01b03918216911683610ed2565b60025460405163ed59344b60e01b81526001600160a01b039091169063ed59344b90610604903390859060040161125f565b600060405180830381600087803b15801561061e57600080fd5b505af1158015610632573d6000803e3d6000fd5b505033600090815260096020526040812060020181905560019055505050565b6002546001600160a01b031681565b6001546001600160a01b0316331461068b5760405162461bcd60e51b81526004016102f29061142e565b600081116106ab5760405162461bcd60e51b81526004016102f2906113c0565b600355565b6001546001600160a01b031633146106da5760405162461bcd60e51b81526004016102f29061142e565b600260005414156106fd5760405162461bcd60e51b81526004016102f2906114f7565b60026000556001600160a01b0382166107285760405162461bcd60e51b81526004016102f290611465565b6040516369ee745160e01b81526001600160a01b038316906369ee745190610758908690859030906004016111ff565b602060405180830381600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa91906110fc565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b906104c99085906111eb565b6001546001600160a01b031633146108345760405162461bcd60e51b81526004016102f29061142e565b600081116108545760405162461bcd60e51b81526004016102f290611389565b600855565b6002600054141561087c5760405162461bcd60e51b81526004016102f2906114f7565b60026000908155600354338252600960205260409091205461089e90426115bf565b10156108bc5760405162461bcd60e51b81526004016102f290611352565b6108c533610bc8565b6108cd610d4a565b6001600055565b670de0b6b3a764000081565b6004546001600160a01b031681565b600260005414156109125760405162461bcd60e51b81526004016102f2906114f7565b60026000556108cd610e6b565b6006544311156109cf57600a54156109885760006006544361094191906115bf565b905060006008548261095391906115a0565b600a5490915061096b670de0b6b3a7640000836115a0565b6109759190611580565b6007546109829190611568565b60075550505b436006819055600a546007546040517f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f7853936109c69390929091611537565b60405180910390a15b565b600260005414156109f45760405162461bcd60e51b81526004016102f2906114f7565b600260005580610a165760405162461bcd60e51b81526004016102f2906113f7565b610a1e61091f565b600554610a36906001600160a01b0316333084610fd4565b670de0b6b3a764000060075482610a4d91906115a0565b610a579190611580565b33600090815260096020526040902060010154610a749190611568565b336000908152600960205260409020600181019190915560020154610a9a908290611568565b33600090815260096020526040902060020155600a54610abb908290611568565b600a55604051309033907f19db7bd0d4b3b497594ec1221d3c790b31e985baeb3c80851231d930db53578b90610af290859061152e565b60405180910390a3506001600055565b6007546006546000919043118015610b1b5750600a5415155b15610b7657600060065443610b3091906115bf565b9050600060085482610b4291906115a0565b600a54909150610b5a670de0b6b3a7640000836115a0565b610b649190611580565b600754610b719190611568565b925050505b6001600160a01b03831660009081526009602052604090206002810154600190910154670de0b6b3a7640000610bac84846115a0565b610bb69190611580565b610bc091906115bf565b949350505050565b610bd061091f565b6001600160a01b038116600090815260096020526040812060020154600754909190670de0b6b3a764000090610c0690846115a0565b610c109190611580565b6001600160a01b03841660009081526009602052604081206001015491925090610c3a90836115bf565b336000908152600960205260408120600101849055600454919250906001600160a01b031615801590610c6d5750600082115b15610cf8576004805460405163186e465160e31b81526001600160a01b039091169163c372328891610ca3918991879101611246565b602060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf5919061119a565b90505b846001600160a01b0316336001600160a01b03167f1501dd260e02a8825a24ab4e4875600b0093dd977e06b49bba75faaebe28364783604051610d3b919061152e565b60405180910390a35050505050565b336000908152600960205260408120600281015460039091015460075491929091670de0b6b3a764000090610d7f90856115a0565b610d899190611580565b600554909150610da3906001600160a01b03163384610ed2565b670de0b6b3a764000060075483610dba91906115a0565b610dc49190611580565b610dce90826115bf565b33600090815260096020526040902060010155610deb82846115bf565b3360009081526009602052604081206002810192909255600390910155600b54610e169083906115bf565b600b55600a54610e279083906115bf565b600a55604051309033907f082897d5a3548ef5742607ecedf0f1b9e4c355dcc81c81d5bfda47f2b49084a790610e5e90869061152e565b60405180910390a3505050565b3360009081526009602052604081206003018054919055600b54610e909082906115bf565b600b55604051309033907faa15bd4bbb83b4c5e5bf28548326ffc2e718d46db45779599cf4d87b42fbd10490610ec790859061152e565b60405180910390a350565b600080846001600160a01b031663a9059cbb8585604051602401610ef7929190611246565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f4591906111b2565b6000604051808303816000865af19150503d8060008114610f82576040519150601f19603f3d011682016040523d82523d6000602084013e610f87565b606091505b5091509150818015610fb1575080511580610fb1575080806020019051810190610fb19190611162565b610fcd5760405162461bcd60e51b81526004016102f29061149a565b5050505050565b600080856001600160a01b03166323b872dd868686604051602401610ffb93929190611222565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161104991906111b2565b6000604051808303816000865af19150503d8060008114611086576040519150601f19603f3d011682016040523d82523d6000602084013e61108b565b606091505b50915091508180156110b55750805115806110b55750808060200190518101906110b59190611162565b6110d15760405162461bcd60e51b81526004016102f2906112f5565b505050505050565b6000602082840312156110ea578081fd5b81356110f5816115ec565b9392505050565b60006020828403121561110d578081fd5b81516110f5816115ec565b60008060006060848603121561112c578182fd5b8335611137816115ec565b92506020840135611147816115ec565b91506040840135611157816115ec565b809150509250925092565b600060208284031215611173578081fd5b815180151581146110f5578182fd5b600060208284031215611193578081fd5b5035919050565b6000602082840312156111ab578081fd5b5051919050565b60008251815b818110156111d257602081860181015185830152016111b8565b818111156111e05782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d6500604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6000821982111561157b5761157b6115d6565b500190565b60008261159b57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156115ba576115ba6115d6565b500290565b6000828210156115d1576115d16115d6565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461160157600080fd5b5056fea2646970667358221220a97938c2770222ee77173d4d67347441f4c807d1edeb5972b26c69d7c24acd9464736f6c63430008000033a2646970667358221220a2cada3a7f2dbc7bb532cc71f76ad79f0352e0459a37a17074d29c197206f8c464736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80633515167614610030575b600080fd5b61004361003e3660046100d0565b610059565b6040516100509190610102565b60405180910390f35b600080838360405161006a9061009a565b610075929190610123565b604051809103906000f080158015610091573d6000803e3d6000fd5b50949350505050565b6117e58061014b83390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100cb57600080fd5b919050565b600080604083850312156100e2578182fd5b6100eb836100a7565b91506100f9602084016100a7565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9283168152911660208201526040019056fe6080604052620d2f006003553480156200001857600080fd5b50604051620017e5380380620017e58339810160408190526200003b91620000f6565b60016000556001600160a01b038216620000725760405162461bcd60e51b8152600401620000699062000164565b60405180910390fd5b6001600160a01b0381166200009b5760405162461bcd60e51b815260040162000069906200012d565b600180546001600160a01b039384166001600160a01b03199182161790915560058054929093169116179055670de0b6b3a76400006008556200019b565b80516001600160a01b0381168114620000f157600080fd5b919050565b6000806040838503121562000109578182fd5b6200011483620000d9565b91506200012460208401620000d9565b90509250929050565b6020808252601c908201527f556e6f52653a207a65726f206c7020746f6b656e206164647265737300000000604082015260600190565b60208082526019908201527f556e6f52653a207a65726f206f776e6572206164647265737300000000000000604082015260600190565b61163a80620001ab6000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806398c6e760116100d8578063d1c6a2311161008c578063e3161ddd11610066578063e3161ddd146102a1578063e3824a38146102a9578063f40f0f52146102bc57610182565b8063d1c6a23114610289578063dcc3e06e14610291578063e19e71681461029957610182565b8063af16d6e0116100bd578063af16d6e01461025b578063bb872b4a1461026e578063bc8f88281461028157610182565b806398c6e76014610240578063ae04d45d1461024857610182565b80635fcbd2851161013a5780638ae39cac116101145780638ae39cac146102285780638da5cb5b146102305780638fd3ab801461023857610182565b80635fcbd285146101ed578063736ec05c146102025780638395206c1461021557610182565b80631959a0021161016b5780631959a002146101ba57806336642c21146101dd578063413d9c3a146101e557610182565b80630e5c011e1461018757806313a100361461019c575b600080fd5b61019a6101953660046110d9565b6102cf565b005b6101a4610311565b6040516101b1919061152e565b60405180910390f35b6101cd6101c83660046110d9565b610317565b6040516101b1949392919061154d565b6101a461033e565b6101a4610344565b6101f561034a565b6040516101b191906111eb565b61019a6102103660046110d9565b610359565b61019a610223366004611182565b6103d8565b6101a46104db565b6101f56104e1565b61019a6104f0565b6101f5610652565b61019a610256366004611182565b610661565b61019a610269366004611118565b6106b0565b61019a61027c366004611182565b61080a565b61019a610859565b6101a46108d4565b6101f56108e0565b61019a6108ef565b61019a61091f565b61019a6102b7366004611182565b6109d1565b6101a46102ca3660046110d9565b610b02565b600260005414156102fb5760405162461bcd60e51b81526004016102f2906114f7565b60405180910390fd5b600260005561030981610bc8565b506001600055565b600a5481565b60096020526000908152604090208054600182015460028301546003909301549192909184565b600b5481565b60035481565b6005546001600160a01b031681565b6001546001600160a01b031633146103835760405162461bcd60e51b81526004016102f29061142e565b6001600160a01b0381166103a95760405162461bcd60e51b81526004016102f290611287565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600260005414156103fb5760405162461bcd60e51b81526004016102f2906114f7565b600260005561040933610bc8565b33600090815260096020526040902060028101546003909101548261042e82846115bf565b101561044c5760405162461bcd60e51b81526004016102f2906112be565b3360009081526009602052604090206003015461046a908490611568565b3360009081526009602052604090206003810191909155429055600b54610492908490611568565b600b55604051309033907fd60ea263bba686471127787b82c1f8b19bddbd87f52b83498879e720d839d51f906104c990879061152e565b60405180910390a35050600160005550565b60085481565b6001546001600160a01b031681565b600260005414156105135760405162461bcd60e51b81526004016102f2906114f7565b60026000819055546001600160a01b03166105405760405162461bcd60e51b81526004016102f290611287565b61054933610bc8565b336000908152600960205260409020600301541580159061058557506003543360009081526009602052604090205461058290426115bf565b10155b1561059757610592610d4a565b61059f565b61059f610e6b565b336000908152600960205260409020600290810154600554915490916105d2916001600160a01b03918216911683610ed2565b60025460405163ed59344b60e01b81526001600160a01b039091169063ed59344b90610604903390859060040161125f565b600060405180830381600087803b15801561061e57600080fd5b505af1158015610632573d6000803e3d6000fd5b505033600090815260096020526040812060020181905560019055505050565b6002546001600160a01b031681565b6001546001600160a01b0316331461068b5760405162461bcd60e51b81526004016102f29061142e565b600081116106ab5760405162461bcd60e51b81526004016102f2906113c0565b600355565b6001546001600160a01b031633146106da5760405162461bcd60e51b81526004016102f29061142e565b600260005414156106fd5760405162461bcd60e51b81526004016102f2906114f7565b60026000556001600160a01b0382166107285760405162461bcd60e51b81526004016102f290611465565b6040516369ee745160e01b81526001600160a01b038316906369ee745190610758908690859030906004016111ff565b602060405180830381600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa91906110fc565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b906104c99085906111eb565b6001546001600160a01b031633146108345760405162461bcd60e51b81526004016102f29061142e565b600081116108545760405162461bcd60e51b81526004016102f290611389565b600855565b6002600054141561087c5760405162461bcd60e51b81526004016102f2906114f7565b60026000908155600354338252600960205260409091205461089e90426115bf565b10156108bc5760405162461bcd60e51b81526004016102f290611352565b6108c533610bc8565b6108cd610d4a565b6001600055565b670de0b6b3a764000081565b6004546001600160a01b031681565b600260005414156109125760405162461bcd60e51b81526004016102f2906114f7565b60026000556108cd610e6b565b6006544311156109cf57600a54156109885760006006544361094191906115bf565b905060006008548261095391906115a0565b600a5490915061096b670de0b6b3a7640000836115a0565b6109759190611580565b6007546109829190611568565b60075550505b436006819055600a546007546040517f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f7853936109c69390929091611537565b60405180910390a15b565b600260005414156109f45760405162461bcd60e51b81526004016102f2906114f7565b600260005580610a165760405162461bcd60e51b81526004016102f2906113f7565b610a1e61091f565b600554610a36906001600160a01b0316333084610fd4565b670de0b6b3a764000060075482610a4d91906115a0565b610a579190611580565b33600090815260096020526040902060010154610a749190611568565b336000908152600960205260409020600181019190915560020154610a9a908290611568565b33600090815260096020526040902060020155600a54610abb908290611568565b600a55604051309033907f19db7bd0d4b3b497594ec1221d3c790b31e985baeb3c80851231d930db53578b90610af290859061152e565b60405180910390a3506001600055565b6007546006546000919043118015610b1b5750600a5415155b15610b7657600060065443610b3091906115bf565b9050600060085482610b4291906115a0565b600a54909150610b5a670de0b6b3a7640000836115a0565b610b649190611580565b600754610b719190611568565b925050505b6001600160a01b03831660009081526009602052604090206002810154600190910154670de0b6b3a7640000610bac84846115a0565b610bb69190611580565b610bc091906115bf565b949350505050565b610bd061091f565b6001600160a01b038116600090815260096020526040812060020154600754909190670de0b6b3a764000090610c0690846115a0565b610c109190611580565b6001600160a01b03841660009081526009602052604081206001015491925090610c3a90836115bf565b336000908152600960205260408120600101849055600454919250906001600160a01b031615801590610c6d5750600082115b15610cf8576004805460405163186e465160e31b81526001600160a01b039091169163c372328891610ca3918991879101611246565b602060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf5919061119a565b90505b846001600160a01b0316336001600160a01b03167f1501dd260e02a8825a24ab4e4875600b0093dd977e06b49bba75faaebe28364783604051610d3b919061152e565b60405180910390a35050505050565b336000908152600960205260408120600281015460039091015460075491929091670de0b6b3a764000090610d7f90856115a0565b610d899190611580565b600554909150610da3906001600160a01b03163384610ed2565b670de0b6b3a764000060075483610dba91906115a0565b610dc49190611580565b610dce90826115bf565b33600090815260096020526040902060010155610deb82846115bf565b3360009081526009602052604081206002810192909255600390910155600b54610e169083906115bf565b600b55600a54610e279083906115bf565b600a55604051309033907f082897d5a3548ef5742607ecedf0f1b9e4c355dcc81c81d5bfda47f2b49084a790610e5e90869061152e565b60405180910390a3505050565b3360009081526009602052604081206003018054919055600b54610e909082906115bf565b600b55604051309033907faa15bd4bbb83b4c5e5bf28548326ffc2e718d46db45779599cf4d87b42fbd10490610ec790859061152e565b60405180910390a350565b600080846001600160a01b031663a9059cbb8585604051602401610ef7929190611246565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f4591906111b2565b6000604051808303816000865af19150503d8060008114610f82576040519150601f19603f3d011682016040523d82523d6000602084013e610f87565b606091505b5091509150818015610fb1575080511580610fb1575080806020019051810190610fb19190611162565b610fcd5760405162461bcd60e51b81526004016102f29061149a565b5050505050565b600080856001600160a01b03166323b872dd868686604051602401610ffb93929190611222565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161104991906111b2565b6000604051808303816000865af19150503d8060008114611086576040519150601f19603f3d011682016040523d82523d6000602084013e61108b565b606091505b50915091508180156110b55750805115806110b55750808060200190518101906110b59190611162565b6110d15760405162461bcd60e51b81526004016102f2906112f5565b505050505050565b6000602082840312156110ea578081fd5b81356110f5816115ec565b9392505050565b60006020828403121561110d578081fd5b81516110f5816115ec565b60008060006060848603121561112c578182fd5b8335611137816115ec565b92506020840135611147816115ec565b91506040840135611157816115ec565b809150509250925092565b600060208284031215611173578081fd5b815180151581146110f5578182fd5b600060208284031215611193578081fd5b5035919050565b6000602082840312156111ab578081fd5b5051919050565b60008251815b818110156111d257602081860181015185830152016111b8565b818111156111e05782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d6500604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6000821982111561157b5761157b6115d6565b500190565b60008261159b57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156115ba576115ba6115d6565b500290565b6000828210156115d1576115d16115d6565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461160157600080fd5b5056fea2646970667358221220a97938c2770222ee77173d4d67347441f4c807d1edeb5972b26c69d7c24acd9464736f6c63430008000033a2646970667358221220a2cada3a7f2dbc7bb532cc71f76ad79f0352e0459a37a17074d29c197206f8c464736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}