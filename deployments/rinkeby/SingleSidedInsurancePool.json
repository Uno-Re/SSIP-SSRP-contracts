{
  "address": "0xAD666Ad822a104D9A91bBf49e425A60486e3e3e3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_claimAssessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestAmount",
          "type": "uint256"
        }
      ],
      "name": "LeftPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "LogCreateRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_syntheticSSIP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "LogCreateSyntheticSSIP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawLpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawUnoAmount",
          "type": "uint256"
        }
      ],
      "name": "LogLeaveFromPendingSSIP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "LogLpTransferInSSIP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "LogSetExchangeAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_lastRewardBlock",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_accUnoPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimAmount",
          "type": "uint256"
        }
      ],
      "name": "PolicyClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSIP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "RiskPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "StakedInPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_UNO_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelWithdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAssessor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "createRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "createRiskPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "createSyntheticSSIP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterInPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "getStakedAmountPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalWithdrawPendingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawRequestPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingAmountInUno",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originUnoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leaveFromPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveFromPoolInPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lpTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "pendingUno",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "policyClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "lastRewardBlock",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "accUnoPerShare",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "unoMultiplierPerBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "riskPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "name": "setCapitalAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimAssessor",
          "type": "address"
        }
      ],
      "name": "setClaimAssessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockTime",
          "type": "uint256"
        }
      ],
      "name": "setLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrateTo",
          "type": "address"
        }
      ],
      "name": "setMigrateTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLPCapital",
          "type": "uint256"
        }
      ],
      "name": "setMinLPCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setRewardMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticSSIP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastWithdrawTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fef9afa8e3129a2341fdbd4dcd4bc9c681f58fbed544a7c75d27c02d0cb31d0",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0xAD666Ad822a104D9A91bBf49e425A60486e3e3e3",
    "transactionIndex": 0,
    "gasUsed": "2799917",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9d54f5c1d1906d76fbb2dfd50b4ee1f793d91aa0256d28700c39983f56dfdae5",
    "transactionHash": "0x5fef9afa8e3129a2341fdbd4dcd4bc9c681f58fbed544a7c75d27c02d0cb31d0",
    "logs": [],
    "blockNumber": 9863614,
    "cumulativeGasUsed": "2799917",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "0xA51A923E3719b460C2F4889407522CAADE2763b1",
    "0x40c035016AD732b6cFce34c3F881040B6C6cf71E",
    "0x6371c237bDeD3Aa2352c48617A8624436104AfA2"
  ],
  "solcInputHash": "8b4d273543ae78586be14fde7d603ae7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestAmount\",\"type\":\"uint256\"}],\"name\":\"LeftPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"LogCreateRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_syntheticSSIP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"LogCreateSyntheticSSIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawLpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawUnoAmount\",\"type\":\"uint256\"}],\"name\":\"LogLeaveFromPendingSSIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogLpTransferInSSIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"LogSetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_lastRewardBlock\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_accUnoPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"PolicyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSIP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"RiskPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakedInPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_UNO_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAssessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"createRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"createRiskPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"createSyntheticSSIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getStakedAmountPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWithdrawPendingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawRequestPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmountInUno\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originUnoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveFromPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveFromPoolInPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lpTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"pendingUno\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"policyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastRewardBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"accUnoPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"unoMultiplierPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"name\":\"setCapitalAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"}],\"name\":\"setClaimAssessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrateTo\",\"type\":\"address\"}],\"name\":\"setMigrateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLPCapital\",\"type\":\"uint256\"}],\"name\":\"setMinLPCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticSSIP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createRiskPool(string,string,address,address,uint256)\":{\"details\":\"create Risk pool with UNO from SSIP owner\"},\"getTotalWithdrawPendingAmount()\":{\"details\":\"get total withdraw request amount in pending for the risk pool in UNO\"},\"getWithdrawRequestPerUser(address)\":{\"details\":\"get withdraw request amount in pending per user in UNO\"},\"leaveFromPending()\":{\"details\":\"user can submit claim again and receive his funds into his wallet after 10 days since last WR.\"},\"leaveFromPoolInPending(uint256)\":{\"details\":\"WR will be in pending for 10 days at least\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleSidedInsurancePool.sol\":\"SingleSidedInsurancePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/SingleSidedInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/ICapitalAgent.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/IRiskPoolFactory.sol\\\";\\nimport \\\"./interfaces/ISingleSidedInsurancePool.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./interfaces/ISyntheticSSIPFactory.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SingleSidedInsurancePool is ISingleSidedInsurancePool, ReentrancyGuard {\\n    address public owner;\\n    address public claimAssessor;\\n    address private exchangeAgent;\\n    address public migrateTo;\\n    address public USDT_TOKEN;\\n    address public capitalAgent;\\n    address public syntheticSSIP;\\n\\n    uint256 public LOCK_TIME = 1 days;\\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\\n\\n    address public rewarder;\\n    address public override riskPool;\\n    struct PoolInfo {\\n        uint128 lastRewardBlock;\\n        uint128 accUnoPerShare;\\n        uint256 unoMultiplierPerBlock;\\n    }\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    PoolInfo public poolInfo;\\n\\n    event RiskPoolCreated(address indexed _SSIP, address indexed _pool);\\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogUpdatePool(uint128 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogSetExchangeAgent(address indexed _exchangeAgent);\\n    event LogLeaveFromPendingSSIP(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\\n    event LogLpTransferInSSIP(address indexed _from, address indexed _to, uint256 _amount);\\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\\n    event LogCreateSyntheticSSIP(address indexed _SSIP, address indexed _syntheticSSIP, address indexed _lpToken);\\n\\n    constructor(\\n        address _owner,\\n        address _claimAssessor,\\n        address _exchangeAgent,\\n        address _USDT_TOKEN,\\n        address _capitalAgent\\n    ) {\\n        owner = _owner;\\n        exchangeAgent = _exchangeAgent;\\n        claimAssessor = _claimAssessor;\\n        USDT_TOKEN = _USDT_TOKEN;\\n        capitalAgent = _capitalAgent;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyClaimAssessor() {\\n        require(msg.sender == claimAssessor, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit LogSetExchangeAgent(_exchangeAgent);\\n    }\\n\\n    function setCapitalAgent(address _capitalAgent) external onlyOwner {\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero address\\\");\\n        capitalAgent = _capitalAgent;\\n    }\\n\\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyOwner {\\n        require(_rewardMultiplier > 0, \\\"UnoRe: zero value\\\");\\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\\n    }\\n\\n    function setClaimAssessor(address _claimAssessor) external onlyOwner {\\n        require(_claimAssessor != address(0), \\\"UnoRe: zero address\\\");\\n        claimAssessor = _claimAssessor;\\n    }\\n\\n    function setMigrateTo(address _migrateTo) external onlyOwner {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n    }\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external onlyOwner {\\n        require(_minLPCapital > 0, \\\"UnoRe: not allow zero value\\\");\\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\\n    }\\n\\n    function setLockTime(uint256 _lockTime) external onlyOwner {\\n        require(_lockTime > 0, \\\"UnoRe: not allow zero lock time\\\");\\n        LOCK_TIME = _lockTime;\\n    }\\n\\n    /**\\n     * @dev create Risk pool with UNO from SSIP owner\\n     */\\n    function createRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _factory,\\n        address _currency,\\n        uint256 _rewardMultiplier\\n    ) external onlyOwner nonReentrant {\\n        require(riskPool == address(0), \\\"UnoRe: risk pool created already\\\");\\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\\n        poolInfo.lastRewardBlock = uint128(block.number);\\n        poolInfo.accUnoPerShare = 0;\\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\\n        ICapitalAgent(capitalAgent).addPool(address(this));\\n        emit RiskPoolCreated(address(this), riskPool);\\n    }\\n\\n    function createRewarder(\\n        address _operator,\\n        address _factory,\\n        address _currency\\n    ) external onlyOwner nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    function createSyntheticSSIP(address _owner, address _factory) external onlyOwner nonReentrant {\\n        require(_owner != address(0), \\\"UnoRe: zero owner address\\\");\\n        require(_factory != address(0), \\\"UnoRe:zero factory address\\\");\\n        syntheticSSIP = ISyntheticSSIPFactory(_factory).newSyntheticSSIP(_owner, riskPool);\\n        emit LogCreateSyntheticSSIP(address(this), syntheticSSIP, riskPool);\\n    }\\n\\n    function migrate() external nonReentrant {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > LOCK_TIME;\\n        IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\\n        IMigration(migrateTo).onMigration(msg.sender, amount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n        userInfo[msg.sender].rewardDebt = 0;\\n    }\\n\\n    function pendingUno(address _to) external view returns (uint256 pending) {\\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\\n        uint128 accUnoPerShare = poolInfo.accUnoPerShare;\\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\\n            accUnoPerShare = accUnoPerShare + uint128((unoReward * ACC_UNO_PRECISION) / tokenSupply);\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    function updatePool() public override {\\n        if (block.number > poolInfo.lastRewardBlock) {\\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\\n            if (tokenSupply > 0) {\\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + uint128(((unoReward * ACC_UNO_PRECISION) / tokenSupply));\\n            }\\n            poolInfo.lastRewardBlock = uint128(block.number);\\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\\n        }\\n    }\\n\\n    function enterInPool(uint256 _amount) external override nonReentrant {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        address token = IRiskPool(riskPool).currency();\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\\n        IRiskPool(riskPool).enter(msg.sender, _amount);\\n        userInfo[msg.sender].rewardDebt =\\n            userInfo[msg.sender].rewardDebt +\\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\\n            ACC_UNO_PRECISION;\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + ((_amount * 1e18) / lpPriceUno);\\n        ICapitalAgent(capitalAgent).SSIPStaking(_amount);\\n        emit StakedInPool(msg.sender, riskPool, _amount);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\\n        _harvest(msg.sender);\\n        require(ICapitalAgent(capitalAgent).checkCapitalByMCR(_amount), \\\"UnoRe: minimum capital underflow\\\");\\n        // Withdraw desired amount from pool\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\\n        require(((amount - pendingAmount) * lpPriceUno) / 1e18 >= _amount, \\\"UnoRe: withdraw amount overflow\\\");\\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\\n\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n        emit LeftPool(msg.sender, riskPool, _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending() external override nonReentrant {\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        (uint256 pendingAmount, , uint256 pendingAmountInUNO) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\\n        ICapitalAgent(capitalAgent).SSIPWithdraw(pendingAmountInUNO);\\n\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        userInfo[msg.sender].rewardDebt =\\n            accumulatedUno -\\n            ((pendingAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender);\\n        userInfo[msg.sender].amount = amount - withdrawAmount;\\n        emit LogLeaveFromPendingSSIP(msg.sender, withdrawAmount, withdrawAmountInUNO);\\n    }\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        require(msg.sender == address(riskPool), \\\"UnoRe: not allow others transfer\\\");\\n        if (_from != syntheticSSIP && _to != syntheticSSIP) {\\n            _harvest(_from);\\n            uint256 amount = userInfo[_from].amount;\\n            (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\\n            require(amount - pendingAmount >= _amount, \\\"UnoRe: balance overflow\\\");\\n            uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n            userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n            userInfo[_from].amount = amount - _amount;\\n\\n            userInfo[_to].rewardDebt =\\n                userInfo[_to].rewardDebt +\\n                ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n            userInfo[_to].amount = userInfo[_to].amount + _amount;\\n\\n            emit LogLpTransferInSSIP(_from, _to, _amount);\\n        }\\n    }\\n\\n    function harvest(address _to) external override nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[msg.sender].rewardDebt = accumulatedUno;\\n        uint256 rewardAmount = 0;\\n\\n        if (rewarder != address(0) && _pendingUno != 0) {\\n            rewardAmount = IRewarder(rewarder).onReward(_to, _pendingUno);\\n        }\\n\\n        emit Harvest(msg.sender, _to, rewardAmount);\\n    }\\n\\n    function cancelWithdrawRequest() external nonReentrant {\\n        IRiskPool(riskPool).cancelWithrawRequest(msg.sender);\\n    }\\n\\n    function policyClaim(address _to, uint256 _amount) external onlyClaimAssessor nonReentrant {\\n        require(_to != address(0), \\\"UnoRe: zero address\\\");\\n        require(_amount > 0, \\\"UnoRe: zero amount\\\");\\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_to, _amount);\\n        emit PolicyClaim(_to, realClaimAmount);\\n    }\\n\\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\\n        lpAmount = userInfo[_to].amount;\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\\n    }\\n\\n    /**\\n     * @dev get withdraw request amount in pending per user in UNO\\n     */\\n    function getWithdrawRequestPerUser(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingAmount,\\n            uint256 pendingAmountInUno,\\n            uint256 originUnoAmount,\\n            uint256 requestTime\\n        )\\n    {\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\\n    }\\n\\n    /**\\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\\n     */\\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\\n    }\\n}\\n\",\"keccak256\":\"0x4c04dc78106a2dfe7f281f1ffe34339ebb97600e74d9d2bdc57da1470dbef73e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip) external;\\n\\n    function addPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function checkCapitalByMCR(uint256 _withdrawAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(address _policy, uint256 _policyId) external;\\n}\\n\",\"keccak256\":\"0x9b7dac88ea3d0ead81f4ad14f8b55892d717f64d186de47e796108ff95f9ba07\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IExchangeAgent {\\n    function USDT_TOKEN() external view returns (address);\\n\\n    function getTokenAmountForUSDT(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDT(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external view returns (uint256);\\n\\n    function convertForToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x473a1a780dcd71387aa5854b621d4fde775f5d596d6f93a84f68c2665cc7f2d0\",\"license\":\"MIT\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IMigration {\\n    function onMigration(\\n        address who_,\\n        uint256 amount_,\\n        bytes memory data_\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b25ec77b6df9db73050a67b9ce4147154c5be596b6637d47484fd6236965069\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6e37fd84127d6039965b097e57e45f79630c1313d9d841176ce8a8e2ec16b83b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(\\n        address _operator,\\n        address _currency,\\n        address _pool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x14d54228edcd08203983b293cfa44cc13cf1fb450019172ef57a1ebccf89f4a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to) external returns (uint256, uint256);\\n\\n    function cancelWithrawRequest(address _to) external;\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(\\n        address _to,\\n        address _migrateTo,\\n        bool _isUnLocked\\n    ) external;\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function lpPriceUno() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a5eddf6f3d2f487eefb107a6bbe9547e30f16356a63f63d1cc9bffcf6d97118\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _pool,\\n        address _currency\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x2822333ced0a43d8bf0c0a4a4a0ed6718e2b5cfd55792fd89e5d06211f57898e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISingleSidedInsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f34cb3f24d9ab3a8272c3bb9ea752afe5c6f9fe84ff65a9c1a22cee27165052\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSIPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISyntheticSSIPFactory {\\n    function newSyntheticSSIP(address _owner, address _lpToken) external returns (address);\\n}\\n\",\"keccak256\":\"0xfea09577a47f75aee3718d3f0173853ecfc3768fa86bc97da50e3f736c49725d\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c80638fd3ab8011610125578063c2eb8eb9116100ad578063dcc3e06e1161007c578063dcc3e06e14610422578063e08c5de11461042a578063e19e71681461043d578063e3161ddd14610445578063e3824a381461044d57610211565b8063c2eb8eb9146103f7578063c4e5dacf1461040a578063c6e8991514610412578063cd87c83c1461041a57610211565b8063a3bdd632116100f4578063a3bdd632146103a0578063ae04d45d146103a8578063af16d6e0146103bb578063ba619457146103ce578063bc8f8828146103ef57610211565b80638fd3ab801461035a5780639336f4061461036257806393b6b86c1461038557806398c6e7601461039857610211565b8063413d9c3a116101a857806377b330c91161017757806377b330c91461031c5780638395206c1461032457806389919b71146103375780638ba04b171461033f5780638da5cb5b1461035257610211565b8063413d9c3a146102c857806342198160146102dd5780635a2f3d09146102f2578063736ec05c1461030957610211565b806318a00d8e116101e457806318a00d8e146102645780631959a002146102775780631b600ca2146102a25780632e4a0142146102b557610211565b80630bd075a1146102165780630e5c011e1461022b5780630e9ae4201461023e578063157f71ed14610251575b600080fd5b610229610224366004612737565b610460565b005b61022961023936600461254e565b6104b8565b61022961024c36600461260f565b6104f1565b61022961025f36600461254e565b6107e9565b61022961027236600461254e565b61085b565b61028a61028536600461254e565b6108f5565b60405161029993929190612d9c565b60405180910390f35b6102296102b036600461258d565b610916565b6102296102c336600461264f565b610a95565b6102d0610bff565b6040516102999190612d85565b6102e5610c05565b604051610299919061281a565b6102fa610c14565b60405161029993929190612d3e565b61022961031736600461254e565b610c32565b6102e5610ca4565b610229610332366004612737565b610cb3565b6102d0610fac565b61022961034d36600461269a565b610fb8565b6102e56111a7565b6102296111b6565b61037561037036600461254e565b61132c565b6040516102999493929190612db2565b610229610393366004612737565b61146a565b6102e5611519565b6102d0611528565b6102296103b6366004612737565b6115aa565b6102296103c93660046125c5565b6115f9565b6103e16103dc36600461254e565b611758565b604051610299929190612d8e565b610229611813565b61022961040536600461254e565b611af1565b6102e5611b63565b6102e5611b72565b6102e5611b81565b6102e5611b90565b6102d061043836600461254e565b611b9f565b610229611d09565b610229611d9a565b61022961045b366004612737565b611f30565b6001546001600160a01b031633146104935760405162461bcd60e51b815260040161048a90612c2f565b60405180910390fd5b600081116104b35760405162461bcd60e51b815260040161048a90612ae7565b600d55565b600260005414156104db5760405162461bcd60e51b815260040161048a90612c9b565b60026000556104e981612270565b506001600055565b600260005414156105145760405162461bcd60e51b815260040161048a90612c9b565b6002600055600a546001600160a01b031633146105435760405162461bcd60e51b815260040161048a90612d09565b6007546001600160a01b0384811691161480159061056f57506007546001600160a01b03838116911614155b156107df5761057d83612270565b6001600160a01b038084166000908152600b602052604080822060020154600a549151631665744b60e11b815290939190911690632ccae896906105c590889060040161281a565b60606040518083038186803b1580156105dd57600080fd5b505afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610615919061278a565b505090508281836106269190612e4f565b10156106445760405162461bcd60e51b815260040161048a90612a44565b600c54600090670de0b6b3a76400009061066e90600160801b90046001600160801b031685612e30565b6106789190612e10565b600c54909150670de0b6b3a7640000906106a290600160801b90046001600160801b031686612e30565b6106ac9190612e10565b6106b69082612e4f565b6001600160a01b0387166000908152600b60205260409020600101556106dc8484612e4f565b6001600160a01b0387166000908152600b6020526040902060020155600c54670de0b6b3a76400009061071f90600160801b90046001600160801b031686612e30565b6107299190612e10565b6001600160a01b0386166000908152600b602052604090206001015461074f9190612df8565b6001600160a01b0386166000908152600b6020526040902060018101919091556002015461077e908590612df8565b6001600160a01b038087166000818152600b602052604090819020600201939093559151908816907fabc254a3e8b16a8605ce22e693a6e493e375434011c1a7ff082d09e2a84ad121906107d3908890612d85565b60405180910390a35050505b5050600160005550565b6001546001600160a01b031633146108135760405162461bcd60e51b815260040161048a90612c2f565b6001600160a01b0381166108395760405162461bcd60e51b815260040161048a90612942565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146108855760405162461bcd60e51b815260040161048a90612c2f565b6001600160a01b0381166108ab5760405162461bcd60e51b815260040161048a90612942565b600380546001600160a01b0319166001600160a01b0383169081179091556040517fbdca3ec80f8567aeaf30c6168374c798baf11902e9b21c2b8ba3186ffd13012290600090a250565b600b6020526000908152604090208054600182015460029092015490919083565b6001546001600160a01b031633146109405760405162461bcd60e51b815260040161048a90612c2f565b600260005414156109635760405162461bcd60e51b815260040161048a90612c9b565b60026000556001600160a01b03821661098e5760405162461bcd60e51b815260040161048a90612b55565b6001600160a01b0381166109b45760405162461bcd60e51b815260040161048a90612979565b600a54604051631a8a8b3b60e11b81526001600160a01b03808416926335151676926109e6928792169060040161282e565b602060405180830381600087803b158015610a0057600080fd5b505af1158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a389190612571565b600780546001600160a01b0319166001600160a01b039283161790819055600a5460405190831692919091169030907e1129b9865226cebad4acf884618ae0607fff06758062b050509602db7065f090600090a450506001600055565b6002546001600160a01b03163314610abf5760405162461bcd60e51b815260040161048a90612c2f565b60026000541415610ae25760405162461bcd60e51b815260040161048a90612c9b565b60026000556001600160a01b038216610b0d5760405162461bcd60e51b815260040161048a90612942565b60008111610b2d5760405162461bcd60e51b815260040161048a90612b1e565b600a5460405163172500a160e11b81526000916001600160a01b031690632e4a014290610b6090869086906004016128b3565b602060405180830381600087803b158015610b7a57600080fd5b505af1158015610b8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb2919061274f565b9050826001600160a01b03167f6420c9536b9a539410a930b1fd8d115dc296d8b71426dcc0ab64f2f736b7d59f82604051610bed9190612d85565b60405180910390a25050600160005550565b60085481565b6006546001600160a01b031681565b600c54600d546001600160801b0380831692600160801b9004169083565b6001546001600160a01b03163314610c5c5760405162461bcd60e51b815260040161048a90612c2f565b6001600160a01b038116610c825760405162461bcd60e51b815260040161048a90612942565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b60026000541415610cd65760405162461bcd60e51b815260040161048a90612c9b565b6002600055610ce433612270565b600654604051630be304cf60e41b81526001600160a01b039091169063be304cf090610d14908490600401612d85565b60206040518083038186803b158015610d2c57600080fd5b505afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d64919061267a565b610d805760405162461bcd60e51b815260040161048a90612b8c565b336000908152600b6020908152604080832060020154600a548251627a9fd960e91b815292519194936001600160a01b039091169263f53fb2009260048083019392829003018186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e919061274f565b600a54604051631665744b60e11b81529192506000916001600160a01b0390911690632ccae89690610e4490339060040161281a565b60606040518083038186803b158015610e5c57600080fd5b505afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e94919061278a565b5050905083670de0b6b3a7640000838386610eaf9190612e4f565b610eb99190612e30565b610ec39190612e10565b1015610ee15760405162461bcd60e51b815260040161048a906129b0565b600a546040516323de6d9560e11b81526001600160a01b03909116906347bcdb2a90610f1390339088906004016128b3565b600060405180830381600087803b158015610f2d57600080fd5b505af1158015610f41573d6000803e3d6000fd5b5050336000818152600b602052604090819020429055600a5490516001600160a01b0390911693509091507f940a14c75c418e7230a2e65567722d2dda5a6713cf71b369bd0fa219fdc1ac5e90610f99908890612d85565b60405180910390a3505060016000555050565b670de0b6b3a764000081565b6001546001600160a01b03163314610fe25760405162461bcd60e51b815260040161048a90612c2f565b600260005414156110055760405162461bcd60e51b815260040161048a90612c9b565b6002600055600a546001600160a01b0316156110335760405162461bcd60e51b815260040161048a90612a7b565b604051630d98e31f60e01b81526001600160a01b03841690630d98e31f90611069908a908a908a908a9030908a906004016128f4565b602060405180830381600087803b15801561108357600080fd5b505af1158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bb9190612571565b600a80546001600160a01b0319166001600160a01b03928316179055600c80546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117169055600d82905560065460405163d914cd4b60e01b815291169063d914cd4b9061112d90309060040161281a565b600060405180830381600087803b15801561114757600080fd5b505af115801561115b573d6000803e3d6000fd5b5050600a546040516001600160a01b0390911692503091507f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd5838021790600090a3505060016000555050505050565b6001546001600160a01b031681565b600260005414156111d95760405162461bcd60e51b815260040161048a90612c9b565b60026000556004546001600160a01b03166112065760405162461bcd60e51b815260040161048a90612942565b61120f33612270565b336000908152600b6020526040812060028101546008549154909291906112369042612e4f565b600a5460048054604051633613302f60e01b81529490931194506001600160a01b0391821693633613302f9361127393339391169187910161286b565b600060405180830381600087803b15801561128d57600080fd5b505af11580156112a1573d6000803e3d6000fd5b50506004805460405163ed59344b60e01b81526001600160a01b03909116935063ed59344b92506112d69133918791016128cc565b600060405180830381600087803b1580156112f057600080fd5b505af1158015611304573d6000803e3d6000fd5b5050336000908152600b60205260408120600281018290556001908101829055905550505050565b6000806000806000600a60009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b15801561138257600080fd5b505afa158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba919061274f565b600a54604051631665744b60e11b81529192506001600160a01b031690632ccae896906113eb90899060040161281a565b60606040518083038186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b919061278a565b9196509093509150670de0b6b3a76400006114568287612e30565b6114609190612e10565b9350509193509193565b6001546001600160a01b031633146114945760405162461bcd60e51b815260040161048a90612c2f565b600081116114b45760405162461bcd60e51b815260040161048a90612cd2565b600a546040516324edae1b60e21b81526001600160a01b03909116906393b6b86c906114e4908490600401612d85565b600060405180830381600087803b1580156114fe57600080fd5b505af1158015611512573d6000803e3d6000fd5b5050505050565b6004546001600160a01b031681565b600a546040805163e95aa8d360e01b815290516000926001600160a01b03169163e95aa8d3916004808301926020929190829003018186803b15801561156d57600080fd5b505afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a5919061274f565b905090565b6001546001600160a01b031633146115d45760405162461bcd60e51b815260040161048a90612c2f565b600081116115f45760405162461bcd60e51b815260040161048a90612bc1565b600855565b6001546001600160a01b031633146116235760405162461bcd60e51b815260040161048a90612c2f565b600260005414156116465760405162461bcd60e51b815260040161048a90612c9b565b60026000556001600160a01b0382166116715760405162461bcd60e51b815260040161048a90612c66565b6040516369ee745160e01b81526001600160a01b038316906369ee7451906116a190869085903090600401612848565b602060405180830381600087803b1580156116bb57600080fd5b505af11580156116cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f39190612571565b600980546001600160a01b0319166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b9061174690859061281a565b60405180910390a35050600160005550565b6001600160a01b038082166000908152600b6020908152604080832060020154600a548251627a9fd960e91b81529251949591948694919092169263f53fb2009260048083019392829003018186803b1580156117b457600080fd5b505afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec919061274f565b9050670de0b6b3a76400006118018284612e30565b61180b9190612e10565b925050915091565b600260005414156118365760405162461bcd60e51b815260040161048a90612c9b565b60026000908155600854338252600b6020526040909120546118589042612e4f565b10156118765760405162461bcd60e51b815260040161048a90612ab0565b61187f33612270565b336000818152600b602052604080822060020154600a549151631665744b60e11b8152909383926001600160a01b031691632ccae896916118c29160040161281a565b60606040518083038186803b1580156118da57600080fd5b505afa1580156118ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611912919061278a565b600654604051632da26abb60e11b81529395509093506001600160a01b031691635b44d5769150611947908490600401612d85565b600060405180830381600087803b15801561196157600080fd5b505af1158015611975573d6000803e3d6000fd5b5050600c5460009250670de0b6b3a764000091506119a390600160801b90046001600160801b031686612e30565b6119ad9190612e10565b600c54909150670de0b6b3a7640000906119d790600160801b90046001600160801b031685612e30565b6119e19190612e10565b6119eb9082612e4f565b336000818152600b602052604080822060010193909355600a54925163b20ecd1560e01b8152909283926001600160a01b039091169163b20ecd1591611a339160040161281a565b6040805180830381600087803b158015611a4c57600080fd5b505af1158015611a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a849190612767565b9092509050611a938287612e4f565b336000818152600b6020526040908190206002019290925590517fb307c5ea066d3a6d37e8de2f87ccfe31b6a3852e4df8d60a6d70b93b2f8a2ed590611adc9085908590612d8e565b60405180910390a25050600160005550505050565b6001546001600160a01b03163314611b1b5760405162461bcd60e51b815260040161048a90612c2f565b6001600160a01b038116611b415760405162461bcd60e51b815260040161048a90612942565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b6002546001600160a01b031681565b6007546001600160a01b031681565b6009546001600160a01b031681565b600080600a60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf057600080fd5b505afa158015611c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c28919061274f565b600c549091506001600160801b03600160801b82048116911643118015611c4e57508115155b15611cad57600c54600090611c6c906001600160801b031643612e4f565b600d54909150600090611c7f9083612e30565b905083611c94670de0b6b3a764000083612e30565b611c9e9190612e10565b611ca89084612dcd565b925050505b6001600160a01b0384166000908152600b602052604090206002810154600190910154670de0b6b3a7640000611cec6001600160801b03851684612e30565b611cf69190612e10565b611d009190612e4f565b95945050505050565b60026000541415611d2c5760405162461bcd60e51b815260040161048a90612c9b565b6002600055600a546040516306e6829960e51b81526001600160a01b039091169063dcd0532090611d6190339060040161281a565b600060405180830381600087803b158015611d7b57600080fd5b505af1158015611d8f573d6000803e3d6000fd5b505060016000555050565b600c546001600160801b0316431115611f2e57600a54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611df257600080fd5b505afa158015611e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2a919061274f565b90508015611eba57600c54600090611e4b906001600160801b031643612e4f565b600d54909150600090611e5e9083612e30565b905082611e73670de0b6b3a764000083612e30565b611e7d9190612e10565b600c54611e9a9190600160801b90046001600160801b0316612dcd565b600c80546001600160801b03928316600160801b02921691909117905550505b600c80546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117918290556040517f982b813c7d00a9ffce9441ba40f429b2e4a35068d75532f496d0c63585c2fa6892611f2492818116928692600160801b900490911690612d62565b60405180910390a1505b565b60026000541415611f535760405162461bcd60e51b815260040161048a90612c9b565b600260005580611f755760405162461bcd60e51b815260040161048a90612bf8565b611f7d611d9a565b600a546040805163e5a6b10f60e01b815290516000926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b158015611fc257600080fd5b505afa158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffa9190612571565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b15801561204c57600080fd5b505afa158015612060573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612084919061274f565b600a549091506120a190839033906001600160a01b031686612402565b600a54604051637e348b7d60e01b81526001600160a01b0390911690637e348b7d906120d390339087906004016128b3565b600060405180830381600087803b1580156120ed57600080fd5b505af1158015612101573d6000803e3d6000fd5b5050600c54670de0b6b3a76400009250839150600160801b90046001600160801b031661212e8684612e30565b6121389190612e30565b6121429190612e10565b61214c9190612e10565b336000908152600b60205260409020600101546121699190612df8565b336000908152600b60205260409020600101558061218f84670de0b6b3a7640000612e30565b6121999190612e10565b336000908152600b60205260409020600201546121b69190612df8565b336000908152600b602052604090819020600201919091556006549051638be5a39f60e01b81526001600160a01b0390911690638be5a39f906121fd908690600401612d85565b600060405180830381600087803b15801561221757600080fd5b505af115801561222b573d6000803e3d6000fd5b5050600a546040516001600160a01b0390911692503391507fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f90611746908790612d85565b612278611d9a565b6001600160a01b0381166000908152600b6020526040812060020154600c54909190670de0b6b3a7640000906122be90600160801b90046001600160801b031684612e30565b6122c89190612e10565b6001600160a01b0384166000908152600b6020526040812060010154919250906122f29083612e4f565b336000908152600b60205260408120600101849055600954919250906001600160a01b03161580159061232457508115155b156123b05760095460405163186e465160e31b81526001600160a01b039091169063c37232889061235b90889086906004016128b3565b602060405180830381600087803b15801561237557600080fd5b505af1158015612389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ad919061274f565b90505b846001600160a01b0316336001600160a01b03167fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec26797836040516123f39190612d85565b60405180910390a35050505050565b600080856001600160a01b03166323b872dd8686866040516024016124299392919061288f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161247791906127e1565b6000604051808303816000865af19150503d80600081146124b4576040519150601f19603f3d011682016040523d82523d6000602084013e6124b9565b606091505b50915091508180156124e35750805115806124e35750808060200190518101906124e3919061267a565b6124ff5760405162461bcd60e51b815260040161048a906129e7565b505050505050565b60008083601f840112612518578182fd5b50813567ffffffffffffffff81111561252f578182fd5b60208301915083602082850101111561254757600080fd5b9250929050565b60006020828403121561255f578081fd5b813561256a81612e7c565b9392505050565b600060208284031215612582578081fd5b815161256a81612e7c565b6000806040838503121561259f578081fd5b82356125aa81612e7c565b915060208301356125ba81612e7c565b809150509250929050565b6000806000606084860312156125d9578081fd5b83356125e481612e7c565b925060208401356125f481612e7c565b9150604084013561260481612e7c565b809150509250925092565b600080600060608486031215612623578283fd5b833561262e81612e7c565b9250602084013561263e81612e7c565b929592945050506040919091013590565b60008060408385031215612661578182fd5b823561266c81612e7c565b946020939093013593505050565b60006020828403121561268b578081fd5b8151801515811461256a578182fd5b600080600080600080600060a0888a0312156126b4578283fd5b873567ffffffffffffffff808211156126cb578485fd5b6126d78b838c01612507565b909950975060208a01359150808211156126ef578485fd5b506126fc8a828b01612507565b909650945050604088013561271081612e7c565b9250606088013561272081612e7c565b809250506080880135905092959891949750929550565b600060208284031215612748578081fd5b5035919050565b600060208284031215612760578081fd5b5051919050565b60008060408385031215612779578182fd5b505080516020909101519092909150565b60008060006060848603121561279e578283fd5b8351925060208401519150604084015190509250925092565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251815b8181101561280157602081860181015185830152016127e7565b8181111561280f5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b60006080825261290860808301888a6127b7565b828103602084015261291b8187896127b7565b9150506001600160a01b038085166040840152808416606084015250979650505050505050565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601a908201527f556e6f52653a7a65726f20666163746f72792061646472657373000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526017908201527f556e6f52653a2062616c616e6365206f766572666c6f77000000000000000000604082015260600190565b6020808252818101527f556e6f52653a207269736b20706f6f6c206372656174656420616c7265616479604082015260600190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b60208082526019908201527f556e6f52653a207a65726f206f776e6572206164647265737300000000000000604082015260600190565b6020808252818101527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f77604082015260600190565b6020808252601f908201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d6500604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c75650000000000604082015260600190565b6020808252818101527f556e6f52653a206e6f7420616c6c6f77206f7468657273207472616e73666572604082015260600190565b6001600160801b039384168152919092166020820152604081019190915260600190565b6001600160801b0393841681526020810192909252909116604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60006001600160801b03808316818516808303821115612def57612def612e66565b01949350505050565b60008219821115612e0b57612e0b612e66565b500190565b600082612e2b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612e4a57612e4a612e66565b500290565b600082821015612e6157612e61612e66565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612e9157600080fd5b5056fea2646970667358221220ae76370bb58c71387052bf49ce8604f4d9f3ca751244e446516e0aebcc40103164736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createRiskPool(string,string,address,address,uint256)": {
        "details": "create Risk pool with UNO from SSIP owner"
      },
      "getTotalWithdrawPendingAmount()": {
        "details": "get total withdraw request amount in pending for the risk pool in UNO"
      },
      "getWithdrawRequestPerUser(address)": {
        "details": "get withdraw request amount in pending per user in UNO"
      },
      "leaveFromPending()": {
        "details": "user can submit claim again and receive his funds into his wallet after 10 days since last WR."
      },
      "leaveFromPoolInPending(uint256)": {
        "details": "WR will be in pending for 10 days at least"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7911,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7913,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "claimAssessor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7915,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7917,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "migrateTo",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7919,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "USDT_TOKEN",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7921,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "capitalAgent",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7923,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "syntheticSSIP",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 7926,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "LOCK_TIME",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7931,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "rewarder",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7934,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "riskPool",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 7953,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "userInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(UserInfo)7948_storage)"
      },
      {
        "astId": 7956,
        "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(PoolInfo)7941_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)7948_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SingleSidedInsurancePool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)7948_storage"
      },
      "t_struct(PoolInfo)7941_storage": {
        "encoding": "inplace",
        "label": "struct SingleSidedInsurancePool.PoolInfo",
        "members": [
          {
            "astId": 7936,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7938,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "accUnoPerShare",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7940,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "unoMultiplierPerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)7948_storage": {
        "encoding": "inplace",
        "label": "struct SingleSidedInsurancePool.UserInfo",
        "members": [
          {
            "astId": 7943,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "lastWithdrawTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7945,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7947,
            "contract": "contracts/SingleSidedInsurancePool.sol:SingleSidedInsurancePool",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}