{
  "address": "0x7409CbB5fEcbD99A9713b3e0a71be41f3d12CED6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "allSSIPLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastNewSSIP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unoToken",
          "type": "address"
        }
      ],
      "name": "newSyntheticSSIP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ssipList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x90712c86354b951bbf5b4610426c7e19d16e5093ed1af1cc331576e48b9649a0",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0x7409CbB5fEcbD99A9713b3e0a71be41f3d12CED6",
    "transactionIndex": 0,
    "gasUsed": "1668296",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcb2f483df4d7a8a18fd9685eb9bfa987cde534e2a599a1f6136a7a5b2737da77",
    "transactionHash": "0x90712c86354b951bbf5b4610426c7e19d16e5093ed1af1cc331576e48b9649a0",
    "logs": [],
    "blockNumber": 9853515,
    "cumulativeGasUsed": "1668296",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "0xA31158b2fDF02a6E14fbd12F121F03657b92d1B1"
  ],
  "solcInputHash": "a4d91358c036d420da7aee9136e29f67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"allSSIPLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNewSSIP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unoToken\",\"type\":\"address\"}],\"name\":\"newSyntheticSSIP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ssipList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/SyntheticSSIPFactory.sol\":\"SyntheticSSIPFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/SyntheticSSIP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/ISyntheticSSIP.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SyntheticSSIP is ISyntheticSSIP, ReentrancyGuard {\\n    address public owner;\\n    address private exchangeAgent;\\n    address public migrateTo;\\n    address public immutable UNO_TOKEN;\\n\\n    uint256 public constant LOCK_TIME = 10 days;\\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\\n\\n    address public rewarder;\\n    address public lpToken;\\n\\n    uint256 lastRewardBlock;\\n    uint256 accUnoPerShare;\\n    uint256 unoPerBlock;\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n        uint256 pendingWithdrawAmount;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public totalStakedLPAmount;\\n    uint256 public totalWithdrawPending;\\n\\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogSetExchangeAgent(address indexed _exchangeAgent);\\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\\n\\n    constructor(\\n        address _owner,\\n        address _exchangeAgent,\\n        address _lpToken,\\n        address _UNO_TOKEN\\n    ) {\\n        owner = _owner;\\n        exchangeAgent = _exchangeAgent;\\n        lpToken = _lpToken;\\n        UNO_TOKEN = _UNO_TOKEN;\\n        unoPerBlock = 1e18;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit LogSetExchangeAgent(_exchangeAgent);\\n    }\\n\\n    function setUnoPerBlock(uint256 _unoPerBlock) external onlyOwner {\\n        require(_unoPerBlock > 0, \\\"UnoRe: zero value\\\");\\n        unoPerBlock = _unoPerBlock;\\n    }\\n\\n    function setMigrateTo(address _migrateTo) external onlyOwner {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n    }\\n\\n    function createRewarder(\\n        address _operator,\\n        address _factory,\\n        address _currency\\n    ) external onlyOwner nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    function migrate() external nonReentrant {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        if (\\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME\\n        ) {\\n            _leaveFromPending();\\n        } else {\\n            _cancelWithdrawRequest();\\n        }\\n        uint256 amount = userInfo[msg.sender].amount;\\n        IMigration(migrateTo).onMigration(msg.sender, amount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n    }\\n\\n    function pendingUno(address _to) external view returns (uint256 pending) {\\n        uint256 currentAccUnoPerShare = accUnoPerShare;\\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\\n            uint256 blocks = block.number - lastRewardBlock;\\n            uint256 unoReward = blocks * unoPerBlock;\\n            currentAccUnoPerShare = accUnoPerShare + (unoReward * ACC_UNO_PRECISION) / totalStakedLPAmount;\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * currentAccUnoPerShare) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    function updatePool() public override {\\n        if (block.number > lastRewardBlock) {\\n            if (totalStakedLPAmount > 0) {\\n                uint256 blocks = block.number - lastRewardBlock;\\n                uint256 unoReward = blocks * unoPerBlock;\\n                accUnoPerShare = accUnoPerShare + ((unoReward * ACC_UNO_PRECISION) / totalStakedLPAmount);\\n            }\\n            lastRewardBlock = block.number;\\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accUnoPerShare);\\n        }\\n    }\\n\\n    function enterInPool(uint256 _amount) external override nonReentrant {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\\n        userInfo[msg.sender].rewardDebt = userInfo[msg.sender].rewardDebt + (_amount * accUnoPerShare) / ACC_UNO_PRECISION;\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + _amount;\\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\\n        emit LogStakedInPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\\n        // Withdraw desired amount from pool\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        require(amount - pendingWR >= _amount, \\\"UnoRe: withdraw amount overflow\\\");\\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n\\n        totalWithdrawPending = totalWithdrawPending + _amount;\\n\\n        emit LogLeftPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending() external override nonReentrant {\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        _leaveFromPending();\\n    }\\n\\n    function _leaveFromPending() private {\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        uint256 accumulatedUno = (amount * accUnoPerShare) / ACC_UNO_PRECISION;\\n\\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\\n\\n        userInfo[msg.sender].rewardDebt = accumulatedUno - ((pendingWR * accUnoPerShare) / ACC_UNO_PRECISION);\\n        userInfo[msg.sender].amount = amount - pendingWR;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\\n    }\\n\\n    function harvest(address _to) external override nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedUno = (amount * accUnoPerShare) / ACC_UNO_PRECISION;\\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[msg.sender].rewardDebt = accumulatedUno;\\n\\n        uint256 expectedRewardAmount = 0;\\n        uint256 realRewardAmount = 0;\\n        address rewardCurrency = IRewarder(rewarder).currency();\\n        if (rewardCurrency == address(0)) {\\n            expectedRewardAmount = IExchangeAgent(exchangeAgent).getETHAmountForToken(UNO_TOKEN, _pendingUno);\\n        } else {\\n            expectedRewardAmount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(UNO_TOKEN, rewardCurrency, _pendingUno);\\n        }\\n        if (rewarder != address(0) && _pendingUno > 0) {\\n            realRewardAmount = IRewarder(rewarder).onReward(_to, expectedRewardAmount);\\n        }\\n\\n        emit LogHarvest(msg.sender, _to, realRewardAmount);\\n    }\\n\\n    function cancelWithdrawRequest() external nonReentrant {\\n        _cancelWithdrawRequest();\\n    }\\n\\n    function _cancelWithdrawRequest() private {\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\\n    }\\n}\\n\",\"keccak256\":\"0x3271af5bed429b0af205e5cfa76251749af2b78c5925a6ff82a1d290599d7085\",\"license\":\"GPL-3.0\"},\"contracts/factories/SyntheticSSIPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../SyntheticSSIP.sol\\\";\\n\\ncontract SyntheticSSIPFactory {\\n    address public owner;\\n    address public exchangeAgent;\\n    address public lastNewSSIP;\\n    address[] public ssipList;\\n\\n    constructor(address _owner, address _exchangeAgent) {\\n        owner = _owner;\\n        exchangeAgent = _exchangeAgent;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function newSyntheticSSIP(\\n        address _owner,\\n        address _lpToken,\\n        address _unoToken\\n    ) external onlyOwner returns (address) {\\n        SyntheticSSIP _ssip = new SyntheticSSIP(_owner, exchangeAgent, _lpToken, _unoToken);\\n        address _ssipAddr = address(_ssip);\\n        lastNewSSIP = _ssipAddr;\\n        ssipList.push(_ssipAddr);\\n        return _ssipAddr;\\n    }\\n\\n    function allSSIPLength() external view returns (uint256) {\\n        return ssipList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x0ffa9b266478ccb153c25b15ab9e85f84724d591cbbb408ff4356b4838d76010\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IExchangeAgent {\\n    function USDT_TOKEN() external view returns (address);\\n\\n    function getTokenAmountForUSDT(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDT(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external view returns (uint256);\\n\\n    function convertForToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x473a1a780dcd71387aa5854b621d4fde775f5d596d6f93a84f68c2665cc7f2d0\",\"license\":\"MIT\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IMigration {\\n    function onMigration(\\n        address who_,\\n        uint256 amount_,\\n        bytes memory data_\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b25ec77b6df9db73050a67b9ce4147154c5be596b6637d47484fd6236965069\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6e37fd84127d6039965b097e57e45f79630c1313d9d841176ce8a8e2ec16b83b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(\\n        address _operator,\\n        address _currency,\\n        address _pool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x14d54228edcd08203983b293cfa44cc13cf1fb450019172ef57a1ebccf89f4a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSIP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISyntheticSSIP {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n}\\n\",\"keccak256\":\"0xd1c8e01736abd164fa3946a04ddfac2698e0dfb984a396e84b6adaa6b30bbf17\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611d24380380611d2483398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100ae565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008e578182fd5b61009783610060565b91506100a560208401610060565b90509250929050565b611c67806100bd6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a558796c11610050578063a558796c146100bb578063afae6742146100c3578063d9203b91146100d857610072565b80633a24e142146100775780636dc686e6146100a05780638da5cb5b146100b3575b600080fd5b61008a61008536600461025d565b6100e0565b60405161009791906102b7565b60405180910390f35b61008a6100ae36600461029f565b6101d7565b61008a610201565b61008a610210565b6100cb61021f565b604051610097919061032d565b61008a610225565b600080546001600160a01b031633146101145760405162461bcd60e51b815260040161010b906102f6565b60405180910390fd5b600084600160009054906101000a90046001600160a01b0316858560405161013b90610234565b61014894939291906102cb565b604051809103906000f080158015610164573d6000803e3d6000fd5b50600280546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199182168117909255600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805490911690911790559150509392505050565b600381815481106101e757600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031681565b6002546001600160a01b031681565b60035490565b6001546001600160a01b031681565b6118fb8061033783390190565b80356001600160a01b038116811461025857600080fd5b919050565b600080600060608486031215610271578283fd5b61027a84610241565b925061028860208501610241565b915061029660408501610241565b90509250925092565b6000602082840312156102b0578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b9081526020019056fe60a06040523480156200001157600080fd5b50604051620018fb380380620018fb8339810160408190526200003491620000b5565b6001600081905580546001600160a01b03199081166001600160a01b039687161790915560028054821694861694909417909355600580549093169190931617905560601b6001600160601b031916608052670de0b6b3a764000060085562000111565b80516001600160a01b0381168114620000b057600080fd5b919050565b60008060008060808587031215620000cb578384fd5b620000d68562000098565b9350620000e66020860162000098565b9250620000f66040860162000098565b9150620001066060860162000098565b905092959194509250565b60805160601c6117bd6200013e6000396000818161034201528181610d1d0152610dc601526117bd6000f3fe608060405234801561001057600080fd5b50600436106101625760003560e01c806389919b71116100c8578063bc8f88281161008c578063e19e716811610066578063e19e71681461028c578063e3161ddd14610294578063e3824a381461029c57610162565b8063bc8f882814610269578063dcc3e06e14610271578063e08c5de11461027957610162565b806389919b71146102365780638da5cb5b1461023e5780638fd3ab801461024657806398c6e7601461024e578063af16d6e01461025657610162565b80631959a0021161012a5780635fcbd285116101045780635fcbd28514610208578063736ec05c146102105780638395206c1461022357610162565b80631959a002146101d557806336642c21146101f8578063413d9c3a1461020057610162565b80630e5c011e146101675780630f42e89d1461017c5780630f97b97b1461018f57806313a10036146101ad57806318a00d8e146101c2575b600080fd5b61017a6101753660046112a3565b6102af565b005b61017a61018a36600461134c565b6102f1565b610197610340565b6040516101a491906113b5565b60405180910390f35b6101b5610364565b6040516101a491906116b1565b61017a6101d03660046112a3565b61036a565b6101e86101e33660046112a3565b610404565b6040516101a494939291906116d0565b6101b561042b565b6101b5610431565b610197610438565b61017a61021e3660046112a3565b610447565b61017a61023136600461134c565b6104b9565b6101b56105bc565b6101976105c8565b61017a6105d7565b61019761071d565b61017a6102643660046112e2565b61072c565b61017a610879565b6101976108f5565b6101b56102873660046112a3565b610904565b61017a6109ca565b61017a6109fa565b61017a6102aa36600461134c565b610aac565b600260005414156102db5760405162461bcd60e51b81526004016102d29061167a565b60405180910390fd5b60026000556102e981610bdd565b506001600055565b6001546001600160a01b0316331461031b5760405162461bcd60e51b81526004016102d2906115c1565b6000811161033b5760405162461bcd60e51b81526004016102d290611553565b600855565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a5481565b6001546001600160a01b031633146103945760405162461bcd60e51b81526004016102d2906115c1565b6001600160a01b0381166103ba5760405162461bcd60e51b81526004016102d290611451565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fbdca3ec80f8567aeaf30c6168374c798baf11902e9b21c2b8ba3186ffd13012290600090a250565b60096020526000908152604090208054600182015460028301546003909301549192909184565b600b5481565b620d2f0081565b6005546001600160a01b031681565b6001546001600160a01b031633146104715760405162461bcd60e51b81526004016102d2906115c1565b6001600160a01b0381166104975760405162461bcd60e51b81526004016102d290611451565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600260005414156104dc5760405162461bcd60e51b81526004016102d29061167a565b60026000556104ea33610bdd565b33600090815260096020526040902060028101546003909101548261050f8284611742565b101561052d5760405162461bcd60e51b81526004016102d290611488565b3360009081526009602052604090206003015461054b9084906116eb565b3360009081526009602052604090206003810191909155429055600b546105739084906116eb565b600b55604051309033907fd60ea263bba686471127787b82c1f8b19bddbd87f52b83498879e720d839d51f906105aa9087906116b1565b60405180910390a35050600160005550565b670de0b6b3a764000081565b6001546001600160a01b031681565b600260005414156105fa5760405162461bcd60e51b81526004016102d29061167a565b60026000556003546001600160a01b03166106275760405162461bcd60e51b81526004016102d290611451565b61063033610bdd565b336000908152600960205260409020600301541580159061066e575033600090815260096020526040902054620d2f009061066b9042611742565b10155b156106805761067b610f3e565b610688565b61068861105f565b336000818152600960205260409081902060020154600354915163ed59344b60e01b815290926001600160a01b039092169163ed59344b916106cf91908590600401611429565b600060405180830381600087803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b505033600090815260096020526040812060020181905560019055505050565b6003546001600160a01b031681565b6001546001600160a01b031633146107565760405162461bcd60e51b81526004016102d2906115c1565b600260005414156107795760405162461bcd60e51b81526004016102d29061167a565b60026000556001600160a01b0382166107a45760405162461bcd60e51b81526004016102d2906115f8565b6040516369ee745160e01b81526001600160a01b038316906369ee7451906107d4908690859030906004016113c9565b602060405180830381600087803b1580156107ee57600080fd5b505af1158015610802573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082691906112c6565b600480546001600160a01b0319166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b906105aa9085906113b5565b6002600054141561089c5760405162461bcd60e51b81526004016102d29061167a565b6002600090815533815260096020526040902054620d2f00906108bf9042611742565b10156108dd5760405162461bcd60e51b81526004016102d29061151c565b6108e633610bdd565b6108ee610f3e565b6001600055565b6004546001600160a01b031681565b600754600654600091904311801561091d5750600a5415155b15610978576000600654436109329190611742565b90506000600854826109449190611723565b600a5490915061095c670de0b6b3a764000083611723565b6109669190611703565b60075461097391906116eb565b925050505b6001600160a01b03831660009081526009602052604090206002810154600190910154670de0b6b3a76400006109ae8484611723565b6109b89190611703565b6109c29190611742565b949350505050565b600260005414156109ed5760405162461bcd60e51b81526004016102d29061167a565b60026000556108ee61105f565b600654431115610aaa57600a5415610a6357600060065443610a1c9190611742565b9050600060085482610a2e9190611723565b600a54909150610a46670de0b6b3a764000083611723565b610a509190611703565b600754610a5d91906116eb565b60075550505b436006819055600a546007546040517f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f785393610aa193909290916116ba565b60405180910390a15b565b60026000541415610acf5760405162461bcd60e51b81526004016102d29061167a565b600260005580610af15760405162461bcd60e51b81526004016102d29061158a565b610af96109fa565b600554610b11906001600160a01b03163330846110c6565b670de0b6b3a764000060075482610b289190611723565b610b329190611703565b33600090815260096020526040902060010154610b4f91906116eb565b336000908152600960205260409020600181019190915560020154610b759082906116eb565b33600090815260096020526040902060020155600a54610b969082906116eb565b600a55604051309033907f19db7bd0d4b3b497594ec1221d3c790b31e985baeb3c80851231d930db53578b90610bcd9085906116b1565b60405180910390a3506001600055565b610be56109fa565b6001600160a01b038116600090815260096020526040812060020154600754909190670de0b6b3a764000090610c1b9084611723565b610c259190611703565b6001600160a01b03841660009081526009602052604081206001015491925090610c4f9083611742565b33600090815260096020908152604080832060010186905560048054825163e5a6b10f60e01b815292519596509394859485946001600160a01b039091169363e5a6b10f938181019391829003018186803b158015610cad57600080fd5b505afa158015610cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce591906112c6565b90506001600160a01b038116610d9e5760025460405163102e325960e01b81526001600160a01b039091169063102e325990610d47907f0000000000000000000000000000000000000000000000000000000000000000908890600401611410565b60206040518083038186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d979190611364565b9250610e45565b600254604051631a44cdf360e11b81526001600160a01b03909116906334899be690610df2907f000000000000000000000000000000000000000000000000000000000000000090859089906004016113ec565b60206040518083038186803b158015610e0a57600080fd5b505afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190611364565b92505b6004546001600160a01b031615801590610e5f5750600084115b15610eea576004805460405163186e465160e31b81526001600160a01b039091169163c372328891610e95918b91889101611410565b602060405180830381600087803b158015610eaf57600080fd5b505af1158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee79190611364565b91505b866001600160a01b0316336001600160a01b03167f1501dd260e02a8825a24ab4e4875600b0093dd977e06b49bba75faaebe28364784604051610f2d91906116b1565b60405180910390a350505050505050565b336000908152600960205260408120600281015460039091015460075491929091670de0b6b3a764000090610f739085611723565b610f7d9190611703565b600554909150610f97906001600160a01b031633846111b6565b670de0b6b3a764000060075483610fae9190611723565b610fb89190611703565b610fc29082611742565b33600090815260096020526040902060010155610fdf8284611742565b3360009081526009602052604081206002810192909255600390910155600b5461100a908390611742565b600b55600a5461101b908390611742565b600a55604051309033907f082897d5a3548ef5742607ecedf0f1b9e4c355dcc81c81d5bfda47f2b49084a7906110529086906116b1565b60405180910390a3505050565b3360009081526009602052604081206003018054919055600b54611084908290611742565b600b55604051309033907faa15bd4bbb83b4c5e5bf28548326ffc2e718d46db45779599cf4d87b42fbd104906110bb9085906116b1565b60405180910390a350565b600080856001600160a01b03166323b872dd8686866040516024016110ed939291906113ec565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611126919061137c565b6000604051808303816000865af19150503d8060008114611163576040519150601f19603f3d011682016040523d82523d6000602084013e611168565b606091505b5091509150818015611192575080511580611192575080806020019051810190611192919061132c565b6111ae5760405162461bcd60e51b81526004016102d2906114bf565b505050505050565b600080846001600160a01b031663a9059cbb85856040516024016111db929190611410565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611214919061137c565b6000604051808303816000865af19150503d8060008114611251576040519150601f19603f3d011682016040523d82523d6000602084013e611256565b606091505b5091509150818015611280575080511580611280575080806020019051810190611280919061132c565b61129c5760405162461bcd60e51b81526004016102d29061162d565b5050505050565b6000602082840312156112b4578081fd5b81356112bf8161176f565b9392505050565b6000602082840312156112d7578081fd5b81516112bf8161176f565b6000806000606084860312156112f6578182fd5b83356113018161176f565b925060208401356113118161176f565b915060408401356113218161176f565b809150509250925092565b60006020828403121561133d578081fd5b815180151581146112bf578182fd5b60006020828403121561135d578081fd5b5035919050565b600060208284031215611375578081fd5b5051919050565b60008251815b8181101561139c5760208186018101518583015201611382565b818111156113aa5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b600082198211156116fe576116fe611759565b500190565b60008261171e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561173d5761173d611759565b500290565b60008282101561175457611754611759565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461178457600080fd5b5056fea2646970667358221220b01271d0bbe92052e48de06c49be3dbeb98bcff6a3521b3c8aa151ef7a97ffa064736f6c63430008000033a26469706673582212207aa322129f63f9030a726a6f27ef446b2b50d347a3bfd2b83c012595afe7d61e64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063a558796c11610050578063a558796c146100bb578063afae6742146100c3578063d9203b91146100d857610072565b80633a24e142146100775780636dc686e6146100a05780638da5cb5b146100b3575b600080fd5b61008a61008536600461025d565b6100e0565b60405161009791906102b7565b60405180910390f35b61008a6100ae36600461029f565b6101d7565b61008a610201565b61008a610210565b6100cb61021f565b604051610097919061032d565b61008a610225565b600080546001600160a01b031633146101145760405162461bcd60e51b815260040161010b906102f6565b60405180910390fd5b600084600160009054906101000a90046001600160a01b0316858560405161013b90610234565b61014894939291906102cb565b604051809103906000f080158015610164573d6000803e3d6000fd5b50600280546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199182168117909255600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805490911690911790559150509392505050565b600381815481106101e757600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031681565b6002546001600160a01b031681565b60035490565b6001546001600160a01b031681565b6118fb8061033783390190565b80356001600160a01b038116811461025857600080fd5b919050565b600080600060608486031215610271578283fd5b61027a84610241565b925061028860208501610241565b915061029660408501610241565b90509250925092565b6000602082840312156102b0578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b9081526020019056fe60a06040523480156200001157600080fd5b50604051620018fb380380620018fb8339810160408190526200003491620000b5565b6001600081905580546001600160a01b03199081166001600160a01b039687161790915560028054821694861694909417909355600580549093169190931617905560601b6001600160601b031916608052670de0b6b3a764000060085562000111565b80516001600160a01b0381168114620000b057600080fd5b919050565b60008060008060808587031215620000cb578384fd5b620000d68562000098565b9350620000e66020860162000098565b9250620000f66040860162000098565b9150620001066060860162000098565b905092959194509250565b60805160601c6117bd6200013e6000396000818161034201528181610d1d0152610dc601526117bd6000f3fe608060405234801561001057600080fd5b50600436106101625760003560e01c806389919b71116100c8578063bc8f88281161008c578063e19e716811610066578063e19e71681461028c578063e3161ddd14610294578063e3824a381461029c57610162565b8063bc8f882814610269578063dcc3e06e14610271578063e08c5de11461027957610162565b806389919b71146102365780638da5cb5b1461023e5780638fd3ab801461024657806398c6e7601461024e578063af16d6e01461025657610162565b80631959a0021161012a5780635fcbd285116101045780635fcbd28514610208578063736ec05c146102105780638395206c1461022357610162565b80631959a002146101d557806336642c21146101f8578063413d9c3a1461020057610162565b80630e5c011e146101675780630f42e89d1461017c5780630f97b97b1461018f57806313a10036146101ad57806318a00d8e146101c2575b600080fd5b61017a6101753660046112a3565b6102af565b005b61017a61018a36600461134c565b6102f1565b610197610340565b6040516101a491906113b5565b60405180910390f35b6101b5610364565b6040516101a491906116b1565b61017a6101d03660046112a3565b61036a565b6101e86101e33660046112a3565b610404565b6040516101a494939291906116d0565b6101b561042b565b6101b5610431565b610197610438565b61017a61021e3660046112a3565b610447565b61017a61023136600461134c565b6104b9565b6101b56105bc565b6101976105c8565b61017a6105d7565b61019761071d565b61017a6102643660046112e2565b61072c565b61017a610879565b6101976108f5565b6101b56102873660046112a3565b610904565b61017a6109ca565b61017a6109fa565b61017a6102aa36600461134c565b610aac565b600260005414156102db5760405162461bcd60e51b81526004016102d29061167a565b60405180910390fd5b60026000556102e981610bdd565b506001600055565b6001546001600160a01b0316331461031b5760405162461bcd60e51b81526004016102d2906115c1565b6000811161033b5760405162461bcd60e51b81526004016102d290611553565b600855565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a5481565b6001546001600160a01b031633146103945760405162461bcd60e51b81526004016102d2906115c1565b6001600160a01b0381166103ba5760405162461bcd60e51b81526004016102d290611451565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fbdca3ec80f8567aeaf30c6168374c798baf11902e9b21c2b8ba3186ffd13012290600090a250565b60096020526000908152604090208054600182015460028301546003909301549192909184565b600b5481565b620d2f0081565b6005546001600160a01b031681565b6001546001600160a01b031633146104715760405162461bcd60e51b81526004016102d2906115c1565b6001600160a01b0381166104975760405162461bcd60e51b81526004016102d290611451565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600260005414156104dc5760405162461bcd60e51b81526004016102d29061167a565b60026000556104ea33610bdd565b33600090815260096020526040902060028101546003909101548261050f8284611742565b101561052d5760405162461bcd60e51b81526004016102d290611488565b3360009081526009602052604090206003015461054b9084906116eb565b3360009081526009602052604090206003810191909155429055600b546105739084906116eb565b600b55604051309033907fd60ea263bba686471127787b82c1f8b19bddbd87f52b83498879e720d839d51f906105aa9087906116b1565b60405180910390a35050600160005550565b670de0b6b3a764000081565b6001546001600160a01b031681565b600260005414156105fa5760405162461bcd60e51b81526004016102d29061167a565b60026000556003546001600160a01b03166106275760405162461bcd60e51b81526004016102d290611451565b61063033610bdd565b336000908152600960205260409020600301541580159061066e575033600090815260096020526040902054620d2f009061066b9042611742565b10155b156106805761067b610f3e565b610688565b61068861105f565b336000818152600960205260409081902060020154600354915163ed59344b60e01b815290926001600160a01b039092169163ed59344b916106cf91908590600401611429565b600060405180830381600087803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b505033600090815260096020526040812060020181905560019055505050565b6003546001600160a01b031681565b6001546001600160a01b031633146107565760405162461bcd60e51b81526004016102d2906115c1565b600260005414156107795760405162461bcd60e51b81526004016102d29061167a565b60026000556001600160a01b0382166107a45760405162461bcd60e51b81526004016102d2906115f8565b6040516369ee745160e01b81526001600160a01b038316906369ee7451906107d4908690859030906004016113c9565b602060405180830381600087803b1580156107ee57600080fd5b505af1158015610802573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082691906112c6565b600480546001600160a01b0319166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b906105aa9085906113b5565b6002600054141561089c5760405162461bcd60e51b81526004016102d29061167a565b6002600090815533815260096020526040902054620d2f00906108bf9042611742565b10156108dd5760405162461bcd60e51b81526004016102d29061151c565b6108e633610bdd565b6108ee610f3e565b6001600055565b6004546001600160a01b031681565b600754600654600091904311801561091d5750600a5415155b15610978576000600654436109329190611742565b90506000600854826109449190611723565b600a5490915061095c670de0b6b3a764000083611723565b6109669190611703565b60075461097391906116eb565b925050505b6001600160a01b03831660009081526009602052604090206002810154600190910154670de0b6b3a76400006109ae8484611723565b6109b89190611703565b6109c29190611742565b949350505050565b600260005414156109ed5760405162461bcd60e51b81526004016102d29061167a565b60026000556108ee61105f565b600654431115610aaa57600a5415610a6357600060065443610a1c9190611742565b9050600060085482610a2e9190611723565b600a54909150610a46670de0b6b3a764000083611723565b610a509190611703565b600754610a5d91906116eb565b60075550505b436006819055600a546007546040517f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f785393610aa193909290916116ba565b60405180910390a15b565b60026000541415610acf5760405162461bcd60e51b81526004016102d29061167a565b600260005580610af15760405162461bcd60e51b81526004016102d29061158a565b610af96109fa565b600554610b11906001600160a01b03163330846110c6565b670de0b6b3a764000060075482610b289190611723565b610b329190611703565b33600090815260096020526040902060010154610b4f91906116eb565b336000908152600960205260409020600181019190915560020154610b759082906116eb565b33600090815260096020526040902060020155600a54610b969082906116eb565b600a55604051309033907f19db7bd0d4b3b497594ec1221d3c790b31e985baeb3c80851231d930db53578b90610bcd9085906116b1565b60405180910390a3506001600055565b610be56109fa565b6001600160a01b038116600090815260096020526040812060020154600754909190670de0b6b3a764000090610c1b9084611723565b610c259190611703565b6001600160a01b03841660009081526009602052604081206001015491925090610c4f9083611742565b33600090815260096020908152604080832060010186905560048054825163e5a6b10f60e01b815292519596509394859485946001600160a01b039091169363e5a6b10f938181019391829003018186803b158015610cad57600080fd5b505afa158015610cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce591906112c6565b90506001600160a01b038116610d9e5760025460405163102e325960e01b81526001600160a01b039091169063102e325990610d47907f0000000000000000000000000000000000000000000000000000000000000000908890600401611410565b60206040518083038186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d979190611364565b9250610e45565b600254604051631a44cdf360e11b81526001600160a01b03909116906334899be690610df2907f000000000000000000000000000000000000000000000000000000000000000090859089906004016113ec565b60206040518083038186803b158015610e0a57600080fd5b505afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190611364565b92505b6004546001600160a01b031615801590610e5f5750600084115b15610eea576004805460405163186e465160e31b81526001600160a01b039091169163c372328891610e95918b91889101611410565b602060405180830381600087803b158015610eaf57600080fd5b505af1158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee79190611364565b91505b866001600160a01b0316336001600160a01b03167f1501dd260e02a8825a24ab4e4875600b0093dd977e06b49bba75faaebe28364784604051610f2d91906116b1565b60405180910390a350505050505050565b336000908152600960205260408120600281015460039091015460075491929091670de0b6b3a764000090610f739085611723565b610f7d9190611703565b600554909150610f97906001600160a01b031633846111b6565b670de0b6b3a764000060075483610fae9190611723565b610fb89190611703565b610fc29082611742565b33600090815260096020526040902060010155610fdf8284611742565b3360009081526009602052604081206002810192909255600390910155600b5461100a908390611742565b600b55600a5461101b908390611742565b600a55604051309033907f082897d5a3548ef5742607ecedf0f1b9e4c355dcc81c81d5bfda47f2b49084a7906110529086906116b1565b60405180910390a3505050565b3360009081526009602052604081206003018054919055600b54611084908290611742565b600b55604051309033907faa15bd4bbb83b4c5e5bf28548326ffc2e718d46db45779599cf4d87b42fbd104906110bb9085906116b1565b60405180910390a350565b600080856001600160a01b03166323b872dd8686866040516024016110ed939291906113ec565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611126919061137c565b6000604051808303816000865af19150503d8060008114611163576040519150601f19603f3d011682016040523d82523d6000602084013e611168565b606091505b5091509150818015611192575080511580611192575080806020019051810190611192919061132c565b6111ae5760405162461bcd60e51b81526004016102d2906114bf565b505050505050565b600080846001600160a01b031663a9059cbb85856040516024016111db929190611410565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611214919061137c565b6000604051808303816000865af19150503d8060008114611251576040519150601f19603f3d011682016040523d82523d6000602084013e611256565b606091505b5091509150818015611280575080511580611280575080806020019051810190611280919061132c565b61129c5760405162461bcd60e51b81526004016102d29061162d565b5050505050565b6000602082840312156112b4578081fd5b81356112bf8161176f565b9392505050565b6000602082840312156112d7578081fd5b81516112bf8161176f565b6000806000606084860312156112f6578182fd5b83356113018161176f565b925060208401356113118161176f565b915060408401356113218161176f565b809150509250925092565b60006020828403121561133d578081fd5b815180151581146112bf578182fd5b60006020828403121561135d578081fd5b5035919050565b600060208284031215611375578081fd5b5051919050565b60008251815b8181101561139c5760208186018101518583015201611382565b818111156113aa5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b600082198211156116fe576116fe611759565b500190565b60008261171e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561173d5761173d611759565b500290565b60008282101561175457611754611759565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461178457600080fd5b5056fea2646970667358221220b01271d0bbe92052e48de06c49be3dbeb98bcff6a3521b3c8aa151ef7a97ffa064736f6c63430008000033a26469706673582212207aa322129f63f9030a726a6f27ef446b2b50d347a3bfd2b83c012595afe7d61e64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13225,
        "contract": "contracts/factories/SyntheticSSIPFactory.sol:SyntheticSSIPFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13227,
        "contract": "contracts/factories/SyntheticSSIPFactory.sol:SyntheticSSIPFactory",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13229,
        "contract": "contracts/factories/SyntheticSSIPFactory.sol:SyntheticSSIPFactory",
        "label": "lastNewSSIP",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13232,
        "contract": "contracts/factories/SyntheticSSIPFactory.sol:SyntheticSSIPFactory",
        "label": "ssipList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}