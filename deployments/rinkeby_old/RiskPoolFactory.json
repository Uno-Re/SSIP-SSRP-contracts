{
  "address": "0xaa60B3Bd1865096e4C672d9DcD9160Ae52D115f4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_cohort",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "newRiskPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3787297cc58db5b39c6f49ef907b51f3d119f223aca4de52fa7496ac617cb142",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0xaa60B3Bd1865096e4C672d9DcD9160Ae52D115f4",
    "transactionIndex": 3,
    "gasUsed": "2273417",
    "logsBloom": "0x
    "blockHash": "0x1871badcc1b539418b3e34d5ef908aec118d6562f5f73d375bfb591111ac2286",
    "transactionHash": "0x3787297cc58db5b39c6f49ef907b51f3d119f223aca4de52fa7496ac617cb142",
    "logs": [],
    "blockNumber": 9853519,
    "cumulativeGasUsed": "2530534",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a4d91358c036d420da7aee9136e29f67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cohort\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"newRiskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/RiskPoolFactory.sol\":\"RiskPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/RiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RiskPoolERC20.sol\\\";\\nimport \\\"./interfaces/ISingleSidedReinsurancePool.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract RiskPool is IRiskPool, RiskPoolERC20 {\\n    // ERC20 attributes\\n    string public name;\\n    string public symbol;\\n\\n    address public SSRP;\\n    address public override currency; // for now we should accept only UNO\\n    uint256 public override lpPriceUno;\\n    uint256 public MIN_LP_CAPITAL = 1e20;\\n\\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _amount, uint256 _amountInUno);\\n    event LogPolicyClaim(address indexed _user, uint256 _amount);\\n    event LogMigrateLP(address indexed _user, address indexed _migrateTo, uint256 _unoAmount);\\n    event LogLeaveFromPending(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _SSRP,\\n        address _currency\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        SSRP = _SSRP;\\n        currency = _currency;\\n        lpPriceUno = 1e18;\\n    }\\n\\n    modifier onlySSRP() {\\n        require(msg.sender == SSRP, \\\"UnoRe: RiskPool Forbidden\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Users can stake only through Cohort\\n     */\\n    function enter(address _from, uint256 _amount) external override onlySSRP {\\n        _mint(_from, (_amount * 1e18) / lpPriceUno);\\n    }\\n\\n    /**\\n     * @param _amount UNO amount to withdraw\\n     */\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external override onlySSRP {\\n        require(totalSupply() > 0, \\\"UnoRe: There's no remaining in the pool\\\");\\n        uint256 requestAmountInLP = (_amount * 1e18) / lpPriceUno;\\n        require(\\n            (requestAmountInLP + uint256(withdrawRequestPerUser[_to].pendingAmount)) <= balanceOf(_to),\\n            \\\"UnoRe: lp balance overflow\\\"\\n        );\\n        _withdrawRequest(_to, requestAmountInLP, _amount);\\n    }\\n\\n    function leaveFromPending(address _to) external override onlySSRP returns (uint256, uint256) {\\n        uint256 cryptoBalance = IERC20(currency).balanceOf(address(this));\\n        uint256 pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\\n        require(cryptoBalance > 0, \\\"UnoRe: zero uno balance\\\");\\n        require(balanceOf(_to) >= pendingAmount, \\\"UnoRe: lp balance overflow\\\");\\n        _withdrawImplement(_to);\\n        uint256 pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\\n        if (cryptoBalance - MIN_LP_CAPITAL > pendingAmountInUno) {\\n            TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\\n            emit LogLeaveFromPending(_to, pendingAmount, pendingAmountInUno);\\n            return (pendingAmount, pendingAmountInUno);\\n        } else {\\n            TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n            emit LogLeaveFromPending(_to, pendingAmount, cryptoBalance - MIN_LP_CAPITAL);\\n            return (pendingAmount, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n    }\\n\\n    function cancelWithrawRequest(address _to) external override onlySSRP {\\n        uint256 _pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\\n        require(_pendingAmount > 0, \\\"UnoRe: zero amount\\\");\\n        _cancelWithdrawRequest(_to);\\n        emit LogCancelWithdrawRequest(_to, _pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\\n    }\\n\\n    function policyClaim(address _to, uint256 _amount) external override onlySSRP returns (uint256 realClaimAmount) {\\n        uint256 cryptoBalance = IERC20(currency).balanceOf(address(this));\\n        require(totalSupply() > 0, \\\"UnoRe: zero lp balance\\\");\\n        require(cryptoBalance > MIN_LP_CAPITAL, \\\"UnoRe: minimum UNO capital underflow\\\");\\n        if (cryptoBalance - MIN_LP_CAPITAL > _amount) {\\n            TransferHelper.safeTransfer(currency, _to, _amount);\\n            realClaimAmount = _amount;\\n            emit LogPolicyClaim(_to, _amount);\\n        } else {\\n            TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n            realClaimAmount = cryptoBalance - MIN_LP_CAPITAL;\\n            emit LogPolicyClaim(_to, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n        cryptoBalance = IERC20(currency).balanceOf(address(this));\\n        lpPriceUno = (cryptoBalance * 1e18) / totalSupply(); // UNO value per lp\\n    }\\n\\n    function migrateLP(\\n        address _to,\\n        address _migrateTo,\\n        bool _isUnLocked\\n    ) external override onlySSRP {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        if (_isUnLocked && withdrawRequestPerUser[_to].pendingAmount > 0) {\\n            uint256 pendingAmountInUno = (uint256(withdrawRequestPerUser[_to].pendingAmount) * lpPriceUno) / 1e18;\\n            uint256 cryptoBalance = IERC20(currency).balanceOf(address(this));\\n            if (pendingAmountInUno < cryptoBalance - MIN_LP_CAPITAL) {\\n                TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\\n            } else {\\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            _withdrawImplement(_to);\\n        } else {\\n            if (withdrawRequestPerUser[_to].pendingAmount > 0) {\\n                _cancelWithdrawRequest(_to);\\n            }\\n        }\\n        uint256 unoBalance = (balanceOf(_to) * lpPriceUno) / 1e18;\\n        TransferHelper.safeTransfer(currency, _migrateTo, unoBalance);\\n        _burn(_to, balanceOf(_to));\\n        emit LogMigrateLP(_to, _migrateTo, unoBalance);\\n    }\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external override onlySSRP {\\n        require(_minLPCapital > 0, \\\"UnoRe: not allow zero value\\\");\\n        MIN_LP_CAPITAL = _minLPCapital;\\n    }\\n\\n    function getWithdrawRequest(address _to)\\n        external\\n        view\\n        override\\n        onlySSRP\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            uint256(withdrawRequestPerUser[_to].pendingAmount),\\n            uint256(withdrawRequestPerUser[_to].requestTime),\\n            withdrawRequestPerUser[_to].pendingUno\\n        );\\n    }\\n\\n    function getTotalWithdrawRequestAmount() external view override onlySSRP returns (uint256) {\\n        return totalWithdrawPending;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        require(\\n            balanceOf(msg.sender) - uint256(withdrawRequestPerUser[msg.sender].pendingAmount) >= amount,\\n            \\\"ERC20: transfer amount exceeds balance or pending WR\\\"\\n        );\\n        _transfer(msg.sender, recipient, amount);\\n\\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(\\n            balanceOf(sender) - uint256(withdrawRequestPerUser[sender].pendingAmount) >= amount,\\n            \\\"ERC20: transfer amount exceeds balance or pending WR\\\"\\n        );\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(sender, recipient, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x7fdc99faf5eaa5fdeefa4414d50601ba3c79449af06676d02188b0f886ce0201\",\"license\":\"GPL-3.0\"},\"contracts/RiskPoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./interfaces/IRiskPoolERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract RiskPoolERC20 is Context, IRiskPoolERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    struct UserWithdrawRequestInfo {\\n        uint128 pendingAmount;\\n        uint128 requestTime;\\n        uint256 pendingUno;\\n    }\\n    mapping(address => UserWithdrawRequestInfo) internal withdrawRequestPerUser;\\n    uint256 internal totalWithdrawPending;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _withdrawRequest(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _amountInUno\\n    ) internal {\\n        require(balanceOf(_user) >= _amount, \\\"UnoRe: balance overflow\\\");\\n        if (withdrawRequestPerUser[_user].pendingAmount == 0 && withdrawRequestPerUser[_user].requestTime == 0) {\\n            withdrawRequestPerUser[_user] = UserWithdrawRequestInfo({\\n                pendingAmount: uint128(_amount),\\n                requestTime: uint128(block.timestamp),\\n                pendingUno: _amountInUno\\n            });\\n        } else {\\n            withdrawRequestPerUser[_user].pendingAmount += uint128(_amount);\\n            withdrawRequestPerUser[_user].pendingUno += _amountInUno;\\n            withdrawRequestPerUser[_user].requestTime = uint128(block.timestamp);\\n        }\\n        totalWithdrawPending += _amount;\\n    }\\n\\n    function _withdrawImplement(address _user) internal {\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \\\"UnoRe: zero claim amount\\\");\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        _burn(_user, _pendingAmount);\\n        delete withdrawRequestPerUser[_user];\\n    }\\n\\n    function _cancelWithdrawRequest(address _user) internal {\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        delete withdrawRequestPerUser[_user];\\n    }\\n}\\n\",\"keccak256\":\"0xb962290cbf877fe865ef09991ed618d91692dcb0e5e8cdbb6882e8772ec31e72\",\"license\":\"MIT\"},\"contracts/factories/RiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../RiskPool.sol\\\";\\nimport \\\"../interfaces/IRiskPoolFactory.sol\\\";\\n\\ncontract RiskPoolFactory is IRiskPoolFactory {\\n    constructor() {}\\n\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _cohort,\\n        address _currency\\n    ) external override returns (address) {\\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency);\\n        address _riskPoolAddr = address(_riskPool);\\n\\n        return _riskPoolAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x0fd162f950fd8eceb73e8b7fce0a63756b317081b96a247db226b5962e2ad384\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to) external returns (uint256, uint256);\\n\\n    function cancelWithrawRequest(address _to) external;\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(\\n        address _to,\\n        address _migrateTo,\\n        bool _isUnLocked\\n    ) external;\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function lpPriceUno() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a5eddf6f3d2f487eefb107a6bbe9547e30f16356a63f63d1cc9bffcf6d97118\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IRiskPoolERC20 {\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x4345369c8a97af0b15d96c893d357de8cb09f977db4fbbb09348e0b249e05efe\",\"license\":\"MIT\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _pool,\\n        address _currency\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x2822333ced0a43d8bf0c0a4a4a0ed6718e2b5cfd55792fd89e5d06211f57898e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISingleSidedReinsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x049a33080ab7bd863f3bcb8faaf66866fbe2066b3be9c4f5a15558c421e95ce7\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061282f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630d98e31f14610030575b600080fd5b61004361003e366004610116565b610059565b60405161005091906101cd565b60405180910390f35b60008087878787878760405161006e906100a6565b61007d969594939291906101e1565b604051809103906000f080158015610099573d6000803e3d6000fd5b5098975050505050505050565b6125ca8061023083390190565b80356001600160a01b03811681146100ca57600080fd5b919050565b60008083601f8401126100e0578182fd5b50813567ffffffffffffffff8111156100f7578182fd5b60208301915083602082850101111561010f57600080fd5b9250929050565b6000806000806000806080878903121561012e578182fd5b863567ffffffffffffffff80821115610145578384fd5b6101518a838b016100cf565b90985096506020890135915080821115610169578384fd5b5061017689828a016100cf565b90955093506101899050604088016100b3565b9150610197606088016100b3565b90509295509295509295565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b6000608082526101f560808301888a6101a3565b82810360208401526102088187896101a3565b9150506001600160a01b03808516604084015280841660608401525097965050505050505056fe608060405268056bc75e2d63100000600a553480156200001e57600080fd5b50604051620025ca380380620025ca83398101604081905262000041916200021b565b835162000056906005906020870190620000ad565b5082516200006c906006906020860190620000ad565b50600780546001600160a01b039384166001600160a01b031991821617909155600880549290931691161790555050670de0b6b3a7640000600955620002fa565b828054620000bb90620002a7565b90600052602060002090601f016020900481019282620000df57600085556200012a565b82601f10620000fa57805160ff19168380011785556200012a565b828001600101855582156200012a579182015b828111156200012a5782518255916020019190600101906200010d565b50620001389291506200013c565b5090565b5b808211156200013857600081556001016200013d565b80516001600160a01b03811681146200016b57600080fd5b919050565b600082601f83011262000181578081fd5b81516001600160401b03808211156200019e576200019e620002e4565b6040516020601f8401601f1916820181018381118382101715620001c657620001c6620002e4565b6040528382528584018101871015620001dd578485fd5b8492505b83831015620002005785830181015182840182015291820191620001e1565b838311156200021157848185840101525b5095945050505050565b6000806000806080858703121562000231578384fd5b84516001600160401b038082111562000248578586fd5b620002568883890162000170565b955060208701519150808211156200026c578485fd5b506200027b8782880162000170565b9350506200028c6040860162000153565b91506200029c6060860162000153565b905092959194509250565b600281046001821680620002bc57607f821691505b60208210811415620002de57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6122c0806200030a6000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80637e348b7d116100e3578063d7e3655a1161008c578063e5a6b10f11610066578063e5a6b10f14610353578063e95aa8d31461035b578063f53fb2001461036357610198565b8063d7e3655a14610325578063dcd053201461032d578063dd62ed3e1461034057610198565b8063a457c2d7116100bd578063a457c2d7146102de578063a9059cbb146102f1578063b20ecd151461030457610198565b80637e348b7d146102b057806393b6b86c146102c357806395d89b41146102d657610198565b80632e4a014211610145578063395093511161011f578063395093511461027757806347bcdb2a1461028a57806370a082311461029d57610198565b80632e4a01421461023a578063313ce5671461024d5780633613302f1461026257610198565b806318160ddd1161017657806318160ddd146101f057806323b872dd146102055780632ccae8961461021857610198565b806306fdde031461019d578063095ea7b3146101bb57806311ca7399146101db575b600080fd5b6101a561036b565b6040516101b29190611b36565b60405180910390f35b6101ce6101c9366004611a49565b6103f9565b6040516101b29190611b2b565b6101e3610416565b6040516101b29190611ada565b6101f8610425565b6040516101b29190612128565b6101ce610213366004611a0e565b61042b565b61022b610226366004611975565b61055c565b6040516101b29392919061213f565b6101f8610248366004611a49565b6105c7565b610255610867565b6040516101b29190612155565b6102756102703660046119c8565b61086c565b005b6101ce610285366004611a49565b610af4565b610275610298366004611a49565b610b43565b6101f86102ab366004611975565b610c1b565b6102756102be366004611a49565b610c3a565b6102756102d1366004611a8e565b610c92565b6101a5610ce1565b6101ce6102ec366004611a49565b610cee565b6101ce6102ff366004611a49565b610d69565b610317610312366004611975565b610e31565b6040516101b2929190612131565b6101f8611080565b61027561033b366004611975565b611086565b6101f861034e366004611996565b61115f565b6101e361118a565b6101f8611199565b6101f86111cd565b6005805461037890612228565b80601f01602080910402602001604051908101604052809291908181526020018280546103a490612228565b80156103f15780601f106103c6576101008083540402835291602001916103f1565b820191906000526020600020905b8154815290600101906020018083116103d457829003601f168201915b505050505081565b600061040d6104066111d3565b84846111d7565b50600192915050565b6007546001600160a01b031681565b60045490565b6001600160a01b03831660009081526002602052604081205482906001600160801b031661045886610c1b565b61046291906121e5565b10156104895760405162461bcd60e51b815260040161048090611ee2565b60405180910390fd5b61049484848461128b565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104d85760405162461bcd60e51b815260040161048090611e14565b6104ec85336104e786856121e5565b6111d7565b6007546040516274d72160e51b81526001600160a01b0390911690630e9ae4209061051f90889088908890600401611aee565b600060405180830381600087803b15801561053957600080fd5b505af115801561054d573d6000803e3d6000fd5b50600198975050505050505050565b600754600090819081906001600160a01b0316331461058d5760405162461bcd60e51b815260040161048090612007565b5050506001600160a01b0316600090815260026020526040902080546001909101546001600160801b0380831693600160801b9093041691565b6007546000906001600160a01b031633146105f45760405162461bcd60e51b815260040161048090612007565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610625903090600401611ada565b60206040518083038186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190611aa6565b90506000610681610425565b1161069e5760405162461bcd60e51b815260040161048090611bac565b600a5481116106bf5760405162461bcd60e51b815260040161048090611be3565b82600a54826106ce91906121e5565b1115610734576008546106eb906001600160a01b031685856113be565b829150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def362846040516107279190612128565b60405180910390a26107b7565b600854600a54610759916001600160a01b031690869061075490856121e5565b6113be565b600a5461076690826121e5565b9150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def362600a54836107a191906121e5565b6040516107ae9190612128565b60405180910390a25b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906107e7903090600401611ada565b60206040518083038186803b1580156107ff57600080fd5b505afa158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190611aa6565b9050610841610425565b61085382670de0b6b3a76400006121c6565b61085d91906121a6565b6009555092915050565b601290565b6007546001600160a01b031633146108965760405162461bcd60e51b815260040161048090612007565b6001600160a01b0382166108bc5760405162461bcd60e51b815260040161048090611cab565b8080156108e957506001600160a01b0383166000908152600260205260409020546001600160801b031615155b15610a1c576009546001600160a01b0384166000908152600260205260408120549091670de0b6b3a76400009161092991906001600160801b03166121c6565b61093391906121a6565b6008546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610969903090600401611ada565b60206040518083038186803b15801561098157600080fd5b505afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b99190611aa6565b9050600a54816109c991906121e5565b8210156109ec576008546109e7906001600160a01b031686846113be565b610a0c565b600854600a54610a0c916001600160a01b031690879061075490856121e5565b610a15856114c0565b5050610a4c565b6001600160a01b0383166000908152600260205260409020546001600160801b031615610a4c57610a4c83611565565b6000670de0b6b3a7640000600954610a6386610c1b565b610a6d91906121c6565b610a7791906121a6565b600854909150610a91906001600160a01b031684836113be565b610aa384610a9e86610c1b565b6115c1565b826001600160a01b0316846001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d541981983604051610ae69190612128565b60405180910390a350505050565b600061040d610b016111d3565b848460016000610b0f6111d3565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546104e7919061218e565b6007546001600160a01b03163314610b6d5760405162461bcd60e51b815260040161048090612007565b6000610b77610425565b11610b945760405162461bcd60e51b815260040161048090611dcd565b600954600090610bac83670de0b6b3a76400006121c6565b610bb691906121a6565b9050610bc183610c1b565b6001600160a01b038416600090815260026020526040902054610bed906001600160801b03168361218e565b1115610c0b5760405162461bcd60e51b815260040161048090611f83565b610c168382846116bb565b505050565b6001600160a01b0381166000908152602081905260409020545b919050565b6007546001600160a01b03163314610c645760405162461bcd60e51b815260040161048090612007565b610c8e8260095483670de0b6b3a7640000610c7f91906121c6565b610c8991906121a6565b611896565b5050565b6007546001600160a01b03163314610cbc5760405162461bcd60e51b815260040161048090612007565b60008111610cdc5760405162461bcd60e51b8152600401610480906120ba565b600a55565b6006805461037890612228565b60008060016000610cfd6111d3565b6001600160a01b0390811682526020808301939093526040918201600090812091881681529252902054905082811015610d495760405162461bcd60e51b815260040161048090612075565b610d5f610d546111d3565b856104e786856121e5565b5060019392505050565b33600081815260026020526040812054909183916001600160801b031690610d9090610c1b565b610d9a91906121e5565b1015610db85760405162461bcd60e51b815260040161048090611ee2565b610dc333848461128b565b6007546040516274d72160e51b81526001600160a01b0390911690630e9ae42090610df690339087908790600401611aee565b600060405180830381600087803b158015610e1057600080fd5b505af1158015610e24573d6000803e3d6000fd5b5060019695505050505050565b60075460009081906001600160a01b03163314610e605760405162461bcd60e51b815260040161048090612007565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610e91903090600401611ada565b60206040518083038186803b158015610ea957600080fd5b505afa158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee19190611aa6565b6001600160a01b0385166000908152600260205260409020549091506001600160801b031681610f235760405162461bcd60e51b81526004016104809061203e565b80610f2d86610c1b565b1015610f4b5760405162461bcd60e51b815260040161048090611f83565b610f54856114c0565b6000670de0b6b3a764000060095483610f6d91906121c6565b610f7791906121a6565b905080600a5484610f8891906121e5565b1115610ff457600854610fa5906001600160a01b031687836113be565b856001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea08383604051610fe0929190612131565b60405180910390a2909350915061107b9050565b600854600a54611014916001600160a01b031690889061075490876121e5565b856001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea083600a548661104e91906121e5565b60405161105c929190612131565b60405180910390a281600a548461107391906121e5565b945094505050505b915091565b600a5481565b6007546001600160a01b031633146110b05760405162461bcd60e51b815260040161048090612007565b6001600160a01b0381166000908152600260205260409020546001600160801b0316806110ef5760405162461bcd60e51b815260040161048090611d96565b6110f882611565565b816001600160a01b03167f09c6481cb228ea7f61ceb67c8e708038eb74bbb68cfcc54a9cfca199087ecfb782670de0b6b3a76400006009548561113b91906121c6565b61114591906121a6565b604051611153929190612131565b60405180910390a25050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6008546001600160a01b031681565b6007546000906001600160a01b031633146111c65760405162461bcd60e51b815260040161048090612007565b5060035490565b60095481565b3390565b6001600160a01b0383166111fd5760405162461bcd60e51b815260040161048090611f3f565b6001600160a01b0382166112235760405162461bcd60e51b815260040161048090611c69565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061127e908590612128565b60405180910390a3505050565b6001600160a01b0383166112b15760405162461bcd60e51b815260040161048090611e9d565b6001600160a01b0382166112d75760405162461bcd60e51b815260040161048090611b69565b6112e2838383610c16565b6001600160a01b0383166000908152602081905260409020548181101561131b5760405162461bcd60e51b815260040161048090611d19565b61132582826121e5565b6001600160a01b03808616600090815260208190526040808220939093559085168152908120805484929061135b90849061218e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113a59190612128565b60405180910390a36113b8848484610c16565b50505050565b600080846001600160a01b031663a9059cbb85856040516024016113e3929190611b12565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114319190611abe565b6000604051808303816000865af19150503d806000811461146e576040519150601f19603f3d011682016040523d82523d6000602084013e611473565b606091505b509150915081801561149d57508051158061149d57508080602001905181019061149d9190611a72565b6114b95760405162461bcd60e51b815260040161048090611fba565b5050505050565b6001600160a01b0381166000908152600260205260409020546001600160801b03166114fe5760405162461bcd60e51b815260040161048090611ce2565b6001600160a01b038116600090815260026020526040812054600380546001600160801b039092169283926115349084906121e5565b90915550611544905082826115c1565b506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b038116600090815260026020526040812054600380546001600160801b0390921692839261159b9084906121e5565b9091555050506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b0382166115e75760405162461bcd60e51b815260040161048090611e5c565b6115f382600083610c16565b6001600160a01b0382166000908152602081905260409020548181101561162c5760405162461bcd60e51b815260040161048090611c27565b61163682826121e5565b6001600160a01b038416600090815260208190526040812091909155600480548492906116649084906121e5565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906116a7908690612128565b60405180910390a3610c1683600084610c16565b816116c584610c1b565b10156116e35760405162461bcd60e51b815260040161048090611d5f565b6001600160a01b0383166000908152600260205260409020546001600160801b031615801561173857506001600160a01b038316600090815260026020526040902054600160801b90046001600160801b0316155b156117b757604080516060810182526001600160801b03848116825242811660208084019182528385018681526001600160a01b038916600090815260029092529490209251835491516fffffffffffffffffffffffffffffffff19909216908316178216600160801b9190921602178155905160019091015561187a565b6001600160a01b038316600090815260026020526040812080548492906117e89084906001600160801b0316612163565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508060026000856001600160a01b03166001600160a01b031681526020019081526020016000206001016000828254611844919061218e565b90915550506001600160a01b038316600090815260026020526040902080546001600160801b03428116600160801b0291161790555b816003600082825461188c919061218e565b9091555050505050565b6001600160a01b0382166118bc5760405162461bcd60e51b8152600401610480906120f1565b6118c860008383610c16565b80600460008282546118da919061218e565b90915550506001600160a01b0382166000908152602081905260408120805483929061190790849061218e565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061194a908590612128565b60405180910390a3610c8e60008383610c16565b80356001600160a01b0381168114610c3557600080fd5b600060208284031215611986578081fd5b61198f8261195e565b9392505050565b600080604083850312156119a8578081fd5b6119b18361195e565b91506119bf6020840161195e565b90509250929050565b6000806000606084860312156119dc578081fd5b6119e58461195e565b92506119f36020850161195e565b91506040840135611a0381612279565b809150509250925092565b600080600060608486031215611a22578283fd5b611a2b8461195e565b9250611a396020850161195e565b9150604084013590509250925092565b60008060408385031215611a5b578182fd5b611a648361195e565b946020939093013593505050565b600060208284031215611a83578081fd5b815161198f81612279565b600060208284031215611a9f578081fd5b5035919050565b600060208284031215611ab7578081fd5b5051919050565b60008251611ad08184602087016121fc565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611b558160408501602087016121fc565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526016908201527f556e6f52653a207a65726f206c702062616c616e636500000000000000000000604082015260600190565b60208082526024908201527f556e6f52653a206d696e696d756d20554e4f206361706974616c20756e646572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b60208082526018908201527f556e6f52653a207a65726f20636c61696d20616d6f756e740000000000000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526017908201527f556e6f52653a2062616c616e6365206f766572666c6f77000000000000000000604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b60208082526027908201527f556e6f52653a2054686572652773206e6f2072656d61696e696e6720696e20746040820152661a19481c1bdbdb60ca1b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526034908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e6365206f722070656e64696e67205752000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601a908201527f556e6f52653a206c702062616c616e6365206f766572666c6f77000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b60208082526019908201527f556e6f52653a205269736b506f6f6c20466f7262696464656e00000000000000604082015260600190565b60208082526017908201527f556e6f52653a207a65726f20756e6f2062616c616e6365000000000000000000604082015260600190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c75650000000000604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60006001600160801b0380831681851680830382111561218557612185612263565b01949350505050565b600082198211156121a1576121a1612263565b500190565b6000826121c157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156121e0576121e0612263565b500290565b6000828210156121f7576121f7612263565b500390565b60005b838110156122175781810151838201526020016121ff565b838111156113b85750506000910152565b60028104600182168061223c57607f821691505b6020821081141561225d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b801515811461228757600080fd5b5056fea2646970667358221220cec3930977fe0a60dfa0ba22838a932d35f7b2dd4a0dc22e2cc372d08f511db164736f6c63430008000033a264697066735822122099d7e10802ed9a9df080bbc8d19a8dfb62c8af581ab542d7711919dd1a26228864736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630d98e31f14610030575b600080fd5b61004361003e366004610116565b610059565b60405161005091906101cd565b60405180910390f35b60008087878787878760405161006e906100a6565b61007d969594939291906101e1565b604051809103906000f080158015610099573d6000803e3d6000fd5b5098975050505050505050565b6125ca8061023083390190565b80356001600160a01b03811681146100ca57600080fd5b919050565b60008083601f8401126100e0578182fd5b50813567ffffffffffffffff8111156100f7578182fd5b60208301915083602082850101111561010f57600080fd5b9250929050565b6000806000806000806080878903121561012e578182fd5b863567ffffffffffffffff80821115610145578384fd5b6101518a838b016100cf565b90985096506020890135915080821115610169578384fd5b5061017689828a016100cf565b90955093506101899050604088016100b3565b9150610197606088016100b3565b90509295509295509295565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b6000608082526101f560808301888a6101a3565b82810360208401526102088187896101a3565b9150506001600160a01b03808516604084015280841660608401525097965050505050505056fe608060405268056bc75e2d63100000600a553480156200001e57600080fd5b50604051620025ca380380620025ca83398101604081905262000041916200021b565b835162000056906005906020870190620000ad565b5082516200006c906006906020860190620000ad565b50600780546001600160a01b039384166001600160a01b031991821617909155600880549290931691161790555050670de0b6b3a7640000600955620002fa565b828054620000bb90620002a7565b90600052602060002090601f016020900481019282620000df57600085556200012a565b82601f10620000fa57805160ff19168380011785556200012a565b828001600101855582156200012a579182015b828111156200012a5782518255916020019190600101906200010d565b50620001389291506200013c565b5090565b5b808211156200013857600081556001016200013d565b80516001600160a01b03811681146200016b57600080fd5b919050565b600082601f83011262000181578081fd5b81516001600160401b03808211156200019e576200019e620002e4565b6040516020601f8401601f1916820181018381118382101715620001c657620001c6620002e4565b6040528382528584018101871015620001dd578485fd5b8492505b83831015620002005785830181015182840182015291820191620001e1565b838311156200021157848185840101525b5095945050505050565b6000806000806080858703121562000231578384fd5b84516001600160401b038082111562000248578586fd5b620002568883890162000170565b955060208701519150808211156200026c578485fd5b506200027b8782880162000170565b9350506200028c6040860162000153565b91506200029c6060860162000153565b905092959194509250565b600281046001821680620002bc57607f821691505b60208210811415620002de57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6122c0806200030a6000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80637e348b7d116100e3578063d7e3655a1161008c578063e5a6b10f11610066578063e5a6b10f14610353578063e95aa8d31461035b578063f53fb2001461036357610198565b8063d7e3655a14610325578063dcd053201461032d578063dd62ed3e1461034057610198565b8063a457c2d7116100bd578063a457c2d7146102de578063a9059cbb146102f1578063b20ecd151461030457610198565b80637e348b7d146102b057806393b6b86c146102c357806395d89b41146102d657610198565b80632e4a014211610145578063395093511161011f578063395093511461027757806347bcdb2a1461028a57806370a082311461029d57610198565b80632e4a01421461023a578063313ce5671461024d5780633613302f1461026257610198565b806318160ddd1161017657806318160ddd146101f057806323b872dd146102055780632ccae8961461021857610198565b806306fdde031461019d578063095ea7b3146101bb57806311ca7399146101db575b600080fd5b6101a561036b565b6040516101b29190611b36565b60405180910390f35b6101ce6101c9366004611a49565b6103f9565b6040516101b29190611b2b565b6101e3610416565b6040516101b29190611ada565b6101f8610425565b6040516101b29190612128565b6101ce610213366004611a0e565b61042b565b61022b610226366004611975565b61055c565b6040516101b29392919061213f565b6101f8610248366004611a49565b6105c7565b610255610867565b6040516101b29190612155565b6102756102703660046119c8565b61086c565b005b6101ce610285366004611a49565b610af4565b610275610298366004611a49565b610b43565b6101f86102ab366004611975565b610c1b565b6102756102be366004611a49565b610c3a565b6102756102d1366004611a8e565b610c92565b6101a5610ce1565b6101ce6102ec366004611a49565b610cee565b6101ce6102ff366004611a49565b610d69565b610317610312366004611975565b610e31565b6040516101b2929190612131565b6101f8611080565b61027561033b366004611975565b611086565b6101f861034e366004611996565b61115f565b6101e361118a565b6101f8611199565b6101f86111cd565b6005805461037890612228565b80601f01602080910402602001604051908101604052809291908181526020018280546103a490612228565b80156103f15780601f106103c6576101008083540402835291602001916103f1565b820191906000526020600020905b8154815290600101906020018083116103d457829003601f168201915b505050505081565b600061040d6104066111d3565b84846111d7565b50600192915050565b6007546001600160a01b031681565b60045490565b6001600160a01b03831660009081526002602052604081205482906001600160801b031661045886610c1b565b61046291906121e5565b10156104895760405162461bcd60e51b815260040161048090611ee2565b60405180910390fd5b61049484848461128b565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104d85760405162461bcd60e51b815260040161048090611e14565b6104ec85336104e786856121e5565b6111d7565b6007546040516274d72160e51b81526001600160a01b0390911690630e9ae4209061051f90889088908890600401611aee565b600060405180830381600087803b15801561053957600080fd5b505af115801561054d573d6000803e3d6000fd5b50600198975050505050505050565b600754600090819081906001600160a01b0316331461058d5760405162461bcd60e51b815260040161048090612007565b5050506001600160a01b0316600090815260026020526040902080546001909101546001600160801b0380831693600160801b9093041691565b6007546000906001600160a01b031633146105f45760405162461bcd60e51b815260040161048090612007565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610625903090600401611ada565b60206040518083038186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190611aa6565b90506000610681610425565b1161069e5760405162461bcd60e51b815260040161048090611bac565b600a5481116106bf5760405162461bcd60e51b815260040161048090611be3565b82600a54826106ce91906121e5565b1115610734576008546106eb906001600160a01b031685856113be565b829150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def362846040516107279190612128565b60405180910390a26107b7565b600854600a54610759916001600160a01b031690869061075490856121e5565b6113be565b600a5461076690826121e5565b9150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def362600a54836107a191906121e5565b6040516107ae9190612128565b60405180910390a25b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906107e7903090600401611ada565b60206040518083038186803b1580156107ff57600080fd5b505afa158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190611aa6565b9050610841610425565b61085382670de0b6b3a76400006121c6565b61085d91906121a6565b6009555092915050565b601290565b6007546001600160a01b031633146108965760405162461bcd60e51b815260040161048090612007565b6001600160a01b0382166108bc5760405162461bcd60e51b815260040161048090611cab565b8080156108e957506001600160a01b0383166000908152600260205260409020546001600160801b031615155b15610a1c576009546001600160a01b0384166000908152600260205260408120549091670de0b6b3a76400009161092991906001600160801b03166121c6565b61093391906121a6565b6008546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610969903090600401611ada565b60206040518083038186803b15801561098157600080fd5b505afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b99190611aa6565b9050600a54816109c991906121e5565b8210156109ec576008546109e7906001600160a01b031686846113be565b610a0c565b600854600a54610a0c916001600160a01b031690879061075490856121e5565b610a15856114c0565b5050610a4c565b6001600160a01b0383166000908152600260205260409020546001600160801b031615610a4c57610a4c83611565565b6000670de0b6b3a7640000600954610a6386610c1b565b610a6d91906121c6565b610a7791906121a6565b600854909150610a91906001600160a01b031684836113be565b610aa384610a9e86610c1b565b6115c1565b826001600160a01b0316846001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d541981983604051610ae69190612128565b60405180910390a350505050565b600061040d610b016111d3565b848460016000610b0f6111d3565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546104e7919061218e565b6007546001600160a01b03163314610b6d5760405162461bcd60e51b815260040161048090612007565b6000610b77610425565b11610b945760405162461bcd60e51b815260040161048090611dcd565b600954600090610bac83670de0b6b3a76400006121c6565b610bb691906121a6565b9050610bc183610c1b565b6001600160a01b038416600090815260026020526040902054610bed906001600160801b03168361218e565b1115610c0b5760405162461bcd60e51b815260040161048090611f83565b610c168382846116bb565b505050565b6001600160a01b0381166000908152602081905260409020545b919050565b6007546001600160a01b03163314610c645760405162461bcd60e51b815260040161048090612007565b610c8e8260095483670de0b6b3a7640000610c7f91906121c6565b610c8991906121a6565b611896565b5050565b6007546001600160a01b03163314610cbc5760405162461bcd60e51b815260040161048090612007565b60008111610cdc5760405162461bcd60e51b8152600401610480906120ba565b600a55565b6006805461037890612228565b60008060016000610cfd6111d3565b6001600160a01b0390811682526020808301939093526040918201600090812091881681529252902054905082811015610d495760405162461bcd60e51b815260040161048090612075565b610d5f610d546111d3565b856104e786856121e5565b5060019392505050565b33600081815260026020526040812054909183916001600160801b031690610d9090610c1b565b610d9a91906121e5565b1015610db85760405162461bcd60e51b815260040161048090611ee2565b610dc333848461128b565b6007546040516274d72160e51b81526001600160a01b0390911690630e9ae42090610df690339087908790600401611aee565b600060405180830381600087803b158015610e1057600080fd5b505af1158015610e24573d6000803e3d6000fd5b5060019695505050505050565b60075460009081906001600160a01b03163314610e605760405162461bcd60e51b815260040161048090612007565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610e91903090600401611ada565b60206040518083038186803b158015610ea957600080fd5b505afa158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee19190611aa6565b6001600160a01b0385166000908152600260205260409020549091506001600160801b031681610f235760405162461bcd60e51b81526004016104809061203e565b80610f2d86610c1b565b1015610f4b5760405162461bcd60e51b815260040161048090611f83565b610f54856114c0565b6000670de0b6b3a764000060095483610f6d91906121c6565b610f7791906121a6565b905080600a5484610f8891906121e5565b1115610ff457600854610fa5906001600160a01b031687836113be565b856001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea08383604051610fe0929190612131565b60405180910390a2909350915061107b9050565b600854600a54611014916001600160a01b031690889061075490876121e5565b856001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea083600a548661104e91906121e5565b60405161105c929190612131565b60405180910390a281600a548461107391906121e5565b945094505050505b915091565b600a5481565b6007546001600160a01b031633146110b05760405162461bcd60e51b815260040161048090612007565b6001600160a01b0381166000908152600260205260409020546001600160801b0316806110ef5760405162461bcd60e51b815260040161048090611d96565b6110f882611565565b816001600160a01b03167f09c6481cb228ea7f61ceb67c8e708038eb74bbb68cfcc54a9cfca199087ecfb782670de0b6b3a76400006009548561113b91906121c6565b61114591906121a6565b604051611153929190612131565b60405180910390a25050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6008546001600160a01b031681565b6007546000906001600160a01b031633146111c65760405162461bcd60e51b815260040161048090612007565b5060035490565b60095481565b3390565b6001600160a01b0383166111fd5760405162461bcd60e51b815260040161048090611f3f565b6001600160a01b0382166112235760405162461bcd60e51b815260040161048090611c69565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061127e908590612128565b60405180910390a3505050565b6001600160a01b0383166112b15760405162461bcd60e51b815260040161048090611e9d565b6001600160a01b0382166112d75760405162461bcd60e51b815260040161048090611b69565b6112e2838383610c16565b6001600160a01b0383166000908152602081905260409020548181101561131b5760405162461bcd60e51b815260040161048090611d19565b61132582826121e5565b6001600160a01b03808616600090815260208190526040808220939093559085168152908120805484929061135b90849061218e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113a59190612128565b60405180910390a36113b8848484610c16565b50505050565b600080846001600160a01b031663a9059cbb85856040516024016113e3929190611b12565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114319190611abe565b6000604051808303816000865af19150503d806000811461146e576040519150601f19603f3d011682016040523d82523d6000602084013e611473565b606091505b509150915081801561149d57508051158061149d57508080602001905181019061149d9190611a72565b6114b95760405162461bcd60e51b815260040161048090611fba565b5050505050565b6001600160a01b0381166000908152600260205260409020546001600160801b03166114fe5760405162461bcd60e51b815260040161048090611ce2565b6001600160a01b038116600090815260026020526040812054600380546001600160801b039092169283926115349084906121e5565b90915550611544905082826115c1565b506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b038116600090815260026020526040812054600380546001600160801b0390921692839261159b9084906121e5565b9091555050506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b0382166115e75760405162461bcd60e51b815260040161048090611e5c565b6115f382600083610c16565b6001600160a01b0382166000908152602081905260409020548181101561162c5760405162461bcd60e51b815260040161048090611c27565b61163682826121e5565b6001600160a01b038416600090815260208190526040812091909155600480548492906116649084906121e5565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906116a7908690612128565b60405180910390a3610c1683600084610c16565b816116c584610c1b565b10156116e35760405162461bcd60e51b815260040161048090611d5f565b6001600160a01b0383166000908152600260205260409020546001600160801b031615801561173857506001600160a01b038316600090815260026020526040902054600160801b90046001600160801b0316155b156117b757604080516060810182526001600160801b03848116825242811660208084019182528385018681526001600160a01b038916600090815260029092529490209251835491516fffffffffffffffffffffffffffffffff19909216908316178216600160801b9190921602178155905160019091015561187a565b6001600160a01b038316600090815260026020526040812080548492906117e89084906001600160801b0316612163565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508060026000856001600160a01b03166001600160a01b031681526020019081526020016000206001016000828254611844919061218e565b90915550506001600160a01b038316600090815260026020526040902080546001600160801b03428116600160801b0291161790555b816003600082825461188c919061218e565b9091555050505050565b6001600160a01b0382166118bc5760405162461bcd60e51b8152600401610480906120f1565b6118c860008383610c16565b80600460008282546118da919061218e565b90915550506001600160a01b0382166000908152602081905260408120805483929061190790849061218e565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061194a908590612128565b60405180910390a3610c8e60008383610c16565b80356001600160a01b0381168114610c3557600080fd5b600060208284031215611986578081fd5b61198f8261195e565b9392505050565b600080604083850312156119a8578081fd5b6119b18361195e565b91506119bf6020840161195e565b90509250929050565b6000806000606084860312156119dc578081fd5b6119e58461195e565b92506119f36020850161195e565b91506040840135611a0381612279565b809150509250925092565b600080600060608486031215611a22578283fd5b611a2b8461195e565b9250611a396020850161195e565b9150604084013590509250925092565b60008060408385031215611a5b578182fd5b611a648361195e565b946020939093013593505050565b600060208284031215611a83578081fd5b815161198f81612279565b600060208284031215611a9f578081fd5b5035919050565b600060208284031215611ab7578081fd5b5051919050565b60008251611ad08184602087016121fc565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611b558160408501602087016121fc565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526016908201527f556e6f52653a207a65726f206c702062616c616e636500000000000000000000604082015260600190565b60208082526024908201527f556e6f52653a206d696e696d756d20554e4f206361706974616c20756e646572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b60208082526018908201527f556e6f52653a207a65726f20636c61696d20616d6f756e740000000000000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526017908201527f556e6f52653a2062616c616e6365206f766572666c6f77000000000000000000604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b60208082526027908201527f556e6f52653a2054686572652773206e6f2072656d61696e696e6720696e20746040820152661a19481c1bdbdb60ca1b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526034908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e6365206f722070656e64696e67205752000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601a908201527f556e6f52653a206c702062616c616e6365206f766572666c6f77000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b60208082526019908201527f556e6f52653a205269736b506f6f6c20466f7262696464656e00000000000000604082015260600190565b60208082526017908201527f556e6f52653a207a65726f20756e6f2062616c616e6365000000000000000000604082015260600190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c75650000000000604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60006001600160801b0380831681851680830382111561218557612185612263565b01949350505050565b600082198211156121a1576121a1612263565b500190565b6000826121c157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156121e0576121e0612263565b500290565b6000828210156121f7576121f7612263565b500390565b60005b838110156122175781810151838201526020016121ff565b838111156113b85750506000910152565b60028104600182168061223c57607f821691505b6020821081141561225d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b801515811461228757600080fd5b5056fea2646970667358221220cec3930977fe0a60dfa0ba22838a932d35f7b2dd4a0dc22e2cc372d08f511db164736f6c63430008000033a264697066735822122099d7e10802ed9a9df080bbc8d19a8dfb62c8af581ab542d7711919dd1a26228864736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}