{
  "address": "0x708A532d5E8182D806DeFa76e7d2e1d6e89CB4Bd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_claimAssessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestAmount",
          "type": "uint256"
        }
      ],
      "name": "LeftPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSRP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "LogCreateRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawLpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawUnoAmount",
          "type": "uint256"
        }
      ],
      "name": "LogLeaveFromPendingSSRP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "LogLpTransferInSSRP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "LogSetExchangeAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_lastRewardBlock",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_accUnoPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimAmount",
          "type": "uint256"
        }
      ],
      "name": "PolicyClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_SSRP",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "RiskPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "StakedInPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_UNO_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelWithdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAssessor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "createRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "createRiskPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterInPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "getStakedAmountPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalWithdrawPendingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawRequestPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingAmountInUno",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originUnoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leaveFromPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveFromPoolInPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lpTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "pendingUno",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "policyClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "lastRewardBlock",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "accUnoPerShare",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "unoMultiplierPerBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "riskPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimAssessor",
          "type": "address"
        }
      ],
      "name": "setClaimAssessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrateTo",
          "type": "address"
        }
      ],
      "name": "setMigrateTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLPCapital",
          "type": "uint256"
        }
      ],
      "name": "setMinLPCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setRewardMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastWithdrawTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0275654a431809eec9f05f1e2206c130bc5c96ff3038b0acf702411a6f46a2e2",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0x708A532d5E8182D806DeFa76e7d2e1d6e89CB4Bd",
    "transactionIndex": 2,
    "gasUsed": "2392880",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc8d1a37250339bbe628687919f86a887a4ca3adc06993cfecdb8756f1c27aefd",
    "transactionHash": "0x0275654a431809eec9f05f1e2206c130bc5c96ff3038b0acf702411a6f46a2e2",
    "logs": [],
    "blockNumber": 9853557,
    "cumulativeGasUsed": "2629166",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "0xA31158b2fDF02a6E14fbd12F121F03657b92d1B1"
  ],
  "solcInputHash": "50cabb577fc819d7f2df2b36d784cbc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestAmount\",\"type\":\"uint256\"}],\"name\":\"LeftPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSRP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"LogCreateRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawLpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawUnoAmount\",\"type\":\"uint256\"}],\"name\":\"LogLeaveFromPendingSSRP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogLpTransferInSSRP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"LogSetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_lastRewardBlock\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_accUnoPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"PolicyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_SSRP\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"RiskPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakedInPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_UNO_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAssessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"createRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"createRiskPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getStakedAmountPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWithdrawPendingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawRequestPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmountInUno\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originUnoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveFromPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveFromPoolInPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lpTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"pendingUno\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"policyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastRewardBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"accUnoPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"unoMultiplierPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"}],\"name\":\"setClaimAssessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrateTo\",\"type\":\"address\"}],\"name\":\"setMigrateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLPCapital\",\"type\":\"uint256\"}],\"name\":\"setMinLPCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createRiskPool(string,string,address,address,uint256)\":{\"details\":\"create Risk pool with UNO from SSRP owner\"},\"getTotalWithdrawPendingAmount()\":{\"details\":\"get total withdraw request amount in pending for the risk pool in UNO\"},\"getWithdrawRequestPerUser(address)\":{\"details\":\"get withdraw request amount in pending per user in UNO\"},\"leaveFromPending()\":{\"details\":\"user can submit claim again and receive his funds into his wallet after 10 days since last WR.\"},\"leaveFromPoolInPending(uint256)\":{\"details\":\"WR will be in pending for 10 days at least\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleSidedReinsurancePool.sol\":\"SingleSidedReinsurancePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/SingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRiskPoolFactory.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/ISingleSidedReinsurancePool.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SingleSidedReinsurancePool is ISingleSidedReinsurancePool, ReentrancyGuard {\\n    address public owner;\\n    address public claimAssessor;\\n    address private exchangeAgent;\\n    address public migrateTo;\\n\\n    uint256 public constant LOCK_TIME = 1 days;\\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\\n\\n    address public rewarder;\\n    address public override riskPool;\\n    struct PoolInfo {\\n        uint128 lastRewardBlock;\\n        uint128 accUnoPerShare;\\n        uint256 unoMultiplierPerBlock;\\n    }\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    PoolInfo public poolInfo;\\n\\n    event RiskPoolCreated(address indexed _SSRP, address indexed _pool);\\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogUpdatePool(uint128 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogSetExchangeAgent(address indexed _exchangeAgent);\\n    event LogLeaveFromPendingSSRP(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\\n    event LogLpTransferInSSRP(address indexed _from, address indexed _to, uint256 _amount);\\n    event LogCreateRewarder(address indexed _SSRP, address indexed _rewarder, address _currency);\\n\\n    constructor(\\n        address _owner,\\n        address _claimAssessor,\\n        address _exchangeAgent\\n    ) {\\n        owner = _owner;\\n        exchangeAgent = _exchangeAgent;\\n        claimAssessor = _claimAssessor;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyClaimAssessor() {\\n        require(msg.sender == claimAssessor, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit LogSetExchangeAgent(_exchangeAgent);\\n    }\\n\\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyOwner {\\n        require(_rewardMultiplier > 0, \\\"UnoRe: zero value\\\");\\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\\n    }\\n\\n    function setClaimAssessor(address _claimAssessor) external onlyOwner {\\n        require(_claimAssessor != address(0), \\\"UnoRe: zero address\\\");\\n        claimAssessor = _claimAssessor;\\n    }\\n\\n    function setMigrateTo(address _migrateTo) external onlyOwner {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n    }\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external onlyOwner {\\n        require(_minLPCapital > 0, \\\"UnoRe: not allow zero value\\\");\\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\\n    }\\n\\n    /**\\n     * @dev create Risk pool with UNO from SSRP owner\\n     */\\n    function createRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _factory,\\n        address _currency,\\n        uint256 _rewardMultiplier\\n    ) external onlyOwner nonReentrant {\\n        require(riskPool == address(0), \\\"UnoRe: risk pool created already\\\");\\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\\n        poolInfo.lastRewardBlock = uint128(block.number);\\n        poolInfo.accUnoPerShare = 0;\\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\\n        emit RiskPoolCreated(address(this), riskPool);\\n    }\\n\\n    function createRewarder(\\n        address _operator,\\n        address _factory,\\n        address _currency\\n    ) external onlyOwner nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    function migrate() external nonReentrant {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > LOCK_TIME;\\n        IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\\n        IMigration(migrateTo).onMigration(msg.sender, amount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n        userInfo[msg.sender].rewardDebt = 0;\\n    }\\n\\n    function pendingUno(address _to) external view returns (uint256 pending) {\\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\\n        uint128 accUnoPerShare = poolInfo.accUnoPerShare;\\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\\n            accUnoPerShare = accUnoPerShare + uint128((unoReward * ACC_UNO_PRECISION) / tokenSupply);\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    function updatePool() public override {\\n        if (block.number > poolInfo.lastRewardBlock) {\\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\\n            if (tokenSupply > 0) {\\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + uint128(((unoReward * ACC_UNO_PRECISION) / tokenSupply));\\n            }\\n            poolInfo.lastRewardBlock = uint128(block.number);\\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\\n        }\\n    }\\n\\n    function enterInPool(uint256 _amount) external override nonReentrant {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        address token = IRiskPool(riskPool).currency();\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\\n        IRiskPool(riskPool).enter(msg.sender, _amount);\\n        userInfo[msg.sender].rewardDebt =\\n            userInfo[msg.sender].rewardDebt +\\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\\n            ACC_UNO_PRECISION;\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + ((_amount * 1e18) / lpPriceUno);\\n        emit StakedInPool(msg.sender, riskPool, _amount);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\\n        _harvest(msg.sender);\\n        // Withdraw desired amount from pool\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\\n        require(((amount - pendingAmount) * lpPriceUno) / 1e18 >= _amount, \\\"UnoRe: withdraw amount overflow\\\");\\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\\n\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n        emit LeftPool(msg.sender, riskPool, _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending() external override nonReentrant {\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        userInfo[msg.sender].rewardDebt =\\n            accumulatedUno -\\n            ((pendingAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender);\\n        userInfo[msg.sender].amount = amount - withdrawAmount;\\n        emit LogLeaveFromPendingSSRP(msg.sender, withdrawAmount, withdrawAmountInUNO);\\n    }\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        require(msg.sender == address(riskPool), \\\"UnoRe: not allow others transfer\\\");\\n        _harvest(_from);\\n        uint256 amount = userInfo[_from].amount;\\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\\n        require(amount - pendingAmount >= _amount, \\\"UnoRe: balance overflow\\\");\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n        userInfo[_from].amount = amount - _amount;\\n\\n        userInfo[_to].rewardDebt = userInfo[_to].rewardDebt + ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\\n        userInfo[_to].amount = userInfo[_to].amount + _amount;\\n\\n        emit LogLpTransferInSSRP(_from, _to, _amount);\\n    }\\n\\n    function harvest(address _to) external override nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[msg.sender].rewardDebt = accumulatedUno;\\n        uint256 rewardAmount = 0;\\n\\n        if (rewarder != address(0) && _pendingUno != 0) {\\n            rewardAmount = IRewarder(rewarder).onReward(_to, _pendingUno);\\n        }\\n\\n        emit Harvest(msg.sender, _to, rewardAmount);\\n    }\\n\\n    function cancelWithdrawRequest() external nonReentrant {\\n        IRiskPool(riskPool).cancelWithrawRequest(msg.sender);\\n    }\\n\\n    function policyClaim(address _to, uint256 _amount) external onlyClaimAssessor nonReentrant {\\n        require(_to != address(0), \\\"UnoRe: zero address\\\");\\n        require(_amount > 0, \\\"UnoRe: zero amount\\\");\\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_to, _amount);\\n        emit PolicyClaim(_to, realClaimAmount);\\n    }\\n\\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\\n        lpAmount = userInfo[_to].amount;\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\\n    }\\n\\n    /**\\n     * @dev get withdraw request amount in pending per user in UNO\\n     */\\n    function getWithdrawRequestPerUser(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingAmount,\\n            uint256 pendingAmountInUno,\\n            uint256 originUnoAmount,\\n            uint256 requestTime\\n        )\\n    {\\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\\n    }\\n\\n    /**\\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\\n     */\\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\\n    }\\n}\\n\",\"keccak256\":\"0x0f567cc64d9612dad2bc56eef19230524144d07aa383166a8603a893c2e3151d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IMigration {\\n    function onMigration(\\n        address who_,\\n        uint256 amount_,\\n        bytes memory data_\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b25ec77b6df9db73050a67b9ce4147154c5be596b6637d47484fd6236965069\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6e37fd84127d6039965b097e57e45f79630c1313d9d841176ce8a8e2ec16b83b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(\\n        address _operator,\\n        address _currency,\\n        address _pool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x14d54228edcd08203983b293cfa44cc13cf1fb450019172ef57a1ebccf89f4a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to) external returns (uint256, uint256);\\n\\n    function cancelWithrawRequest(address _to) external;\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(\\n        address _to,\\n        address _migrateTo,\\n        bool _isUnLocked\\n    ) external;\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function lpPriceUno() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a5eddf6f3d2f487eefb107a6bbe9547e30f16356a63f63d1cc9bffcf6d97118\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _pool,\\n        address _currency\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x2822333ced0a43d8bf0c0a4a4a0ed6718e2b5cfd55792fd89e5d06211f57898e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISingleSidedReinsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x049a33080ab7bd863f3bcb8faaf66866fbe2066b3be9c4f5a15558c421e95ce7\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200299c3803806200299c833981016040819052620000349162000099565b6001600081905580546001600160a01b039485166001600160a01b031991821617909155600380549285169282169290921790915560028054929093169116179055620000e2565b80516001600160a01b03811681146200009457600080fd5b919050565b600080600060608486031215620000ae578283fd5b620000b9846200007c565b9250620000c9602085016200007c565b9150620000d9604085016200007c565b90509250925092565b6128aa80620000f26000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638fd3ab8011610104578063bc8f8828116100a2578063e08c5de111610071578063e08c5de114610397578063e19e7168146103aa578063e3161ddd146103b2578063e3824a38146103ba576101cf565b8063bc8f882814610377578063c4e5dacf1461037f578063c6e8991514610387578063dcc3e06e1461038f576101cf565b806398c6e760116100de57806398c6e76014610333578063a3bdd6321461033b578063af16d6e014610343578063ba61945714610356576101cf565b80638fd3ab80146102f55780639336f406146102fd57806393b6b86c14610320576101cf565b8063413d9c3a116101715780638395206c1161014b5780638395206c146102b257806389919b71146102c55780638ba04b17146102cd5780638da5cb5b146102e0576101cf565b8063413d9c3a146102735780635a2f3d0914610288578063736ec05c1461029f576101cf565b8063157f71ed116101ad578063157f71ed1461020f57806318a00d8e146102225780631959a002146102355780632e4a014214610260576101cf565b80630bd075a1146101d45780630e5c011e146101e95780630e9ae420146101fc575b600080fd5b6101e76101e236600461220b565b6103cd565b005b6101e76101f736600461205a565b610425565b6101e761020a3660046120e3565b61045e565b6101e761021d36600461205a565b610724565b6101e761023036600461205a565b610796565b61024861024336600461205a565b610830565b6040516102579392919061277c565b60405180910390f35b6101e761026e366004612123565b610851565b61027b6109bb565b6040516102579190612765565b6102906109c2565b6040516102579392919061271e565b6101e76102ad36600461205a565b6109e0565b6101e76102c036600461220b565b610a52565b61027b610caf565b6101e76102db36600461216e565b610cbb565b6102e8610e47565b60405161025791906122ee565b6101e7610e56565b61031061030b36600461205a565b610fcd565b6040516102579493929190612792565b6101e761032e36600461220b565b61110b565b6102e86111ba565b61027b6111c9565b6101e7610351366004612099565b61124b565b61036961036436600461205a565b6113aa565b60405161025792919061276e565b6101e7611465565b6102e86116e2565b6102e86116f1565b6102e8611700565b61027b6103a536600461205a565b61170f565b6101e7611879565b6101e761190a565b6101e76103c836600461220b565b611aa0565b6001546001600160a01b031633146104005760405162461bcd60e51b81526004016103f79061260f565b60405180910390fd5b600081116104205760405162461bcd60e51b81526004016103f79061256a565b600955565b600260005414156104485760405162461bcd60e51b81526004016103f79061267b565b600260005561045681611d7c565b506001600055565b600260005414156104815760405162461bcd60e51b81526004016103f79061267b565b60026000556006546001600160a01b031633146104b05760405162461bcd60e51b81526004016103f7906126e9565b6104b983611d7c565b6001600160a01b03808416600090815260076020526040808220600201546006549151631665744b60e11b815290939190911690632ccae896906105019088906004016122ee565b60606040518083038186803b15801561051957600080fd5b505afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610551919061225e565b50509050828183610562919061282f565b10156105805760405162461bcd60e51b81526004016103f7906124c7565b600854600090670de0b6b3a7640000906105aa90600160801b90046001600160801b031685612810565b6105b491906127f0565b600854909150670de0b6b3a7640000906105de90600160801b90046001600160801b031686612810565b6105e891906127f0565b6105f2908261282f565b6001600160a01b038716600090815260076020526040902060010155610618848461282f565b6001600160a01b038716600090815260076020526040902060020155600854670de0b6b3a76400009061065b90600160801b90046001600160801b031686612810565b61066591906127f0565b6001600160a01b03861660009081526007602052604090206001015461068b91906127d8565b6001600160a01b03861660009081526007602052604090206001810191909155600201546106ba9085906127d8565b6001600160a01b0380871660008181526007602052604090819020600201939093559151908816907fe97af49bf17de46bed3f953a242569bed68114f89f39c1afe4012bba1c5963d49061070f908890612765565b60405180910390a35050600160005550505050565b6001546001600160a01b0316331461074e5760405162461bcd60e51b81526004016103f79061260f565b6001600160a01b0381166107745760405162461bcd60e51b81526004016103f7906123fc565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146107c05760405162461bcd60e51b81526004016103f79061260f565b6001600160a01b0381166107e65760405162461bcd60e51b81526004016103f7906123fc565b600380546001600160a01b0319166001600160a01b0383169081179091556040517fbdca3ec80f8567aeaf30c6168374c798baf11902e9b21c2b8ba3186ffd13012290600090a250565b60076020526000908152604090208054600182015460029092015490919083565b6002546001600160a01b0316331461087b5760405162461bcd60e51b81526004016103f79061260f565b6002600054141561089e5760405162461bcd60e51b81526004016103f79061267b565b60026000556001600160a01b0382166108c95760405162461bcd60e51b81526004016103f7906123fc565b600081116108e95760405162461bcd60e51b81526004016103f7906125a1565b60065460405163172500a160e11b81526000916001600160a01b031690632e4a01429061091c908690869060040161236d565b602060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190612223565b9050826001600160a01b03167f6420c9536b9a539410a930b1fd8d115dc296d8b71426dcc0ab64f2f736b7d59f826040516109a99190612765565b60405180910390a25050600160005550565b6201518081565b6008546009546001600160801b0380831692600160801b9004169083565b6001546001600160a01b03163314610a0a5760405162461bcd60e51b81526004016103f79061260f565b6001600160a01b038116610a305760405162461bcd60e51b81526004016103f7906123fc565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415610a755760405162461bcd60e51b81526004016103f79061267b565b6002600055610a8333611d7c565b336000908152600760209081526040808320600201546006548251627a9fd960e91b815292519194936001600160a01b039091169263f53fb2009260048083019392829003018186803b158015610ad957600080fd5b505afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190612223565b600654604051631665744b60e11b81529192506000916001600160a01b0390911690632ccae89690610b479033906004016122ee565b60606040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b97919061225e565b5050905083670de0b6b3a7640000838386610bb2919061282f565b610bbc9190612810565b610bc691906127f0565b1015610be45760405162461bcd60e51b81526004016103f790612433565b6006546040516323de6d9560e11b81526001600160a01b03909116906347bcdb2a90610c16903390889060040161236d565b600060405180830381600087803b158015610c3057600080fd5b505af1158015610c44573d6000803e3d6000fd5b5050336000818152600760205260409081902042905560065490516001600160a01b0390911693509091507f940a14c75c418e7230a2e65567722d2dda5a6713cf71b369bd0fa219fdc1ac5e90610c9c908890612765565b60405180910390a3505060016000555050565b670de0b6b3a764000081565b6001546001600160a01b03163314610ce55760405162461bcd60e51b81526004016103f79061260f565b60026000541415610d085760405162461bcd60e51b81526004016103f79061267b565b60026000556006546001600160a01b031615610d365760405162461bcd60e51b81526004016103f7906124fe565b604051630d98e31f60e01b81526001600160a01b03841690630d98e31f90610d6c908a908a908a908a9030908a906004016123ae565b602060405180830381600087803b158015610d8657600080fd5b505af1158015610d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbe919061207d565b600680546001600160a01b0319166001600160a01b039283161790819055600880546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117169055600983905560405191169030907f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd5838021790600090a3505060016000555050505050565b6001546001600160a01b031681565b60026000541415610e795760405162461bcd60e51b81526004016103f79061267b565b60026000556004546001600160a01b0316610ea65760405162461bcd60e51b81526004016103f7906123fc565b610eaf33611d7c565b336000908152600760205260408120600281015490549091906201518090610ed7904261282f565b60065460048054604051633613302f60e01b81529490931194506001600160a01b0391821693633613302f93610f14933393911691879101612325565b600060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b50506004805460405163ed59344b60e01b81526001600160a01b03909116935063ed59344b9250610f77913391879101612386565b600060405180830381600087803b158015610f9157600080fd5b505af1158015610fa5573d6000803e3d6000fd5b5050336000908152600760205260408120600281018290556001908101829055905550505050565b6000806000806000600660009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190612223565b600654604051631665744b60e11b81529192506001600160a01b031690632ccae8969061108c9089906004016122ee565b60606040518083038186803b1580156110a457600080fd5b505afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc919061225e565b9196509093509150670de0b6b3a76400006110f78287612810565b61110191906127f0565b9350509193509193565b6001546001600160a01b031633146111355760405162461bcd60e51b81526004016103f79061260f565b600081116111555760405162461bcd60e51b81526004016103f7906126b2565b6006546040516324edae1b60e21b81526001600160a01b03909116906393b6b86c90611185908490600401612765565b600060405180830381600087803b15801561119f57600080fd5b505af11580156111b3573d6000803e3d6000fd5b5050505050565b6004546001600160a01b031681565b6006546040805163e95aa8d360e01b815290516000926001600160a01b03169163e95aa8d3916004808301926020929190829003018186803b15801561120e57600080fd5b505afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112469190612223565b905090565b6001546001600160a01b031633146112755760405162461bcd60e51b81526004016103f79061260f565b600260005414156112985760405162461bcd60e51b81526004016103f79061267b565b60026000556001600160a01b0382166112c35760405162461bcd60e51b81526004016103f790612646565b6040516369ee745160e01b81526001600160a01b038316906369ee7451906112f390869085903090600401612302565b602060405180830381600087803b15801561130d57600080fd5b505af1158015611321573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611345919061207d565b600580546001600160a01b0319166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b906113989085906122ee565b60405180910390a35050600160005550565b6001600160a01b038082166000908152600760209081526040808320600201546006548251627a9fd960e91b81529251949591948694919092169263f53fb2009260048083019392829003018186803b15801561140657600080fd5b505afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190612223565b9050670de0b6b3a76400006114538284612810565b61145d91906127f0565b925050915091565b600260005414156114885760405162461bcd60e51b81526004016103f79061267b565b600260009081553381526007602052604090205462015180906114ab904261282f565b10156114c95760405162461bcd60e51b81526004016103f790612533565b6114d233611d7c565b33600081815260076020526040808220600201546006549151631665744b60e11b815290936001600160a01b0390921691632ccae8969161151691906004016122ee565b60606040518083038186803b15801561152e57600080fd5b505afa158015611542573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611566919061225e565b5050600854909150600090670de0b6b3a76400009061159590600160801b90046001600160801b031685612810565b61159f91906127f0565b600854909150670de0b6b3a7640000906115c990600160801b90046001600160801b031684612810565b6115d391906127f0565b6115dd908261282f565b3360008181526007602052604080822060010193909355600654925163b20ecd1560e01b8152909283926001600160a01b039091169163b20ecd1591611625916004016122ee565b6040805180830381600087803b15801561163e57600080fd5b505af1158015611652573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611676919061223b565b9092509050611685828661282f565b33600081815260076020526040908190206002019290925590517f617c612e91653c86cd4538e3de94b98c8dd628b41e343380d1cf858f95c0674a906116ce908590859061276e565b60405180910390a250506001600055505050565b6006546001600160a01b031681565b6002546001600160a01b031681565b6005546001600160a01b031681565b600080600660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176057600080fd5b505afa158015611774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117989190612223565b6008549091506001600160801b03600160801b820481169116431180156117be57508115155b1561181d576008546000906117dc906001600160801b03164361282f565b6009549091506000906117ef9083612810565b905083611804670de0b6b3a764000083612810565b61180e91906127f0565b61181890846127ad565b925050505b6001600160a01b03841660009081526007602052604090206002810154600190910154670de0b6b3a764000061185c6001600160801b03851684612810565b61186691906127f0565b611870919061282f565b95945050505050565b6002600054141561189c5760405162461bcd60e51b81526004016103f79061267b565b60026000556006546040516306e6829960e51b81526001600160a01b039091169063dcd05320906118d19033906004016122ee565b600060405180830381600087803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b505060016000555050565b6008546001600160801b0316431115611a9e57600654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561196257600080fd5b505afa158015611976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199a9190612223565b90508015611a2a576008546000906119bb906001600160801b03164361282f565b6009549091506000906119ce9083612810565b9050826119e3670de0b6b3a764000083612810565b6119ed91906127f0565b600854611a0a9190600160801b90046001600160801b03166127ad565b600880546001600160801b03928316600160801b02921691909117905550505b600880546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117918290556040517f982b813c7d00a9ffce9441ba40f429b2e4a35068d75532f496d0c63585c2fa6892611a9492818116928692600160801b900490911690612742565b60405180910390a1505b565b60026000541415611ac35760405162461bcd60e51b81526004016103f79061267b565b600260005580611ae55760405162461bcd60e51b81526004016103f7906125d8565b611aed61190a565b6006546040805163e5a6b10f60e01b815290516000926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b158015611b3257600080fd5b505afa158015611b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6a919061207d565b90506000600660009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbc57600080fd5b505afa158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf49190612223565b600654909150611c1190839033906001600160a01b031686611f0e565b600654604051637e348b7d60e01b81526001600160a01b0390911690637e348b7d90611c43903390879060040161236d565b600060405180830381600087803b158015611c5d57600080fd5b505af1158015611c71573d6000803e3d6000fd5b5050600854670de0b6b3a76400009250839150600160801b90046001600160801b0316611c9e8684612810565b611ca89190612810565b611cb291906127f0565b611cbc91906127f0565b33600090815260076020526040902060010154611cd991906127d8565b3360009081526007602052604090206001015580611cff84670de0b6b3a7640000612810565b611d0991906127f0565b33600090815260076020526040902060020154611d2691906127d8565b33600081815260076020526040908190206002019290925560065491516001600160a01b03909216917fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f90611398908790612765565b611d8461190a565b6001600160a01b038116600090815260076020526040812060020154600854909190670de0b6b3a764000090611dca90600160801b90046001600160801b031684612810565b611dd491906127f0565b6001600160a01b03841660009081526007602052604081206001015491925090611dfe908361282f565b336000908152600760205260408120600101849055600554919250906001600160a01b031615801590611e3057508115155b15611ebc5760055460405163186e465160e31b81526001600160a01b039091169063c372328890611e67908890869060040161236d565b602060405180830381600087803b158015611e8157600080fd5b505af1158015611e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb99190612223565b90505b846001600160a01b0316336001600160a01b03167fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec2679783604051611eff9190612765565b60405180910390a35050505050565b600080856001600160a01b03166323b872dd868686604051602401611f3593929190612349565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611f8391906122b5565b6000604051808303816000865af19150503d8060008114611fc0576040519150601f19603f3d011682016040523d82523d6000602084013e611fc5565b606091505b5091509150818015611fef575080511580611fef575080806020019051810190611fef919061214e565b61200b5760405162461bcd60e51b81526004016103f79061246a565b505050505050565b60008083601f840112612024578182fd5b50813567ffffffffffffffff81111561203b578182fd5b60208301915083602082850101111561205357600080fd5b9250929050565b60006020828403121561206b578081fd5b81356120768161285c565b9392505050565b60006020828403121561208e578081fd5b81516120768161285c565b6000806000606084860312156120ad578182fd5b83356120b88161285c565b925060208401356120c88161285c565b915060408401356120d88161285c565b809150509250925092565b6000806000606084860312156120f7578283fd5b83356121028161285c565b925060208401356121128161285c565b929592945050506040919091013590565b60008060408385031215612135578182fd5b82356121408161285c565b946020939093013593505050565b60006020828403121561215f578081fd5b81518015158114612076578182fd5b600080600080600080600060a0888a031215612188578283fd5b873567ffffffffffffffff8082111561219f578485fd5b6121ab8b838c01612013565b909950975060208a01359150808211156121c3578485fd5b506121d08a828b01612013565b90965094505060408801356121e48161285c565b925060608801356121f48161285c565b809250506080880135905092959891949750929550565b60006020828403121561221c578081fd5b5035919050565b600060208284031215612234578081fd5b5051919050565b6000806040838503121561224d578182fd5b505080516020909101519092909150565b600080600060608486031215612272578283fd5b8351925060208401519150604084015190509250925092565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251815b818110156122d557602081860181015185830152016122bb565b818111156122e35782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b6000608082526123c260808301888a61228b565b82810360208401526123d581878961228b565b9150506001600160a01b038085166040840152808416606084015250979650505050505050565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526017908201527f556e6f52653a2062616c616e6365206f766572666c6f77000000000000000000604082015260600190565b6020808252818101527f556e6f52653a207269736b20706f6f6c206372656174656420616c7265616479604082015260600190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c75650000000000604082015260600190565b6020808252818101527f556e6f52653a206e6f7420616c6c6f77206f7468657273207472616e73666572604082015260600190565b6001600160801b039384168152919092166020820152604081019190915260600190565b6001600160801b0393841681526020810192909252909116604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60006001600160801b038083168185168083038211156127cf576127cf612846565b01949350505050565b600082198211156127eb576127eb612846565b500190565b60008261280b57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561282a5761282a612846565b500290565b60008282101561284157612841612846565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461287157600080fd5b5056fea2646970667358221220172e0aca7151e441cb67f4f9391c31076d4908f4de832d01bacbb17fe51d82d164736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638fd3ab8011610104578063bc8f8828116100a2578063e08c5de111610071578063e08c5de114610397578063e19e7168146103aa578063e3161ddd146103b2578063e3824a38146103ba576101cf565b8063bc8f882814610377578063c4e5dacf1461037f578063c6e8991514610387578063dcc3e06e1461038f576101cf565b806398c6e760116100de57806398c6e76014610333578063a3bdd6321461033b578063af16d6e014610343578063ba61945714610356576101cf565b80638fd3ab80146102f55780639336f406146102fd57806393b6b86c14610320576101cf565b8063413d9c3a116101715780638395206c1161014b5780638395206c146102b257806389919b71146102c55780638ba04b17146102cd5780638da5cb5b146102e0576101cf565b8063413d9c3a146102735780635a2f3d0914610288578063736ec05c1461029f576101cf565b8063157f71ed116101ad578063157f71ed1461020f57806318a00d8e146102225780631959a002146102355780632e4a014214610260576101cf565b80630bd075a1146101d45780630e5c011e146101e95780630e9ae420146101fc575b600080fd5b6101e76101e236600461220b565b6103cd565b005b6101e76101f736600461205a565b610425565b6101e761020a3660046120e3565b61045e565b6101e761021d36600461205a565b610724565b6101e761023036600461205a565b610796565b61024861024336600461205a565b610830565b6040516102579392919061277c565b60405180910390f35b6101e761026e366004612123565b610851565b61027b6109bb565b6040516102579190612765565b6102906109c2565b6040516102579392919061271e565b6101e76102ad36600461205a565b6109e0565b6101e76102c036600461220b565b610a52565b61027b610caf565b6101e76102db36600461216e565b610cbb565b6102e8610e47565b60405161025791906122ee565b6101e7610e56565b61031061030b36600461205a565b610fcd565b6040516102579493929190612792565b6101e761032e36600461220b565b61110b565b6102e86111ba565b61027b6111c9565b6101e7610351366004612099565b61124b565b61036961036436600461205a565b6113aa565b60405161025792919061276e565b6101e7611465565b6102e86116e2565b6102e86116f1565b6102e8611700565b61027b6103a536600461205a565b61170f565b6101e7611879565b6101e761190a565b6101e76103c836600461220b565b611aa0565b6001546001600160a01b031633146104005760405162461bcd60e51b81526004016103f79061260f565b60405180910390fd5b600081116104205760405162461bcd60e51b81526004016103f79061256a565b600955565b600260005414156104485760405162461bcd60e51b81526004016103f79061267b565b600260005561045681611d7c565b506001600055565b600260005414156104815760405162461bcd60e51b81526004016103f79061267b565b60026000556006546001600160a01b031633146104b05760405162461bcd60e51b81526004016103f7906126e9565b6104b983611d7c565b6001600160a01b03808416600090815260076020526040808220600201546006549151631665744b60e11b815290939190911690632ccae896906105019088906004016122ee565b60606040518083038186803b15801561051957600080fd5b505afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610551919061225e565b50509050828183610562919061282f565b10156105805760405162461bcd60e51b81526004016103f7906124c7565b600854600090670de0b6b3a7640000906105aa90600160801b90046001600160801b031685612810565b6105b491906127f0565b600854909150670de0b6b3a7640000906105de90600160801b90046001600160801b031686612810565b6105e891906127f0565b6105f2908261282f565b6001600160a01b038716600090815260076020526040902060010155610618848461282f565b6001600160a01b038716600090815260076020526040902060020155600854670de0b6b3a76400009061065b90600160801b90046001600160801b031686612810565b61066591906127f0565b6001600160a01b03861660009081526007602052604090206001015461068b91906127d8565b6001600160a01b03861660009081526007602052604090206001810191909155600201546106ba9085906127d8565b6001600160a01b0380871660008181526007602052604090819020600201939093559151908816907fe97af49bf17de46bed3f953a242569bed68114f89f39c1afe4012bba1c5963d49061070f908890612765565b60405180910390a35050600160005550505050565b6001546001600160a01b0316331461074e5760405162461bcd60e51b81526004016103f79061260f565b6001600160a01b0381166107745760405162461bcd60e51b81526004016103f7906123fc565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146107c05760405162461bcd60e51b81526004016103f79061260f565b6001600160a01b0381166107e65760405162461bcd60e51b81526004016103f7906123fc565b600380546001600160a01b0319166001600160a01b0383169081179091556040517fbdca3ec80f8567aeaf30c6168374c798baf11902e9b21c2b8ba3186ffd13012290600090a250565b60076020526000908152604090208054600182015460029092015490919083565b6002546001600160a01b0316331461087b5760405162461bcd60e51b81526004016103f79061260f565b6002600054141561089e5760405162461bcd60e51b81526004016103f79061267b565b60026000556001600160a01b0382166108c95760405162461bcd60e51b81526004016103f7906123fc565b600081116108e95760405162461bcd60e51b81526004016103f7906125a1565b60065460405163172500a160e11b81526000916001600160a01b031690632e4a01429061091c908690869060040161236d565b602060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190612223565b9050826001600160a01b03167f6420c9536b9a539410a930b1fd8d115dc296d8b71426dcc0ab64f2f736b7d59f826040516109a99190612765565b60405180910390a25050600160005550565b6201518081565b6008546009546001600160801b0380831692600160801b9004169083565b6001546001600160a01b03163314610a0a5760405162461bcd60e51b81526004016103f79061260f565b6001600160a01b038116610a305760405162461bcd60e51b81526004016103f7906123fc565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415610a755760405162461bcd60e51b81526004016103f79061267b565b6002600055610a8333611d7c565b336000908152600760209081526040808320600201546006548251627a9fd960e91b815292519194936001600160a01b039091169263f53fb2009260048083019392829003018186803b158015610ad957600080fd5b505afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190612223565b600654604051631665744b60e11b81529192506000916001600160a01b0390911690632ccae89690610b479033906004016122ee565b60606040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b97919061225e565b5050905083670de0b6b3a7640000838386610bb2919061282f565b610bbc9190612810565b610bc691906127f0565b1015610be45760405162461bcd60e51b81526004016103f790612433565b6006546040516323de6d9560e11b81526001600160a01b03909116906347bcdb2a90610c16903390889060040161236d565b600060405180830381600087803b158015610c3057600080fd5b505af1158015610c44573d6000803e3d6000fd5b5050336000818152600760205260409081902042905560065490516001600160a01b0390911693509091507f940a14c75c418e7230a2e65567722d2dda5a6713cf71b369bd0fa219fdc1ac5e90610c9c908890612765565b60405180910390a3505060016000555050565b670de0b6b3a764000081565b6001546001600160a01b03163314610ce55760405162461bcd60e51b81526004016103f79061260f565b60026000541415610d085760405162461bcd60e51b81526004016103f79061267b565b60026000556006546001600160a01b031615610d365760405162461bcd60e51b81526004016103f7906124fe565b604051630d98e31f60e01b81526001600160a01b03841690630d98e31f90610d6c908a908a908a908a9030908a906004016123ae565b602060405180830381600087803b158015610d8657600080fd5b505af1158015610d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbe919061207d565b600680546001600160a01b0319166001600160a01b039283161790819055600880546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117169055600983905560405191169030907f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd5838021790600090a3505060016000555050505050565b6001546001600160a01b031681565b60026000541415610e795760405162461bcd60e51b81526004016103f79061267b565b60026000556004546001600160a01b0316610ea65760405162461bcd60e51b81526004016103f7906123fc565b610eaf33611d7c565b336000908152600760205260408120600281015490549091906201518090610ed7904261282f565b60065460048054604051633613302f60e01b81529490931194506001600160a01b0391821693633613302f93610f14933393911691879101612325565b600060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b50506004805460405163ed59344b60e01b81526001600160a01b03909116935063ed59344b9250610f77913391879101612386565b600060405180830381600087803b158015610f9157600080fd5b505af1158015610fa5573d6000803e3d6000fd5b5050336000908152600760205260408120600281018290556001908101829055905550505050565b6000806000806000600660009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190612223565b600654604051631665744b60e11b81529192506001600160a01b031690632ccae8969061108c9089906004016122ee565b60606040518083038186803b1580156110a457600080fd5b505afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc919061225e565b9196509093509150670de0b6b3a76400006110f78287612810565b61110191906127f0565b9350509193509193565b6001546001600160a01b031633146111355760405162461bcd60e51b81526004016103f79061260f565b600081116111555760405162461bcd60e51b81526004016103f7906126b2565b6006546040516324edae1b60e21b81526001600160a01b03909116906393b6b86c90611185908490600401612765565b600060405180830381600087803b15801561119f57600080fd5b505af11580156111b3573d6000803e3d6000fd5b5050505050565b6004546001600160a01b031681565b6006546040805163e95aa8d360e01b815290516000926001600160a01b03169163e95aa8d3916004808301926020929190829003018186803b15801561120e57600080fd5b505afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112469190612223565b905090565b6001546001600160a01b031633146112755760405162461bcd60e51b81526004016103f79061260f565b600260005414156112985760405162461bcd60e51b81526004016103f79061267b565b60026000556001600160a01b0382166112c35760405162461bcd60e51b81526004016103f790612646565b6040516369ee745160e01b81526001600160a01b038316906369ee7451906112f390869085903090600401612302565b602060405180830381600087803b15801561130d57600080fd5b505af1158015611321573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611345919061207d565b600580546001600160a01b0319166001600160a01b03928316179081905560405191169030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b906113989085906122ee565b60405180910390a35050600160005550565b6001600160a01b038082166000908152600760209081526040808320600201546006548251627a9fd960e91b81529251949591948694919092169263f53fb2009260048083019392829003018186803b15801561140657600080fd5b505afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190612223565b9050670de0b6b3a76400006114538284612810565b61145d91906127f0565b925050915091565b600260005414156114885760405162461bcd60e51b81526004016103f79061267b565b600260009081553381526007602052604090205462015180906114ab904261282f565b10156114c95760405162461bcd60e51b81526004016103f790612533565b6114d233611d7c565b33600081815260076020526040808220600201546006549151631665744b60e11b815290936001600160a01b0390921691632ccae8969161151691906004016122ee565b60606040518083038186803b15801561152e57600080fd5b505afa158015611542573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611566919061225e565b5050600854909150600090670de0b6b3a76400009061159590600160801b90046001600160801b031685612810565b61159f91906127f0565b600854909150670de0b6b3a7640000906115c990600160801b90046001600160801b031684612810565b6115d391906127f0565b6115dd908261282f565b3360008181526007602052604080822060010193909355600654925163b20ecd1560e01b8152909283926001600160a01b039091169163b20ecd1591611625916004016122ee565b6040805180830381600087803b15801561163e57600080fd5b505af1158015611652573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611676919061223b565b9092509050611685828661282f565b33600081815260076020526040908190206002019290925590517f617c612e91653c86cd4538e3de94b98c8dd628b41e343380d1cf858f95c0674a906116ce908590859061276e565b60405180910390a250506001600055505050565b6006546001600160a01b031681565b6002546001600160a01b031681565b6005546001600160a01b031681565b600080600660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176057600080fd5b505afa158015611774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117989190612223565b6008549091506001600160801b03600160801b820481169116431180156117be57508115155b1561181d576008546000906117dc906001600160801b03164361282f565b6009549091506000906117ef9083612810565b905083611804670de0b6b3a764000083612810565b61180e91906127f0565b61181890846127ad565b925050505b6001600160a01b03841660009081526007602052604090206002810154600190910154670de0b6b3a764000061185c6001600160801b03851684612810565b61186691906127f0565b611870919061282f565b95945050505050565b6002600054141561189c5760405162461bcd60e51b81526004016103f79061267b565b60026000556006546040516306e6829960e51b81526001600160a01b039091169063dcd05320906118d19033906004016122ee565b600060405180830381600087803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b505060016000555050565b6008546001600160801b0316431115611a9e57600654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561196257600080fd5b505afa158015611976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199a9190612223565b90508015611a2a576008546000906119bb906001600160801b03164361282f565b6009549091506000906119ce9083612810565b9050826119e3670de0b6b3a764000083612810565b6119ed91906127f0565b600854611a0a9190600160801b90046001600160801b03166127ad565b600880546001600160801b03928316600160801b02921691909117905550505b600880546fffffffffffffffffffffffffffffffff1916436001600160801b0390811691909117918290556040517f982b813c7d00a9ffce9441ba40f429b2e4a35068d75532f496d0c63585c2fa6892611a9492818116928692600160801b900490911690612742565b60405180910390a1505b565b60026000541415611ac35760405162461bcd60e51b81526004016103f79061267b565b600260005580611ae55760405162461bcd60e51b81526004016103f7906125d8565b611aed61190a565b6006546040805163e5a6b10f60e01b815290516000926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b158015611b3257600080fd5b505afa158015611b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6a919061207d565b90506000600660009054906101000a90046001600160a01b03166001600160a01b031663f53fb2006040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbc57600080fd5b505afa158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf49190612223565b600654909150611c1190839033906001600160a01b031686611f0e565b600654604051637e348b7d60e01b81526001600160a01b0390911690637e348b7d90611c43903390879060040161236d565b600060405180830381600087803b158015611c5d57600080fd5b505af1158015611c71573d6000803e3d6000fd5b5050600854670de0b6b3a76400009250839150600160801b90046001600160801b0316611c9e8684612810565b611ca89190612810565b611cb291906127f0565b611cbc91906127f0565b33600090815260076020526040902060010154611cd991906127d8565b3360009081526007602052604090206001015580611cff84670de0b6b3a7640000612810565b611d0991906127f0565b33600090815260076020526040902060020154611d2691906127d8565b33600081815260076020526040908190206002019290925560065491516001600160a01b03909216917fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f90611398908790612765565b611d8461190a565b6001600160a01b038116600090815260076020526040812060020154600854909190670de0b6b3a764000090611dca90600160801b90046001600160801b031684612810565b611dd491906127f0565b6001600160a01b03841660009081526007602052604081206001015491925090611dfe908361282f565b336000908152600760205260408120600101849055600554919250906001600160a01b031615801590611e3057508115155b15611ebc5760055460405163186e465160e31b81526001600160a01b039091169063c372328890611e67908890869060040161236d565b602060405180830381600087803b158015611e8157600080fd5b505af1158015611e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb99190612223565b90505b846001600160a01b0316336001600160a01b03167fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec2679783604051611eff9190612765565b60405180910390a35050505050565b600080856001600160a01b03166323b872dd868686604051602401611f3593929190612349565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611f8391906122b5565b6000604051808303816000865af19150503d8060008114611fc0576040519150601f19603f3d011682016040523d82523d6000602084013e611fc5565b606091505b5091509150818015611fef575080511580611fef575080806020019051810190611fef919061214e565b61200b5760405162461bcd60e51b81526004016103f79061246a565b505050505050565b60008083601f840112612024578182fd5b50813567ffffffffffffffff81111561203b578182fd5b60208301915083602082850101111561205357600080fd5b9250929050565b60006020828403121561206b578081fd5b81356120768161285c565b9392505050565b60006020828403121561208e578081fd5b81516120768161285c565b6000806000606084860312156120ad578182fd5b83356120b88161285c565b925060208401356120c88161285c565b915060408401356120d88161285c565b809150509250925092565b6000806000606084860312156120f7578283fd5b83356121028161285c565b925060208401356121128161285c565b929592945050506040919091013590565b60008060408385031215612135578182fd5b82356121408161285c565b946020939093013593505050565b60006020828403121561215f578081fd5b81518015158114612076578182fd5b600080600080600080600060a0888a031215612188578283fd5b873567ffffffffffffffff8082111561219f578485fd5b6121ab8b838c01612013565b909950975060208a01359150808211156121c3578485fd5b506121d08a828b01612013565b90965094505060408801356121e48161285c565b925060608801356121f48161285c565b809250506080880135905092959891949750929550565b60006020828403121561221c578081fd5b5035919050565b600060208284031215612234578081fd5b5051919050565b6000806040838503121561224d578182fd5b505080516020909101519092909150565b600080600060608486031215612272578283fd5b8351925060208401519150604084015190509250925092565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251815b818110156122d557602081860181015185830152016122bb565b818111156122e35782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03929092168252602082015260606040820181905260009082015260800190565b6000608082526123c260808301888a61228b565b82810360208401526123d581878961228b565b9150506001600160a01b038085166040840152808416606084015250979650505050505050565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f7700604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526017908201527f556e6f52653a2062616c616e6365206f766572666c6f77000000000000000000604082015260600190565b6020808252818101527f556e6f52653a207269736b20706f6f6c206372656174656420616c7265616479604082015260600190565b60208082526012908201527f556e6f52653a204c6f636b65642074696d650000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a207a65726f2076616c7565000000000000000000000000000000604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a20726577617264657220666163746f7279206e6f206578697374604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c75650000000000604082015260600190565b6020808252818101527f556e6f52653a206e6f7420616c6c6f77206f7468657273207472616e73666572604082015260600190565b6001600160801b039384168152919092166020820152604081019190915260600190565b6001600160801b0393841681526020810192909252909116604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60006001600160801b038083168185168083038211156127cf576127cf612846565b01949350505050565b600082198211156127eb576127eb612846565b500190565b60008261280b57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561282a5761282a612846565b500290565b60008282101561284157612841612846565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461287157600080fd5b5056fea2646970667358221220172e0aca7151e441cb67f4f9391c31076d4908f4de832d01bacbb17fe51d82d164736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createRiskPool(string,string,address,address,uint256)": {
        "details": "create Risk pool with UNO from SSRP owner"
      },
      "getTotalWithdrawPendingAmount()": {
        "details": "get total withdraw request amount in pending for the risk pool in UNO"
      },
      "getWithdrawRequestPerUser(address)": {
        "details": "get withdraw request amount in pending per user in UNO"
      },
      "leaveFromPending()": {
        "details": "user can submit claim again and receive his funds into his wallet after 10 days since last WR."
      },
      "leaveFromPoolInPending(uint256)": {
        "details": "WR will be in pending for 10 days at least"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9468,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9470,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "claimAssessor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9472,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9474,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "migrateTo",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9482,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "rewarder",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9485,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "riskPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9504,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserInfo)9499_storage)"
      },
      {
        "astId": 9507,
        "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(PoolInfo)9492_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)9499_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SingleSidedReinsurancePool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)9499_storage"
      },
      "t_struct(PoolInfo)9492_storage": {
        "encoding": "inplace",
        "label": "struct SingleSidedReinsurancePool.PoolInfo",
        "members": [
          {
            "astId": 9487,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9489,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "accUnoPerShare",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9491,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "unoMultiplierPerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)9499_storage": {
        "encoding": "inplace",
        "label": "struct SingleSidedReinsurancePool.UserInfo",
        "members": [
          {
            "astId": 9494,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "lastWithdrawTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9496,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9498,
            "contract": "contracts/SingleSidedReinsurancePool.sol:SingleSidedReinsurancePool",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}