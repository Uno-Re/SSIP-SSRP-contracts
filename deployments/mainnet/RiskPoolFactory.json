{
  "address": "0xe3Ffa053ae0d84280f01901e2d7813d7523CfCf6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_cohort",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "newRiskPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x57a66b16de983e3c4dbaa1de38b74565c0f1e5818f238082db04c169a5225a20",
  "receipt": {
    "to": null,
    "from": "0x8c3d5c9538256DAB8Eb4B197370574340fe3254F",
    "contractAddress": "0xe3Ffa053ae0d84280f01901e2d7813d7523CfCf6",
    "transactionIndex": 361,
    "gasUsed": "2756395",
    "logsBloom": "0x
    "blockHash": "0x01854918683f71028c334df302d7bcf0d389370967b5db884928c0bf55eaecba",
    "transactionHash": "0x57a66b16de983e3c4dbaa1de38b74565c0f1e5818f238082db04c169a5225a20",
    "logs": [],
    "blockNumber": 15041543,
    "cumulativeGasUsed": "29092519",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3ebcaf228667bed5c20d1da66d1c6dee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cohort\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"newRiskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/RiskPoolFactory.sol\":\"RiskPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/RiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./RiskPoolERC20.sol\\\";\\nimport \\\"./interfaces/ISingleSidedReinsurancePool.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract RiskPool is IRiskPool, RiskPoolERC20 {\\n    // ERC20 attributes\\n    string public name;\\n    string public symbol;\\n\\n    address public SSRP;\\n    address public override currency; // for now we should accept only UNO\\n    uint256 public override lpPriceUno;\\n    uint256 public MIN_LP_CAPITAL = 1e7;\\n\\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _amount, uint256 _amountInUno);\\n    event LogPolicyClaim(address indexed _user, uint256 _amount);\\n    event LogMigrateLP(address indexed _user, address indexed _migrateTo, uint256 _unoAmount);\\n    event LogLeaveFromPending(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _SSRP,\\n        address _currency\\n    ) {\\n        require(_SSRP != address(0), \\\"UnoRe: zero pool address\\\");\\n        name = _name;\\n        symbol = _symbol;\\n        SSRP = _SSRP;\\n        currency = _currency;\\n        lpPriceUno = 1e18;\\n        if (_currency == address(0)) {\\n            MIN_LP_CAPITAL = 7 * 1e15;\\n        }\\n    }\\n\\n    modifier onlySSRP() {\\n        require(msg.sender == SSRP, \\\"UnoRe: RiskPool Forbidden\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function decimals() external view virtual override returns (uint8) {\\n        return IERC20Metadata(currency).decimals();\\n    }\\n\\n    /**\\n     * @dev Users can stake only through Cohort\\n     */\\n    function enter(address _from, uint256 _amount) external override onlySSRP {\\n        _mint(_from, (_amount * 1e18) / lpPriceUno);\\n    }\\n\\n    /**\\n     * @param _amount UNO amount to withdraw\\n     */\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external override onlySSRP {\\n        require(totalSupply() > 0, \\\"UnoRe: There's no remaining in the pool\\\");\\n        uint256 requestAmountInLP = (_amount * 1e18) / lpPriceUno;\\n        require(\\n            (requestAmountInLP + uint256(withdrawRequestPerUser[_to].pendingAmount)) <= balanceOf(_to),\\n            \\\"UnoRe: lp balance overflow\\\"\\n        );\\n        _withdrawRequest(_to, requestAmountInLP, _amount);\\n    }\\n\\n    function leaveFromPending(address _to) external override onlySSRP returns (uint256, uint256) {\\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        uint256 pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\\n        require(cryptoBalance > 0, \\\"UnoRe: zero uno balance\\\");\\n        require(balanceOf(_to) >= pendingAmount, \\\"UnoRe: lp balance overflow\\\");\\n        uint256 pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\\n        if (cryptoBalance - MIN_LP_CAPITAL > pendingAmountInUno) {\\n            _withdrawImplement(_to);\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, pendingAmountInUno);\\n            }\\n            emit LogLeaveFromPending(_to, pendingAmount, pendingAmountInUno);\\n            return (pendingAmount, pendingAmountInUno);\\n        } else {\\n            _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            emit LogLeaveFromPending(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\\n            return (((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n    }\\n\\n    function cancelWithrawRequest(address _to) external override onlySSRP returns (uint256, uint256) {\\n        uint256 _pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\\n        require(_pendingAmount > 0, \\\"UnoRe: zero amount\\\");\\n        _cancelWithdrawRequest(_to);\\n        emit LogCancelWithdrawRequest(_to, _pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\\n        return (_pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\\n    }\\n\\n    function policyClaim(address _to, uint256 _amount) external override onlySSRP returns (uint256 realClaimAmount) {\\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        require(totalSupply() > 0, \\\"UnoRe: zero lp balance\\\");\\n        require(cryptoBalance > MIN_LP_CAPITAL, \\\"UnoRe: minimum UNO capital underflow\\\");\\n        if (cryptoBalance - MIN_LP_CAPITAL > _amount) {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, _amount);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, _amount);\\n            }\\n            realClaimAmount = _amount;\\n            emit LogPolicyClaim(_to, _amount);\\n        } else {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            realClaimAmount = cryptoBalance - MIN_LP_CAPITAL;\\n            emit LogPolicyClaim(_to, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        lpPriceUno = (cryptoBalance * 1e18) / totalSupply(); // UNO value per lp\\n    }\\n\\n    function migrateLP(\\n        address _to,\\n        address _migrateTo,\\n        bool _isUnLocked\\n    ) external override onlySSRP returns (uint256) {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        uint256 migratedAmount;\\n        uint256 cryptoBalance;\\n        if (_isUnLocked && withdrawRequestPerUser[_to].pendingAmount > 0) {\\n            uint256 pendingAmountInUno = (uint256(withdrawRequestPerUser[_to].pendingAmount) * lpPriceUno) / 1e18;\\n            cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n            if (pendingAmountInUno < cryptoBalance - MIN_LP_CAPITAL) {\\n                if (currency != address(0)) {\\n                    TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\\n                } else {\\n                    TransferHelper.safeTransferETH(_to, pendingAmountInUno);\\n                }\\n                migratedAmount += pendingAmountInUno;\\n                _withdrawImplement(_to);\\n            } else {\\n                if (currency != address(0)) {\\n                    TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n                } else {\\n                    TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\\n                }\\n                migratedAmount += cryptoBalance - MIN_LP_CAPITAL;\\n                _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\\n            }\\n        } else {\\n            if (withdrawRequestPerUser[_to].pendingAmount > 0) {\\n                _cancelWithdrawRequest(_to);\\n            }\\n        }\\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        uint256 unoBalance = (balanceOf(_to) * lpPriceUno) / 1e18;\\n        if (unoBalance < cryptoBalance - MIN_LP_CAPITAL) {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _migrateTo, unoBalance);\\n            } else {\\n                TransferHelper.safeTransferETH(_migrateTo, unoBalance);\\n            }\\n            migratedAmount += unoBalance;\\n            emit LogMigrateLP(_to, _migrateTo, unoBalance);\\n        } else {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\\n            } else {\\n                TransferHelper.safeTransferETH(_migrateTo, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            migratedAmount += cryptoBalance - MIN_LP_CAPITAL;\\n            emit LogMigrateLP(_to, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n        _burn(_to, balanceOf(_to));\\n        return migratedAmount;\\n    }\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external override onlySSRP {\\n        require(_minLPCapital > 0, \\\"UnoRe: not allow zero value\\\");\\n        MIN_LP_CAPITAL = _minLPCapital;\\n    }\\n\\n    function getWithdrawRequest(address _to)\\n        external\\n        view\\n        override\\n        onlySSRP\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            uint256(withdrawRequestPerUser[_to].pendingAmount),\\n            uint256(withdrawRequestPerUser[_to].requestTime),\\n            withdrawRequestPerUser[_to].pendingUno\\n        );\\n    }\\n\\n    function getTotalWithdrawRequestAmount() external view override onlySSRP returns (uint256) {\\n        return totalWithdrawPending;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        require(\\n            balanceOf(msg.sender) - uint256(withdrawRequestPerUser[msg.sender].pendingAmount) >= amount,\\n            \\\"ERC20: transfer amount exceeds balance or pending WR\\\"\\n        );\\n        _transfer(msg.sender, recipient, amount);\\n\\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(\\n            balanceOf(sender) - uint256(withdrawRequestPerUser[sender].pendingAmount) >= amount,\\n            \\\"ERC20: transfer amount exceeds balance or pending WR\\\"\\n        );\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(sender, recipient, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x88cc83ec8c77798108f72a6ab2967192bdd3b99d9d2d3891795268225cdd62f1\",\"license\":\"GPL-3.0\"},\"contracts/RiskPoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./interfaces/IRiskPoolERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract RiskPoolERC20 is Context, IRiskPoolERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    struct UserWithdrawRequestInfo {\\n        uint128 pendingAmount;\\n        uint128 requestTime;\\n        uint256 pendingUno;\\n    }\\n    mapping(address => UserWithdrawRequestInfo) internal withdrawRequestPerUser;\\n    uint256 internal totalWithdrawPending;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _withdrawRequest(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _amountInUno\\n    ) internal {\\n        require(balanceOf(_user) >= _amount, \\\"UnoRe: balance overflow\\\");\\n        if (withdrawRequestPerUser[_user].pendingAmount == 0 && withdrawRequestPerUser[_user].requestTime == 0) {\\n            withdrawRequestPerUser[_user] = UserWithdrawRequestInfo({\\n                pendingAmount: uint128(_amount),\\n                requestTime: uint128(block.timestamp),\\n                pendingUno: _amountInUno\\n            });\\n        } else {\\n            withdrawRequestPerUser[_user].pendingAmount += uint128(_amount);\\n            withdrawRequestPerUser[_user].pendingUno += _amountInUno;\\n            withdrawRequestPerUser[_user].requestTime = uint128(block.timestamp);\\n        }\\n        totalWithdrawPending += _amount;\\n    }\\n\\n    function _withdrawImplement(address _user) internal {\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \\\"UnoRe: zero claim amount\\\");\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        _burn(_user, _pendingAmount);\\n        delete withdrawRequestPerUser[_user];\\n    }\\n\\n    function _withdrawImplementIrregular(address _user, uint256 _amount) internal {\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \\\"UnoRe: zero claim amount\\\");\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) >= _amount, \\\"UnoRe: pending amount overflow\\\");\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        _burn(_user, _amount);\\n        delete withdrawRequestPerUser[_user];\\n    }\\n\\n    function _cancelWithdrawRequest(address _user) internal {\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        delete withdrawRequestPerUser[_user];\\n    }\\n}\\n\",\"keccak256\":\"0x22be9405fa2d85d59815750829024eadc31e60870be5a5f86150be82f9ae784a\",\"license\":\"MIT\"},\"contracts/factories/RiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../RiskPool.sol\\\";\\nimport \\\"../interfaces/IRiskPoolFactory.sol\\\";\\n\\ncontract RiskPoolFactory is IRiskPoolFactory {\\n    constructor() {}\\n\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _cohort,\\n        address _currency\\n    ) external override returns (address) {\\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency);\\n        address _riskPoolAddr = address(_riskPool);\\n\\n        return _riskPoolAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x0fd162f950fd8eceb73e8b7fce0a63756b317081b96a247db226b5962e2ad384\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to) external returns (uint256, uint256);\\n\\n    function cancelWithrawRequest(address _to) external returns (uint256, uint256);\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(\\n        address _to,\\n        address _migrateTo,\\n        bool _isUnLocked\\n    ) external returns (uint256);\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function lpPriceUno() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf70acb54582191fcc1287662ea59e713bd4f5b504fc54a1de9278322cc900b67\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IRiskPoolERC20 {\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x4345369c8a97af0b15d96c893d357de8cb09f977db4fbbb09348e0b249e05efe\",\"license\":\"MIT\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _pool,\\n        address _currency\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x2822333ced0a43d8bf0c0a4a4a0ed6718e2b5cfd55792fd89e5d06211f57898e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISingleSidedReinsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x049a33080ab7bd863f3bcb8faaf66866fbe2066b3be9c4f5a15558c421e95ce7\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506130f5806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630d98e31f14610030575b600080fd5b61004361003e366004610123565b610059565b60405161005091906101da565b60405180910390f35b60008087878787878760405161006e906100a6565b61007d969594939291906101fb565b604051809103906000f080158015610099573d6000803e3d6000fd5b5098975050505050505050565b612e698061025783390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100d757600080fd5b919050565b60008083601f8401126100ed578182fd5b50813567ffffffffffffffff811115610104578182fd5b60208301915083602082850101111561011c57600080fd5b9250929050565b6000806000806000806080878903121561013b578182fd5b863567ffffffffffffffff80821115610152578384fd5b61015e8a838b016100dc565b90985096506020890135915080821115610176578384fd5b5061018389828a016100dc565b90955093506101969050604088016100b3565b91506101a4606088016100b3565b90509295509295509295565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60006080825261020f60808301888a6101b0565b82810360208401526102228187896101b0565b91505073ffffffffffffffffffffffffffffffffffffffff808516604084015280841660608401525097965050505050505056fe608060405262989680600a553480156200001857600080fd5b5060405162002e6938038062002e698339810160408190526200003b916200025c565b6001600160a01b0382166200006d5760405162461bcd60e51b81526004016200006490620002e8565b60405180910390fd5b835162000082906005906020870190620000ee565b50825162000098906006906020860190620000ee565b50600780546001600160a01b038085166001600160a01b031992831617909255600880549284169290911682179055670de0b6b3a7640000600955620000e4576618de76816d8000600a555b5050505062000372565b828054620000fc906200031f565b90600052602060002090601f0160209004810192826200012057600085556200016b565b82601f106200013b57805160ff19168380011785556200016b565b828001600101855582156200016b579182015b828111156200016b5782518255916020019190600101906200014e565b50620001799291506200017d565b5090565b5b808211156200017957600081556001016200017e565b80516001600160a01b0381168114620001ac57600080fd5b919050565b600082601f830112620001c2578081fd5b81516001600160401b0380821115620001df57620001df6200035c565b6040516020601f8401601f19168201810183811183821017156200020757620002076200035c565b60405283825285840181018710156200021e578485fd5b8492505b8383101562000241578583018101518284018201529182019162000222565b838311156200025257848185840101525b5095945050505050565b6000806000806080858703121562000272578384fd5b84516001600160401b038082111562000289578586fd5b6200029788838901620001b1565b95506020870151915080821115620002ad578485fd5b50620002bc87828801620001b1565b935050620002cd6040860162000194565b9150620002dd6060860162000194565b905092959194509250565b60208082526018908201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604082015260600190565b6002810460018216806200033457607f821691505b602082108114156200035657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612ae780620003826000396000f3fe60806040526004361061018f5760003560e01c80637e348b7d116100d6578063d7e3655a1161007f578063e5a6b10f11610059578063e5a6b10f14610462578063e95aa8d314610477578063f53fb2001461048c57610196565b8063d7e3655a1461040d578063dcd0532014610422578063dd62ed3e1461044257610196565b8063a457c2d7116100b0578063a457c2d71461039f578063a9059cbb146103bf578063b20ecd15146103df57610196565b80637e348b7d1461034a57806393b6b86c1461036a57806395d89b411461038a57610196565b80632e4a014211610138578063395093511161011257806339509351146102e857806347bcdb2a1461030857806370a082311461032a57610196565b80632e4a014214610286578063313ce567146102a65780633613302f146102c857610196565b806318160ddd1161016957806318160ddd1461021557806323b872dd146102375780632ccae8961461025757610196565b806306fdde031461019b578063095ea7b3146101c657806311ca7399146101f357610196565b3661019657005b600080fd5b3480156101a757600080fd5b506101b06104a1565b6040516101bd9190612247565b60405180910390f35b3480156101d257600080fd5b506101e66101e1366004612139565b61052f565b6040516101bd919061223c565b3480156101ff57600080fd5b5061020861054c565b6040516101bd91906121eb565b34801561022157600080fd5b5061022a61055b565b6040516101bd919061294f565b34801561024357600080fd5b506101e66102523660046120fe565b610561565b34801561026357600080fd5b50610277610272366004612065565b610692565b6040516101bd93929190612966565b34801561029257600080fd5b5061022a6102a1366004612139565b6106fd565b3480156102b257600080fd5b506102bb610a18565b6040516101bd919061297c565b3480156102d457600080fd5b5061022a6102e33660046120b8565b610a9a565b3480156102f457600080fd5b506101e6610303366004612139565b610f79565b34801561031457600080fd5b50610328610323366004612139565b610fc8565b005b34801561033657600080fd5b5061022a610345366004612065565b6110a0565b34801561035657600080fd5b50610328610365366004612139565b6110bf565b34801561037657600080fd5b5061032861038536600461217e565b611117565b34801561039657600080fd5b506101b0611166565b3480156103ab57600080fd5b506101e66103ba366004612139565b611173565b3480156103cb57600080fd5b506101e66103da366004612139565b6111ee565b3480156103eb57600080fd5b506103ff6103fa366004612065565b6112b6565b6040516101bd929190612958565b34801561041957600080fd5b5061022a6115cf565b34801561042e57600080fd5b506103ff61043d366004612065565b6115d5565b34801561044e57600080fd5b5061022a61045d366004612086565b6116db565b34801561046e57600080fd5b50610208611706565b34801561048357600080fd5b5061022a611715565b34801561049857600080fd5b5061022a611749565b600580546104ae90612a4f565b80601f01602080910402602001604051908101604052809291908181526020018280546104da90612a4f565b80156105275780601f106104fc57610100808354040283529160200191610527565b820191906000526020600020905b81548152906001019060200180831161050a57829003601f168201915b505050505081565b600061054361053c61174f565b8484611753565b50600192915050565b6007546001600160a01b031681565b60045490565b6001600160a01b03831660009081526002602052604081205482906001600160801b031661058e866110a0565b6105989190612a0c565b10156105bf5760405162461bcd60e51b81526004016105b6906126e1565b60405180910390fd5b6105ca848484611807565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561060e5760405162461bcd60e51b81526004016105b6906125e6565b610622853361061d8685612a0c565b611753565b6007546040516274d72160e51b81526001600160a01b0390911690630e9ae42090610655908890889088906004016121ff565b600060405180830381600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b50600198975050505050505050565b600754600090819081906001600160a01b031633146106c35760405162461bcd60e51b81526004016105b690612816565b5050506001600160a01b0316600090815260026020526040902080546001909101546001600160801b0380831693600160801b9093041691565b6007546000906001600160a01b0316331461072a5760405162461bcd60e51b81526004016105b690612816565b6008546000906001600160a01b031661074357476107c3565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906107739030906004016121eb565b60206040518083038186803b15801561078b57600080fd5b505afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190612196565b905060006107cf61055b565b116107ec5760405162461bcd60e51b81526004016105b6906122bd565b600a54811161080d5760405162461bcd60e51b81526004016105b6906122f4565b82600a548261081c9190612a0c565b11156108a2576008546001600160a01b03161561084f5760085461084a906001600160a01b0316858561193a565b610859565b6108598484611a3c565b829150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def36284604051610895919061294f565b60405180910390a2610952565b6008546001600160a01b0316156108dd57600854600a546108d8916001600160a01b03169086906108d39085612a0c565b61193a565b6108f4565b6108f484600a54836108ef9190612a0c565b611a3c565b600a546109019082612a0c565b9150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def362600a548361093c9190612a0c565b604051610949919061294f565b60405180910390a25b6008546001600160a01b031661096857476109e8565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906109989030906004016121eb565b60206040518083038186803b1580156109b057600080fd5b505afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190612196565b90506109f261055b565b610a0482670de0b6b3a76400006129ed565b610a0e91906129cd565b6009555092915050565b6008546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9591906121ae565b905090565b6007546000906001600160a01b03163314610ac75760405162461bcd60e51b81526004016105b690612816565b6001600160a01b038316610aed5760405162461bcd60e51b81526004016105b6906123bc565b600080838015610b1d57506001600160a01b0386166000908152600260205260409020546001600160801b031615155b15610d05576009546001600160a01b0387166000908152600260205260408120549091670de0b6b3a764000091610b5d91906001600160801b03166129ed565b610b6791906129cd565b6008549091506001600160a01b0316610b805747610c00565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190610bb09030906004016121eb565b60206040518083038186803b158015610bc857600080fd5b505afa158015610bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c009190612196565b9150600a5482610c109190612a0c565b811015610c68576008546001600160a01b031615610c4457600854610c3f906001600160a01b0316888361193a565b610c4e565b610c4e8782611a3c565b610c5881846129b5565b9250610c6387611ac9565b610cff565b6008546001600160a01b031615610c9e57600854600a54610c99916001600160a01b03169089906108d39086612a0c565b610cb0565b610cb087600a54846108ef9190612a0c565b600a54610cbd9083612a0c565b610cc790846129b5565b9250610cff87600954600a5485610cde9190612a0c565b610cf090670de0b6b3a76400006129ed565b610cfa91906129cd565b611b6e565b50610d35565b6001600160a01b0386166000908152600260205260409020546001600160801b031615610d3557610d3586611c55565b6008546001600160a01b0316610d4b5747610dcb565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190610d7b9030906004016121eb565b60206040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190612196565b90506000670de0b6b3a7640000600954610de4896110a0565b610dee91906129ed565b610df891906129cd565b9050600a5482610e089190612a0c565b811015610ea2576008546001600160a01b031615610e3c57600854610e37906001600160a01b0316878361193a565b610e46565b610e468682611a3c565b610e5081846129b5565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d541981983604051610e95919061294f565b60405180910390a3610f5c565b6008546001600160a01b031615610ed857600854600a54610ed3916001600160a01b03169088906108d39086612a0c565b610eea565b610eea86600a54846108ef9190612a0c565b600a54610ef79083612a0c565b610f0190846129b5565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d5419819600a5485610f469190612a0c565b604051610f53919061294f565b60405180910390a35b610f6e87610f69896110a0565b611cb1565b509095945050505050565b6000610543610f8661174f565b848460016000610f9461174f565b6001600160a01b03908116825260208083019390935260409182016000908120918b168152925290205461061d91906129b5565b6007546001600160a01b03163314610ff25760405162461bcd60e51b81526004016105b690612816565b6000610ffc61055b565b116110195760405162461bcd60e51b81526004016105b690612589565b60095460009061103183670de0b6b3a76400006129ed565b61103b91906129cd565b9050611046836110a0565b6001600160a01b038416600090815260026020526040902054611072906001600160801b0316836129b5565b11156110905760405162461bcd60e51b81526004016105b690612782565b61109b838284611dab565b505050565b6001600160a01b0381166000908152602081905260409020545b919050565b6007546001600160a01b031633146110e95760405162461bcd60e51b81526004016105b690612816565b6111138260095483670de0b6b3a764000061110491906129ed565b61110e91906129cd565b611f86565b5050565b6007546001600160a01b031633146111415760405162461bcd60e51b81526004016105b690612816565b600081116111615760405162461bcd60e51b81526004016105b6906128e1565b600a55565b600680546104ae90612a4f565b6000806001600061118261174f565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156111ce5760405162461bcd60e51b81526004016105b690612884565b6111e46111d961174f565b8561061d8685612a0c565b5060019392505050565b33600081815260026020526040812054909183916001600160801b031690611215906110a0565b61121f9190612a0c565b101561123d5760405162461bcd60e51b81526004016105b6906126e1565b611248338484611807565b6007546040516274d72160e51b81526001600160a01b0390911690630e9ae4209061127b903390879087906004016121ff565b600060405180830381600087803b15801561129557600080fd5b505af11580156112a9573d6000803e3d6000fd5b5060019695505050505050565b60075460009081906001600160a01b031633146112e55760405162461bcd60e51b81526004016105b690612816565b6008546000906001600160a01b03166112fe574761137e565b6008546040516370a0823160e01b81526001600160a01b03909116906370a082319061132e9030906004016121eb565b60206040518083038186803b15801561134657600080fd5b505afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e9190612196565b6001600160a01b0385166000908152600260205260409020549091506001600160801b0316816113c05760405162461bcd60e51b81526004016105b69061284d565b806113ca866110a0565b10156113e85760405162461bcd60e51b81526004016105b690612782565b6000670de0b6b3a76400006009548361140191906129ed565b61140b91906129cd565b905080600a548461141c9190612a0c565b11156114b15761142b86611ac9565b6008546001600160a01b03161561145857600854611453906001600160a01b0316878361193a565b611462565b6114628682611a3c565b856001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0838360405161149d929190612958565b60405180910390a290935091506115ca9050565b6114c686600954600a5486610cde9190612a0c565b6008546001600160a01b0316156114fc57600854600a546114f7916001600160a01b03169088906108d39087612a0c565b61150e565b61150e86600a54856108ef9190612a0c565b856001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0600954600a548661154a9190612a0c565b61155c90670de0b6b3a76400006129ed565b61156691906129cd565b600a546115739087612a0c565b604051611581929190612958565b60405180910390a2600954600a546115999085612a0c565b6115ab90670de0b6b3a76400006129ed565b6115b591906129cd565b600a546115c29085612a0c565b945094505050505b915091565b600a5481565b60075460009081906001600160a01b031633146116045760405162461bcd60e51b81526004016105b690612816565b6001600160a01b0383166000908152600260205260409020546001600160801b0316806116435760405162461bcd60e51b81526004016105b69061251b565b61164c84611c55565b836001600160a01b03167f09c6481cb228ea7f61ceb67c8e708038eb74bbb68cfcc54a9cfca199087ecfb782670de0b6b3a76400006009548561168f91906129ed565b61169991906129cd565b6040516116a7929190612958565b60405180910390a280670de0b6b3a7640000600954836116c791906129ed565b6116d191906129cd565b9250925050915091565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6008546001600160a01b031681565b6007546000906001600160a01b031633146117425760405162461bcd60e51b81526004016105b690612816565b5060035490565b60095481565b3390565b6001600160a01b0383166117795760405162461bcd60e51b81526004016105b69061273e565b6001600160a01b03821661179f5760405162461bcd60e51b81526004016105b69061237a565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906117fa90859061294f565b60405180910390a3505050565b6001600160a01b03831661182d5760405162461bcd60e51b81526004016105b690612684565b6001600160a01b0382166118535760405162461bcd60e51b81526004016105b69061227a565b61185e83838361109b565b6001600160a01b038316600090815260208190526040902054818110156118975760405162461bcd60e51b81526004016105b69061242a565b6118a18282612a0c565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906118d79084906129b5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611921919061294f565b60405180910390a361193484848461109b565b50505050565b600080846001600160a01b031663a9059cbb858560405160240161195f929190612223565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516119ad91906121cf565b6000604051808303816000865af19150503d80600081146119ea576040519150601f19603f3d011682016040523d82523d6000602084013e6119ef565b606091505b5091509150818015611a19575080511580611a19575080806020019051810190611a199190612162565b611a355760405162461bcd60e51b81526004016105b6906127b9565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051611a6691906121cf565b60006040518083038185875af1925050503d8060008114611aa3576040519150601f19603f3d011682016040523d82523d6000602084013e611aa8565b606091505b505090508061109b5760405162461bcd60e51b81526004016105b690612487565b6001600160a01b0381166000908152600260205260409020546001600160801b0316611b075760405162461bcd60e51b81526004016105b6906123f3565b6001600160a01b038116600090815260026020526040812054600380546001600160801b03909216928392611b3d908490612a0c565b90915550611b4d90508282611cb1565b506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b0382166000908152600260205260409020546001600160801b0316611bac5760405162461bcd60e51b81526004016105b6906123f3565b6001600160a01b0382166000908152600260205260409020546001600160801b0316811115611bed5760405162461bcd60e51b81526004016105b690612552565b6001600160a01b038216600090815260026020526040812054600380546001600160801b03909216928392611c23908490612a0c565b90915550611c3390508383611cb1565b50506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b038116600090815260026020526040812054600380546001600160801b03909216928392611c8b908490612a0c565b9091555050506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b038216611cd75760405162461bcd60e51b81526004016105b690612643565b611ce38260008361109b565b6001600160a01b03821660009081526020819052604090205481811015611d1c5760405162461bcd60e51b81526004016105b690612338565b611d268282612a0c565b6001600160a01b03841660009081526020819052604081209190915560048054849290611d54908490612a0c565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611d9790869061294f565b60405180910390a361109b8360008461109b565b81611db5846110a0565b1015611dd35760405162461bcd60e51b81526004016105b6906124e4565b6001600160a01b0383166000908152600260205260409020546001600160801b0316158015611e2857506001600160a01b038316600090815260026020526040902054600160801b90046001600160801b0316155b15611ea757604080516060810182526001600160801b03848116825242811660208084019182528385018681526001600160a01b038916600090815260029092529490209251835491516fffffffffffffffffffffffffffffffff19909216908316178216600160801b91909216021781559051600190910155611f6a565b6001600160a01b03831660009081526002602052604081208054849290611ed89084906001600160801b031661298a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508060026000856001600160a01b03166001600160a01b031681526020019081526020016000206001016000828254611f3491906129b5565b90915550506001600160a01b038316600090815260026020526040902080546001600160801b03428116600160801b0291161790555b8160036000828254611f7c91906129b5565b9091555050505050565b6001600160a01b038216611fac5760405162461bcd60e51b81526004016105b690612918565b611fb86000838361109b565b8060046000828254611fca91906129b5565b90915550506001600160a01b03821660009081526020819052604081208054839290611ff79084906129b5565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061203a90859061294f565b60405180910390a36111136000838361109b565b80356001600160a01b03811681146110ba57600080fd5b600060208284031215612076578081fd5b61207f8261204e565b9392505050565b60008060408385031215612098578081fd5b6120a18361204e565b91506120af6020840161204e565b90509250929050565b6000806000606084860312156120cc578081fd5b6120d58461204e565b92506120e36020850161204e565b915060408401356120f381612aa0565b809150509250925092565b600080600060608486031215612112578283fd5b61211b8461204e565b92506121296020850161204e565b9150604084013590509250925092565b6000806040838503121561214b578182fd5b6121548361204e565b946020939093013593505050565b600060208284031215612173578081fd5b815161207f81612aa0565b60006020828403121561218f578081fd5b5035919050565b6000602082840312156121a7578081fd5b5051919050565b6000602082840312156121bf578081fd5b815160ff8116811461207f578182fd5b600082516121e1818460208701612a23565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152612266816040850160208701612a23565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526016908201527f556e6f52653a207a65726f206c702062616c616e636500000000000000000000604082015260600190565b60208082526024908201527f556e6f52653a206d696e696d756d20554e4f206361706974616c20756e646572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b60208082526018908201527f556e6f52653a207a65726f20636c61696d20616d6f756e740000000000000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e63650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526017908201527f556e6f52653a2062616c616e6365206f766572666c6f77000000000000000000604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b6020808252601e908201527f556e6f52653a2070656e64696e6720616d6f756e74206f766572666c6f770000604082015260600190565b60208082526027908201527f556e6f52653a2054686572652773206e6f2072656d61696e696e6720696e207460408201527f686520706f6f6c00000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160408201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e6365206f722070656e64696e67205752000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601a908201527f556e6f52653a206c702062616c616e6365206f766572666c6f77000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b60208082526019908201527f556e6f52653a205269736b506f6f6c20466f7262696464656e00000000000000604082015260600190565b60208082526017908201527f556e6f52653a207a65726f20756e6f2062616c616e6365000000000000000000604082015260600190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c75650000000000604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60006001600160801b038083168185168083038211156129ac576129ac612a8a565b01949350505050565b600082198211156129c8576129c8612a8a565b500190565b6000826129e857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612a0757612a07612a8a565b500290565b600082821015612a1e57612a1e612a8a565b500390565b60005b83811015612a3e578181015183820152602001612a26565b838111156119345750506000910152565b600281046001821680612a6357607f821691505b60208210811415612a8457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8015158114612aae57600080fd5b5056fea2646970667358221220cdef67bd44d9d1227d95070267800e18b9f289123ed2fdf7c85b60c2fe92bd4e64736f6c63430008000033a264697066735822122022ee3f59f39858b28f1a1de690689362734a8c6b90a5a8231ba0e0c0b23c02d064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630d98e31f14610030575b600080fd5b61004361003e366004610123565b610059565b60405161005091906101da565b60405180910390f35b60008087878787878760405161006e906100a6565b61007d969594939291906101fb565b604051809103906000f080158015610099573d6000803e3d6000fd5b5098975050505050505050565b612e698061025783390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100d757600080fd5b919050565b60008083601f8401126100ed578182fd5b50813567ffffffffffffffff811115610104578182fd5b60208301915083602082850101111561011c57600080fd5b9250929050565b6000806000806000806080878903121561013b578182fd5b863567ffffffffffffffff80821115610152578384fd5b61015e8a838b016100dc565b90985096506020890135915080821115610176578384fd5b5061018389828a016100dc565b90955093506101969050604088016100b3565b91506101a4606088016100b3565b90509295509295509295565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60006080825261020f60808301888a6101b0565b82810360208401526102228187896101b0565b91505073ffffffffffffffffffffffffffffffffffffffff808516604084015280841660608401525097965050505050505056fe608060405262989680600a553480156200001857600080fd5b5060405162002e6938038062002e698339810160408190526200003b916200025c565b6001600160a01b0382166200006d5760405162461bcd60e51b81526004016200006490620002e8565b60405180910390fd5b835162000082906005906020870190620000ee565b50825162000098906006906020860190620000ee565b50600780546001600160a01b038085166001600160a01b031992831617909255600880549284169290911682179055670de0b6b3a7640000600955620000e4576618de76816d8000600a555b5050505062000372565b828054620000fc906200031f565b90600052602060002090601f0160209004810192826200012057600085556200016b565b82601f106200013b57805160ff19168380011785556200016b565b828001600101855582156200016b579182015b828111156200016b5782518255916020019190600101906200014e565b50620001799291506200017d565b5090565b5b808211156200017957600081556001016200017e565b80516001600160a01b0381168114620001ac57600080fd5b919050565b600082601f830112620001c2578081fd5b81516001600160401b0380821115620001df57620001df6200035c565b6040516020601f8401601f19168201810183811183821017156200020757620002076200035c565b60405283825285840181018710156200021e578485fd5b8492505b8383101562000241578583018101518284018201529182019162000222565b838311156200025257848185840101525b5095945050505050565b6000806000806080858703121562000272578384fd5b84516001600160401b038082111562000289578586fd5b6200029788838901620001b1565b95506020870151915080821115620002ad578485fd5b50620002bc87828801620001b1565b935050620002cd6040860162000194565b9150620002dd6060860162000194565b905092959194509250565b60208082526018908201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604082015260600190565b6002810460018216806200033457607f821691505b602082108114156200035657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612ae780620003826000396000f3fe60806040526004361061018f5760003560e01c80637e348b7d116100d6578063d7e3655a1161007f578063e5a6b10f11610059578063e5a6b10f14610462578063e95aa8d314610477578063f53fb2001461048c57610196565b8063d7e3655a1461040d578063dcd0532014610422578063dd62ed3e1461044257610196565b8063a457c2d7116100b0578063a457c2d71461039f578063a9059cbb146103bf578063b20ecd15146103df57610196565b80637e348b7d1461034a57806393b6b86c1461036a57806395d89b411461038a57610196565b80632e4a014211610138578063395093511161011257806339509351146102e857806347bcdb2a1461030857806370a082311461032a57610196565b80632e4a014214610286578063313ce567146102a65780633613302f146102c857610196565b806318160ddd1161016957806318160ddd1461021557806323b872dd146102375780632ccae8961461025757610196565b806306fdde031461019b578063095ea7b3146101c657806311ca7399146101f357610196565b3661019657005b600080fd5b3480156101a757600080fd5b506101b06104a1565b6040516101bd9190612247565b60405180910390f35b3480156101d257600080fd5b506101e66101e1366004612139565b61052f565b6040516101bd919061223c565b3480156101ff57600080fd5b5061020861054c565b6040516101bd91906121eb565b34801561022157600080fd5b5061022a61055b565b6040516101bd919061294f565b34801561024357600080fd5b506101e66102523660046120fe565b610561565b34801561026357600080fd5b50610277610272366004612065565b610692565b6040516101bd93929190612966565b34801561029257600080fd5b5061022a6102a1366004612139565b6106fd565b3480156102b257600080fd5b506102bb610a18565b6040516101bd919061297c565b3480156102d457600080fd5b5061022a6102e33660046120b8565b610a9a565b3480156102f457600080fd5b506101e6610303366004612139565b610f79565b34801561031457600080fd5b50610328610323366004612139565b610fc8565b005b34801561033657600080fd5b5061022a610345366004612065565b6110a0565b34801561035657600080fd5b50610328610365366004612139565b6110bf565b34801561037657600080fd5b5061032861038536600461217e565b611117565b34801561039657600080fd5b506101b0611166565b3480156103ab57600080fd5b506101e66103ba366004612139565b611173565b3480156103cb57600080fd5b506101e66103da366004612139565b6111ee565b3480156103eb57600080fd5b506103ff6103fa366004612065565b6112b6565b6040516101bd929190612958565b34801561041957600080fd5b5061022a6115cf565b34801561042e57600080fd5b506103ff61043d366004612065565b6115d5565b34801561044e57600080fd5b5061022a61045d366004612086565b6116db565b34801561046e57600080fd5b50610208611706565b34801561048357600080fd5b5061022a611715565b34801561049857600080fd5b5061022a611749565b600580546104ae90612a4f565b80601f01602080910402602001604051908101604052809291908181526020018280546104da90612a4f565b80156105275780601f106104fc57610100808354040283529160200191610527565b820191906000526020600020905b81548152906001019060200180831161050a57829003601f168201915b505050505081565b600061054361053c61174f565b8484611753565b50600192915050565b6007546001600160a01b031681565b60045490565b6001600160a01b03831660009081526002602052604081205482906001600160801b031661058e866110a0565b6105989190612a0c565b10156105bf5760405162461bcd60e51b81526004016105b6906126e1565b60405180910390fd5b6105ca848484611807565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561060e5760405162461bcd60e51b81526004016105b6906125e6565b610622853361061d8685612a0c565b611753565b6007546040516274d72160e51b81526001600160a01b0390911690630e9ae42090610655908890889088906004016121ff565b600060405180830381600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b50600198975050505050505050565b600754600090819081906001600160a01b031633146106c35760405162461bcd60e51b81526004016105b690612816565b5050506001600160a01b0316600090815260026020526040902080546001909101546001600160801b0380831693600160801b9093041691565b6007546000906001600160a01b0316331461072a5760405162461bcd60e51b81526004016105b690612816565b6008546000906001600160a01b031661074357476107c3565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906107739030906004016121eb565b60206040518083038186803b15801561078b57600080fd5b505afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190612196565b905060006107cf61055b565b116107ec5760405162461bcd60e51b81526004016105b6906122bd565b600a54811161080d5760405162461bcd60e51b81526004016105b6906122f4565b82600a548261081c9190612a0c565b11156108a2576008546001600160a01b03161561084f5760085461084a906001600160a01b0316858561193a565b610859565b6108598484611a3c565b829150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def36284604051610895919061294f565b60405180910390a2610952565b6008546001600160a01b0316156108dd57600854600a546108d8916001600160a01b03169086906108d39085612a0c565b61193a565b6108f4565b6108f484600a54836108ef9190612a0c565b611a3c565b600a546109019082612a0c565b9150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def362600a548361093c9190612a0c565b604051610949919061294f565b60405180910390a25b6008546001600160a01b031661096857476109e8565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906109989030906004016121eb565b60206040518083038186803b1580156109b057600080fd5b505afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190612196565b90506109f261055b565b610a0482670de0b6b3a76400006129ed565b610a0e91906129cd565b6009555092915050565b6008546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9591906121ae565b905090565b6007546000906001600160a01b03163314610ac75760405162461bcd60e51b81526004016105b690612816565b6001600160a01b038316610aed5760405162461bcd60e51b81526004016105b6906123bc565b600080838015610b1d57506001600160a01b0386166000908152600260205260409020546001600160801b031615155b15610d05576009546001600160a01b0387166000908152600260205260408120549091670de0b6b3a764000091610b5d91906001600160801b03166129ed565b610b6791906129cd565b6008549091506001600160a01b0316610b805747610c00565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190610bb09030906004016121eb565b60206040518083038186803b158015610bc857600080fd5b505afa158015610bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c009190612196565b9150600a5482610c109190612a0c565b811015610c68576008546001600160a01b031615610c4457600854610c3f906001600160a01b0316888361193a565b610c4e565b610c4e8782611a3c565b610c5881846129b5565b9250610c6387611ac9565b610cff565b6008546001600160a01b031615610c9e57600854600a54610c99916001600160a01b03169089906108d39086612a0c565b610cb0565b610cb087600a54846108ef9190612a0c565b600a54610cbd9083612a0c565b610cc790846129b5565b9250610cff87600954600a5485610cde9190612a0c565b610cf090670de0b6b3a76400006129ed565b610cfa91906129cd565b611b6e565b50610d35565b6001600160a01b0386166000908152600260205260409020546001600160801b031615610d3557610d3586611c55565b6008546001600160a01b0316610d4b5747610dcb565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190610d7b9030906004016121eb565b60206040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190612196565b90506000670de0b6b3a7640000600954610de4896110a0565b610dee91906129ed565b610df891906129cd565b9050600a5482610e089190612a0c565b811015610ea2576008546001600160a01b031615610e3c57600854610e37906001600160a01b0316878361193a565b610e46565b610e468682611a3c565b610e5081846129b5565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d541981983604051610e95919061294f565b60405180910390a3610f5c565b6008546001600160a01b031615610ed857600854600a54610ed3916001600160a01b03169088906108d39086612a0c565b610eea565b610eea86600a54846108ef9190612a0c565b600a54610ef79083612a0c565b610f0190846129b5565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d5419819600a5485610f469190612a0c565b604051610f53919061294f565b60405180910390a35b610f6e87610f69896110a0565b611cb1565b509095945050505050565b6000610543610f8661174f565b848460016000610f9461174f565b6001600160a01b03908116825260208083019390935260409182016000908120918b168152925290205461061d91906129b5565b6007546001600160a01b03163314610ff25760405162461bcd60e51b81526004016105b690612816565b6000610ffc61055b565b116110195760405162461bcd60e51b81526004016105b690612589565b60095460009061103183670de0b6b3a76400006129ed565b61103b91906129cd565b9050611046836110a0565b6001600160a01b038416600090815260026020526040902054611072906001600160801b0316836129b5565b11156110905760405162461bcd60e51b81526004016105b690612782565b61109b838284611dab565b505050565b6001600160a01b0381166000908152602081905260409020545b919050565b6007546001600160a01b031633146110e95760405162461bcd60e51b81526004016105b690612816565b6111138260095483670de0b6b3a764000061110491906129ed565b61110e91906129cd565b611f86565b5050565b6007546001600160a01b031633146111415760405162461bcd60e51b81526004016105b690612816565b600081116111615760405162461bcd60e51b81526004016105b6906128e1565b600a55565b600680546104ae90612a4f565b6000806001600061118261174f565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156111ce5760405162461bcd60e51b81526004016105b690612884565b6111e46111d961174f565b8561061d8685612a0c565b5060019392505050565b33600081815260026020526040812054909183916001600160801b031690611215906110a0565b61121f9190612a0c565b101561123d5760405162461bcd60e51b81526004016105b6906126e1565b611248338484611807565b6007546040516274d72160e51b81526001600160a01b0390911690630e9ae4209061127b903390879087906004016121ff565b600060405180830381600087803b15801561129557600080fd5b505af11580156112a9573d6000803e3d6000fd5b5060019695505050505050565b60075460009081906001600160a01b031633146112e55760405162461bcd60e51b81526004016105b690612816565b6008546000906001600160a01b03166112fe574761137e565b6008546040516370a0823160e01b81526001600160a01b03909116906370a082319061132e9030906004016121eb565b60206040518083038186803b15801561134657600080fd5b505afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e9190612196565b6001600160a01b0385166000908152600260205260409020549091506001600160801b0316816113c05760405162461bcd60e51b81526004016105b69061284d565b806113ca866110a0565b10156113e85760405162461bcd60e51b81526004016105b690612782565b6000670de0b6b3a76400006009548361140191906129ed565b61140b91906129cd565b905080600a548461141c9190612a0c565b11156114b15761142b86611ac9565b6008546001600160a01b03161561145857600854611453906001600160a01b0316878361193a565b611462565b6114628682611a3c565b856001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0838360405161149d929190612958565b60405180910390a290935091506115ca9050565b6114c686600954600a5486610cde9190612a0c565b6008546001600160a01b0316156114fc57600854600a546114f7916001600160a01b03169088906108d39087612a0c565b61150e565b61150e86600a54856108ef9190612a0c565b856001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0600954600a548661154a9190612a0c565b61155c90670de0b6b3a76400006129ed565b61156691906129cd565b600a546115739087612a0c565b604051611581929190612958565b60405180910390a2600954600a546115999085612a0c565b6115ab90670de0b6b3a76400006129ed565b6115b591906129cd565b600a546115c29085612a0c565b945094505050505b915091565b600a5481565b60075460009081906001600160a01b031633146116045760405162461bcd60e51b81526004016105b690612816565b6001600160a01b0383166000908152600260205260409020546001600160801b0316806116435760405162461bcd60e51b81526004016105b69061251b565b61164c84611c55565b836001600160a01b03167f09c6481cb228ea7f61ceb67c8e708038eb74bbb68cfcc54a9cfca199087ecfb782670de0b6b3a76400006009548561168f91906129ed565b61169991906129cd565b6040516116a7929190612958565b60405180910390a280670de0b6b3a7640000600954836116c791906129ed565b6116d191906129cd565b9250925050915091565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6008546001600160a01b031681565b6007546000906001600160a01b031633146117425760405162461bcd60e51b81526004016105b690612816565b5060035490565b60095481565b3390565b6001600160a01b0383166117795760405162461bcd60e51b81526004016105b69061273e565b6001600160a01b03821661179f5760405162461bcd60e51b81526004016105b69061237a565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906117fa90859061294f565b60405180910390a3505050565b6001600160a01b03831661182d5760405162461bcd60e51b81526004016105b690612684565b6001600160a01b0382166118535760405162461bcd60e51b81526004016105b69061227a565b61185e83838361109b565b6001600160a01b038316600090815260208190526040902054818110156118975760405162461bcd60e51b81526004016105b69061242a565b6118a18282612a0c565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906118d79084906129b5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611921919061294f565b60405180910390a361193484848461109b565b50505050565b600080846001600160a01b031663a9059cbb858560405160240161195f929190612223565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516119ad91906121cf565b6000604051808303816000865af19150503d80600081146119ea576040519150601f19603f3d011682016040523d82523d6000602084013e6119ef565b606091505b5091509150818015611a19575080511580611a19575080806020019051810190611a199190612162565b611a355760405162461bcd60e51b81526004016105b6906127b9565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051611a6691906121cf565b60006040518083038185875af1925050503d8060008114611aa3576040519150601f19603f3d011682016040523d82523d6000602084013e611aa8565b606091505b505090508061109b5760405162461bcd60e51b81526004016105b690612487565b6001600160a01b0381166000908152600260205260409020546001600160801b0316611b075760405162461bcd60e51b81526004016105b6906123f3565b6001600160a01b038116600090815260026020526040812054600380546001600160801b03909216928392611b3d908490612a0c565b90915550611b4d90508282611cb1565b506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b0382166000908152600260205260409020546001600160801b0316611bac5760405162461bcd60e51b81526004016105b6906123f3565b6001600160a01b0382166000908152600260205260409020546001600160801b0316811115611bed5760405162461bcd60e51b81526004016105b690612552565b6001600160a01b038216600090815260026020526040812054600380546001600160801b03909216928392611c23908490612a0c565b90915550611c3390508383611cb1565b50506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b038116600090815260026020526040812054600380546001600160801b03909216928392611c8b908490612a0c565b9091555050506001600160a01b0316600090815260026020526040812081815560010155565b6001600160a01b038216611cd75760405162461bcd60e51b81526004016105b690612643565b611ce38260008361109b565b6001600160a01b03821660009081526020819052604090205481811015611d1c5760405162461bcd60e51b81526004016105b690612338565b611d268282612a0c565b6001600160a01b03841660009081526020819052604081209190915560048054849290611d54908490612a0c565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611d9790869061294f565b60405180910390a361109b8360008461109b565b81611db5846110a0565b1015611dd35760405162461bcd60e51b81526004016105b6906124e4565b6001600160a01b0383166000908152600260205260409020546001600160801b0316158015611e2857506001600160a01b038316600090815260026020526040902054600160801b90046001600160801b0316155b15611ea757604080516060810182526001600160801b03848116825242811660208084019182528385018681526001600160a01b038916600090815260029092529490209251835491516fffffffffffffffffffffffffffffffff19909216908316178216600160801b91909216021781559051600190910155611f6a565b6001600160a01b03831660009081526002602052604081208054849290611ed89084906001600160801b031661298a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508060026000856001600160a01b03166001600160a01b031681526020019081526020016000206001016000828254611f3491906129b5565b90915550506001600160a01b038316600090815260026020526040902080546001600160801b03428116600160801b0291161790555b8160036000828254611f7c91906129b5565b9091555050505050565b6001600160a01b038216611fac5760405162461bcd60e51b81526004016105b690612918565b611fb86000838361109b565b8060046000828254611fca91906129b5565b90915550506001600160a01b03821660009081526020819052604081208054839290611ff79084906129b5565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061203a90859061294f565b60405180910390a36111136000838361109b565b80356001600160a01b03811681146110ba57600080fd5b600060208284031215612076578081fd5b61207f8261204e565b9392505050565b60008060408385031215612098578081fd5b6120a18361204e565b91506120af6020840161204e565b90509250929050565b6000806000606084860312156120cc578081fd5b6120d58461204e565b92506120e36020850161204e565b915060408401356120f381612aa0565b809150509250925092565b600080600060608486031215612112578283fd5b61211b8461204e565b92506121296020850161204e565b9150604084013590509250925092565b6000806040838503121561214b578182fd5b6121548361204e565b946020939093013593505050565b600060208284031215612173578081fd5b815161207f81612aa0565b60006020828403121561218f578081fd5b5035919050565b6000602082840312156121a7578081fd5b5051919050565b6000602082840312156121bf578081fd5b815160ff8116811461207f578182fd5b600082516121e1818460208701612a23565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152612266816040850160208701612a23565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526016908201527f556e6f52653a207a65726f206c702062616c616e636500000000000000000000604082015260600190565b60208082526024908201527f556e6f52653a206d696e696d756d20554e4f206361706974616c20756e646572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b60208082526018908201527f556e6f52653a207a65726f20636c61696d20616d6f756e740000000000000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e63650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526017908201527f556e6f52653a2062616c616e6365206f766572666c6f77000000000000000000604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b6020808252601e908201527f556e6f52653a2070656e64696e6720616d6f756e74206f766572666c6f770000604082015260600190565b60208082526027908201527f556e6f52653a2054686572652773206e6f2072656d61696e696e6720696e207460408201527f686520706f6f6c00000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160408201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e6365206f722070656e64696e67205752000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601a908201527f556e6f52653a206c702062616c616e6365206f766572666c6f77000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b60208082526019908201527f556e6f52653a205269736b506f6f6c20466f7262696464656e00000000000000604082015260600190565b60208082526017908201527f556e6f52653a207a65726f20756e6f2062616c616e6365000000000000000000604082015260600190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c75650000000000604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60006001600160801b038083168185168083038211156129ac576129ac612a8a565b01949350505050565b600082198211156129c8576129c8612a8a565b500190565b6000826129e857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612a0757612a07612a8a565b500290565b600082821015612a1e57612a1e612a8a565b500390565b60005b83811015612a3e578181015183820152602001612a26565b838111156119345750506000910152565b600281046001821680612a6357607f821691505b60208210811415612a8457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8015158114612aae57600080fd5b5056fea2646970667358221220cdef67bd44d9d1227d95070267800e18b9f289123ed2fdf7c85b60c2fe92bd4e64736f6c63430008000033a264697066735822122022ee3f59f39858b28f1a1de690689362734a8c6b90a5a8231ba0e0c0b23c02d064736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}