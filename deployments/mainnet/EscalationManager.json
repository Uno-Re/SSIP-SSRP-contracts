{
  "address": "0xDB99B62bd15e88Fe995dCE4d959aCc3B82Eb9d92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_optimisticOracleV3",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "PriceRequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "arbitrateViaEscalationManager",
          "type": "bool"
        }
      ],
      "name": "UpdatedArbitrateViaEscalationManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "discardOracle",
          "type": "bool"
        }
      ],
      "name": "UpdatedDiscardOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "validateDisputers",
          "type": "bool"
        }
      ],
      "name": "UpdatedValidateDisputers",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_ASSESSOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUMERICAL_VALUE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTMISTIC_ORACLE_V3_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrateViaEscalationManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assertionId",
          "type": "bytes32"
        }
      ],
      "name": "assertionDisputedCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assertionId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "assertedTruthfully",
          "type": "bool"
        }
      ],
      "name": "assertionResolvedCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "checkDisputers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "getAssertionPolicy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "blockAssertion",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "arbitrateViaEscalationManager",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "discardOracle",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "validateDisputers",
              "type": "bool"
            }
          ],
          "internalType": "struct EscalationManagerInterface.AssertionPolicy",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assertionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "disputeCaller",
          "type": "address"
        }
      ],
      "name": "isDisputeAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isOraclePriceCalled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "oraclePrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "requestPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_arbitrateViaEscalationManager",
          "type": "bool"
        }
      ],
      "name": "setArbitrateViaEscalationManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_discardOracle",
          "type": "bool"
        }
      ],
      "name": "setDiscardOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "name": "setOraclePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_validateDisputers",
          "type": "bool"
        }
      ],
      "name": "setValidateDisputers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_disputer",
          "type": "address"
        }
      ],
      "name": "toggleDisputer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validateDisputers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf42a9bf7e69785a9da5e0e70415fb853b1c211236b3273661d0cc0655983d503",
  "receipt": {
    "to": null,
    "from": "0x8C0F1b5C01A7146259d51F798a114f4F8dC0177e",
    "contractAddress": "0xDB99B62bd15e88Fe995dCE4d959aCc3B82Eb9d92",
    "transactionIndex": 109,
    "gasUsed": "897994",
    "logsBloom": "0x
    "blockHash": "0xff9804c38e86910ca17a3b965835d37e34ee28362f7e64d6e1e4a00dd1d3d152",
    "transactionHash": "0xf42a9bf7e69785a9da5e0e70415fb853b1c211236b3273661d0cc0655983d503",
    "logs": [
      {
        "transactionIndex": 109,
        "blockNumber": 19419026,
        "transactionHash": "0xf42a9bf7e69785a9da5e0e70415fb853b1c211236b3273661d0cc0655983d503",
        "address": "0xDB99B62bd15e88Fe995dCE4d959aCc3B82Eb9d92",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa7fb00808094bb0669054259df045936913ac8f131613a7a6da2e81ac75d5f48",
          "0x0000000000000000000000008c0f1b5c01a7146259d51f798a114f4f8dc0177e",
          "0x0000000000000000000000008c0f1b5c01a7146259d51f798a114f4f8dc0177e"
        ],
        "data": "0x",
        "logIndex": 280,
        "blockHash": "0xff9804c38e86910ca17a3b965835d37e34ee28362f7e64d6e1e4a00dd1d3d152"
      },
      {
        "transactionIndex": 109,
        "blockNumber": 19419026,
        "transactionHash": "0xf42a9bf7e69785a9da5e0e70415fb853b1c211236b3273661d0cc0655983d503",
        "address": "0xDB99B62bd15e88Fe995dCE4d959aCc3B82Eb9d92",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xa7fb00808094bb0669054259df045936913ac8f131613a7a6da2e81ac75d5f48",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa7fb00808094bb0669054259df045936913ac8f131613a7a6da2e81ac75d5f48"
        ],
        "data": "0x",
        "logIndex": 281,
        "blockHash": "0xff9804c38e86910ca17a3b965835d37e34ee28362f7e64d6e1e4a00dd1d3d152"
      },
      {
        "transactionIndex": 109,
        "blockNumber": 19419026,
        "transactionHash": "0xf42a9bf7e69785a9da5e0e70415fb853b1c211236b3273661d0cc0655983d503",
        "address": "0xDB99B62bd15e88Fe995dCE4d959aCc3B82Eb9d92",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfa9ee5805867fcd64bc0d88adbfc542f8166570d1ca4cbb35eece5c4fc348fdd",
          "0x000000000000000000000000fb55f43fb9f48f63f9269db7dde3bbbe1ebdc0de",
          "0x0000000000000000000000008c0f1b5c01a7146259d51f798a114f4f8dc0177e"
        ],
        "data": "0x",
        "logIndex": 282,
        "blockHash": "0xff9804c38e86910ca17a3b965835d37e34ee28362f7e64d6e1e4a00dd1d3d152"
      },
      {
        "transactionIndex": 109,
        "blockNumber": 19419026,
        "transactionHash": "0xf42a9bf7e69785a9da5e0e70415fb853b1c211236b3273661d0cc0655983d503",
        "address": "0xDB99B62bd15e88Fe995dCE4d959aCc3B82Eb9d92",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xfa9ee5805867fcd64bc0d88adbfc542f8166570d1ca4cbb35eece5c4fc348fdd",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa7fb00808094bb0669054259df045936913ac8f131613a7a6da2e81ac75d5f48"
        ],
        "data": "0x",
        "logIndex": 283,
        "blockHash": "0xff9804c38e86910ca17a3b965835d37e34ee28362f7e64d6e1e4a00dd1d3d152"
      }
    ],
    "blockNumber": 19419026,
    "cumulativeGasUsed": "10996275",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
    "0x8C0F1b5C01A7146259d51F798a114f4F8dC0177e"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d2b2f55b936710cd4edd91515c2aa79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optimisticOracleV3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"PriceRequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"arbitrateViaEscalationManager\",\"type\":\"bool\"}],\"name\":\"UpdatedArbitrateViaEscalationManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"discardOracle\",\"type\":\"bool\"}],\"name\":\"UpdatedDiscardOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"validateDisputers\",\"type\":\"bool\"}],\"name\":\"UpdatedValidateDisputers\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_ASSESSOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMERICAL_VALUE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTMISTIC_ORACLE_V3_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrateViaEscalationManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"assertionDisputedCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"assertedTruthfully\",\"type\":\"bool\"}],\"name\":\"assertionResolvedCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkDisputers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getAssertionPolicy\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"blockAssertion\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"arbitrateViaEscalationManager\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"discardOracle\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"validateDisputers\",\"type\":\"bool\"}],\"internalType\":\"struct EscalationManagerInterface.AssertionPolicy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"disputeCaller\",\"type\":\"address\"}],\"name\":\"isDisputeAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isOraclePriceCalled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oraclePrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"requestPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_arbitrateViaEscalationManager\",\"type\":\"bool\"}],\"name\":\"setArbitrateViaEscalationManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_discardOracle\",\"type\":\"bool\"}],\"name\":\"setDiscardOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"setOraclePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validateDisputers\",\"type\":\"bool\"}],\"name\":\"setValidateDisputers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"}],\"name\":\"toggleDisputer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validateDisputers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"assertionDisputedCallback(bytes32)\":{\"params\":{\"assertionId\":\"The identifier of the assertion that was disputed.\"}},\"assertionResolvedCallback(bytes32,bool)\":{\"params\":{\"assertedTruthfully\":\"Whether the assertion was resolved as truthful or not.\",\"assertionId\":\"The identifier of the assertion that was resolved.\"}},\"getPrice(bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier being requested.\",\"time\":\"timestamp of the price being requested.\"},\"returns\":{\"_0\":\"price from the escalation manager to inform the resolution of the dispute.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isDisputeAllowed(bytes32,address)\":{\"params\":{\"assertionId\":\"the assertionId to validate the dispute for.\",\"disputeCaller\":\"the caller of the dispute function.\"},\"returns\":{\"_0\":\"bool true if the dispute is allowed, false otherwise.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"requestPrice(bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"the identifier to fetch the price for.\",\"time\":\"the time to fetch the price for.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assertionDisputedCallback(bytes32)\":{\"notice\":\"Callback function that is called by Optimistic Oracle V3 when an assertion is disputed.\"},\"assertionResolvedCallback(bytes32,bool)\":{\"notice\":\"Callback function that is called by Optimistic Oracle V3 when an assertion is resolved.\"},\"constructor\":{\"notice\":\"Constructs the escalation manager.\"},\"getPrice(bytes32,uint256,bytes)\":{\"notice\":\"Implements price getting logic. This method is called by Optimistic Oracle V3 settling an assertion that is configured to use the escalation manager as the oracle. The interface is constructed to mimic the UMA DVM.\"},\"isDisputeAllowed(bytes32,address)\":{\"notice\":\"Callback function that is called by Optimistic Oracle V3 when an assertion is disputed. Used to validate if the dispute should be allowed based on the escalation policy.\"},\"requestPrice(bytes32,uint256,bytes)\":{\"notice\":\"Implements price requesting logic for the escalation manager. This function is called by the Optimistic Oracle V3 on dispute and is constructed to mimic that of the UMA DVM interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uma/EscalationManager.sol\":\"EscalationManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/interfaces/EscalationManagerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity =0.8.23;\\n\\nimport \\\"./OptimisticOracleV3CallbackRecipientInterface.sol\\\";\\n\\n/**\\n * @title Escalation Manager Interface\\n * @notice Interface for contracts that manage the escalation policy for assertions.\\n */\\ninterface EscalationManagerInterface is OptimisticOracleV3CallbackRecipientInterface {\\n    // Assertion policy parameters as returned by the escalation manager.\\n    struct AssertionPolicy {\\n        bool blockAssertion; // If true, the the assertion should be blocked.\\n        bool arbitrateViaEscalationManager; // If true, the escalation manager will arbitrate the assertion.\\n        bool discardOracle; // If true, the Optimistic Oracle V3 should discard the oracle price.\\n        bool validateDisputers; // If true, the escalation manager will validate the disputers.\\n    }\\n\\n    /**\\n     * @notice Returns the assertion policy for the given assertion.\\n     * @param assertionId the assertion identifier to get the assertion policy for.\\n     * @return the assertion policy for the given assertion identifier.\\n     */\\n    function getAssertionPolicy(bytes32 assertionId) external view returns (AssertionPolicy memory);\\n\\n    /**\\n     * @notice Callback function that is called by Optimistic Oracle V3 when an assertion is disputed. Used to validate\\n     * if the dispute should be allowed based on the escalation policy.\\n     * @param assertionId the assertionId to validate the dispute for.\\n     * @param disputeCaller the caller of the dispute function.\\n     * @return bool true if the dispute is allowed, false otherwise.\\n     */\\n    function isDisputeAllowed(bytes32 assertionId, address disputeCaller) external view returns (bool);\\n\\n    /**\\n     * @notice Implements price getting logic. This method is called by Optimistic Oracle V3 settling an assertion that\\n     * is configured to use the escalation manager as the oracle. The interface is constructed to mimic the UMA DVM.\\n     * @param identifier price identifier being requested.\\n     * @param time timestamp of the price being requested.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return price from the escalation manager to inform the resolution of the dispute.\\n     */\\n    function getPrice(bytes32 identifier, uint256 time, bytes memory ancillaryData) external returns (int256);\\n\\n    /**\\n     * @notice Implements price requesting logic for the escalation manager. This function is called by the Optimistic\\n     * Oracle V3 on dispute and is constructed to mimic that of the UMA DVM interface.\\n     * @param identifier the identifier to fetch the price for.\\n     * @param time the time to fetch the price for.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function requestPrice(bytes32 identifier, uint256 time, bytes memory ancillaryData) external;\\n}\\n\",\"keccak256\":\"0xe77925670d8008fcc7861f500a1ca774dbe16abf686d539fadfbc945ee269e21\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/OptimisticOracleV3CallbackRecipientInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity =0.8.23;\\n\\n/**\\n * @title Optimistic Oracle V3 Callback Recipient Interface\\n * @notice Interface for contracts implementing callbacks to be received from the Optimistic Oracle V3.\\n */\\ninterface OptimisticOracleV3CallbackRecipientInterface {\\n    /**\\n     * @notice Callback function that is called by Optimistic Oracle V3 when an assertion is resolved.\\n     * @param assertionId The identifier of the assertion that was resolved.\\n     * @param assertedTruthfully Whether the assertion was resolved as truthful or not.\\n     */\\n    function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully) external;\\n\\n    /**\\n     * @notice Callback function that is called by Optimistic Oracle V3 when an assertion is disputed.\\n     * @param assertionId The identifier of the assertion that was disputed.\\n     */\\n    function assertionDisputedCallback(bytes32 assertionId) external;\\n}\\n\",\"keccak256\":\"0xd886db3f454ca53f8a5d2ac90ffab3883064d85b1c4d8bc3ad4b69f7b310a033\",\"license\":\"AGPL-3.0-only\"},\"contracts/uma/EscalationManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interfaces/EscalationManagerInterface.sol\\\";\\n\\ncontract EscalationManager is EscalationManagerInterface, AccessControl{\\n\\n    struct AssertionApproval {\\n        bool exist;\\n        bool approved;\\n        bool settled;\\n    }\\n\\n    bytes32 public constant OPTMISTIC_ORACLE_V3_ROLE = keccak256(\\\"OPTMISTIC_ORACLE_V3_ROLE\\\");\\n    bytes32 public constant CLAIM_ASSESSOR_ROLE = keccak256(\\\"CLAIM_ASSESSOR_ROLE\\\");\\n\\n    int256 public constant NUMERICAL_VALUE = 1e18;\\n\\n    bool public arbitrateViaEscalationManager;\\n    bool public discardOracle;\\n    bool public validateDisputers;\\n\\n    mapping (address => bool) public checkDisputers;\\n    mapping (bytes32 => int256) public oraclePrice;\\n    mapping (bytes32 => bool) public isOraclePriceCalled;\\n\\n    event PriceRequestAdded(bytes32 indexed identifier, uint256 time, bytes ancillaryData);\\n    event UpdatedArbitrateViaEscalationManager(address indexed owner, bool arbitrateViaEscalationManager);\\n    event UpdatedDiscardOracle(address indexed owner, bool discardOracle);\\n    event UpdatedValidateDisputers(address indexed owner, bool validateDisputers);\\n    \\n\\n    /**\\n     * @notice Constructs the escalation manager.\\n     */\\n    constructor(address _optimisticOracleV3, address _governance) {\\n        _grantRole(CLAIM_ASSESSOR_ROLE, _governance);\\n        _setRoleAdmin(CLAIM_ASSESSOR_ROLE, CLAIM_ASSESSOR_ROLE);\\n        _grantRole(OPTMISTIC_ORACLE_V3_ROLE, _optimisticOracleV3);\\n        _setRoleAdmin(OPTMISTIC_ORACLE_V3_ROLE, CLAIM_ASSESSOR_ROLE);\\n    }\\n    \\n    function getAssertionPolicy(bytes32) external override view returns (AssertionPolicy memory) {\\n        return AssertionPolicy({\\n            blockAssertion: false,\\n            arbitrateViaEscalationManager: arbitrateViaEscalationManager,\\n            discardOracle: discardOracle,\\n            validateDisputers: validateDisputers\\n        });\\n    }\\n\\n    function isDisputeAllowed(bytes32 assertionId, address disputeCaller) external override view returns (bool) {\\n        return checkDisputers[disputeCaller];\\n    }\\n\\n    function setArbitrateViaEscalationManager(bool _arbitrateViaEscalationManager) external onlyRole(CLAIM_ASSESSOR_ROLE) {\\n        arbitrateViaEscalationManager = _arbitrateViaEscalationManager;\\n\\n        emit UpdatedArbitrateViaEscalationManager(msg.sender, _arbitrateViaEscalationManager);\\n    }\\n\\n    function setDiscardOracle(bool _discardOracle) external onlyRole(CLAIM_ASSESSOR_ROLE) {\\n        discardOracle = _discardOracle;\\n\\n        emit UpdatedDiscardOracle(msg.sender, _discardOracle);\\n    }\\n\\n    function setValidateDisputers(bool _validateDisputers) external onlyRole(CLAIM_ASSESSOR_ROLE) {\\n        validateDisputers = _validateDisputers;\\n\\n        emit UpdatedValidateDisputers(msg.sender, _validateDisputers);\\n    }\\n\\n    function toggleDisputer(address _disputer) external onlyRole(CLAIM_ASSESSOR_ROLE) {\\n        checkDisputers[_disputer] = !checkDisputers[_disputer];\\n    }\\n\\n    function getPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) external view override returns (int256) {\\n        bytes32 data = keccak256(abi.encodePacked(identifier, time, ancillaryData));\\n        return isOraclePriceCalled[data] ? oraclePrice[data] : int256(0);\\n    }\\n\\n    function setOraclePrice(bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData,\\n        int256 price\\n    ) external onlyRole(CLAIM_ASSESSOR_ROLE) {\\n        require(price == 0 || price == NUMERICAL_VALUE, \\\"EManger: invalid price\\\");\\n        bytes32 data = keccak256(abi.encodePacked(identifier, time, ancillaryData));\\n        oraclePrice[data] = price;\\n        isOraclePriceCalled[data] = true;\\n    }\\n\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) external override onlyRole(OPTMISTIC_ORACLE_V3_ROLE) {\\n        emit PriceRequestAdded(identifier, time, ancillaryData);\\n    }\\n\\n    function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully) external override onlyRole(OPTMISTIC_ORACLE_V3_ROLE) {}\\n\\n    function assertionDisputedCallback(bytes32 assertionId) external override onlyRole(OPTMISTIC_ORACLE_V3_ROLE) {}\\n\\n}\",\"keccak256\":\"0xd58921239bae4f820a5e72ecd01431d965dccc29d7807fc77c03cf9b42f8c5eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063719c6d56116100f9578063c0b0503511610097578063d547741f11610071578063d547741f14610468578063d62efb751461047b578063d99fec711461048e578063f1b156b2146104a357600080fd5b8063c0b050351461041f578063c89a4ae914610432578063d448a4ec1461045557600080fd5b8063a217fddf116100d3578063a217fddf14610340578063a6b011a714610348578063a96e6cc6146103f7578063b1d959561461040a57600080fd5b8063719c6d56146102fa57806379adeacc1461030d57806391d148541461032d57600080fd5b80632daeba581161016657806341dc20461161014057806341dc20461461029457806343db49ad146102a75780634c7a7d38146102ba5780636b915d91146102cc57600080fd5b80632daeba581461024b5780632f2ff15d1461026e57806336568abe1461028157600080fd5b806301ffc9a7146101ae5780631f25bee0146101d6578063216666a4146101f3578063248a9ca314610208578063261d3d3a1461022b5780632a7de60b1461023e575b600080fd5b6101c16101bc366004610a10565b6104b6565b60405190151581526020015b60405180910390f35b6101e5670de0b6b3a764000081565b6040519081526020016101cd565b610206610201366004610ae4565b6104ed565b005b6101e5610216366004610b34565b60009081526020819052604090206001015490565b610206610239366004610b4d565b610545565b6001546101c19060ff1681565b6101c1610259366004610bc1565b60026020526000908152604090205460ff1681565b61020661027c366004610bdc565b610614565b61020661028f366004610bdc565b61063f565b6102066102a2366004610bc1565b610677565b6102066102b5366004610c18565b6106b9565b6001546101c190610100900460ff1681565b6101c16102da366004610bdc565b6001600160a01b031660009081526002602052604090205460ff16919050565b6101e5610308366004610ae4565b610728565b6101e561031b366004610b34565b60036020526000908152604090205481565b6101c161033b366004610bdc565b61078f565b6101e5600081565b6103bc610356366004610b34565b6040805160808101825260008082526020820181905291810182905260608101919091525050604080516080810182526000815260015460ff80821615156020840152610100820481161515938301939093526201000090049091161515606082015290565b6040516101cd919081511515815260208083015115159082015260408083015115159082015260609182015115159181019190915260800190565b610206610405366004610c18565b6107b8565b6101e5600080516020610d0283398151915281565b61020661042d366004610c18565b61081d565b6101c1610440366004610b34565b60046020526000908152604090205460ff1681565b610206610463366004610b34565b610878565b610206610476366004610bdc565b610894565b6001546101c19062010000900460ff1681565b6101e5600080516020610ce283398151915281565b6102066104b1366004610c33565b6108b9565b60006001600160e01b03198216637965db0b60e01b14806104e757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020610d02833981519152610505816108cd565b837fb17a139310ca50023f8dc119e2f4d6b839cf066d7b246eb502d16c335d1db6318484604051610537929190610c7a565b60405180910390a250505050565b600080516020610ce283398151915261055d816108cd565b8115806105715750670de0b6b3a764000082145b6105bb5760405162461bcd60e51b8152602060048201526016602482015275454d616e6765723a20696e76616c696420707269636560501b60448201526064015b60405180910390fd5b60008585856040516020016105d293929190610cb4565b60408051601f198184030181529181528151602092830120600090815260038352818120959095556004909152909220805460ff191660011790555050505050565b60008281526020819052604090206001015461062f816108cd565b61063983836108da565b50505050565b6001600160a01b03811633146106685760405163334bd91960e11b815260040160405180910390fd5b610672828261096c565b505050565b600080516020610ce283398151915261068f816108cd565b506001600160a01b03166000908152600260205260409020805460ff19811660ff90911615179055565b600080516020610ce28339815191526106d1816108cd565b600180548315156101000261ff001990911617905560405133907f0d848abbfec5c62f73a9e68f269ba0413cf78f98e90f97a268b65f0bafeafddf9061071c90851515815260200190565b60405180910390a25050565b60008084848460405160200161074093929190610cb4565b60408051601f1981840301815291815281516020928301206000818152600490935291205490915060ff16610776576000610786565b6000818152600360205260409020545b95945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020610ce28339815191526107d0816108cd565b60018054831515620100000262ff00001990911617905560405133907f86349522c1d987577f509a5fcb6fe45f112a16c9c4616f5eab7e13d64d16a3829061071c90851515815260200190565b600080516020610ce2833981519152610835816108cd565b6001805460ff191683151590811790915560405190815233907f808c14e99b3ea0f600449e4471ee5a2275234c5b1db0a8da763f8a15ee663f029060200161071c565b600080516020610d02833981519152610890816108cd565b5050565b6000828152602081905260409020600101546108af816108cd565b610639838361096c565b600080516020610d02833981519152610672815b6108d781336109d7565b50565b60006108e6838361078f565b610964576000838152602081815260408083206001600160a01b03861684529091529020805460ff1916600117905561091c3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016104e7565b5060006104e7565b6000610978838361078f565b15610964576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016104e7565b6109e1828261078f565b6108905760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016105b2565b600060208284031215610a2257600080fd5b81356001600160e01b031981168114610a3a57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a6857600080fd5b813567ffffffffffffffff80821115610a8357610a83610a41565b604051601f8301601f19908116603f01168101908282118183101715610aab57610aab610a41565b81604052838152866020858801011115610ac457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610af957600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610b1e57600080fd5b610b2a86828701610a57565b9150509250925092565b600060208284031215610b4657600080fd5b5035919050565b60008060008060808587031215610b6357600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610b8857600080fd5b610b9487828801610a57565b949793965093946060013593505050565b80356001600160a01b0381168114610bbc57600080fd5b919050565b600060208284031215610bd357600080fd5b610a3a82610ba5565b60008060408385031215610bef57600080fd5b82359150610bff60208401610ba5565b90509250929050565b80358015158114610bbc57600080fd5b600060208284031215610c2a57600080fd5b610a3a82610c08565b60008060408385031215610c4657600080fd5b82359150610bff60208401610c08565b60005b83811015610c71578181015183820152602001610c59565b50506000910152565b8281526040602082015260008251806040840152610c9f816060850160208701610c56565b601f01601f1916919091016060019392505050565b83815282602082015260008251610cd2816040850160208701610c56565b9190910160400194935050505056fea7fb00808094bb0669054259df045936913ac8f131613a7a6da2e81ac75d5f48fa9ee5805867fcd64bc0d88adbfc542f8166570d1ca4cbb35eece5c4fc348fdda264697066735822122025bcaa55905bde4440fccb9d310e837d882a03d0593639d119c413a9a88fe1b764736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "assertionDisputedCallback(bytes32)": {
        "params": {
          "assertionId": "The identifier of the assertion that was disputed."
        }
      },
      "assertionResolvedCallback(bytes32,bool)": {
        "params": {
          "assertedTruthfully": "Whether the assertion was resolved as truthful or not.",
          "assertionId": "The identifier of the assertion that was resolved."
        }
      },
      "getPrice(bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier being requested.",
          "time": "timestamp of the price being requested."
        },
        "returns": {
          "_0": "price from the escalation manager to inform the resolution of the dispute."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isDisputeAllowed(bytes32,address)": {
        "params": {
          "assertionId": "the assertionId to validate the dispute for.",
          "disputeCaller": "the caller of the dispute function."
        },
        "returns": {
          "_0": "bool true if the dispute is allowed, false otherwise."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "requestPrice(bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "the identifier to fetch the price for.",
          "time": "the time to fetch the price for."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assertionDisputedCallback(bytes32)": {
        "notice": "Callback function that is called by Optimistic Oracle V3 when an assertion is disputed."
      },
      "assertionResolvedCallback(bytes32,bool)": {
        "notice": "Callback function that is called by Optimistic Oracle V3 when an assertion is resolved."
      },
      "constructor": {
        "notice": "Constructs the escalation manager."
      },
      "getPrice(bytes32,uint256,bytes)": {
        "notice": "Implements price getting logic. This method is called by Optimistic Oracle V3 settling an assertion that is configured to use the escalation manager as the oracle. The interface is constructed to mimic the UMA DVM."
      },
      "isDisputeAllowed(bytes32,address)": {
        "notice": "Callback function that is called by Optimistic Oracle V3 when an assertion is disputed. Used to validate if the dispute should be allowed based on the escalation policy."
      },
      "requestPrice(bytes32,uint256,bytes)": {
        "notice": "Implements price requesting logic for the escalation manager. This function is called by the Optimistic Oracle V3 on dispute and is constructed to mimic that of the UMA DVM interface."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1034,
        "contract": "contracts/uma/EscalationManager.sol:EscalationManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1029_storage)"
      },
      {
        "astId": 18488,
        "contract": "contracts/uma/EscalationManager.sol:EscalationManager",
        "label": "arbitrateViaEscalationManager",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 18490,
        "contract": "contracts/uma/EscalationManager.sol:EscalationManager",
        "label": "discardOracle",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 18492,
        "contract": "contracts/uma/EscalationManager.sol:EscalationManager",
        "label": "validateDisputers",
        "offset": 2,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 18496,
        "contract": "contracts/uma/EscalationManager.sol:EscalationManager",
        "label": "checkDisputers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18500,
        "contract": "contracts/uma/EscalationManager.sol:EscalationManager",
        "label": "oraclePrice",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_int256)"
      },
      {
        "astId": 18504,
        "contract": "contracts/uma/EscalationManager.sol:EscalationManager",
        "label": "isOraclePriceCalled",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_int256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1029_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1029_storage"
      },
      "t_struct(RoleData)1029_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1026,
            "contract": "contracts/uma/EscalationManager.sol:EscalationManager",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1028,
            "contract": "contracts/uma/EscalationManager.sol:EscalationManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}