{
  "address": "0xdB4B701f1a4653BFD5F0f4EFF1913aEAF5E21E68",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unoToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "LogAddCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_whiteListAddress",
          "type": "address"
        }
      ],
      "name": "LogAddWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_unoAmount",
          "type": "uint256"
        }
      ],
      "name": "LogBuyBackAndBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_premiumAmount",
          "type": "uint256"
        }
      ],
      "name": "LogCollectPremium",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountDeposited",
          "type": "uint256"
        }
      ],
      "name": "LogDepositToSyntheticSSIPRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountDeposited",
          "type": "uint256"
        }
      ],
      "name": "LogDepositToSyntheticSSRPRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "LogMaxApproveCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "LogMaxDestroyCurrencyAllowance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "LogRemoveCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_whiteListAddress",
          "type": "address"
        }
      ],
      "name": "LogRemoveWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "PremiumWithdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BACK_BURN_PREMIUM_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BACK_BURN_UNO_PREMIUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "SSIP_PREMIUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SSIP_PREMIUM_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "SSRP_PREMIUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SSRP_PREMIUM_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNO_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whiteListAddress",
          "type": "address"
        }
      ],
      "name": "addWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availableCurrencyList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackAndBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_premiumAmount",
          "type": "uint256"
        }
      ],
      "name": "collectPremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectPremiumInETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToSyntheticSSIPRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "depositToSyntheticSSRPRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "destroyCurrencyAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "maxApproveCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whiteListAddress",
          "type": "address"
        }
      ],
      "name": "removeWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x536cbb76e1d0fb54a36d9ac9d414ce559bf5d70d9f39d86627619f8cf3e8f943",
  "receipt": {
    "to": null,
    "from": "0x8c3d5c9538256DAB8Eb4B197370574340fe3254F",
    "contractAddress": "0xdB4B701f1a4653BFD5F0f4EFF1913aEAF5E21E68",
    "transactionIndex": 283,
    "gasUsed": "2505282",
    "logsBloom": "0x
    "blockHash": "0x77fc0b8c792181cf9c5158bfde7bb00c05bfc5a7690113a4772c8c6e046af1eb",
    "transactionHash": "0x536cbb76e1d0fb54a36d9ac9d414ce559bf5d70d9f39d86627619f8cf3e8f943",
    "logs": [
      {
        "transactionIndex": 283,
        "blockNumber": 14636262,
        "transactionHash": "0x536cbb76e1d0fb54a36d9ac9d414ce559bf5d70d9f39d86627619f8cf3e8f943",
        "address": "0xdB4B701f1a4653BFD5F0f4EFF1913aEAF5E21E68",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c3d5c9538256dab8eb4b197370574340fe3254f"
        ],
        "data": "0x",
        "logIndex": 374,
        "blockHash": "0x77fc0b8c792181cf9c5158bfde7bb00c05bfc5a7690113a4772c8c6e046af1eb"
      },
      {
        "transactionIndex": 283,
        "blockNumber": 14636262,
        "transactionHash": "0x536cbb76e1d0fb54a36d9ac9d414ce559bf5d70d9f39d86627619f8cf3e8f943",
        "address": "0xdB4B701f1a4653BFD5F0f4EFF1913aEAF5E21E68",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000008c3d5c9538256dab8eb4b197370574340fe3254f",
          "0x0000000000000000000000008c3d5c9538256dab8eb4b197370574340fe3254f"
        ],
        "data": "0x",
        "logIndex": 375,
        "blockHash": "0x77fc0b8c792181cf9c5158bfde7bb00c05bfc5a7690113a4772c8c6e046af1eb"
      }
    ],
    "blockNumber": 14636262,
    "cumulativeGasUsed": "23111879",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6aC1081CBb92524170E61CFFD37bDaF3b38FBC4c",
    "0x474021845c4643113458ea4414bdb7fb74a01a77",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0x8c3d5c9538256DAB8Eb4B197370574340fe3254F"
  ],
  "solcInputHash": "0218e2b28098b873f60b22055ee82641",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"LogAddCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"LogAddWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unoAmount\",\"type\":\"uint256\"}],\"name\":\"LogBuyBackAndBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_premiumAmount\",\"type\":\"uint256\"}],\"name\":\"LogCollectPremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountDeposited\",\"type\":\"uint256\"}],\"name\":\"LogDepositToSyntheticSSIPRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountDeposited\",\"type\":\"uint256\"}],\"name\":\"LogDepositToSyntheticSSRPRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"LogMaxApproveCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"LogMaxDestroyCurrencyAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"LogRemoveCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"LogRemoveWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PremiumWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BACK_BURN_PREMIUM_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BACK_BURN_UNO_PREMIUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SSIP_PREMIUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSIP_PREMIUM_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SSRP_PREMIUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSRP_PREMIUM_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNO_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableCurrencyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_premiumAmount\",\"type\":\"uint256\"}],\"name\":\"collectPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPremiumInETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToSyntheticSSIPRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"depositToSyntheticSSRPRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"destroyCurrencyAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"maxApproveCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PremiumPool.sol\":\"PremiumPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/PremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IPremiumPool.sol\\\";\\n\\ncontract PremiumPool is IPremiumPool, ReentrancyGuard, Ownable {\\n    using Address for address;\\n\\n    address public exchangeAgent;\\n    address public UNO_TOKEN;\\n    address public USDC_TOKEN;\\n    mapping(address => bool) public availableCurrencies;\\n    address[] public availableCurrencyList;\\n    mapping(address => bool) public whiteList;\\n\\n    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;\\n    mapping(address => uint256) public SSRP_PREMIUM;\\n    mapping(address => uint256) public SSIP_PREMIUM;\\n    mapping(address => uint256) public BACK_BURN_UNO_PREMIUM;\\n    uint256 public SSRP_PREMIUM_ETH;\\n    uint256 public SSIP_PREMIUM_ETH;\\n    uint256 public BACK_BURN_PREMIUM_ETH;\\n\\n    uint256 private MAX_INTEGER = type(uint256).max;\\n\\n    event PremiumWithdraw(address indexed _currency, address indexed _to, uint256 _amount);\\n    event LogBuyBackAndBurn(address indexed _operator, address indexed _premiumPool, uint256 _unoAmount);\\n    event LogCollectPremium(address indexed _from, address _premiumCurrency, uint256 _premiumAmount);\\n    event LogDepositToSyntheticSSRPRewarder(address indexed _rewarder, uint256 _amountDeposited);\\n    event LogDepositToSyntheticSSIPRewarder(address indexed _rewarder, address indexed _currency, uint256 _amountDeposited);\\n    event LogAddCurrency(address indexed _premiumPool, address indexed _currency);\\n    event LogRemoveCurrency(address indexed _premiumPool, address indexed _currency);\\n    event LogMaxApproveCurrency(address indexed _premiumPool, address indexed _currency, address indexed _to);\\n    event LogMaxDestroyCurrencyAllowance(address indexed _premiumPool, address indexed _currency, address indexed _to);\\n    event LogAddWhiteList(address indexed _premiumPool, address indexed _whiteListAddress);\\n    event LogRemoveWhiteList(address indexed _premiumPool, address indexed _whiteListAddress);\\n\\n    constructor(\\n        address _exchangeAgent,\\n        address _unoToken,\\n        address _usdcToken,\\n        address _multiSigWallet\\n    ) {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero exchangeAgent address\\\");\\n        require(_unoToken != address(0), \\\"UnoRe: zero UNO address\\\");\\n        require(_usdcToken != address(0), \\\"UnoRe: zero USDC address\\\");\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multisigwallet address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        UNO_TOKEN = _unoToken;\\n        USDC_TOKEN = _usdcToken;\\n        whiteList[msg.sender] = true;\\n        transferOwnership(_multiSigWallet);\\n    }\\n\\n    modifier onlyAvailableCurrency(address _currency) {\\n        require(availableCurrencies[_currency], \\\"UnoRe: not allowed currency\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhiteList() {\\n        require(whiteList[msg.sender], \\\"UnoRe: not white list address\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function collectPremiumInETH() external payable override nonReentrant onlyWhiteList {\\n        uint256 _premiumAmount = msg.value;\\n        uint256 _premium_SSRP = (_premiumAmount * 1000) / 10000;\\n        uint256 _premium_SSIP = (_premiumAmount * 7000) / 10000;\\n        SSRP_PREMIUM_ETH = SSRP_PREMIUM_ETH + _premium_SSRP;\\n        SSIP_PREMIUM_ETH = SSIP_PREMIUM_ETH + _premium_SSIP;\\n        BACK_BURN_PREMIUM_ETH = BACK_BURN_PREMIUM_ETH + (_premiumAmount - _premium_SSRP - _premium_SSIP);\\n        emit LogCollectPremium(msg.sender, address(0), _premiumAmount);\\n    }\\n\\n    function collectPremium(address _premiumCurrency, uint256 _premiumAmount)\\n        external\\n        override\\n        nonReentrant\\n        onlyAvailableCurrency(_premiumCurrency)\\n        onlyWhiteList\\n    {\\n        require(IERC20(_premiumCurrency).balanceOf(msg.sender) >= _premiumAmount, \\\"UnoRe: premium balance overflow\\\");\\n        TransferHelper.safeTransferFrom(_premiumCurrency, msg.sender, address(this), _premiumAmount);\\n        uint256 _premium_SSRP = (_premiumAmount * 1000) / 10000;\\n        uint256 _premium_SSIP = (_premiumAmount * 7000) / 10000;\\n        SSRP_PREMIUM[_premiumCurrency] = SSRP_PREMIUM[_premiumCurrency] + _premium_SSRP;\\n        SSIP_PREMIUM[_premiumCurrency] = SSIP_PREMIUM[_premiumCurrency] + _premium_SSIP;\\n        BACK_BURN_UNO_PREMIUM[_premiumCurrency] =\\n            BACK_BURN_UNO_PREMIUM[_premiumCurrency] +\\n            (_premiumAmount - _premium_SSRP - _premium_SSIP);\\n        emit LogCollectPremium(msg.sender, _premiumCurrency, _premiumAmount);\\n    }\\n\\n    function depositToSyntheticSSRPRewarder(address _rewarder) external onlyOwner nonReentrant {\\n        require(_rewarder != address(0), \\\"UnoRe: zero address\\\");\\n        require(_rewarder.isContract(), \\\"UnoRe: no contract address\\\");\\n        uint256 usdcAmountToDeposit = 0;\\n        if (SSRP_PREMIUM_ETH > 0) {\\n            TransferHelper.safeTransferETH(exchangeAgent, SSRP_PREMIUM_ETH);\\n            uint256 convertedAmount = IExchangeAgent(exchangeAgent).convertForToken(address(0), USDC_TOKEN, SSRP_PREMIUM_ETH);\\n            usdcAmountToDeposit += convertedAmount;\\n            SSRP_PREMIUM_ETH = 0;\\n        }\\n        for (uint256 ii = 0; ii < availableCurrencyList.length; ii++) {\\n            if (SSRP_PREMIUM[availableCurrencyList[ii]] > 0) {\\n                if (availableCurrencyList[ii] == USDC_TOKEN) {\\n                    usdcAmountToDeposit += SSRP_PREMIUM[availableCurrencyList[ii]];\\n                } else {\\n                    uint256 convertedUSDCAmount = IExchangeAgent(exchangeAgent).convertForToken(\\n                        availableCurrencyList[ii],\\n                        USDC_TOKEN,\\n                        SSRP_PREMIUM[availableCurrencyList[ii]]\\n                    );\\n                    usdcAmountToDeposit += convertedUSDCAmount;\\n                }\\n                SSRP_PREMIUM[availableCurrencyList[ii]] = 0;\\n            }\\n        }\\n        if (usdcAmountToDeposit > 0) {\\n            TransferHelper.safeTransfer(USDC_TOKEN, _rewarder, usdcAmountToDeposit);\\n            emit LogDepositToSyntheticSSRPRewarder(_rewarder, usdcAmountToDeposit);\\n        }\\n    }\\n\\n    function depositToSyntheticSSIPRewarder(\\n        address _currency,\\n        address _rewarder,\\n        uint256 _amount\\n    ) external onlyOwner nonReentrant {\\n        require(_rewarder != address(0), \\\"UnoRe: zero address\\\");\\n        require(_rewarder.isContract(), \\\"UnoRe: no contract address\\\");\\n        if (_currency == address(0) && SSIP_PREMIUM_ETH > 0) {\\n            require(_amount <= SSIP_PREMIUM_ETH, \\\"UnoRe: premium balance overflow\\\");\\n            TransferHelper.safeTransferETH(_rewarder, _amount);\\n            SSIP_PREMIUM_ETH -= _amount;\\n            emit LogDepositToSyntheticSSIPRewarder(_rewarder, _currency, _amount);\\n        } else {\\n            if (availableCurrencies[_currency] && SSIP_PREMIUM[_currency] > 0) {\\n                require(_amount <= SSIP_PREMIUM[_currency], \\\"UnoRe: premium balance overflow\\\");\\n                TransferHelper.safeTransfer(_currency, _rewarder, _amount);\\n                SSIP_PREMIUM[_currency] -= _amount;\\n                emit LogDepositToSyntheticSSIPRewarder(_rewarder, _currency, _amount);\\n            }\\n        }\\n    }\\n\\n    function buyBackAndBurn() external onlyOwner {\\n        uint256 unoAmount = 0;\\n        if (BACK_BURN_PREMIUM_ETH > 0) {\\n            TransferHelper.safeTransferETH(exchangeAgent, BACK_BURN_PREMIUM_ETH);\\n            unoAmount += IExchangeAgent(exchangeAgent).convertForToken(address(0), UNO_TOKEN, BACK_BURN_PREMIUM_ETH);\\n            BACK_BURN_PREMIUM_ETH = 0;\\n        }\\n        for (uint256 ii = 0; ii < availableCurrencyList.length; ii++) {\\n            if (BACK_BURN_UNO_PREMIUM[availableCurrencyList[ii]] > 0) {\\n                uint256 convertedAmount = IExchangeAgent(exchangeAgent).convertForToken(\\n                    availableCurrencyList[ii],\\n                    UNO_TOKEN,\\n                    BACK_BURN_UNO_PREMIUM[availableCurrencyList[ii]]\\n                );\\n                unoAmount += convertedAmount;\\n                BACK_BURN_UNO_PREMIUM[availableCurrencyList[ii]] = 0;\\n            }\\n        }\\n        if (unoAmount > 0) {\\n            TransferHelper.safeTransfer(UNO_TOKEN, burnAddress, unoAmount);\\n        }\\n        emit LogBuyBackAndBurn(msg.sender, address(this), unoAmount);\\n    }\\n\\n    function withdrawPremium(\\n        address _currency,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner {\\n        require(_to != address(0), \\\"UnoRe: zero address\\\");\\n        require(_amount > 0, \\\"UnoRe: zero amount\\\");\\n        if (_currency == address(0)) {\\n            require(address(this).balance >= _amount, \\\"UnoRe: Insufficient Premium\\\");\\n            TransferHelper.safeTransferETH(_to, _amount);\\n        } else {\\n            require(IERC20(_currency).balanceOf(address(this)) >= _amount, \\\"UnoRe: Insufficient Premium\\\");\\n            TransferHelper.safeTransfer(_currency, _to, _amount);\\n        }\\n        emit PremiumWithdraw(_currency, _to, _amount);\\n    }\\n\\n    function addCurrency(address _currency) external onlyOwner {\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\n        availableCurrencies[_currency] = true;\\n        availableCurrencyList.push(_currency);\\n        maxApproveCurrency(_currency, exchangeAgent);\\n        emit LogAddCurrency(address(this), _currency);\\n    }\\n\\n    function removeCurrency(address _currency) external onlyOwner {\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\n        availableCurrencies[_currency] = false;\\n        uint256 len = availableCurrencyList.length;\\n        address lastCurrency = availableCurrencyList[len - 1];\\n        for (uint256 ii = 0; ii < len; ii++) {\\n            if (_currency == availableCurrencyList[ii]) {\\n                availableCurrencyList[ii] = lastCurrency;\\n                availableCurrencyList.pop();\\n                destroyCurrencyAllowance(_currency, exchangeAgent);\\n                return;\\n            }\\n        }\\n        emit LogRemoveCurrency(address(this), _currency);\\n    }\\n\\n    function maxApproveCurrency(address _currency, address _to) public onlyOwner nonReentrant {\\n        if (IERC20(_currency).allowance(address(this), _to) < MAX_INTEGER) {\\n            TransferHelper.safeApprove(_currency, _to, MAX_INTEGER);\\n            emit LogMaxApproveCurrency(address(this), _currency, _to);\\n        }\\n    }\\n\\n    function destroyCurrencyAllowance(address _currency, address _to) public onlyOwner nonReentrant {\\n        if (IERC20(_currency).allowance(address(this), _to) > 0) {\\n            TransferHelper.safeApprove(_currency, _to, 0);\\n            emit LogMaxDestroyCurrencyAllowance(address(this), _currency, _to);\\n        }\\n    }\\n\\n    function addWhiteList(address _whiteListAddress) external onlyOwner {\\n        require(_whiteListAddress != address(0), \\\"UnoRe: zero address\\\");\\n        require(!whiteList[_whiteListAddress], \\\"UnoRe: white list already\\\");\\n        whiteList[_whiteListAddress] = true;\\n        emit LogAddWhiteList(address(this), _whiteListAddress);\\n    }\\n\\n    function removeWhiteList(address _whiteListAddress) external onlyOwner {\\n        require(_whiteListAddress != address(0), \\\"UnoRe: zero address\\\");\\n        require(whiteList[_whiteListAddress], \\\"UnoRe: white list removed or unadded already\\\");\\n        whiteList[_whiteListAddress] = false;\\n        emit LogRemoveWhiteList(address(this), _whiteListAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xa5a5dac9b95095d573f2ae6bb324f5a29ca97e887b4eb5e9388aa7c07bba1d08\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IExchangeAgent {\\n    function USDC_TOKEN() external view returns (address);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external view returns (uint256);\\n\\n    function convertForToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x325c7b39b8dc75cbed47c33bf7ed5e1fc94f8458b7d7f748ce77f90099a179cd\",\"license\":\"MIT\"},\"contracts/interfaces/IPremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IPremiumPool {\\n    function collectPremium(address _premiumCurrency, uint256 _premiumAmount) external;\\n\\n    function collectPremiumInETH() external payable;\\n\\n    function withdrawPremium(\\n        address _currency,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0936fc16db359003c002ef420acd4e4894b6271ca8cb91a2d0a5c8f357f3590c\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052600019600e553480156200001757600080fd5b5060405162002d7838038062002d788339810160408190526200003a916200026b565b6001600055620000536200004d6200016c565b62000170565b6001600160a01b038416620000855760405162461bcd60e51b81526004016200007c9062000386565b60405180910390fd5b6001600160a01b038316620000ae5760405162461bcd60e51b81526004016200007c90620003fc565b6001600160a01b038216620000d75760405162461bcd60e51b81526004016200007c906200034f565b6001600160a01b038116620001005760405162461bcd60e51b81526004016200007c906200030d565b600280546001600160a01b038087166001600160a01b031992831617909255600380548684169083161790556004805492851692909116919091179055336000908152600760205260409020805460ff191660011790556200016281620001c2565b5050505062000433565b3390565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001cc6200016c565b6001600160a01b0316620001df6200023f565b6001600160a01b031614620002085760405162461bcd60e51b81526004016200007c90620003c7565b6001600160a01b038116620002315760405162461bcd60e51b81526004016200007c90620002c7565b6200023c8162000170565b50565b6001546001600160a01b031690565b80516001600160a01b03811681146200026657600080fd5b919050565b6000806000806080858703121562000281578384fd5b6200028c856200024e565b93506200029c602086016200024e565b9250620002ac604086016200024e565b9150620002bc606086016200024e565b905092959194509250565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f556e6f52653a207a65726f206d756c746973696777616c6c6574206164647265604082015261737360f01b606082015260800190565b60208082526018908201527f556e6f52653a207a65726f205553444320616464726573730000000000000000604082015260600190565b60208082526021908201527f556e6f52653a207a65726f2065786368616e67654167656e74206164647265736040820152607360f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527f556e6f52653a207a65726f20554e4f2061646472657373000000000000000000604082015260600190565b61293580620004436000396000f3fe6080604052600436106101bb5760003560e01c80638c8ac76d116100ec578063d20535941161008a578063e7cd4a0411610064578063e7cd4a041461047e578063f2fde38b1461049e578063f88822c4146104be578063fa569274146104de576101c2565b8063d205359414610429578063d84e305a14610449578063d9203b9114610469576101c2565b8063bc181416116100c6578063bc181416146103cc578063c4ddd57c146103d4578063c5d3a107146103f4578063c970e99f14610414576101c2565b80638c8ac76d146103775780638da5cb5b1461039757806397274e6e146103ac576101c2565b8063493721f51161015957806370d5ae051161013357806370d5ae051461030d578063715018a614610322578063729ae6b0146103375780638ab234b614610357576101c2565b8063493721f5146102b857806354ea1d7d146102cd5780635bb48a00146102ed576101c2565b8063140742371161019557806314074237146102345780631af42c0f146102495780632042e5c214610276578063372c12b114610298576101c2565b8063095002b8146101c75780630cf84e0b146101f25780630f97b97b14610212576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101dc6104f3565b6040516101e99190612857565b60405180910390f35b3480156101fe57600080fd5b506101dc61020d3660046121e1565b6104f9565b34801561021e57600080fd5b5061022761050b565b6040516101e99190612321565b34801561024057600080fd5b506101dc61051a565b34801561025557600080fd5b506102696102643660046121e1565b610520565b6040516101e9919061238c565b34801561028257600080fd5b506102966102913660046121e1565b610535565b005b3480156102a457600080fd5b506102696102b33660046121e1565b610625565b3480156102c457600080fd5b506101dc61063a565b3480156102d957600080fd5b506102966102e8366004612202565b610640565b3480156102f957600080fd5b506102276103083660046122b8565b610780565b34801561031957600080fd5b506102276107aa565b34801561032e57600080fd5b506102966107b0565b34801561034357600080fd5b506101dc6103523660046121e1565b6107fb565b34801561036357600080fd5b506102966103723660046121e1565b61080d565b34801561038357600080fd5b5061029661039236600461226f565b610940565b3480156103a357600080fd5b50610227610bbc565b3480156103b857600080fd5b506102966103c7366004612202565b610bcb565b610296610d08565b3480156103e057600080fd5b506101dc6103ef3660046121e1565b610e27565b34801561040057600080fd5b5061029661040f3660046121e1565b610e39565b34801561042057600080fd5b5061029661106a565b34801561043557600080fd5b50610296610444366004612234565b6113cb565b34801561045557600080fd5b50610296610464366004612234565b611645565b34801561047557600080fd5b506102276117fe565b34801561048a57600080fd5b506102966104993660046121e1565b61180d565b3480156104aa57600080fd5b506102966104b93660046121e1565b6118f8565b3480156104ca57600080fd5b506102966104d93660046121e1565b611966565b3480156104ea57600080fd5b50610227611df9565b600d5481565b600a6020526000908152604090205481565b6003546001600160a01b031681565b600b5481565b60056020526000908152604090205460ff1681565b61053d611e08565b6001600160a01b031661054e610bbc565b6001600160a01b03161461057d5760405162461bcd60e51b81526004016105749061268c565b60405180910390fd5b6001600160a01b0381166105a35760405162461bcd60e51b8152600401610574906123f4565b6001600160a01b03811660009081526007602052604090205460ff166105db5760405162461bcd60e51b81526004016105749061242b565b6001600160a01b038116600081815260076020526040808220805460ff191690555130917f2f467772ef0a5478314f3bc2b37d4b2ad29b65f052b2cedc8e2972dda033529291a350565b60076020526000908152604090205460ff1681565b600c5481565b610648611e08565b6001600160a01b0316610659610bbc565b6001600160a01b03161461067f5760405162461bcd60e51b81526004016105749061268c565b600260005414156106a25760405162461bcd60e51b8152600401610574906127e9565b6002600055600e54604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906106d89030908690600401612335565b60206040518083038186803b1580156106f057600080fd5b505afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072891906122d0565b10156107775761073b8282600e54611e0c565b6040516001600160a01b03808316919084169030907f43121c61393a372aa50e4d3b0ec4003cce2d54e92ae7799836389597d5ead98d90600090a45b50506001600055565b6006818154811061079057600080fd5b6000918252602090912001546001600160a01b0316905081565b61dead81565b6107b8611e08565b6001600160a01b03166107c9610bbc565b6001600160a01b0316146107ef5760405162461bcd60e51b81526004016105749061268c565b6107f96000611ef9565b565b60096020526000908152604090205481565b610815611e08565b6001600160a01b0316610826610bbc565b6001600160a01b03161461084c5760405162461bcd60e51b81526004016105749061268c565b6001600160a01b03811660009081526005602052604090205460ff16156108855760405162461bcd60e51b8152600401610574906125b0565b6001600160a01b038082166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff1916909117905560025461090791839116610640565b6040516001600160a01b0382169030907fc2def0bb3cfcff0462d9a69faa99e2ddeb1bf6b642d12a1fe3ed6653944fecd590600090a350565b600260005414156109635760405162461bcd60e51b8152600401610574906127e9565b600260009081556001600160a01b038316815260056020526040902054829060ff166109a15760405162461bcd60e51b8152600401610574906124e5565b3360009081526007602052604090205460ff166109d05760405162461bcd60e51b815260040161057490612755565b6040516370a0823160e01b815282906001600160a01b038516906370a08231906109fe903390600401612321565b60206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e91906122d0565b1015610a6c5760405162461bcd60e51b8152600401610574906125e7565b610a7883333085611f58565b6000612710610a89846103e8612898565b610a939190612878565b90506000612710610aa685611b58612898565b610ab09190612878565b6001600160a01b038616600090815260086020526040902054909150610ad7908390612860565b6001600160a01b038616600090815260086020908152604080832093909355600990522054610b07908290612860565b6001600160a01b03861660009081526009602052604090205580610b2b83866128b7565b610b3591906128b7565b6001600160a01b0386166000908152600a6020526040902054610b589190612860565b6001600160a01b0386166000908152600a602052604090819020919091555133907f411101aad886ab4351e7c392d06f013b37a7c6c00b7f964bca364da03df0e7d590610ba89088908890612373565b60405180910390a250506001600055505050565b6001546001600160a01b031690565b610bd3611e08565b6001600160a01b0316610be4610bbc565b6001600160a01b031614610c0a5760405162461bcd60e51b81526004016105749061268c565b60026000541415610c2d5760405162461bcd60e51b8152600401610574906127e9565b60026000908155604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610c629030908690600401612335565b60206040518083038186803b158015610c7a57600080fd5b505afa158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb291906122d0565b111561077757610cc482826000611e0c565b6040516001600160a01b03808316919084169030907fefc983aa790fe837a31d17855afa75e3d276afef0959edcd4edd1a5e09905ee590600090a450506001600055565b60026000541415610d2b5760405162461bcd60e51b8152600401610574906127e9565b600260009081553381526007602052604090205460ff16610d5e5760405162461bcd60e51b815260040161057490612755565b346000612710610d70836103e8612898565b610d7a9190612878565b90506000612710610d8d84611b58612898565b610d979190612878565b905081600b54610da79190612860565b600b55600c54610db8908290612860565b600c5580610dc683856128b7565b610dd091906128b7565b600d54610ddd9190612860565b600d5560405133907f411101aad886ab4351e7c392d06f013b37a7c6c00b7f964bca364da03df0e7d590610e15906000908790612373565b60405180910390a25050600160005550565b60086020526000908152604090205481565b610e41611e08565b6001600160a01b0316610e52610bbc565b6001600160a01b031614610e785760405162461bcd60e51b81526004016105749061268c565b6001600160a01b03811660009081526005602052604090205460ff16610eb05760405162461bcd60e51b8152600401610574906126c1565b6001600160a01b0381166000908152600560205260408120805460ff19169055600680549190610ee16001846128b7565b81548110610eff57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b031691505b8281101561102d5760068181548110610f3f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038581169116141561101b578160068281548110610f8057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506006805480610fcd57634e487b7160e01b600052603160045260246000fd5b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff191690550190556002546110139085906001600160a01b0316610bcb565b505050611067565b80611025816128ce565b915050610f16565b506040516001600160a01b0384169030907f39198a02f988846be034bb915c4f3e43a226a15d6f29cf21918e838b1a5f878490600090a350505b50565b611072611e08565b6001600160a01b0316611083610bbc565b6001600160a01b0316146110a95760405162461bcd60e51b81526004016105749061268c565b600d546000901561116d57600254600d546110cd916001600160a01b031690612048565b600254600354600d546040516393badc4160e01b81526001600160a01b03938416936393badc419361110993600093929091169160040161234f565b602060405180830381600087803b15801561112357600080fd5b505af1158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b91906122d0565b6111659082612860565b6000600d5590505b60005b60065481101561136c576000600a6000600684815481106111a157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054111561135a57600254600680546000926001600160a01b0316916393badc41918590811061120457634e487b7160e01b600052603260045260246000fd5b6000918252602082200154600354600680546001600160a01b03938416949290931692600a9291908990811061124a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260409081019091205490517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526112ac9392919060040161234f565b602060405180830381600087803b1580156112c657600080fd5b505af11580156112da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fe91906122d0565b905061130a8184612860565b92506000600a60006006858154811061133357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902055505b80611364816128ce565b915050611170565b50801561138c5760035461138c906001600160a01b031661dead836120da565b604051309033907f94032d93ea01eeeccc1b1f03a7eddaf352c7cd85e246c6fc01afed0ddf6b5c1d906113c0908590612857565b60405180910390a350565b6113d3611e08565b6001600160a01b03166113e4610bbc565b6001600160a01b03161461140a5760405162461bcd60e51b81526004016105749061268c565b6002600054141561142d5760405162461bcd60e51b8152600401610574906127e9565b60026000556001600160a01b0382166114585760405162461bcd60e51b8152600401610574906123f4565b61146a826001600160a01b03166121c0565b6114865760405162461bcd60e51b815260040161057490612820565b6001600160a01b03831615801561149f57506000600c54115b1561153957600c548111156114c65760405162461bcd60e51b8152600401610574906125e7565b6114d08282612048565b80600c60008282546114e291906128b7565b92505081905550826001600160a01b0316826001600160a01b03167f370cbb08cddf346c35e924a503aa223dcc1b75a993d7c23a602d2e4bc0802c108360405161152c9190612857565b60405180910390a361163b565b6001600160a01b03831660009081526005602052604090205460ff16801561157857506001600160a01b03831660009081526009602052604090205415155b1561163b576001600160a01b0383166000908152600960205260409020548111156115b55760405162461bcd60e51b8152600401610574906125e7565b6115c08383836120da565b6001600160a01b038316600090815260096020526040812080548392906115e89084906128b7565b92505081905550826001600160a01b0316826001600160a01b03167f370cbb08cddf346c35e924a503aa223dcc1b75a993d7c23a602d2e4bc0802c10836040516116329190612857565b60405180910390a35b5050600160005550565b61164d611e08565b6001600160a01b031661165e610bbc565b6001600160a01b0316146116845760405162461bcd60e51b81526004016105749061268c565b6001600160a01b0382166116aa5760405162461bcd60e51b8152600401610574906123f4565b600081116116ca5760405162461bcd60e51b81526004016105749061261e565b6001600160a01b03831661170757804710156116f85760405162461bcd60e51b815260040161057490612655565b6117028282612048565b6117ae565b6040516370a0823160e01b815281906001600160a01b038516906370a0823190611735903090600401612321565b60206040518083038186803b15801561174d57600080fd5b505afa158015611761573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178591906122d0565b10156117a35760405162461bcd60e51b815260040161057490612655565b6117ae8383836120da565b816001600160a01b0316836001600160a01b03167f8d18a25569e967883ac0402e6991b4ac87616370a1c2ce59726abce4ef45bdb8836040516117f19190612857565b60405180910390a3505050565b6002546001600160a01b031681565b611815611e08565b6001600160a01b0316611826610bbc565b6001600160a01b03161461184c5760405162461bcd60e51b81526004016105749061268c565b6001600160a01b0381166118725760405162461bcd60e51b8152600401610574906123f4565b6001600160a01b03811660009081526007602052604090205460ff16156118ab5760405162461bcd60e51b815260040161057490612579565b6001600160a01b038116600081815260076020526040808220805460ff191660011790555130917f8cd7b0b1a7316eb3e5d781d629cb8bf4e2fd9a8903bdd0f6b894c087d61b21f291a350565b611900611e08565b6001600160a01b0316611911610bbc565b6001600160a01b0316146119375760405162461bcd60e51b81526004016105749061268c565b6001600160a01b03811661195d5760405162461bcd60e51b815260040161057490612397565b61106781611ef9565b61196e611e08565b6001600160a01b031661197f610bbc565b6001600160a01b0316146119a55760405162461bcd60e51b81526004016105749061268c565b600260005414156119c85760405162461bcd60e51b8152600401610574906127e9565b60026000556001600160a01b0381166119f35760405162461bcd60e51b8152600401610574906123f4565b611a05816001600160a01b03166121c0565b611a215760405162461bcd60e51b815260040161057490612820565b600b5460009015611aea57600254600b54611a45916001600160a01b031690612048565b60025460048054600b546040516393badc4160e01b81526000946001600160a01b03908116946393badc4194611a839488949190931692910161234f565b602060405180830381600087803b158015611a9d57600080fd5b505af1158015611ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad591906122d0565b9050611ae18183612860565b6000600b559150505b60005b600654811015611d915760006008600060068481548110611b1e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020541115611d7f57600454600680546001600160a01b039092169183908110611b7a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611bf0576008600060068381548110611bba57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054611be99083612860565b9150611d32565b600254600680546000926001600160a01b0316916393badc419185908110611c2857634e487b7160e01b600052603260045260246000fd5b6000918252602082200154600454600680546001600160a01b03938416949290931692600892919089908110611c6e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260409081019091205490517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152611cd09392919060040161234f565b602060405180830381600087803b158015611cea57600080fd5b505af1158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2291906122d0565b9050611d2e8184612860565b9250505b60006008600060068481548110611d5957634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b80611d89816128ce565b915050611aed565b50801561077757600454611daf906001600160a01b031683836120da565b816001600160a01b03167f9a380c5d696c8e394928ff8981a11ee388a14e2f7e16d373d73486cf3c48625482604051611de89190612857565b60405180910390a250506001600055565b6004546001600160a01b031681565b3390565b600080846001600160a01b031663095ea7b38585604051602401611e31929190612373565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611e6a91906122e8565b6000604051808303816000865af19150503d8060008114611ea7576040519150601f19603f3d011682016040523d82523d6000602084013e611eac565b606091505b5091509150818015611ed6575080511580611ed6575080806020019051810190611ed69190612298565b611ef25760405162461bcd60e51b8152600401610574906126f8565b5050505050565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080856001600160a01b03166323b872dd868686604051602401611f7f9392919061234f565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611fb891906122e8565b6000604051808303816000865af19150503d8060008114611ff5576040519150601f19603f3d011682016040523d82523d6000602084013e611ffa565b606091505b50915091508180156120245750805115806120245750808060200190518101906120249190612298565b6120405760405162461bcd60e51b815260040161057490612488565b505050505050565b604080516000808252602082019092526001600160a01b03841690839060405161207291906122e8565b60006040518083038185875af1925050503d80600081146120af576040519150601f19603f3d011682016040523d82523d6000602084013e6120b4565b606091505b50509050806120d55760405162461bcd60e51b81526004016105749061251c565b505050565b600080846001600160a01b031663a9059cbb85856040516024016120ff929190612373565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161213891906122e8565b6000604051808303816000865af19150503d8060008114612175576040519150601f19603f3d011682016040523d82523d6000602084013e61217a565b606091505b50915091508180156121a45750805115806121a45750808060200190518101906121a49190612298565b611ef25760405162461bcd60e51b81526004016105749061278c565b803b15155b919050565b80356001600160a01b03811681146121c557600080fd5b6000602082840312156121f2578081fd5b6121fb826121ca565b9392505050565b60008060408385031215612214578081fd5b61221d836121ca565b915061222b602084016121ca565b90509250929050565b600080600060608486031215612248578081fd5b612251846121ca565b925061225f602085016121ca565b9150604084013590509250925092565b60008060408385031215612281578182fd5b61228a836121ca565b946020939093013593505050565b6000602082840312156122a9578081fd5b815180151581146121fb578182fd5b6000602082840312156122c9578081fd5b5035919050565b6000602082840312156122e1578081fd5b5051919050565b60008251815b8181101561230857602081860181015185830152016122ee565b818111156123165782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252602c908201527f556e6f52653a207768697465206c6973742072656d6f766564206f7220756e6160408201527f6464656420616c72656164790000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f7765642063757272656e63790000000000604082015260600190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526019908201527f556e6f52653a207768697465206c69737420616c726561647900000000000000604082015260600190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a207072656d69756d2062616c616e6365206f766572666c6f7700604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b6020808252601b908201527f556e6f52653a20496e73756666696369656e74205072656d69756d0000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201527f726f7665206661696c6564000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f556e6f52653a206e6f74207768697465206c6973742061646472657373000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601a908201527f556e6f52653a206e6f20636f6e74726163742061646472657373000000000000604082015260600190565b90815260200190565b60008219821115612873576128736128e9565b500190565b60008261289357634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156128b2576128b26128e9565b500290565b6000828210156128c9576128c96128e9565b500390565b60006000198214156128e2576128e26128e9565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220bc011e08a7173c135b7ab90ef4956658e7f4fc697e246925df343e52b81a5fa264736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80638c8ac76d116100ec578063d20535941161008a578063e7cd4a0411610064578063e7cd4a041461047e578063f2fde38b1461049e578063f88822c4146104be578063fa569274146104de576101c2565b8063d205359414610429578063d84e305a14610449578063d9203b9114610469576101c2565b8063bc181416116100c6578063bc181416146103cc578063c4ddd57c146103d4578063c5d3a107146103f4578063c970e99f14610414576101c2565b80638c8ac76d146103775780638da5cb5b1461039757806397274e6e146103ac576101c2565b8063493721f51161015957806370d5ae051161013357806370d5ae051461030d578063715018a614610322578063729ae6b0146103375780638ab234b614610357576101c2565b8063493721f5146102b857806354ea1d7d146102cd5780635bb48a00146102ed576101c2565b8063140742371161019557806314074237146102345780631af42c0f146102495780632042e5c214610276578063372c12b114610298576101c2565b8063095002b8146101c75780630cf84e0b146101f25780630f97b97b14610212576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101dc6104f3565b6040516101e99190612857565b60405180910390f35b3480156101fe57600080fd5b506101dc61020d3660046121e1565b6104f9565b34801561021e57600080fd5b5061022761050b565b6040516101e99190612321565b34801561024057600080fd5b506101dc61051a565b34801561025557600080fd5b506102696102643660046121e1565b610520565b6040516101e9919061238c565b34801561028257600080fd5b506102966102913660046121e1565b610535565b005b3480156102a457600080fd5b506102696102b33660046121e1565b610625565b3480156102c457600080fd5b506101dc61063a565b3480156102d957600080fd5b506102966102e8366004612202565b610640565b3480156102f957600080fd5b506102276103083660046122b8565b610780565b34801561031957600080fd5b506102276107aa565b34801561032e57600080fd5b506102966107b0565b34801561034357600080fd5b506101dc6103523660046121e1565b6107fb565b34801561036357600080fd5b506102966103723660046121e1565b61080d565b34801561038357600080fd5b5061029661039236600461226f565b610940565b3480156103a357600080fd5b50610227610bbc565b3480156103b857600080fd5b506102966103c7366004612202565b610bcb565b610296610d08565b3480156103e057600080fd5b506101dc6103ef3660046121e1565b610e27565b34801561040057600080fd5b5061029661040f3660046121e1565b610e39565b34801561042057600080fd5b5061029661106a565b34801561043557600080fd5b50610296610444366004612234565b6113cb565b34801561045557600080fd5b50610296610464366004612234565b611645565b34801561047557600080fd5b506102276117fe565b34801561048a57600080fd5b506102966104993660046121e1565b61180d565b3480156104aa57600080fd5b506102966104b93660046121e1565b6118f8565b3480156104ca57600080fd5b506102966104d93660046121e1565b611966565b3480156104ea57600080fd5b50610227611df9565b600d5481565b600a6020526000908152604090205481565b6003546001600160a01b031681565b600b5481565b60056020526000908152604090205460ff1681565b61053d611e08565b6001600160a01b031661054e610bbc565b6001600160a01b03161461057d5760405162461bcd60e51b81526004016105749061268c565b60405180910390fd5b6001600160a01b0381166105a35760405162461bcd60e51b8152600401610574906123f4565b6001600160a01b03811660009081526007602052604090205460ff166105db5760405162461bcd60e51b81526004016105749061242b565b6001600160a01b038116600081815260076020526040808220805460ff191690555130917f2f467772ef0a5478314f3bc2b37d4b2ad29b65f052b2cedc8e2972dda033529291a350565b60076020526000908152604090205460ff1681565b600c5481565b610648611e08565b6001600160a01b0316610659610bbc565b6001600160a01b03161461067f5760405162461bcd60e51b81526004016105749061268c565b600260005414156106a25760405162461bcd60e51b8152600401610574906127e9565b6002600055600e54604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906106d89030908690600401612335565b60206040518083038186803b1580156106f057600080fd5b505afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072891906122d0565b10156107775761073b8282600e54611e0c565b6040516001600160a01b03808316919084169030907f43121c61393a372aa50e4d3b0ec4003cce2d54e92ae7799836389597d5ead98d90600090a45b50506001600055565b6006818154811061079057600080fd5b6000918252602090912001546001600160a01b0316905081565b61dead81565b6107b8611e08565b6001600160a01b03166107c9610bbc565b6001600160a01b0316146107ef5760405162461bcd60e51b81526004016105749061268c565b6107f96000611ef9565b565b60096020526000908152604090205481565b610815611e08565b6001600160a01b0316610826610bbc565b6001600160a01b03161461084c5760405162461bcd60e51b81526004016105749061268c565b6001600160a01b03811660009081526005602052604090205460ff16156108855760405162461bcd60e51b8152600401610574906125b0565b6001600160a01b038082166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff1916909117905560025461090791839116610640565b6040516001600160a01b0382169030907fc2def0bb3cfcff0462d9a69faa99e2ddeb1bf6b642d12a1fe3ed6653944fecd590600090a350565b600260005414156109635760405162461bcd60e51b8152600401610574906127e9565b600260009081556001600160a01b038316815260056020526040902054829060ff166109a15760405162461bcd60e51b8152600401610574906124e5565b3360009081526007602052604090205460ff166109d05760405162461bcd60e51b815260040161057490612755565b6040516370a0823160e01b815282906001600160a01b038516906370a08231906109fe903390600401612321565b60206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e91906122d0565b1015610a6c5760405162461bcd60e51b8152600401610574906125e7565b610a7883333085611f58565b6000612710610a89846103e8612898565b610a939190612878565b90506000612710610aa685611b58612898565b610ab09190612878565b6001600160a01b038616600090815260086020526040902054909150610ad7908390612860565b6001600160a01b038616600090815260086020908152604080832093909355600990522054610b07908290612860565b6001600160a01b03861660009081526009602052604090205580610b2b83866128b7565b610b3591906128b7565b6001600160a01b0386166000908152600a6020526040902054610b589190612860565b6001600160a01b0386166000908152600a602052604090819020919091555133907f411101aad886ab4351e7c392d06f013b37a7c6c00b7f964bca364da03df0e7d590610ba89088908890612373565b60405180910390a250506001600055505050565b6001546001600160a01b031690565b610bd3611e08565b6001600160a01b0316610be4610bbc565b6001600160a01b031614610c0a5760405162461bcd60e51b81526004016105749061268c565b60026000541415610c2d5760405162461bcd60e51b8152600401610574906127e9565b60026000908155604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610c629030908690600401612335565b60206040518083038186803b158015610c7a57600080fd5b505afa158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb291906122d0565b111561077757610cc482826000611e0c565b6040516001600160a01b03808316919084169030907fefc983aa790fe837a31d17855afa75e3d276afef0959edcd4edd1a5e09905ee590600090a450506001600055565b60026000541415610d2b5760405162461bcd60e51b8152600401610574906127e9565b600260009081553381526007602052604090205460ff16610d5e5760405162461bcd60e51b815260040161057490612755565b346000612710610d70836103e8612898565b610d7a9190612878565b90506000612710610d8d84611b58612898565b610d979190612878565b905081600b54610da79190612860565b600b55600c54610db8908290612860565b600c5580610dc683856128b7565b610dd091906128b7565b600d54610ddd9190612860565b600d5560405133907f411101aad886ab4351e7c392d06f013b37a7c6c00b7f964bca364da03df0e7d590610e15906000908790612373565b60405180910390a25050600160005550565b60086020526000908152604090205481565b610e41611e08565b6001600160a01b0316610e52610bbc565b6001600160a01b031614610e785760405162461bcd60e51b81526004016105749061268c565b6001600160a01b03811660009081526005602052604090205460ff16610eb05760405162461bcd60e51b8152600401610574906126c1565b6001600160a01b0381166000908152600560205260408120805460ff19169055600680549190610ee16001846128b7565b81548110610eff57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b031691505b8281101561102d5760068181548110610f3f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038581169116141561101b578160068281548110610f8057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506006805480610fcd57634e487b7160e01b600052603160045260246000fd5b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff191690550190556002546110139085906001600160a01b0316610bcb565b505050611067565b80611025816128ce565b915050610f16565b506040516001600160a01b0384169030907f39198a02f988846be034bb915c4f3e43a226a15d6f29cf21918e838b1a5f878490600090a350505b50565b611072611e08565b6001600160a01b0316611083610bbc565b6001600160a01b0316146110a95760405162461bcd60e51b81526004016105749061268c565b600d546000901561116d57600254600d546110cd916001600160a01b031690612048565b600254600354600d546040516393badc4160e01b81526001600160a01b03938416936393badc419361110993600093929091169160040161234f565b602060405180830381600087803b15801561112357600080fd5b505af1158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b91906122d0565b6111659082612860565b6000600d5590505b60005b60065481101561136c576000600a6000600684815481106111a157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054111561135a57600254600680546000926001600160a01b0316916393badc41918590811061120457634e487b7160e01b600052603260045260246000fd5b6000918252602082200154600354600680546001600160a01b03938416949290931692600a9291908990811061124a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260409081019091205490517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526112ac9392919060040161234f565b602060405180830381600087803b1580156112c657600080fd5b505af11580156112da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fe91906122d0565b905061130a8184612860565b92506000600a60006006858154811061133357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902055505b80611364816128ce565b915050611170565b50801561138c5760035461138c906001600160a01b031661dead836120da565b604051309033907f94032d93ea01eeeccc1b1f03a7eddaf352c7cd85e246c6fc01afed0ddf6b5c1d906113c0908590612857565b60405180910390a350565b6113d3611e08565b6001600160a01b03166113e4610bbc565b6001600160a01b03161461140a5760405162461bcd60e51b81526004016105749061268c565b6002600054141561142d5760405162461bcd60e51b8152600401610574906127e9565b60026000556001600160a01b0382166114585760405162461bcd60e51b8152600401610574906123f4565b61146a826001600160a01b03166121c0565b6114865760405162461bcd60e51b815260040161057490612820565b6001600160a01b03831615801561149f57506000600c54115b1561153957600c548111156114c65760405162461bcd60e51b8152600401610574906125e7565b6114d08282612048565b80600c60008282546114e291906128b7565b92505081905550826001600160a01b0316826001600160a01b03167f370cbb08cddf346c35e924a503aa223dcc1b75a993d7c23a602d2e4bc0802c108360405161152c9190612857565b60405180910390a361163b565b6001600160a01b03831660009081526005602052604090205460ff16801561157857506001600160a01b03831660009081526009602052604090205415155b1561163b576001600160a01b0383166000908152600960205260409020548111156115b55760405162461bcd60e51b8152600401610574906125e7565b6115c08383836120da565b6001600160a01b038316600090815260096020526040812080548392906115e89084906128b7565b92505081905550826001600160a01b0316826001600160a01b03167f370cbb08cddf346c35e924a503aa223dcc1b75a993d7c23a602d2e4bc0802c10836040516116329190612857565b60405180910390a35b5050600160005550565b61164d611e08565b6001600160a01b031661165e610bbc565b6001600160a01b0316146116845760405162461bcd60e51b81526004016105749061268c565b6001600160a01b0382166116aa5760405162461bcd60e51b8152600401610574906123f4565b600081116116ca5760405162461bcd60e51b81526004016105749061261e565b6001600160a01b03831661170757804710156116f85760405162461bcd60e51b815260040161057490612655565b6117028282612048565b6117ae565b6040516370a0823160e01b815281906001600160a01b038516906370a0823190611735903090600401612321565b60206040518083038186803b15801561174d57600080fd5b505afa158015611761573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178591906122d0565b10156117a35760405162461bcd60e51b815260040161057490612655565b6117ae8383836120da565b816001600160a01b0316836001600160a01b03167f8d18a25569e967883ac0402e6991b4ac87616370a1c2ce59726abce4ef45bdb8836040516117f19190612857565b60405180910390a3505050565b6002546001600160a01b031681565b611815611e08565b6001600160a01b0316611826610bbc565b6001600160a01b03161461184c5760405162461bcd60e51b81526004016105749061268c565b6001600160a01b0381166118725760405162461bcd60e51b8152600401610574906123f4565b6001600160a01b03811660009081526007602052604090205460ff16156118ab5760405162461bcd60e51b815260040161057490612579565b6001600160a01b038116600081815260076020526040808220805460ff191660011790555130917f8cd7b0b1a7316eb3e5d781d629cb8bf4e2fd9a8903bdd0f6b894c087d61b21f291a350565b611900611e08565b6001600160a01b0316611911610bbc565b6001600160a01b0316146119375760405162461bcd60e51b81526004016105749061268c565b6001600160a01b03811661195d5760405162461bcd60e51b815260040161057490612397565b61106781611ef9565b61196e611e08565b6001600160a01b031661197f610bbc565b6001600160a01b0316146119a55760405162461bcd60e51b81526004016105749061268c565b600260005414156119c85760405162461bcd60e51b8152600401610574906127e9565b60026000556001600160a01b0381166119f35760405162461bcd60e51b8152600401610574906123f4565b611a05816001600160a01b03166121c0565b611a215760405162461bcd60e51b815260040161057490612820565b600b5460009015611aea57600254600b54611a45916001600160a01b031690612048565b60025460048054600b546040516393badc4160e01b81526000946001600160a01b03908116946393badc4194611a839488949190931692910161234f565b602060405180830381600087803b158015611a9d57600080fd5b505af1158015611ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad591906122d0565b9050611ae18183612860565b6000600b559150505b60005b600654811015611d915760006008600060068481548110611b1e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020541115611d7f57600454600680546001600160a01b039092169183908110611b7a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611bf0576008600060068381548110611bba57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054611be99083612860565b9150611d32565b600254600680546000926001600160a01b0316916393badc419185908110611c2857634e487b7160e01b600052603260045260246000fd5b6000918252602082200154600454600680546001600160a01b03938416949290931692600892919089908110611c6e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260409081019091205490517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152611cd09392919060040161234f565b602060405180830381600087803b158015611cea57600080fd5b505af1158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2291906122d0565b9050611d2e8184612860565b9250505b60006008600060068481548110611d5957634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b80611d89816128ce565b915050611aed565b50801561077757600454611daf906001600160a01b031683836120da565b816001600160a01b03167f9a380c5d696c8e394928ff8981a11ee388a14e2f7e16d373d73486cf3c48625482604051611de89190612857565b60405180910390a250506001600055565b6004546001600160a01b031681565b3390565b600080846001600160a01b031663095ea7b38585604051602401611e31929190612373565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611e6a91906122e8565b6000604051808303816000865af19150503d8060008114611ea7576040519150601f19603f3d011682016040523d82523d6000602084013e611eac565b606091505b5091509150818015611ed6575080511580611ed6575080806020019051810190611ed69190612298565b611ef25760405162461bcd60e51b8152600401610574906126f8565b5050505050565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080856001600160a01b03166323b872dd868686604051602401611f7f9392919061234f565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611fb891906122e8565b6000604051808303816000865af19150503d8060008114611ff5576040519150601f19603f3d011682016040523d82523d6000602084013e611ffa565b606091505b50915091508180156120245750805115806120245750808060200190518101906120249190612298565b6120405760405162461bcd60e51b815260040161057490612488565b505050505050565b604080516000808252602082019092526001600160a01b03841690839060405161207291906122e8565b60006040518083038185875af1925050503d80600081146120af576040519150601f19603f3d011682016040523d82523d6000602084013e6120b4565b606091505b50509050806120d55760405162461bcd60e51b81526004016105749061251c565b505050565b600080846001600160a01b031663a9059cbb85856040516024016120ff929190612373565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161213891906122e8565b6000604051808303816000865af19150503d8060008114612175576040519150601f19603f3d011682016040523d82523d6000602084013e61217a565b606091505b50915091508180156121a45750805115806121a45750808060200190518101906121a49190612298565b611ef25760405162461bcd60e51b81526004016105749061278c565b803b15155b919050565b80356001600160a01b03811681146121c557600080fd5b6000602082840312156121f2578081fd5b6121fb826121ca565b9392505050565b60008060408385031215612214578081fd5b61221d836121ca565b915061222b602084016121ca565b90509250929050565b600080600060608486031215612248578081fd5b612251846121ca565b925061225f602085016121ca565b9150604084013590509250925092565b60008060408385031215612281578182fd5b61228a836121ca565b946020939093013593505050565b6000602082840312156122a9578081fd5b815180151581146121fb578182fd5b6000602082840312156122c9578081fd5b5035919050565b6000602082840312156122e1578081fd5b5051919050565b60008251815b8181101561230857602081860181015185830152016122ee565b818111156123165782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252602c908201527f556e6f52653a207768697465206c6973742072656d6f766564206f7220756e6160408201527f6464656420616c72656164790000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b6020808252601b908201527f556e6f52653a206e6f7420616c6c6f7765642063757272656e63790000000000604082015260600190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526019908201527f556e6f52653a207768697465206c69737420616c726561647900000000000000604082015260600190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a207072656d69756d2062616c616e6365206f766572666c6f7700604082015260600190565b60208082526012908201527f556e6f52653a207a65726f20616d6f756e740000000000000000000000000000604082015260600190565b6020808252601b908201527f556e6f52653a20496e73756666696369656e74205072656d69756d0000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201527f726f7665206661696c6564000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f556e6f52653a206e6f74207768697465206c6973742061646472657373000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601a908201527f556e6f52653a206e6f20636f6e74726163742061646472657373000000000000604082015260600190565b90815260200190565b60008219821115612873576128736128e9565b500190565b60008261289357634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156128b2576128b26128e9565b500290565b6000828210156128c9576128c96128e9565b500390565b60006000198214156128e2576128e26128e9565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220bc011e08a7173c135b7ab90ef4956658e7f4fc697e246925df343e52b81a5fa264736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5224,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5226,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "UNO_TOKEN",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5228,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "USDC_TOKEN",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5232,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5235,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "availableCurrencyList",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5239,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "whiteList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5246,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "SSRP_PREMIUM",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5250,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "SSIP_PREMIUM",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5254,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "BACK_BURN_UNO_PREMIUM",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5256,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "SSRP_PREMIUM_ETH",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5258,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "SSIP_PREMIUM_ETH",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5260,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "BACK_BURN_PREMIUM_ETH",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5267,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "MAX_INTEGER",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}