{
  "address": "0x8D847BFb2fF5A57D365c75F76436507a32378217",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "newRewarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd780c6a6b2c219d521460a281c48e20f0928fb60151826021bb5fd8b63db08d8",
  "receipt": {
    "to": null,
    "from": "0x8c3d5c9538256DAB8Eb4B197370574340fe3254F",
    "contractAddress": "0x8D847BFb2fF5A57D365c75F76436507a32378217",
    "transactionIndex": 7,
    "gasUsed": "1298351",
    "logsBloom": "0x
    "blockHash": "0xbd47fa8aba1978eb1117c3ca5b16c79c55a1d0ba05b019923e957f9c86df374b",
    "transactionHash": "0xd780c6a6b2c219d521460a281c48e20f0928fb60151826021bb5fd8b63db08d8",
    "logs": [],
    "blockNumber": 16910885,
    "cumulativeGasUsed": "2495174",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5d308971416f305de1bf25d98c94e082",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"newRewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/RewarderFactory.sol\":\"RewarderFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/Rewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./interfaces/IRewarder.sol\\\";\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\n\\r\\ninterface ISSIP {\\r\\n    struct PoolInfo {\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 accUnoPerShare;\\r\\n        uint256 unoMultiplierPerBlock;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 lastWithdrawTime;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    function poolInfo() external view returns (PoolInfo memory);\\r\\n\\r\\n    function userInfo(address _user) external view returns (UserInfo memory);\\r\\n\\r\\n    function riskPool() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract Rewarder is IRewarder, ReentrancyGuard {\\r\\n    using Address for address;\\r\\n\\r\\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\\r\\n\\r\\n    address public immutable override currency;\\r\\n    address public immutable pool;\\r\\n    address public operator;\\r\\n\\r\\n    event LogRewarderWithdraw(address indexed _rewarder, address _currency, address indexed _to, uint256 _amount);\\r\\n    event LogTransferOwnerShip(address indexed _rewarder, address indexed _oldOperator, address indexed _newOperator);\\r\\n    event LogForceSetUserRewardDebt(address indexed _to, uint256 _debt);\\r\\n\\r\\n    constructor(\\r\\n        address _operator,\\r\\n        address _currency,\\r\\n        address _pool\\r\\n    ) {\\r\\n        require(_operator != address(0), \\\"UnoRe: zero operator address\\\");\\r\\n        require(_pool != address(0), \\\"UnoRe: zero pool address\\\");\\r\\n        currency = _currency;\\r\\n        pool = _pool;\\r\\n        operator = _operator;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function onReward(address _to, uint256 _amount) external payable override onlyPOOL returns (uint256) {\\r\\n        require(tx.origin == _to, \\\"UnoRe: must be message sender\\\");\\r\\n        ISSIP ssip = ISSIP(pool);\\r\\n        ISSIP.UserInfo memory userInfos = ssip.userInfo(_to);\\r\\n        ISSIP.PoolInfo memory poolInfos = ssip.poolInfo();\\r\\n        uint256 accumulatedUno = (userInfos.amount * uint256(poolInfos.accUnoPerShare)) / ACC_UNO_PRECISION;\\r\\n\\r\\n        address riskPool = ssip.riskPool();\\r\\n\\r\\n        if (ssip.userInfo(riskPool).rewardDebt != accumulatedUno) {\\r\\n            require(userInfos.rewardDebt == accumulatedUno, \\\"UnoRe: updated rewarddebt incorrectly\\\");\\r\\n        }\\r\\n        require(accumulatedUno > _amount, \\\"UnoRe: invalid reward amount\\\");\\r\\n\\r\\n        if (currency == address(0)) {\\r\\n            require(address(this).balance >= _amount, \\\"UnoRe: insufficient reward balance\\\");\\r\\n            TransferHelper.safeTransferETH(_to, _amount);\\r\\n            return _amount;\\r\\n        } else {\\r\\n            require(IERC20(currency).balanceOf(address(this)) >= _amount, \\\"UnoRe: insufficient reward balance\\\");\\r\\n            TransferHelper.safeTransfer(currency, _to, _amount);\\r\\n            return _amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw(address _to, uint256 _amount) external onlyOperator {\\r\\n        require(_to != address(0), \\\"UnoRe: zero address reward\\\");\\r\\n        if (currency == address(0)) {\\r\\n            if (address(this).balance >= _amount) {\\r\\n                TransferHelper.safeTransferETH(_to, _amount);\\r\\n                emit LogRewarderWithdraw(address(this), currency, _to, _amount);\\r\\n            } else {\\r\\n                if (address(this).balance > 0) {\\r\\n                    uint256 rewardAmount = address(this).balance;\\r\\n                    TransferHelper.safeTransferETH(_to, address(this).balance);\\r\\n                    emit LogRewarderWithdraw(address(this), currency, _to, rewardAmount);\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            if (IERC20(currency).balanceOf(address(this)) >= _amount) {\\r\\n                TransferHelper.safeTransfer(currency, _to, _amount);\\r\\n                emit LogRewarderWithdraw(address(this), currency, _to, _amount);\\r\\n            } else {\\r\\n                if (IERC20(currency).balanceOf(address(this)) > 0) {\\r\\n                    uint256 rewardAmount = IERC20(currency).balanceOf(address(this));\\r\\n                    TransferHelper.safeTransfer(currency, _to, IERC20(currency).balanceOf(address(this)));\\r\\n                    emit LogRewarderWithdraw(address(this), currency, _to, rewardAmount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address _to) external onlyOperator {\\r\\n        require(_to != address(0), \\\"UnoRe: zero address reward\\\");\\r\\n        address oldOperator = operator;\\r\\n        operator = _to;\\r\\n        emit LogTransferOwnerShip(address(this), oldOperator, _to);\\r\\n    }\\r\\n\\r\\n    modifier onlyPOOL() {\\r\\n        require(msg.sender == pool, \\\"Only SSRP or SSIP contract can call this function.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(msg.sender == operator, \\\"Only operator call this function.\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc140ed548773c68701a308e9651ddaa91bb301cdfbf5c00978be1bd613c8a685\",\"license\":\"MIT\"},\"contracts/factories/RewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../Rewarder.sol\\\";\\nimport \\\"../interfaces/IRewarderFactory.sol\\\";\\n\\ncontract RewarderFactory is IRewarderFactory {\\n    constructor() {}\\n\\n    function newRewarder(\\n        address _operator,\\n        address _currency,\\n        address _pool\\n    ) external override returns (address) {\\n        Rewarder _rewarder = new Rewarder(_operator, _currency, _pool);\\n        address _rewarderAddr = address(_rewarder);\\n\\n        return _rewarderAddr;\\n    }\\n}\\n\",\"keccak256\":\"0xba361612c1420f7bdb64ab63566b4e9fefbbc265f2c6923e2f343e9c12c881fa\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6e37fd84127d6039965b097e57e45f79630c1313d9d841176ce8a8e2ec16b83b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(\\n        address _operator,\\n        address _currency,\\n        address _pool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x14d54228edcd08203983b293cfa44cc13cf1fb450019172ef57a1ebccf89f4a2\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506116ae806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806369ee745114610030575b600080fd5b61004361003e3660046100d3565b610059565b6040516100509190610115565b60405180910390f35b60008084848460405161006b9061009d565b61007793929190610136565b604051809103906000f080158015610093573d6000803e3d6000fd5b5095945050505050565b6115128061016783390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100ce57600080fd5b919050565b6000806000606084860312156100e7578283fd5b6100f0846100aa565b92506100fe602085016100aa565b915061010c604085016100aa565b90509250925092565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152918316602083015290911660408201526060019056fe60c06040523480156200001157600080fd5b5060405162001512380380620015128339810160408190526200003491620000f1565b60016000556001600160a01b0383166200006b5760405162461bcd60e51b8152600401620000629062000171565b60405180910390fd5b6001600160a01b038116620000945760405162461bcd60e51b815260040162000062906200013a565b606091821b6001600160601b0319908116608052911b1660a052600180546001600160a01b0319166001600160a01b0392909216919091179055620001a8565b80516001600160a01b0381168114620000ec57600080fd5b919050565b60008060006060848603121562000106578283fd5b6200011184620000d4565b92506200012160208501620000d4565b91506200013160408501620000d4565b90509250925092565b60208082526018908201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604082015260600190565b6020808252601c908201527f556e6f52653a207a65726f206f70657261746f72206164647265737300000000604082015260600190565b60805160601c60a05160601c6112ce620002446000396000818161014e01528181610198015261021501526000818161049a01528181610516015281816105be015281816105ec0152818161071c015281816107900152818161081301528181610869015281816108f801528181610955015281816109aa01528181610a4f01528181610adb01528181610afd0152610bd301526112ce6000f3fe6080604052600436106100745760003560e01c8063c37232881161004e578063c3723288146100e2578063e5a6b10f146100f5578063f2fde38b1461010a578063f3fef3a31461012c5761007b565b806316f0115b14610080578063570ca735146100ab57806389919b71146100c05761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b5061009561014c565b6040516100a29190610f2b565b60405180910390f35b3480156100b757600080fd5b50610095610170565b3480156100cc57600080fd5b506100d561017f565b6040516100a291906111f4565b6100d56100f0366004610e07565b61018b565b34801561010157600080fd5b506100956105ea565b34801561011657600080fd5b5061012a610125366004610dc8565b61060e565b005b34801561013857600080fd5b5061012a610147366004610e07565b6106ca565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031681565b670de0b6b3a764000081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101de5760405162461bcd60e51b81526004016101d590610f58565b60405180910390fd5b326001600160a01b038416146102065760405162461bcd60e51b81526004016101d5906111bd565b604051630cacd00160e11b81527f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b03831690631959a00290610257908890600401610f2b565b60606040518083038186803b15801561026f57600080fd5b505afa158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a79190610e9d565b90506000826001600160a01b0316635a2f3d096040518163ffffffff1660e01b815260040160606040518083038186803b1580156102e457600080fd5b505afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610e52565b90506000670de0b6b3a764000082602001516fffffffffffffffffffffffffffffffff16846040015161034f9190611255565b6103599190611235565b90506000846001600160a01b031663c4e5dacf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610deb565b905081856001600160a01b0316631959a002836040518263ffffffff1660e01b81526004016103fd9190610f2b565b60606040518083038186803b15801561041557600080fd5b505afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190610e9d565b602001511461047957818460200151146104795760405162461bcd60e51b81526004016101d590611054565b8682116104985760405162461bcd60e51b81526004016101d59061114f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104fd57864710156104e65760405162461bcd60e51b81526004016101d590611012565b6104f08888610c0f565b86955050505050506105e4565b6040516370a0823160e01b815287906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061054b903090600401610f2b565b60206040518083038186803b15801561056357600080fd5b505afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b9190610eda565b10156105b95760405162461bcd60e51b81526004016101d590611012565b6104f07f00000000000000000000000000000000000000000000000000000000000000008989610ca1565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031633146106385760405162461bcd60e51b81526004016101d5906110b1565b6001600160a01b03811661065e5760405162461bcd60e51b81526004016101d590611186565b600180546001600160a01b038381167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935560405191169190829030907f47c976e5452318b6b1a69e30851ef22b5fe752d4fabe5271b89c52c3d03a884d90600090a45050565b6001546001600160a01b031633146106f45760405162461bcd60e51b81526004016101d5906110b1565b6001600160a01b03821661071a5760405162461bcd60e51b81526004016101d590611186565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610850578047106107cb576107598282610c0f565b816001600160a01b0316306001600160a01b03167fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb9750967f0000000000000000000000000000000000000000000000000000000000000000846040516107be929190610f3f565b60405180910390a361084b565b471561084b57476107dc8347610c0f565b826001600160a01b0316306001600160a01b03167fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb9750967f000000000000000000000000000000000000000000000000000000000000000084604051610841929190610f3f565b60405180910390a3505b610c0b565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061089e903090600401610f2b565b60206040518083038186803b1580156108b657600080fd5b505afa1580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee9190610eda565b106109905761091e7f00000000000000000000000000000000000000000000000000000000000000008383610ca1565b816001600160a01b0316306001600160a01b03167fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb9750967f000000000000000000000000000000000000000000000000000000000000000084604051610983929190610f3f565b60405180910390a3610c0b565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109df903090600401610f2b565b60206040518083038186803b1580156109f757600080fd5b505afa158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f9190610eda565b1115610c0b576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610a84903090600401610f2b565b60206040518083038186803b158015610a9c57600080fd5b505afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190610eda565b9050610b9c7f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610b479190610f2b565b60206040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190610eda565b610ca1565b826001600160a01b0316306001600160a01b03167fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb9750967f000000000000000000000000000000000000000000000000000000000000000084604051610c01929190610f3f565b60405180910390a3505b5050565b604080516000808252602082019092526001600160a01b038416908390604051610c399190610ef2565b60006040518083038185875af1925050503d8060008114610c76576040519150601f19603f3d011682016040523d82523d6000602084013e610c7b565b606091505b5050905080610c9c5760405162461bcd60e51b81526004016101d590610fb5565b505050565b600080846001600160a01b031663a9059cbb8585604051602401610cc6929190610f3f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d149190610ef2565b6000604051808303816000865af19150503d8060008114610d51576040519150601f19603f3d011682016040523d82523d6000602084013e610d56565b606091505b5091509150818015610d80575080511580610d80575080806020019051810190610d809190610e32565b610d9c5760405162461bcd60e51b81526004016101d5906110f2565b5050505050565b80516fffffffffffffffffffffffffffffffff81168114610dc357600080fd5b919050565b600060208284031215610dd9578081fd5b8135610de481611280565b9392505050565b600060208284031215610dfc578081fd5b8151610de481611280565b60008060408385031215610e19578081fd5b8235610e2481611280565b946020939093013593505050565b600060208284031215610e43578081fd5b81518015158114610de4578182fd5b600060608284031215610e63578081fd5b610e6d60606111fd565b610e7683610da3565b8152610e8460208401610da3565b6020820152604083015160408201528091505092915050565b600060608284031215610eae578081fd5b610eb860606111fd565b8251815260208301516020820152604083015160408201528091505092915050565b600060208284031215610eeb578081fd5b5051919050565b60008251815b81811015610f125760208186018101518583015201610ef8565b81811115610f205782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082526032908201527f4f6e6c792053535250206f72205353495020636f6e74726163742063616e206360408201527f616c6c20746869732066756e6374696f6e2e0000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526022908201527f556e6f52653a20696e73756666696369656e74207265776172642062616c616e604082015261636560f01b606082015260800190565b60208082526025908201527f556e6f52653a2075706461746564207265776172646465627420696e636f727260408201527f6563746c79000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4f6e6c79206f70657261746f722063616c6c20746869732066756e6374696f6e6040820152601760f91b606082015260800190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f556e6f52653a20696e76616c69642072657761726420616d6f756e7400000000604082015260600190565b6020808252601a908201527f556e6f52653a207a65726f206164647265737320726577617264000000000000604082015260600190565b6020808252601d908201527f556e6f52653a206d757374206265206d6573736167652073656e646572000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561122d57634e487b7160e01b600052604160045260246000fd5b604052919050565b60008261125057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561127b57634e487b7160e01b81526011600452602481fd5b500290565b6001600160a01b038116811461129557600080fd5b5056fea26469706673582212205726bf9b60497ac66ae21d70d444f1d44ac08a8db7a0221028377fbe8329812464736f6c63430008000033a26469706673582212205e2f0e4a7b42f8c8dc9e3bfbc4e9e1755c040dea37cc37ce8f6d0eb71548545e64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806369ee745114610030575b600080fd5b61004361003e3660046100d3565b610059565b6040516100509190610115565b60405180910390f35b60008084848460405161006b9061009d565b61007793929190610136565b604051809103906000f080158015610093573d6000803e3d6000fd5b5095945050505050565b6115128061016783390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100ce57600080fd5b919050565b6000806000606084860312156100e7578283fd5b6100f0846100aa565b92506100fe602085016100aa565b915061010c604085016100aa565b90509250925092565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152918316602083015290911660408201526060019056fe60c06040523480156200001157600080fd5b5060405162001512380380620015128339810160408190526200003491620000f1565b60016000556001600160a01b0383166200006b5760405162461bcd60e51b8152600401620000629062000171565b60405180910390fd5b6001600160a01b038116620000945760405162461bcd60e51b815260040162000062906200013a565b606091821b6001600160601b0319908116608052911b1660a052600180546001600160a01b0319166001600160a01b0392909216919091179055620001a8565b80516001600160a01b0381168114620000ec57600080fd5b919050565b60008060006060848603121562000106578283fd5b6200011184620000d4565b92506200012160208501620000d4565b91506200013160408501620000d4565b90509250925092565b60208082526018908201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604082015260600190565b6020808252601c908201527f556e6f52653a207a65726f206f70657261746f72206164647265737300000000604082015260600190565b60805160601c60a05160601c6112ce620002446000396000818161014e01528181610198015261021501526000818161049a01528181610516015281816105be015281816105ec0152818161071c015281816107900152818161081301528181610869015281816108f801528181610955015281816109aa01528181610a4f01528181610adb01528181610afd0152610bd301526112ce6000f3fe6080604052600436106100745760003560e01c8063c37232881161004e578063c3723288146100e2578063e5a6b10f146100f5578063f2fde38b1461010a578063f3fef3a31461012c5761007b565b806316f0115b14610080578063570ca735146100ab57806389919b71146100c05761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b5061009561014c565b6040516100a29190610f2b565b60405180910390f35b3480156100b757600080fd5b50610095610170565b3480156100cc57600080fd5b506100d561017f565b6040516100a291906111f4565b6100d56100f0366004610e07565b61018b565b34801561010157600080fd5b506100956105ea565b34801561011657600080fd5b5061012a610125366004610dc8565b61060e565b005b34801561013857600080fd5b5061012a610147366004610e07565b6106ca565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031681565b670de0b6b3a764000081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101de5760405162461bcd60e51b81526004016101d590610f58565b60405180910390fd5b326001600160a01b038416146102065760405162461bcd60e51b81526004016101d5906111bd565b604051630cacd00160e11b81527f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b03831690631959a00290610257908890600401610f2b565b60606040518083038186803b15801561026f57600080fd5b505afa158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a79190610e9d565b90506000826001600160a01b0316635a2f3d096040518163ffffffff1660e01b815260040160606040518083038186803b1580156102e457600080fd5b505afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610e52565b90506000670de0b6b3a764000082602001516fffffffffffffffffffffffffffffffff16846040015161034f9190611255565b6103599190611235565b90506000846001600160a01b031663c4e5dacf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610deb565b905081856001600160a01b0316631959a002836040518263ffffffff1660e01b81526004016103fd9190610f2b565b60606040518083038186803b15801561041557600080fd5b505afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190610e9d565b602001511461047957818460200151146104795760405162461bcd60e51b81526004016101d590611054565b8682116104985760405162461bcd60e51b81526004016101d59061114f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104fd57864710156104e65760405162461bcd60e51b81526004016101d590611012565b6104f08888610c0f565b86955050505050506105e4565b6040516370a0823160e01b815287906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061054b903090600401610f2b565b60206040518083038186803b15801561056357600080fd5b505afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b9190610eda565b10156105b95760405162461bcd60e51b81526004016101d590611012565b6104f07f00000000000000000000000000000000000000000000000000000000000000008989610ca1565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031633146106385760405162461bcd60e51b81526004016101d5906110b1565b6001600160a01b03811661065e5760405162461bcd60e51b81526004016101d590611186565b600180546001600160a01b038381167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935560405191169190829030907f47c976e5452318b6b1a69e30851ef22b5fe752d4fabe5271b89c52c3d03a884d90600090a45050565b6001546001600160a01b031633146106f45760405162461bcd60e51b81526004016101d5906110b1565b6001600160a01b03821661071a5760405162461bcd60e51b81526004016101d590611186565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610850578047106107cb576107598282610c0f565b816001600160a01b0316306001600160a01b03167fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb9750967f0000000000000000000000000000000000000000000000000000000000000000846040516107be929190610f3f565b60405180910390a361084b565b471561084b57476107dc8347610c0f565b826001600160a01b0316306001600160a01b03167fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb9750967f000000000000000000000000000000000000000000000000000000000000000084604051610841929190610f3f565b60405180910390a3505b610c0b565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061089e903090600401610f2b565b60206040518083038186803b1580156108b657600080fd5b505afa1580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee9190610eda565b106109905761091e7f00000000000000000000000000000000000000000000000000000000000000008383610ca1565b816001600160a01b0316306001600160a01b03167fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb9750967f000000000000000000000000000000000000000000000000000000000000000084604051610983929190610f3f565b60405180910390a3610c0b565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109df903090600401610f2b565b60206040518083038186803b1580156109f757600080fd5b505afa158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f9190610eda565b1115610c0b576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610a84903090600401610f2b565b60206040518083038186803b158015610a9c57600080fd5b505afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190610eda565b9050610b9c7f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610b479190610f2b565b60206040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190610eda565b610ca1565b826001600160a01b0316306001600160a01b03167fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb9750967f000000000000000000000000000000000000000000000000000000000000000084604051610c01929190610f3f565b60405180910390a3505b5050565b604080516000808252602082019092526001600160a01b038416908390604051610c399190610ef2565b60006040518083038185875af1925050503d8060008114610c76576040519150601f19603f3d011682016040523d82523d6000602084013e610c7b565b606091505b5050905080610c9c5760405162461bcd60e51b81526004016101d590610fb5565b505050565b600080846001600160a01b031663a9059cbb8585604051602401610cc6929190610f3f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d149190610ef2565b6000604051808303816000865af19150503d8060008114610d51576040519150601f19603f3d011682016040523d82523d6000602084013e610d56565b606091505b5091509150818015610d80575080511580610d80575080806020019051810190610d809190610e32565b610d9c5760405162461bcd60e51b81526004016101d5906110f2565b5050505050565b80516fffffffffffffffffffffffffffffffff81168114610dc357600080fd5b919050565b600060208284031215610dd9578081fd5b8135610de481611280565b9392505050565b600060208284031215610dfc578081fd5b8151610de481611280565b60008060408385031215610e19578081fd5b8235610e2481611280565b946020939093013593505050565b600060208284031215610e43578081fd5b81518015158114610de4578182fd5b600060608284031215610e63578081fd5b610e6d60606111fd565b610e7683610da3565b8152610e8460208401610da3565b6020820152604083015160408201528091505092915050565b600060608284031215610eae578081fd5b610eb860606111fd565b8251815260208301516020820152604083015160408201528091505092915050565b600060208284031215610eeb578081fd5b5051919050565b60008251815b81811015610f125760208186018101518583015201610ef8565b81811115610f205782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082526032908201527f4f6e6c792053535250206f72205353495020636f6e74726163742063616e206360408201527f616c6c20746869732066756e6374696f6e2e0000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526022908201527f556e6f52653a20696e73756666696369656e74207265776172642062616c616e604082015261636560f01b606082015260800190565b60208082526025908201527f556e6f52653a2075706461746564207265776172646465627420696e636f727260408201527f6563746c79000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4f6e6c79206f70657261746f722063616c6c20746869732066756e6374696f6e6040820152601760f91b606082015260800190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201527f616e73666572206661696c656400000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f556e6f52653a20696e76616c69642072657761726420616d6f756e7400000000604082015260600190565b6020808252601a908201527f556e6f52653a207a65726f206164647265737320726577617264000000000000604082015260600190565b6020808252601d908201527f556e6f52653a206d757374206265206d6573736167652073656e646572000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561122d57634e487b7160e01b600052604160045260246000fd5b604052919050565b60008261125057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561127b57634e487b7160e01b81526011600452602481fd5b500290565b6001600160a01b038116811461129557600080fd5b5056fea26469706673582212205726bf9b60497ac66ae21d70d444f1d44ac08a8db7a0221028377fbe8329812464736f6c63430008000033a26469706673582212205e2f0e4a7b42f8c8dc9e3bfbc4e9e1755c040dea37cc37ce8f6d0eb71548545e64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}