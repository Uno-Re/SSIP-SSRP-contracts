{
  "address": "0x0bCed28f17a0c8CB66c07dD1a4ccfb2ef3159c05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UNO_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDC_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_scr",
          "type": "uint256"
        }
      ],
      "name": "LogAddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "LogAddPoolWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogMarkToClaimPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_salesPolicy",
          "type": "address"
        }
      ],
      "name": "LogRemovePolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "LogRemovePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "LogRemovePoolWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "LogSetExchangeAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_MCR",
          "type": "uint256"
        }
      ],
      "name": "LogSetMCR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_MLR",
          "type": "uint256"
        }
      ],
      "name": "LogSetMLR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "LogSetOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_salesPolicy",
          "type": "address"
        }
      ],
      "name": "LogSetPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_SCR",
          "type": "uint256"
        }
      ],
      "name": "LogSetSCR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "LogSetSalesPolicyFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyUtilized",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalUtilizedAmount",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyCoverage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_poolCapital",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCapital",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePoolCapital",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MLR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isFinished",
          "type": "bool"
        }
      ],
      "name": "SSIPPolicyCaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNO_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_scr",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_scr",
          "type": "uint256"
        }
      ],
      "name": "addPoolByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "addPoolWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "checkCapitalByMCR",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coverageAmount",
          "type": "uint256"
        }
      ],
      "name": "checkCoverageByMLR",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "markToClaimPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "policy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "utilizedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coverageAmount",
          "type": "uint256"
        }
      ],
      "name": "policySale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCapital",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "SCR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolWhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "removePoolWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salesPolicyFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MCR",
          "type": "uint256"
        }
      ],
      "name": "setMCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MLR",
          "type": "uint256"
        }
      ],
      "name": "setMLR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        }
      ],
      "name": "setPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        }
      ],
      "name": "setPolicyByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_SCR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setSCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setSalesPolicyFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCapitalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUtilizedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "updatePolicyStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9454cbe5d85597b4162e657bc5fc9d52e656331b9f8b96fe8a6edc93dca71db3",
  "receipt": {
    "to": null,
    "from": "0x8c3d5c9538256DAB8Eb4B197370574340fe3254F",
    "contractAddress": "0x0bCed28f17a0c8CB66c07dD1a4ccfb2ef3159c05",
    "transactionIndex": 171,
    "gasUsed": "2410288",
    "logsBloom": "0x
    "blockHash": "0x2f772e1194866a8ee39b77dee85305534d4254426c5b23a8e18f4c0d8b5e1401",
    "transactionHash": "0x9454cbe5d85597b4162e657bc5fc9d52e656331b9f8b96fe8a6edc93dca71db3",
    "logs": [
      {
        "transactionIndex": 171,
        "blockNumber": 14636286,
        "transactionHash": "0x9454cbe5d85597b4162e657bc5fc9d52e656331b9f8b96fe8a6edc93dca71db3",
        "address": "0x0bCed28f17a0c8CB66c07dD1a4ccfb2ef3159c05",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c3d5c9538256dab8eb4b197370574340fe3254f"
        ],
        "data": "0x",
        "logIndex": 204,
        "blockHash": "0x2f772e1194866a8ee39b77dee85305534d4254426c5b23a8e18f4c0d8b5e1401"
      },
      {
        "transactionIndex": 171,
        "blockNumber": 14636286,
        "transactionHash": "0x9454cbe5d85597b4162e657bc5fc9d52e656331b9f8b96fe8a6edc93dca71db3",
        "address": "0x0bCed28f17a0c8CB66c07dD1a4ccfb2ef3159c05",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000008c3d5c9538256dab8eb4b197370574340fe3254f",
          "0x0000000000000000000000008c3d5c9538256dab8eb4b197370574340fe3254f"
        ],
        "data": "0x",
        "logIndex": 205,
        "blockHash": "0x2f772e1194866a8ee39b77dee85305534d4254426c5b23a8e18f4c0d8b5e1401"
      }
    ],
    "blockNumber": 14636286,
    "cumulativeGasUsed": "14668843",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6aC1081CBb92524170E61CFFD37bDaF3b38FBC4c",
    "0x474021845c4643113458ea4414bdb7fb74a01a77",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0x8c3d5c9538256DAB8Eb4B197370574340fe3254F",
    "0x721d214267247568DA3A9123abfAc71fc18a5EE4"
  ],
  "solcInputHash": "0218e2b28098b873f60b22055ee82641",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UNO_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_scr\",\"type\":\"uint256\"}],\"name\":\"LogAddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"LogAddPoolWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogMarkToClaimPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_salesPolicy\",\"type\":\"address\"}],\"name\":\"LogRemovePolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"LogRemovePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"LogRemovePoolWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"LogSetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_MCR\",\"type\":\"uint256\"}],\"name\":\"LogSetMCR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_MLR\",\"type\":\"uint256\"}],\"name\":\"LogSetMLR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"LogSetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_salesPolicy\",\"type\":\"address\"}],\"name\":\"LogSetPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SCR\",\"type\":\"uint256\"}],\"name\":\"LogSetSCR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"LogSetSalesPolicyFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyUtilized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalUtilizedAmount\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyCoverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolCapital\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCapital\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePoolCapital\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MLR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFinished\",\"type\":\"bool\"}],\"name\":\"SSIPPolicyCaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNO_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scr\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scr\",\"type\":\"uint256\"}],\"name\":\"addPoolByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"addPoolWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"checkCapitalByMCR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"checkCoverageByMLR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"markToClaimPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"utilizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"policySale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCapital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SCR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"removePoolWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesPolicyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MCR\",\"type\":\"uint256\"}],\"name\":\"setMCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MLR\",\"type\":\"uint256\"}],\"name\":\"setMLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"setPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"setPolicyByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SCR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setSCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setSalesPolicyFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCapitalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUtilizedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"updatePolicyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CapitalAgent.sol\":\"CapitalAgent\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/CapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISalesPolicy.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./interfaces/ISingleSidedInsurancePool.sol\\\";\\nimport \\\"./interfaces/ICapitalAgent.sol\\\";\\n\\ncontract CapitalAgent is ICapitalAgent, ReentrancyGuard, Ownable {\\n    address public exchangeAgent;\\n    address public salesPolicyFactory;\\n    address public UNO_TOKEN;\\n    address public USDC_TOKEN;\\n    address public operator;\\n\\n    struct PoolInfo {\\n        uint256 totalCapital;\\n        uint256 SCR;\\n        address currency;\\n        bool exist;\\n    }\\n\\n    struct PolicyInfo {\\n        address policy;\\n        uint256 utilizedAmount;\\n        bool exist;\\n    }\\n\\n    mapping(address => PoolInfo) public poolInfo;\\n\\n    uint256 public totalCapitalStaked;\\n\\n    PolicyInfo public policyInfo;\\n\\n    uint256 public totalUtilizedAmount;\\n\\n    uint256 public MCR;\\n    uint256 public MLR;\\n\\n    uint256 public CALC_PRECISION = 1e18;\\n\\n    mapping(address => bool) public poolWhiteList;\\n\\n    event LogAddPool(address indexed _ssip, address _currency, uint256 _scr);\\n    event LogRemovePool(address indexed _ssip);\\n    event LogSetPolicy(address indexed _salesPolicy);\\n    event LogRemovePolicy(address indexed _salesPolicy);\\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\\n    event LogUpdatePolicyCoverage(\\n        address indexed _policy,\\n        uint256 _amount,\\n        uint256 _policyUtilized,\\n        uint256 _totalUtilizedAmount\\n    );\\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\\n    event LogSetMCR(address indexed _owner, address indexed _capitalAgent, uint256 _MCR);\\n    event LogSetMLR(address indexed _owner, address indexed _capitalAgent, uint256 _MLR);\\n    event LogSetSCR(address indexed _owner, address indexed _capitalAgent, address indexed _pool, uint256 _SCR);\\n    event LogSetExchangeAgent(address indexed _owner, address indexed _capitalAgent, address _exchangeAgent);\\n    event LogSetSalesPolicyFactory(address indexed _factory);\\n    event LogAddPoolWhiteList(address indexed _pool);\\n    event LogRemovePoolWhiteList(address indexed _pool);\\n    event LogSetOperator(address indexed _operator);\\n\\n    constructor(\\n        address _exchangeAgent,\\n        address _UNO_TOKEN,\\n        address _USDC_TOKEN,\\n        address _multiSigWallet,\\n        address _operator\\n    ) {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero exchangeAgent address\\\");\\n        require(_UNO_TOKEN != address(0), \\\"UnoRe: zero UNO address\\\");\\n        require(_USDC_TOKEN != address(0), \\\"UnoRe: zero USDC address\\\");\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multisigwallet address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        UNO_TOKEN = _UNO_TOKEN;\\n        USDC_TOKEN = _USDC_TOKEN;\\n        operator = _operator;\\n        transferOwnership(_multiSigWallet);\\n    }\\n\\n    modifier onlyPoolWhiteList() {\\n        require(poolWhiteList[msg.sender], \\\"UnoRe: Capital Agent Forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"UnoRe: Capital Agent Forbidden\\\");\\n        _;\\n    }\\n\\n    function setSalesPolicyFactory(address _factory) external onlyOwner nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: zero factory address\\\");\\n        salesPolicyFactory = _factory;\\n        emit LogSetSalesPolicyFactory(_factory);\\n    }\\n\\n    function setOperator(address _operator) external onlyOwner nonReentrant {\\n        require(_operator != address(0), \\\"UnoRe: zero operator address\\\");\\n        operator = _operator;\\n        emit LogSetOperator(_operator);\\n    }\\n\\n    function addPoolWhiteList(address _pool) external onlyOwner nonReentrant {\\n        require(_pool != address(0), \\\"UnoRe: zero pool address\\\");\\n        require(!poolWhiteList[_pool], \\\"UnoRe: white list already\\\");\\n        poolWhiteList[_pool] = true;\\n        emit LogAddPoolWhiteList(_pool);\\n    }\\n\\n    function removePoolWhiteList(address _pool) external onlyOwner nonReentrant {\\n        require(_pool != address(0), \\\"UnoRe: zero pool address\\\");\\n        require(poolWhiteList[_pool], \\\"UnoRe: no white list\\\");\\n        poolWhiteList[_pool] = false;\\n        emit LogRemovePoolWhiteList(_pool);\\n    }\\n\\n    function addPool(\\n        address _ssip,\\n        address _currency,\\n        uint256 _scr\\n    ) external override onlyPoolWhiteList {\\n        require(_ssip != address(0), \\\"UnoRe: zero address\\\");\\n        require(!poolInfo[_ssip].exist, \\\"UnoRe: already exist pool\\\");\\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\\n\\n        emit LogAddPool(_ssip, _currency, _scr);\\n    }\\n\\n    function addPoolByAdmin(\\n        address _ssip,\\n        address _currency,\\n        uint256 _scr\\n    ) external onlyOwner {\\n        require(_ssip != address(0), \\\"UnoRe: zero address\\\");\\n        require(!poolInfo[_ssip].exist, \\\"UnoRe: already exist pool\\\");\\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\\n\\n        emit LogAddPool(_ssip, _currency, _scr);\\n    }\\n\\n    function removePool(address _ssip) external onlyOwner nonReentrant {\\n        require(_ssip != address(0), \\\"UnoRe: zero address\\\");\\n        require(poolInfo[_ssip].exist, \\\"UnoRe: no exit pool\\\");\\n        if (poolInfo[_ssip].totalCapital > 0) {\\n            totalCapitalStaked = totalCapitalStaked - poolInfo[_ssip].totalCapital;\\n        }\\n        delete poolInfo[_ssip];\\n        emit LogRemovePool(_ssip);\\n    }\\n\\n    function setPolicy(address _policy) external override nonReentrant {\\n        require(salesPolicyFactory != address(0), \\\"UnoRe: not set factory address yet\\\");\\n        require(salesPolicyFactory == msg.sender, \\\"UnoRe: only salesPolicyFactory can call\\\");\\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\\n\\n        emit LogSetPolicy(_policy);\\n    }\\n\\n    function setPolicyByAdmin(address _policy) external onlyOwner nonReentrant {\\n        require(_policy != address(0), \\\"UnoRe: zero address\\\");\\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\\n\\n        emit LogSetPolicy(_policy);\\n    }\\n\\n    function removePolicy() external onlyOwner nonReentrant {\\n        require(policyInfo.exist, \\\"UnoRe: no exit pool\\\");\\n        totalUtilizedAmount = 0;\\n        address _policy = policyInfo.policy;\\n        policyInfo.policy = address(0);\\n        policyInfo.exist = false;\\n        policyInfo.utilizedAmount = 0;\\n        emit LogRemovePolicy(_policy);\\n    }\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        require(_checkCapitalByMCRAndSCR(msg.sender, _withdrawAmount), \\\"UnoRe: minimum capital underflow\\\");\\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\\n    }\\n\\n    function SSIPPolicyCaim(\\n        uint256 _withdrawAmount,\\n        uint256 _policyId,\\n        bool _isFinished\\n    ) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\\n        if (_isFinished) {\\n            _markToClaimPolicy(_policyId);\\n        }\\n    }\\n\\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\\n    }\\n\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view override returns (bool) {\\n        return _checkCapitalByMCRAndSCR(_pool, _withdrawAmount);\\n    }\\n\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view override returns (bool) {\\n        return _checkCoverageByMLR(_coverageAmount);\\n    }\\n\\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\\n        require(msg.sender == policyInfo.policy, \\\"UnoRe: only salesPolicy can call\\\");\\n        require(policyInfo.exist, \\\"UnoRe: no exist policy\\\");\\n        require(_checkCoverageByMLR(_coverageAmount), \\\"UnoRe: maximum leverage overflow\\\");\\n        _updatePolicyCoverage(_coverageAmount, true);\\n    }\\n\\n    function updatePolicyStatus(uint256 _policyId) external override nonReentrant {\\n        require(policyInfo.policy != address(0), \\\"UnoRe: no exist salesPolicy\\\");\\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt) = ISalesPolicy(policyInfo.policy)\\n            .getPolicyData(_policyId);\\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\\n        if (isExpired) {\\n            _updatePolicyCoverage(_coverageAmount, false);\\n            ISalesPolicy(policyInfo.policy).updatePolicyExpired(_policyId);\\n            emit LogUpdatePolicyExpired(policyInfo.policy, _policyId);\\n        }\\n    }\\n\\n    function markToClaimPolicy(uint256 _policyId) external onlyOwner nonReentrant {\\n        _markToClaimPolicy(_policyId);\\n    }\\n\\n    function _markToClaimPolicy(uint256 _policyId) private {\\n        require(policyInfo.policy != address(0), \\\"UnoRe: no exist salesPolicy\\\");\\n        (uint256 _coverageAmount, , ) = ISalesPolicy(policyInfo.policy).getPolicyData(_policyId);\\n        _updatePolicyCoverage(_coverageAmount, false);\\n        ISalesPolicy(policyInfo.policy).markToClaim(_policyId);\\n        emit LogMarkToClaimPolicy(policyInfo.policy, _policyId);\\n    }\\n\\n    function _updatePoolCapital(\\n        address _pool,\\n        uint256 _amount,\\n        bool isAdd\\n    ) private {\\n        address currency = poolInfo[_pool].currency;\\n        uint256 stakingAmountInUSDC;\\n        if (currency == USDC_TOKEN) {\\n            stakingAmountInUSDC = _amount;\\n        } else {\\n            stakingAmountInUSDC = currency != address(0)\\n                ? IExchangeAgent(exchangeAgent).getNeededTokenAmount(currency, USDC_TOKEN, _amount)\\n                : IExchangeAgent(exchangeAgent).getTokenAmountForETH(USDC_TOKEN, _amount);\\n        }\\n\\n        if (!isAdd) {\\n            require(poolInfo[_pool].totalCapital >= stakingAmountInUSDC, \\\"UnoRe: pool capital overflow\\\");\\n        }\\n        poolInfo[_pool].totalCapital = isAdd\\n            ? poolInfo[_pool].totalCapital + stakingAmountInUSDC\\n            : poolInfo[_pool].totalCapital - stakingAmountInUSDC;\\n        totalCapitalStaked = isAdd ? totalCapitalStaked + stakingAmountInUSDC : totalCapitalStaked - stakingAmountInUSDC;\\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStaked);\\n    }\\n\\n    function _updatePolicyCoverage(uint256 _amount, bool isAdd) private {\\n        if (!isAdd) {\\n            require(policyInfo.utilizedAmount >= _amount, \\\"UnoRe: policy coverage overflow\\\");\\n        }\\n        policyInfo.utilizedAmount = isAdd ? policyInfo.utilizedAmount + _amount : policyInfo.utilizedAmount - _amount;\\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\\n        emit LogUpdatePolicyCoverage(policyInfo.policy, _amount, policyInfo.utilizedAmount, totalUtilizedAmount);\\n    }\\n\\n    function _checkCapitalByMCRAndSCR(address _pool, uint256 _withdrawAmount) private view returns (bool) {\\n        address currency = poolInfo[_pool].currency;\\n        uint256 withdrawAmountInUSDC;\\n        if (currency == USDC_TOKEN) {\\n            withdrawAmountInUSDC = _withdrawAmount;\\n        } else {\\n            withdrawAmountInUSDC = currency != address(0)\\n                ? IExchangeAgent(exchangeAgent).getNeededTokenAmount(currency, USDC_TOKEN, _withdrawAmount)\\n                : IExchangeAgent(exchangeAgent).getTokenAmountForETH(USDC_TOKEN, _withdrawAmount);\\n        }\\n        bool isMCRPass = totalCapitalStaked - withdrawAmountInUSDC >= (totalCapitalStaked * MCR) / CALC_PRECISION;\\n        bool isSCRPass = poolInfo[_pool].totalCapital - withdrawAmountInUSDC >= poolInfo[_pool].SCR;\\n        return isMCRPass && isSCRPass;\\n    }\\n\\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStaked * MLR) / CALC_PRECISION;\\n    }\\n\\n    function setMCR(uint256 _MCR) external onlyOperator nonReentrant {\\n        require(_MCR > 0, \\\"UnoRe: zero mcr\\\");\\n        MCR = _MCR;\\n        emit LogSetMCR(msg.sender, address(this), _MCR);\\n    }\\n\\n    function setMLR(uint256 _MLR) external onlyOperator nonReentrant {\\n        require(_MLR > 0, \\\"UnoRe: zero mlr\\\");\\n        MLR = _MLR;\\n        emit LogSetMLR(msg.sender, address(this), _MLR);\\n    }\\n\\n    function setSCR(uint256 _SCR, address _pool) external onlyOperator nonReentrant {\\n        require(_SCR > 0, \\\"UnoRe: zero scr\\\");\\n        poolInfo[_pool].SCR = _SCR;\\n        emit LogSetSCR(msg.sender, address(this), _pool, _SCR);\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner nonReentrant {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit LogSetExchangeAgent(msg.sender, address(this), _exchangeAgent);\\n    }\\n}\\n\",\"keccak256\":\"0x07d24c8454254e74129ff7efebeed7561f93a665c06080a240726631f30908fc\",\"license\":\"MIT\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface ICapitalAgent {\\n    function addPool(\\n        address _ssip,\\n        address _currency,\\n        uint256 _scr\\n    ) external;\\n\\n    function setPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function SSIPPolicyCaim(\\n        uint256 _withdrawAmount,\\n        uint256 _policyId,\\n        bool _isFinished\\n    ) external;\\n\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\\n\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(uint256 _policyId) external;\\n}\\n\",\"keccak256\":\"0x3c44f86354e95bcf96a5a46365fe0b69650db4dbcdab1e4ce5430eead2775c1e\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IExchangeAgent {\\n    function USDC_TOKEN() external view returns (address);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external view returns (uint256);\\n\\n    function convertForToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount\\n    ) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x325c7b39b8dc75cbed47c33bf7ed5e1fc94f8458b7d7f748ce77f90099a179cd\",\"license\":\"MIT\"},\"contracts/interfaces/ISalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISalesPolicy {\\n    function setPremiumPool(address _premiumPool) external;\\n\\n    function setExchangeAgent(address _exchangeAgent) external;\\n\\n    function setCapitalAgent(address _capitalAgent) external;\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\\n\\n    function approvePremium(address _premiumCurrency) external;\\n\\n    function setProtocolURI(string memory newURI) external;\\n\\n    function setSigner(address _signer) external;\\n\\n    function updatePolicyExpired(uint256 _policyId) external;\\n\\n    function markToClaim(uint256 _policyId) external;\\n\\n    function allPoliciesLength() external view returns (uint256);\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xc0eef911615b934911b5e0fb2120cf9ba60b2b2b8e9908f0a33c2f8504b1eba5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ISingleSidedInsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external payable;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x61aea5c6569440bccd50ee673f2862b56ca2d4e7f5b2c763e7489c05e63df5ac\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a7640000600f553480156200001d57600080fd5b5060405162002bc538038062002bc5833981016040819052620000409162000265565b6001600055620000596200005362000166565b6200016a565b6001600160a01b0385166200008b5760405162461bcd60e51b8152600401620000829062000393565b60405180910390fd5b6001600160a01b038416620000b45760405162461bcd60e51b8152600401620000829062000409565b6001600160a01b038316620000dd5760405162461bcd60e51b815260040162000082906200035c565b6001600160a01b038216620001065760405162461bcd60e51b815260040162000082906200031a565b600280546001600160a01b038088166001600160a01b031992831617909255600480548784169083161790556005805486841690831617905560068054928416929091169190911790556200015b82620001bc565b505050505062000440565b3390565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001c662000166565b6001600160a01b0316620001d962000239565b6001600160a01b031614620002025760405162461bcd60e51b81526004016200008290620003d4565b6001600160a01b0381166200022b5760405162461bcd60e51b81526004016200008290620002d4565b62000236816200016a565b50565b6001546001600160a01b031690565b80516001600160a01b03811681146200026057600080fd5b919050565b600080600080600060a086880312156200027d578081fd5b620002888662000248565b9450620002986020870162000248565b9350620002a86040870162000248565b9250620002b86060870162000248565b9150620002c86080870162000248565b90509295509295909350565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f556e6f52653a207a65726f206d756c746973696777616c6c6574206164647265604082015261737360f01b606082015260800190565b60208082526018908201527f556e6f52653a207a65726f205553444320616464726573730000000000000000604082015260600190565b60208082526021908201527f556e6f52653a207a65726f2065786368616e67654167656e74206164647265736040820152607360f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527f556e6f52653a207a65726f20554e4f2061646472657373000000000000000000604082015260600190565b61277580620004506000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80638bb7083111610160578063b3ab15fb116100d8578063d8c5c8631161008c578063f2fde38b11610071578063f2fde38b146104f2578063fa56927414610505578063fb6cb8471461050d57610292565b8063d8c5c863146104d7578063d9203b91146104ea57610292565b8063c139b04f116100bd578063c139b04f146104a9578063c3ea3a28146104bc578063d4688a45146104cf57610292565b8063b3ab15fb14610483578063be22041b1461049657610292565b8063974e4d851161012f578063a0931af211610114578063a0931af21461044a578063a65888fb1461045d578063a88d2f7a1461047057610292565b8063974e4d85146104105780639a7b5f111461042757610292565b80638bb70831146103e55780638be5a39f146103ed5780638da5cb5b1461040057806392ff38ec1461040857610292565b80634dc70bac1161020e578063715018a6116101c25780637d4163d3116101a75780637d4163d3146103ac5780637e29d6c2146103bf578063869bd44a146103d257610292565b8063715018a61461039c578063794e5724146103a457610292565b80635b44d576116101f35780635b44d5761461036e57806365cb3a8314610381578063706c2d1b1461038957610292565b80634dc70bac14610351578063570ca7351461036657610292565b806325042fe911610265578063385a128f1161024a578063385a128f146103185780633b7d09461461032b5780634a3a3d141461033e57610292565b806325042fe9146102f057806336760a1c1461031057610292565b80630d757531146102975780630f97b97b146102ac57806318a00d8e146102ca5780631dfa426d146102dd575b600080fd5b6102aa6102a5366004611fa7565b610520565b005b6102b46105fb565b6040516102c1919061203b565b60405180910390f35b6102aa6102d8366004611ef9565b61060a565b6102aa6102eb366004611ef9565b6106f6565b6103036102fe366004611ef9565b6107fe565b6040516102c191906120af565b6102b4610813565b6102aa610326366004611f77565b610822565b6102aa610339366004611ef9565b6108ca565b6102aa61034c366004611ef9565b610a5a565b610359610b6d565b6040516102c19190612668565b6102b4610b73565b6102aa61037c366004611f77565b610b82565b6102aa610c1a565b6102aa610397366004611f13565b610d08565b6102aa610e8d565b610359610ed8565b6102aa6103ba366004611ef9565b610ede565b6102aa6103cd366004611f13565b610f58565b6102aa6103e0366004611f77565b610f87565b610359610ff7565b6102aa6103fb366004611f77565b610ffd565b6102b4611067565b610359611076565b61041861107c565b6040516102c19392919061208c565b61043a610435366004611ef9565b611097565b6040516102c1949392919061267f565b6102aa610458366004611f77565b6110cd565b6102aa61046b366004611ef9565b611171565b6102aa61047e366004611ef9565b611288565b6102aa610491366004611ef9565b611364565b6102aa6104a4366004611f77565b611440565b6103036104b7366004611f4e565b6115f3565b6103036104ca366004611f77565b611606565b610359611619565b6102aa6104e5366004611f77565b61161f565b6102b46116c7565b6102aa610500366004611ef9565b6116d6565b6102b4611747565b6102aa61051b366004611fd2565b611756565b6006546001600160a01b031633146105535760405162461bcd60e51b815260040161054a90612126565b60405180910390fd5b600260005414156105765760405162461bcd60e51b815260040161054a906125c5565b6002600055816105985760405162461bcd60e51b815260040161054a906124c3565b6001600160a01b0381166000818152600760205260409081902060010184905551309033907fade0e16d2bd0d685eef1e5355dc835692faac192ef62225adb31cd0c0b99c8a8906105ea908790612668565b60405180910390a450506001600055565b6004546001600160a01b031681565b6106126117d9565b6001600160a01b0316610623611067565b6001600160a01b0316146106495760405162461bcd60e51b815260040161054a9061244c565b6002600054141561066c5760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166106975760405162461bcd60e51b815260040161054a906121ba565b600280546001600160a01b0319166001600160a01b038316179055604051309033907f28e0ff29ad991f2655c48b0b095a69abbf13aec6c8bc181dd526dbb3f8c9d0b9906106e690859061203b565b60405180910390a3506001600055565b6106fe6117d9565b6001600160a01b031661070f611067565b6001600160a01b0316146107355760405162461bcd60e51b815260040161054a9061244c565b600260005414156107585760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166107835760405162461bcd60e51b815260040161054a906121ba565b604080516060810182526001600160a01b0383168082526000602083018190526001928401839052600980546001600160a01b03191683179055600a819055600b805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a2506001600055565b60106020526000908152604090205460ff1681565b6003546001600160a01b031681565b6006546001600160a01b0316331461084c5760405162461bcd60e51b815260040161054a90612126565b6002600054141561086f5760405162461bcd60e51b815260040161054a906125c5565b6002600055806108915760405162461bcd60e51b815260040161054a90612228565b600d819055604051309033907fa55ee73f4232498ac4c250ffa77f4337343a213648a66147d8848f6660fa3fdf906106e6908590612668565b6108d26117d9565b6001600160a01b03166108e3611067565b6001600160a01b0316146109095760405162461bcd60e51b815260040161054a9061244c565b6002600054141561092c5760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166109575760405162461bcd60e51b815260040161054a906121ba565b6001600160a01b038116600090815260076020526040902060020154600160a01b900460ff166109995760405162461bcd60e51b815260040161054a906123a9565b6001600160a01b038116600090815260076020526040902054156109e1576001600160a01b0381166000908152600760205260409020546008546109dd9190612712565b6008555b6001600160a01b0381166000818152600760205260408082208281556001810183905560020180547fffffffffffffffffffffff000000000000000000000000000000000000000000169055517ff54e47602c09e6190ae0c9cba6074e2e211bf36944fd714fbb0bd78aba514cab9190a2506001600055565b610a626117d9565b6001600160a01b0316610a73611067565b6001600160a01b031614610a995760405162461bcd60e51b815260040161054a9061244c565b60026000541415610abc5760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b038116610ae75760405162461bcd60e51b815260040161054a906122cd565b6001600160a01b03811660009081526010602052604090205460ff16610b1f5760405162461bcd60e51b815260040161054a906120ba565b6001600160a01b038116600081815260106020526040808220805460ff19169055517f4151e001c03bfed83a194d10eea2c0edf04f98e382c440c94a947a99d38d2c329190a2506001600055565b600f5481565b6006546001600160a01b031681565b60026000541415610ba55760405162461bcd60e51b815260040161054a906125c5565b600260008181553381526007602052604090200154600160a01b900460ff16610be05760405162461bcd60e51b815260040161054a9061258e565b610bea33826117dd565b610c065760405162461bcd60e51b815260040161054a906123e0565b610c12338260006119b1565b506001600055565b610c226117d9565b6001600160a01b0316610c33611067565b6001600160a01b031614610c595760405162461bcd60e51b815260040161054a9061244c565b60026000541415610c7c5760405162461bcd60e51b815260040161054a906125c5565b6002600055600b5460ff16610ca35760405162461bcd60e51b815260040161054a906123a9565b6000600c819055600980546001600160a01b03198116909155600b805460ff19169055600a8290556040516001600160a01b039091169182917fffb315d96bed6cc0b00a9cc39d15fcbcab7d047fca09660a2d73569cfc75817c9190a2506001600055565b610d106117d9565b6001600160a01b0316610d21611067565b6001600160a01b031614610d475760405162461bcd60e51b815260040161054a9061244c565b6001600160a01b038316610d6d5760405162461bcd60e51b815260040161054a906121ba565b6001600160a01b038316600090815260076020526040902060020154600160a01b900460ff1615610db05760405162461bcd60e51b815260040161054a90612372565b60408051608081018252600080825260208083018581526001600160a01b038088168587019081526001606087018181528b84168088526007909652958890209651875592519286019290925590516002909401805493511515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff959092166001600160a01b0319909416939093179390931692909217905590517f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab90610e809085908590612073565b60405180910390a2505050565b610e956117d9565b6001600160a01b0316610ea6611067565b6001600160a01b031614610ecc5760405162461bcd60e51b815260040161054a9061244c565b610ed66000611c37565b565b600d5481565b60026000541415610f015760405162461bcd60e51b815260040161054a906125c5565b60026000556003546001600160a01b0316610f2e5760405162461bcd60e51b815260040161054a90612481565b6003546001600160a01b031633146107835760405162461bcd60e51b815260040161054a90612531565b3360009081526010602052604090205460ff16610d475760405162461bcd60e51b815260040161054a90612126565b610f8f6117d9565b6001600160a01b0316610fa0611067565b6001600160a01b031614610fc65760405162461bcd60e51b815260040161054a9061244c565b60026000541415610fe95760405162461bcd60e51b815260040161054a906125c5565b6002600055610c1281611c89565b600e5481565b600260005414156110205760405162461bcd60e51b815260040161054a906125c5565b600260008181553381526007602052604090200154600160a01b900460ff1661105b5760405162461bcd60e51b815260040161054a9061258e565b610c12338260016119b1565b6001546001600160a01b031690565b60085481565b600954600a54600b546001600160a01b039092169160ff1683565b6007602052600090815260409020805460018201546002909201549091906001600160a01b03811690600160a01b900460ff1684565b600260005414156110f05760405162461bcd60e51b815260040161054a906125c5565b60026000556009546001600160a01b0316331461111f5760405162461bcd60e51b815260040161054a90612633565b600b5460ff166111415760405162461bcd60e51b815260040161054a906124fa565b61114a81611dee565b6111665760405162461bcd60e51b815260040161054a906120f1565b610c12816001611e23565b6111796117d9565b6001600160a01b031661118a611067565b6001600160a01b0316146111b05760405162461bcd60e51b815260040161054a9061244c565b600260005414156111d35760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166111fe5760405162461bcd60e51b815260040161054a906122cd565b6001600160a01b03811660009081526010602052604090205460ff16156112375760405162461bcd60e51b815260040161054a90612296565b6001600160a01b038116600081815260106020526040808220805460ff19166001179055517f398e8e2ed05e6be725398a28e81fdf023a447b92941bd666e68ce2091b82bcc79190a2506001600055565b6112906117d9565b6001600160a01b03166112a1611067565b6001600160a01b0316146112c75760405162461bcd60e51b815260040161054a9061244c565b600260005414156112ea5760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166113155760405162461bcd60e51b815260040161054a90612415565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6507596e94e343212d1c22479359f82fffb65f099deb3ebcae9eb33c3d06de9e90600090a2506001600055565b61136c6117d9565b6001600160a01b031661137d611067565b6001600160a01b0316146113a35760405162461bcd60e51b815260040161054a9061244c565b600260005414156113c65760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166113f15760405162461bcd60e51b815260040161054a90612304565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f08c5d29613b4e7468e893fe5f104f5a3ea6e28298f00fbbab9dc9394578c89de90600090a2506001600055565b600260005414156114635760405162461bcd60e51b815260040161054a906125c5565b60026000556009546001600160a01b03166114905760405162461bcd60e51b815260040161054a906121f1565b600954604051637a5402e960e01b8152600091829182916001600160a01b031690637a5402e9906114c5908790600401612668565b60606040518083038186803b1580156114dd57600080fd5b505afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611515919061200e565b91945092509050600061152882846126bb565b4210801591506115e75761153d846000611e23565b6009546040516352eaf0a160e11b81526001600160a01b039091169063a5d5e1429061156d908890600401612668565b600060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b50506009546040516001600160a01b0390911692507faf1c77a8196c946ab8e645210cd1e2685b4fb758ddfd474fd918298854dea6fc91506115de908890612668565b60405180910390a25b50506001600055505050565b60006115ff83836117dd565b9392505050565b600061161182611dee565b90505b919050565b600c5481565b6006546001600160a01b031633146116495760405162461bcd60e51b815260040161054a90612126565b6002600054141561166c5760405162461bcd60e51b815260040161054a906125c5565b60026000558061168e5760405162461bcd60e51b815260040161054a9061233b565b600e819055604051309033907fb2f30bd42a6b499419a01b9b79e7b98934167f5a8a8c389ce446e20a8e5df765906106e6908590612668565b6002546001600160a01b031681565b6116de6117d9565b6001600160a01b03166116ef611067565b6001600160a01b0316146117155760405162461bcd60e51b815260040161054a9061244c565b6001600160a01b03811661173b5760405162461bcd60e51b815260040161054a9061215d565b61174481611c37565b50565b6005546001600160a01b031681565b600260005414156117795760405162461bcd60e51b815260040161054a906125c5565b600260008181553381526007602052604090200154600160a01b900460ff166117b45760405162461bcd60e51b815260040161054a9061258e565b6117c0338460006119b1565b80156117cf576117cf82611c89565b5050600160005550565b3390565b6001600160a01b03808316600090815260076020526040812060020154600554919290811691839116821415611814575082611939565b6001600160a01b0382166118ad5760025460055460405163ba560ed960e01b81526001600160a01b039283169263ba560ed992611858929116908890600401612073565b60206040518083038186803b15801561187057600080fd5b505afa158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a89190611f8f565b611936565b600254600554604051631a44cdf360e11b81526001600160a01b03928316926334899be6926118e692879290911690899060040161204f565b60206040518083038186803b1580156118fe57600080fd5b505afa158015611912573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119369190611f8f565b90505b6000600f54600d5460085461194e91906126f3565b61195891906126d3565b826008546119669190612712565b6001600160a01b0388166000908152600760205260408120600181015490549390921015935091611998908590612712565b101590508180156119a65750805b979650505050505050565b6001600160a01b0380841660009081526007602052604081206002015460055490831692168214156119e4575082611b09565b6001600160a01b038216611a7d5760025460055460405163ba560ed960e01b81526001600160a01b039283169263ba560ed992611a28929116908890600401612073565b60206040518083038186803b158015611a4057600080fd5b505afa158015611a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a789190611f8f565b611b06565b600254600554604051631a44cdf360e11b81526001600160a01b03928316926334899be692611ab692879290911690899060040161204f565b60206040518083038186803b158015611ace57600080fd5b505afa158015611ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b069190611f8f565b90505b82611b46576001600160a01b038516600090815260076020526040902054811115611b465760405162461bcd60e51b815260040161054a906125fc565b82611b74576001600160a01b038516600090815260076020526040902054611b6f908290612712565b611b98565b6001600160a01b038516600090815260076020526040902054611b989082906126bb565b6001600160a01b03861660009081526007602052604090205582611bc95780600854611bc49190612712565b611bd7565b80600854611bd791906126bb565b60088190556001600160a01b0386166000818152600760205260409081902054905191927f4c54f63d510ce2f2f9bf99bf203458cb67aa75fae97ccab560a1654eba9dbf2492611c28929190612671565b60405180910390a25050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6009546001600160a01b0316611cb15760405162461bcd60e51b815260040161054a906121f1565b600954604051637a5402e960e01b81526000916001600160a01b031690637a5402e990611ce2908590600401612668565b60606040518083038186803b158015611cfa57600080fd5b505afa158015611d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d32919061200e565b50509050611d41816000611e23565b6009546040516319d9b48f60e11b81526001600160a01b03909116906333b3691e90611d71908590600401612668565b600060405180830381600087803b158015611d8b57600080fd5b505af1158015611d9f573d6000803e3d6000fd5b50506009546040516001600160a01b0390911692507f56b46e5b13fdb3c0b1989f448e91b2ad68cf0c8e8ddd87f996720708ae3a15699150611de2908590612668565b60405180910390a25050565b6000600f54600e54600854611e0391906126f3565b611e0d91906126d3565b82600c54611e1b91906126bb565b111592915050565b80611e4a57600a54821115611e4a5760405162461bcd60e51b815260040161054a9061225f565b80611e6257600a54611e5d908390612712565b611e70565b600a54611e709083906126bb565b600a5580611e8b5781600c54611e869190612712565b611e99565b81600c54611e9991906126bb565b600c819055600954600a546040516001600160a01b03909216927facece99dd8b86cb96519fb17caded4d103b35a8261463d0d11f80a411460730092611de292879290916126a5565b80356001600160a01b038116811461161457600080fd5b600060208284031215611f0a578081fd5b6115ff82611ee2565b600080600060608486031215611f27578182fd5b611f3084611ee2565b9250611f3e60208501611ee2565b9150604084013590509250925092565b60008060408385031215611f60578182fd5b611f6983611ee2565b946020939093013593505050565b600060208284031215611f88578081fd5b5035919050565b600060208284031215611fa0578081fd5b5051919050565b60008060408385031215611fb9578182fd5b82359150611fc960208401611ee2565b90509250929050565b600080600060608486031215611fe6578283fd5b833592506020840135915060408401358015158114612003578182fd5b809150509250925092565b600080600060608486031215612022578283fd5b8351925060208401519150604084015190509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b901515815260200190565b60208082526014908201527f556e6f52653a206e6f207768697465206c697374000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a206d6178696d756d206c65766572616765206f766572666c6f77604082015260600190565b6020808252601e908201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e0000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601b908201527f556e6f52653a206e6f2065786973742073616c6573506f6c6963790000000000604082015260600190565b6020808252600f908201527f556e6f52653a207a65726f206d63720000000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20706f6c69637920636f766572616765206f766572666c6f7700604082015260600190565b60208082526019908201527f556e6f52653a207768697465206c69737420616c726561647900000000000000604082015260600190565b60208082526018908201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604082015260600190565b6020808252601c908201527f556e6f52653a207a65726f206f70657261746f72206164647265737300000000604082015260600190565b6020808252600f908201527f556e6f52653a207a65726f206d6c720000000000000000000000000000000000604082015260600190565b60208082526019908201527f556e6f52653a20616c726561647920657869737420706f6f6c00000000000000604082015260600190565b60208082526013908201527f556e6f52653a206e6f206578697420706f6f6c00000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f77604082015260600190565b6020808252601b908201527f556e6f52653a207a65726f20666163746f727920616464726573730000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f556e6f52653a206e6f742073657420666163746f727920616464726573732079604082015261195d60f21b606082015260800190565b6020808252600f908201527f556e6f52653a207a65726f207363720000000000000000000000000000000000604082015260600190565b60208082526016908201527f556e6f52653a206e6f20657869737420706f6c69637900000000000000000000604082015260600190565b60208082526027908201527f556e6f52653a206f6e6c792073616c6573506f6c696379466163746f7279206360408201527f616e2063616c6c00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f556e6f52653a206e6f2065786973742073736970000000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601c908201527f556e6f52653a20706f6f6c206361706974616c206f766572666c6f7700000000604082015260600190565b6020808252818101527f556e6f52653a206f6e6c792073616c6573506f6c6963792063616e2063616c6c604082015260600190565b90815260200190565b918252602082015260400190565b93845260208401929092526001600160a01b031660408301521515606082015260800190565b9283526020830191909152604082015260600190565b600082198211156126ce576126ce612729565b500190565b6000826126ee57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561270d5761270d612729565b500290565b60008282101561272457612724612729565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220cc728986f6a32a1a45223c939a948cd8b142224b99ba597eeb34d87c1d3d288064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102925760003560e01c80638bb7083111610160578063b3ab15fb116100d8578063d8c5c8631161008c578063f2fde38b11610071578063f2fde38b146104f2578063fa56927414610505578063fb6cb8471461050d57610292565b8063d8c5c863146104d7578063d9203b91146104ea57610292565b8063c139b04f116100bd578063c139b04f146104a9578063c3ea3a28146104bc578063d4688a45146104cf57610292565b8063b3ab15fb14610483578063be22041b1461049657610292565b8063974e4d851161012f578063a0931af211610114578063a0931af21461044a578063a65888fb1461045d578063a88d2f7a1461047057610292565b8063974e4d85146104105780639a7b5f111461042757610292565b80638bb70831146103e55780638be5a39f146103ed5780638da5cb5b1461040057806392ff38ec1461040857610292565b80634dc70bac1161020e578063715018a6116101c25780637d4163d3116101a75780637d4163d3146103ac5780637e29d6c2146103bf578063869bd44a146103d257610292565b8063715018a61461039c578063794e5724146103a457610292565b80635b44d576116101f35780635b44d5761461036e57806365cb3a8314610381578063706c2d1b1461038957610292565b80634dc70bac14610351578063570ca7351461036657610292565b806325042fe911610265578063385a128f1161024a578063385a128f146103185780633b7d09461461032b5780634a3a3d141461033e57610292565b806325042fe9146102f057806336760a1c1461031057610292565b80630d757531146102975780630f97b97b146102ac57806318a00d8e146102ca5780631dfa426d146102dd575b600080fd5b6102aa6102a5366004611fa7565b610520565b005b6102b46105fb565b6040516102c1919061203b565b60405180910390f35b6102aa6102d8366004611ef9565b61060a565b6102aa6102eb366004611ef9565b6106f6565b6103036102fe366004611ef9565b6107fe565b6040516102c191906120af565b6102b4610813565b6102aa610326366004611f77565b610822565b6102aa610339366004611ef9565b6108ca565b6102aa61034c366004611ef9565b610a5a565b610359610b6d565b6040516102c19190612668565b6102b4610b73565b6102aa61037c366004611f77565b610b82565b6102aa610c1a565b6102aa610397366004611f13565b610d08565b6102aa610e8d565b610359610ed8565b6102aa6103ba366004611ef9565b610ede565b6102aa6103cd366004611f13565b610f58565b6102aa6103e0366004611f77565b610f87565b610359610ff7565b6102aa6103fb366004611f77565b610ffd565b6102b4611067565b610359611076565b61041861107c565b6040516102c19392919061208c565b61043a610435366004611ef9565b611097565b6040516102c1949392919061267f565b6102aa610458366004611f77565b6110cd565b6102aa61046b366004611ef9565b611171565b6102aa61047e366004611ef9565b611288565b6102aa610491366004611ef9565b611364565b6102aa6104a4366004611f77565b611440565b6103036104b7366004611f4e565b6115f3565b6103036104ca366004611f77565b611606565b610359611619565b6102aa6104e5366004611f77565b61161f565b6102b46116c7565b6102aa610500366004611ef9565b6116d6565b6102b4611747565b6102aa61051b366004611fd2565b611756565b6006546001600160a01b031633146105535760405162461bcd60e51b815260040161054a90612126565b60405180910390fd5b600260005414156105765760405162461bcd60e51b815260040161054a906125c5565b6002600055816105985760405162461bcd60e51b815260040161054a906124c3565b6001600160a01b0381166000818152600760205260409081902060010184905551309033907fade0e16d2bd0d685eef1e5355dc835692faac192ef62225adb31cd0c0b99c8a8906105ea908790612668565b60405180910390a450506001600055565b6004546001600160a01b031681565b6106126117d9565b6001600160a01b0316610623611067565b6001600160a01b0316146106495760405162461bcd60e51b815260040161054a9061244c565b6002600054141561066c5760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166106975760405162461bcd60e51b815260040161054a906121ba565b600280546001600160a01b0319166001600160a01b038316179055604051309033907f28e0ff29ad991f2655c48b0b095a69abbf13aec6c8bc181dd526dbb3f8c9d0b9906106e690859061203b565b60405180910390a3506001600055565b6106fe6117d9565b6001600160a01b031661070f611067565b6001600160a01b0316146107355760405162461bcd60e51b815260040161054a9061244c565b600260005414156107585760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166107835760405162461bcd60e51b815260040161054a906121ba565b604080516060810182526001600160a01b0383168082526000602083018190526001928401839052600980546001600160a01b03191683179055600a819055600b805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a2506001600055565b60106020526000908152604090205460ff1681565b6003546001600160a01b031681565b6006546001600160a01b0316331461084c5760405162461bcd60e51b815260040161054a90612126565b6002600054141561086f5760405162461bcd60e51b815260040161054a906125c5565b6002600055806108915760405162461bcd60e51b815260040161054a90612228565b600d819055604051309033907fa55ee73f4232498ac4c250ffa77f4337343a213648a66147d8848f6660fa3fdf906106e6908590612668565b6108d26117d9565b6001600160a01b03166108e3611067565b6001600160a01b0316146109095760405162461bcd60e51b815260040161054a9061244c565b6002600054141561092c5760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166109575760405162461bcd60e51b815260040161054a906121ba565b6001600160a01b038116600090815260076020526040902060020154600160a01b900460ff166109995760405162461bcd60e51b815260040161054a906123a9565b6001600160a01b038116600090815260076020526040902054156109e1576001600160a01b0381166000908152600760205260409020546008546109dd9190612712565b6008555b6001600160a01b0381166000818152600760205260408082208281556001810183905560020180547fffffffffffffffffffffff000000000000000000000000000000000000000000169055517ff54e47602c09e6190ae0c9cba6074e2e211bf36944fd714fbb0bd78aba514cab9190a2506001600055565b610a626117d9565b6001600160a01b0316610a73611067565b6001600160a01b031614610a995760405162461bcd60e51b815260040161054a9061244c565b60026000541415610abc5760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b038116610ae75760405162461bcd60e51b815260040161054a906122cd565b6001600160a01b03811660009081526010602052604090205460ff16610b1f5760405162461bcd60e51b815260040161054a906120ba565b6001600160a01b038116600081815260106020526040808220805460ff19169055517f4151e001c03bfed83a194d10eea2c0edf04f98e382c440c94a947a99d38d2c329190a2506001600055565b600f5481565b6006546001600160a01b031681565b60026000541415610ba55760405162461bcd60e51b815260040161054a906125c5565b600260008181553381526007602052604090200154600160a01b900460ff16610be05760405162461bcd60e51b815260040161054a9061258e565b610bea33826117dd565b610c065760405162461bcd60e51b815260040161054a906123e0565b610c12338260006119b1565b506001600055565b610c226117d9565b6001600160a01b0316610c33611067565b6001600160a01b031614610c595760405162461bcd60e51b815260040161054a9061244c565b60026000541415610c7c5760405162461bcd60e51b815260040161054a906125c5565b6002600055600b5460ff16610ca35760405162461bcd60e51b815260040161054a906123a9565b6000600c819055600980546001600160a01b03198116909155600b805460ff19169055600a8290556040516001600160a01b039091169182917fffb315d96bed6cc0b00a9cc39d15fcbcab7d047fca09660a2d73569cfc75817c9190a2506001600055565b610d106117d9565b6001600160a01b0316610d21611067565b6001600160a01b031614610d475760405162461bcd60e51b815260040161054a9061244c565b6001600160a01b038316610d6d5760405162461bcd60e51b815260040161054a906121ba565b6001600160a01b038316600090815260076020526040902060020154600160a01b900460ff1615610db05760405162461bcd60e51b815260040161054a90612372565b60408051608081018252600080825260208083018581526001600160a01b038088168587019081526001606087018181528b84168088526007909652958890209651875592519286019290925590516002909401805493511515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff959092166001600160a01b0319909416939093179390931692909217905590517f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab90610e809085908590612073565b60405180910390a2505050565b610e956117d9565b6001600160a01b0316610ea6611067565b6001600160a01b031614610ecc5760405162461bcd60e51b815260040161054a9061244c565b610ed66000611c37565b565b600d5481565b60026000541415610f015760405162461bcd60e51b815260040161054a906125c5565b60026000556003546001600160a01b0316610f2e5760405162461bcd60e51b815260040161054a90612481565b6003546001600160a01b031633146107835760405162461bcd60e51b815260040161054a90612531565b3360009081526010602052604090205460ff16610d475760405162461bcd60e51b815260040161054a90612126565b610f8f6117d9565b6001600160a01b0316610fa0611067565b6001600160a01b031614610fc65760405162461bcd60e51b815260040161054a9061244c565b60026000541415610fe95760405162461bcd60e51b815260040161054a906125c5565b6002600055610c1281611c89565b600e5481565b600260005414156110205760405162461bcd60e51b815260040161054a906125c5565b600260008181553381526007602052604090200154600160a01b900460ff1661105b5760405162461bcd60e51b815260040161054a9061258e565b610c12338260016119b1565b6001546001600160a01b031690565b60085481565b600954600a54600b546001600160a01b039092169160ff1683565b6007602052600090815260409020805460018201546002909201549091906001600160a01b03811690600160a01b900460ff1684565b600260005414156110f05760405162461bcd60e51b815260040161054a906125c5565b60026000556009546001600160a01b0316331461111f5760405162461bcd60e51b815260040161054a90612633565b600b5460ff166111415760405162461bcd60e51b815260040161054a906124fa565b61114a81611dee565b6111665760405162461bcd60e51b815260040161054a906120f1565b610c12816001611e23565b6111796117d9565b6001600160a01b031661118a611067565b6001600160a01b0316146111b05760405162461bcd60e51b815260040161054a9061244c565b600260005414156111d35760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166111fe5760405162461bcd60e51b815260040161054a906122cd565b6001600160a01b03811660009081526010602052604090205460ff16156112375760405162461bcd60e51b815260040161054a90612296565b6001600160a01b038116600081815260106020526040808220805460ff19166001179055517f398e8e2ed05e6be725398a28e81fdf023a447b92941bd666e68ce2091b82bcc79190a2506001600055565b6112906117d9565b6001600160a01b03166112a1611067565b6001600160a01b0316146112c75760405162461bcd60e51b815260040161054a9061244c565b600260005414156112ea5760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166113155760405162461bcd60e51b815260040161054a90612415565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6507596e94e343212d1c22479359f82fffb65f099deb3ebcae9eb33c3d06de9e90600090a2506001600055565b61136c6117d9565b6001600160a01b031661137d611067565b6001600160a01b0316146113a35760405162461bcd60e51b815260040161054a9061244c565b600260005414156113c65760405162461bcd60e51b815260040161054a906125c5565b60026000556001600160a01b0381166113f15760405162461bcd60e51b815260040161054a90612304565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f08c5d29613b4e7468e893fe5f104f5a3ea6e28298f00fbbab9dc9394578c89de90600090a2506001600055565b600260005414156114635760405162461bcd60e51b815260040161054a906125c5565b60026000556009546001600160a01b03166114905760405162461bcd60e51b815260040161054a906121f1565b600954604051637a5402e960e01b8152600091829182916001600160a01b031690637a5402e9906114c5908790600401612668565b60606040518083038186803b1580156114dd57600080fd5b505afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611515919061200e565b91945092509050600061152882846126bb565b4210801591506115e75761153d846000611e23565b6009546040516352eaf0a160e11b81526001600160a01b039091169063a5d5e1429061156d908890600401612668565b600060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b50506009546040516001600160a01b0390911692507faf1c77a8196c946ab8e645210cd1e2685b4fb758ddfd474fd918298854dea6fc91506115de908890612668565b60405180910390a25b50506001600055505050565b60006115ff83836117dd565b9392505050565b600061161182611dee565b90505b919050565b600c5481565b6006546001600160a01b031633146116495760405162461bcd60e51b815260040161054a90612126565b6002600054141561166c5760405162461bcd60e51b815260040161054a906125c5565b60026000558061168e5760405162461bcd60e51b815260040161054a9061233b565b600e819055604051309033907fb2f30bd42a6b499419a01b9b79e7b98934167f5a8a8c389ce446e20a8e5df765906106e6908590612668565b6002546001600160a01b031681565b6116de6117d9565b6001600160a01b03166116ef611067565b6001600160a01b0316146117155760405162461bcd60e51b815260040161054a9061244c565b6001600160a01b03811661173b5760405162461bcd60e51b815260040161054a9061215d565b61174481611c37565b50565b6005546001600160a01b031681565b600260005414156117795760405162461bcd60e51b815260040161054a906125c5565b600260008181553381526007602052604090200154600160a01b900460ff166117b45760405162461bcd60e51b815260040161054a9061258e565b6117c0338460006119b1565b80156117cf576117cf82611c89565b5050600160005550565b3390565b6001600160a01b03808316600090815260076020526040812060020154600554919290811691839116821415611814575082611939565b6001600160a01b0382166118ad5760025460055460405163ba560ed960e01b81526001600160a01b039283169263ba560ed992611858929116908890600401612073565b60206040518083038186803b15801561187057600080fd5b505afa158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a89190611f8f565b611936565b600254600554604051631a44cdf360e11b81526001600160a01b03928316926334899be6926118e692879290911690899060040161204f565b60206040518083038186803b1580156118fe57600080fd5b505afa158015611912573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119369190611f8f565b90505b6000600f54600d5460085461194e91906126f3565b61195891906126d3565b826008546119669190612712565b6001600160a01b0388166000908152600760205260408120600181015490549390921015935091611998908590612712565b101590508180156119a65750805b979650505050505050565b6001600160a01b0380841660009081526007602052604081206002015460055490831692168214156119e4575082611b09565b6001600160a01b038216611a7d5760025460055460405163ba560ed960e01b81526001600160a01b039283169263ba560ed992611a28929116908890600401612073565b60206040518083038186803b158015611a4057600080fd5b505afa158015611a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a789190611f8f565b611b06565b600254600554604051631a44cdf360e11b81526001600160a01b03928316926334899be692611ab692879290911690899060040161204f565b60206040518083038186803b158015611ace57600080fd5b505afa158015611ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b069190611f8f565b90505b82611b46576001600160a01b038516600090815260076020526040902054811115611b465760405162461bcd60e51b815260040161054a906125fc565b82611b74576001600160a01b038516600090815260076020526040902054611b6f908290612712565b611b98565b6001600160a01b038516600090815260076020526040902054611b989082906126bb565b6001600160a01b03861660009081526007602052604090205582611bc95780600854611bc49190612712565b611bd7565b80600854611bd791906126bb565b60088190556001600160a01b0386166000818152600760205260409081902054905191927f4c54f63d510ce2f2f9bf99bf203458cb67aa75fae97ccab560a1654eba9dbf2492611c28929190612671565b60405180910390a25050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6009546001600160a01b0316611cb15760405162461bcd60e51b815260040161054a906121f1565b600954604051637a5402e960e01b81526000916001600160a01b031690637a5402e990611ce2908590600401612668565b60606040518083038186803b158015611cfa57600080fd5b505afa158015611d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d32919061200e565b50509050611d41816000611e23565b6009546040516319d9b48f60e11b81526001600160a01b03909116906333b3691e90611d71908590600401612668565b600060405180830381600087803b158015611d8b57600080fd5b505af1158015611d9f573d6000803e3d6000fd5b50506009546040516001600160a01b0390911692507f56b46e5b13fdb3c0b1989f448e91b2ad68cf0c8e8ddd87f996720708ae3a15699150611de2908590612668565b60405180910390a25050565b6000600f54600e54600854611e0391906126f3565b611e0d91906126d3565b82600c54611e1b91906126bb565b111592915050565b80611e4a57600a54821115611e4a5760405162461bcd60e51b815260040161054a9061225f565b80611e6257600a54611e5d908390612712565b611e70565b600a54611e709083906126bb565b600a5580611e8b5781600c54611e869190612712565b611e99565b81600c54611e9991906126bb565b600c819055600954600a546040516001600160a01b03909216927facece99dd8b86cb96519fb17caded4d103b35a8261463d0d11f80a411460730092611de292879290916126a5565b80356001600160a01b038116811461161457600080fd5b600060208284031215611f0a578081fd5b6115ff82611ee2565b600080600060608486031215611f27578182fd5b611f3084611ee2565b9250611f3e60208501611ee2565b9150604084013590509250925092565b60008060408385031215611f60578182fd5b611f6983611ee2565b946020939093013593505050565b600060208284031215611f88578081fd5b5035919050565b600060208284031215611fa0578081fd5b5051919050565b60008060408385031215611fb9578182fd5b82359150611fc960208401611ee2565b90509250929050565b600080600060608486031215611fe6578283fd5b833592506020840135915060408401358015158114612003578182fd5b809150509250925092565b600080600060608486031215612022578283fd5b8351925060208401519150604084015190509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b901515815260200190565b60208082526014908201527f556e6f52653a206e6f207768697465206c697374000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a206d6178696d756d206c65766572616765206f766572666c6f77604082015260600190565b6020808252601e908201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e0000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526013908201527f556e6f52653a207a65726f206164647265737300000000000000000000000000604082015260600190565b6020808252601b908201527f556e6f52653a206e6f2065786973742073616c6573506f6c6963790000000000604082015260600190565b6020808252600f908201527f556e6f52653a207a65726f206d63720000000000000000000000000000000000604082015260600190565b6020808252601f908201527f556e6f52653a20706f6c69637920636f766572616765206f766572666c6f7700604082015260600190565b60208082526019908201527f556e6f52653a207768697465206c69737420616c726561647900000000000000604082015260600190565b60208082526018908201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604082015260600190565b6020808252601c908201527f556e6f52653a207a65726f206f70657261746f72206164647265737300000000604082015260600190565b6020808252600f908201527f556e6f52653a207a65726f206d6c720000000000000000000000000000000000604082015260600190565b60208082526019908201527f556e6f52653a20616c726561647920657869737420706f6f6c00000000000000604082015260600190565b60208082526013908201527f556e6f52653a206e6f206578697420706f6f6c00000000000000000000000000604082015260600190565b6020808252818101527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f77604082015260600190565b6020808252601b908201527f556e6f52653a207a65726f20666163746f727920616464726573730000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f556e6f52653a206e6f742073657420666163746f727920616464726573732079604082015261195d60f21b606082015260800190565b6020808252600f908201527f556e6f52653a207a65726f207363720000000000000000000000000000000000604082015260600190565b60208082526016908201527f556e6f52653a206e6f20657869737420706f6c69637900000000000000000000604082015260600190565b60208082526027908201527f556e6f52653a206f6e6c792073616c6573506f6c696379466163746f7279206360408201527f616e2063616c6c00000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f556e6f52653a206e6f2065786973742073736970000000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601c908201527f556e6f52653a20706f6f6c206361706974616c206f766572666c6f7700000000604082015260600190565b6020808252818101527f556e6f52653a206f6e6c792073616c6573506f6c6963792063616e2063616c6c604082015260600190565b90815260200190565b918252602082015260400190565b93845260208401929092526001600160a01b031660408301521515606082015260800190565b9283526020830191909152604082015260600190565b600082198211156126ce576126ce612729565b500190565b6000826126ee57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561270d5761270d612729565b500290565b60008282101561272457612724612729565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220cc728986f6a32a1a45223c939a948cd8b142224b99ba597eeb34d87c1d3d288064736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2418,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2420,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "salesPolicyFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2422,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "UNO_TOKEN",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2424,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "USDC_TOKEN",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2426,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "operator",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2447,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(PoolInfo)2435_storage)"
      },
      {
        "astId": 2449,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalCapitalStaked",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2452,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "policyInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(PolicyInfo)2442_storage"
      },
      {
        "astId": 2454,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalUtilizedAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2456,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MCR",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2458,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MLR",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2461,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "CALC_PRECISION",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2465,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolWhiteList",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(PoolInfo)2435_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CapitalAgent.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)2435_storage"
      },
      "t_struct(PolicyInfo)2442_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PolicyInfo",
        "members": [
          {
            "astId": 2437,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "policy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2439,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "utilizedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2441,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolInfo)2435_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PoolInfo",
        "members": [
          {
            "astId": 2428,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "totalCapital",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2430,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "SCR",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2432,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "currency",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2434,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}