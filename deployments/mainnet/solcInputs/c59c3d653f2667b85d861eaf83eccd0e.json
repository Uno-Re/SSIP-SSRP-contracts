{
  "language": "Solidity",
  "sources": {
    "contracts/CapitalAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"./interfaces/ISalesPolicy.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./interfaces/ISingleSidedInsurancePool.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./interfaces/ICapitalAgent.sol\";\n\ncontract CapitalAgent is ICapitalAgent, ReentrancyGuard {\n    using Counters for Counters.Counter;\n\n    address public owner;\n    address public exchangeAgent;\n    address public UNO_TOKEN;\n    address public USDT_TOKEN;\n\n    struct PoolInfo {\n        uint256 totalCapital;\n        bool exist;\n    }\n\n    struct PolicyInfo {\n        uint256 utilizedAmount;\n        bool exist;\n    }\n\n    mapping(address => PoolInfo) public poolInfo;\n    address[] public poolList;\n    Counters.Counter private poolIds;\n\n    uint256 public totalCapitalStaked;\n\n    mapping(address => PolicyInfo) public policyInfo;\n    address[] public policyList;\n    Counters.Counter private policyIds;\n\n    uint256 public totalUtilizedAmount;\n\n    uint256 public MCR;\n    uint256 public MLR;\n\n    uint256 public CALC_PRECISION = 1e18;\n\n    event LogAddPool(address indexed _ssip);\n    event LogAddPolicy(address indexed _salesPolicy);\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\n    event LogUpdatePolicyCoverage(\n        address indexed _policy,\n        uint256 _amount,\n        uint256 _policyUtilized,\n        uint256 _totalUtilizedAmount\n    );\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\n\n    constructor(\n        address _exchangeAgent,\n        address _UNO_TOKEN,\n        address _USDT_TOKEN\n    ) {\n        owner = msg.sender;\n        exchangeAgent = _exchangeAgent;\n        UNO_TOKEN = _UNO_TOKEN;\n        USDT_TOKEN = _USDT_TOKEN;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"UnoRe: Capital Agent Forbidden\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function addPool(address _ssip) external override {\n        require(!poolInfo[_ssip].exist, \"UnoRe: already exist pool\");\n        poolList.push(_ssip);\n\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, exist: true});\n\n        poolIds.increment();\n\n        emit LogAddPool(_ssip);\n    }\n\n    function addPolicy(address _policy) external override nonReentrant {\n        require(!policyInfo[_policy].exist, \"UnoRe: already exist policy\");\n        policyList.push(_policy);\n\n        policyInfo[_policy] = PolicyInfo({utilizedAmount: 0, exist: true});\n\n        policyIds.increment();\n\n        emit LogAddPolicy(_policy);\n    }\n\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        require(_checkCapitalByMCR(_withdrawAmount), \"UnoRe: minimum capital underflow\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n    }\n\n    function SSIPPolicyCaim(uint256 _withdrawAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n    }\n\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\n    }\n\n    function checkCapitalByMCR(uint256 _withdrawAmount) external view override returns (bool) {\n        return _checkCapitalByMCR(_withdrawAmount);\n    }\n\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\n        require(policyInfo[msg.sender].exist, \"UnoRe: no exist policy\");\n        require(_checkCoverageByMLR(_coverageAmount), \"UnoRe: maximum leverage overflow\");\n        _updatePolicyCoverage(msg.sender, _coverageAmount, true);\n    }\n\n    function updatePolicyStatus(address _policyAddr, uint256 _policyId) external override nonReentrant {\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt, ) = ISalesPolicy(_policyAddr).getPolicyData(\n            _policyId\n        );\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\n        if (isExpired) {\n            _updatePolicyCoverage(_policyAddr, _coverageAmount, false);\n            ISalesPolicy(_policyAddr).updatePolicyExpired(_policyId);\n            emit LogUpdatePolicyExpired(_policyAddr, _policyId);\n        }\n    }\n\n    function markToClaimPolicy(address _policy, uint256 _policyId) external onlyOwner nonReentrant {\n        (uint256 _coverageAmount, , , ) = ISalesPolicy(_policy).getPolicyData(_policyId);\n        _updatePolicyCoverage(_policy, _coverageAmount, false);\n        ISalesPolicy(_policy).markToClaim(_policyId);\n        emit LogMarkToClaimPolicy(_policy, _policyId);\n    }\n\n    function _updatePoolCapital(\n        address _pool,\n        uint256 _amount,\n        bool isAdd\n    ) private {\n        if (!isAdd) {\n            require(poolInfo[_pool].totalCapital >= _amount, \"UnoRe: pool capital overflow\");\n        }\n        poolInfo[_pool].totalCapital = isAdd ? poolInfo[_pool].totalCapital + _amount : poolInfo[_pool].totalCapital - _amount;\n        totalCapitalStaked = isAdd ? totalCapitalStaked + _amount : totalCapitalStaked - _amount;\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStaked);\n    }\n\n    function _updatePolicyCoverage(\n        address _policy,\n        uint256 _amount,\n        bool isAdd\n    ) private {\n        if (!isAdd) {\n            require(policyInfo[_policy].utilizedAmount >= _amount, \"UnoRe: policy coverage overflow\");\n        }\n        policyInfo[_policy].utilizedAmount = isAdd\n            ? policyInfo[_policy].utilizedAmount + _amount\n            : policyInfo[_policy].utilizedAmount - _amount;\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\n        emit LogUpdatePolicyCoverage(_policy, _amount, policyInfo[_policy].utilizedAmount, totalUtilizedAmount);\n    }\n\n    function _checkCapitalByMCR(uint256 _withdrawAmount) private view returns (bool) {\n        return totalCapitalStaked - _withdrawAmount >= (totalCapitalStaked * MCR) / CALC_PRECISION;\n    }\n\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\n        uint256 totalCapitalStakedInUSDT = IExchangeAgent(exchangeAgent).getNeededTokenAmount(\n            UNO_TOKEN,\n            USDT_TOKEN,\n            totalCapitalStaked\n        );\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStakedInUSDT * MLR) / CALC_PRECISION;\n    }\n\n    function setMCR(uint256 _MCR) external onlyOwner nonReentrant {\n        require(_MCR > 0, \"UnoRe: zero mcr\");\n        MCR = _MCR;\n    }\n\n    function setMLR(uint256 _MLR) external onlyOwner nonReentrant {\n        require(_MLR > 0, \"UnoRe: zero mcr\");\n        MLR = _MLR;\n    }\n\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner nonReentrant {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        exchangeAgent = _exchangeAgent;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/interfaces/ISalesPolicy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ISalesPolicy {\n    function setPremiumPool(address _premiumPool) external;\n\n    function setExchangeAgent(address _exchangeAgent) external;\n\n    function setCapitalAgent(address _capitalAgent) external;\n\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\n\n    function approvePremium(address _premiumCurrency) external;\n\n    function setProtocolURI(string memory newURI) external;\n\n    function setSigner(address _signer) external;\n\n    function updatePolicyExpired(uint256 _policyId) external;\n\n    function markToClaim(uint256 _policyId) external;\n\n    function allPoliciesLength() external view returns (uint256);\n\n    function getPolicyData(uint256 _policyId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n}\n"
    },
    "contracts/interfaces/IExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\ninterface IExchangeAgent {\n    function USDC_TOKEN() external view returns (address);\n\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\n\n    function getNeededTokenAmount(\n        address _token0,\n        address _token1,\n        uint256 _token0Amount\n    ) external view returns (uint256);\n\n    function convertForToken(\n        address _token0,\n        address _token1,\n        uint256 _token0Amount\n    ) external returns (uint256);\n\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISingleSidedInsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ISingleSidedInsurancePool {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending() external;\n\n    function harvest(address _to) external;\n\n    function lpTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function riskPool() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IRiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface IRiskPool {\n    function enter(address _from, uint256 _amount) external;\n\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\n\n    function leaveFromPending(address _to) external returns (uint256, uint256);\n\n    function cancelWithrawRequest(address _to) external returns (uint256, uint256);\n\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\n\n    function migrateLP(\n        address _to,\n        address _migrateTo,\n        bool _isUnLocked\n    ) external returns (uint256);\n\n    function setMinLPCapital(uint256 _minLPCapital) external;\n\n    function currency() external view returns (address);\n\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\n\n    function getWithdrawRequest(address _to)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function lpPriceUno() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICapitalAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\ninterface ICapitalAgent {\n    function addPool(address _ssip) external;\n\n    function addPolicy(address _policy) external;\n\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\n\n    function SSIPStaking(uint256 _stakingAmount) external;\n\n    function SSIPPolicyCaim(uint256 _withdrawAmount) external;\n\n    function checkCapitalByMCR(uint256 _withdrawAmount) external view returns (bool);\n\n    function policySale(uint256 _coverageAmount) external;\n\n    function updatePolicyStatus(address _policy, uint256 _policyId) external;\n}\n"
    },
    "contracts/SingleSidedInsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/ICapitalAgent.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/IRiskPoolFactory.sol\";\nimport \"./interfaces/ISingleSidedInsurancePool.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./interfaces/ISyntheticSSIPFactory.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SingleSidedInsurancePool is ISingleSidedInsurancePool, ReentrancyGuard {\n    address public owner;\n    address public claimAssessor;\n    address private exchangeAgent;\n    address public migrateTo;\n    address public USDT_TOKEN;\n    address public capitalAgent;\n    address public syntheticSSIP;\n\n    uint256 public LOCK_TIME = 1 days;\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\n    uint256 public STAKING_START_TIME;\n\n    address public rewarder;\n    address public override riskPool;\n    struct PoolInfo {\n        uint128 lastRewardBlock;\n        uint128 accUnoPerShare;\n        uint256 unoMultiplierPerBlock;\n    }\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n    }\n\n    mapping(address => UserInfo) public userInfo;\n\n    PoolInfo public poolInfo;\n\n    event RiskPoolCreated(address indexed _SSIP, address indexed _pool);\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogUpdatePool(uint128 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogSetExchangeAgent(address indexed _exchangeAgent);\n    event LogLeaveFromPendingSSIP(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\n    event LogLpTransferInSSIP(address indexed _from, address indexed _to, uint256 _amount);\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\n    event LogCreateSyntheticSSIP(address indexed _SSIP, address indexed _syntheticSSIP, address indexed _lpToken);\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _cancelAmount, uint256 _cancelAmountInUno);\n    event LogMigrate(address indexed _user, address indexed _migrateTo, uint256 _migratedAmount);\n\n    constructor(\n        address _owner,\n        address _claimAssessor,\n        address _exchangeAgent,\n        address _USDT_TOKEN,\n        address _capitalAgent\n    ) {\n        owner = _owner;\n        exchangeAgent = _exchangeAgent;\n        claimAssessor = _claimAssessor;\n        USDT_TOKEN = _USDT_TOKEN;\n        capitalAgent = _capitalAgent;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"UnoRe: Forbidden\");\n        _;\n    }\n\n    modifier onlyClaimAssessor() {\n        require(msg.sender == claimAssessor, \"UnoRe: Forbidden\");\n        _;\n    }\n\n    modifier isStartTime() {\n        require(block.timestamp >= STAKING_START_TIME, \"UnoRe: not available time\");\n        _;\n    }\n\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        exchangeAgent = _exchangeAgent;\n        emit LogSetExchangeAgent(_exchangeAgent);\n    }\n\n    function setCapitalAgent(address _capitalAgent) external onlyOwner {\n        require(_capitalAgent != address(0), \"UnoRe: zero address\");\n        capitalAgent = _capitalAgent;\n    }\n\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyOwner {\n        require(_rewardMultiplier > 0, \"UnoRe: zero value\");\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n    }\n\n    function setClaimAssessor(address _claimAssessor) external onlyOwner {\n        require(_claimAssessor != address(0), \"UnoRe: zero address\");\n        claimAssessor = _claimAssessor;\n    }\n\n    function setMigrateTo(address _migrateTo) external onlyOwner {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n    }\n\n    function setMinLPCapital(uint256 _minLPCapital) external onlyOwner {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\n    }\n\n    function setLockTime(uint256 _lockTime) external onlyOwner {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        LOCK_TIME = _lockTime;\n    }\n\n    function setStakingStartTime(uint256 _startTime) external onlyOwner {\n        require(_startTime > 0, \"UnoRe: not allow zero start time\");\n        STAKING_START_TIME = _startTime;\n    }\n\n    /**\n     * @dev create Risk pool with UNO from SSIP owner\n     */\n    function createRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _factory,\n        address _currency,\n        uint256 _rewardMultiplier\n    ) external onlyOwner nonReentrant {\n        require(riskPool == address(0), \"UnoRe: risk pool created already\");\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\n        poolInfo.lastRewardBlock = uint128(block.number);\n        poolInfo.accUnoPerShare = 0;\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        ICapitalAgent(capitalAgent).addPool(address(this));\n        emit RiskPoolCreated(address(this), riskPool);\n    }\n\n    function createRewarder(\n        address _operator,\n        address _factory,\n        address _currency\n    ) external onlyOwner nonReentrant {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    function createSyntheticSSIP(address _owner, address _factory) external onlyOwner nonReentrant {\n        require(_owner != address(0), \"UnoRe: zero owner address\");\n        require(_factory != address(0), \"UnoRe:zero factory address\");\n        require(riskPool != address(0), \"UnoRe:zero LP token address\");\n        syntheticSSIP = ISyntheticSSIPFactory(_factory).newSyntheticSSIP(_owner, riskPool);\n        emit LogCreateSyntheticSSIP(address(this), syntheticSSIP, riskPool);\n    }\n\n    function migrate() external nonReentrant {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        uint256 lpPrice = IRiskPool(riskPool).lpPriceUno();\n        uint256 amount = userInfo[msg.sender].amount;\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > LOCK_TIME;\n        uint256 migratedAmount = IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim((amount * lpPrice) / 1e18);\n        IMigration(migrateTo).onMigration(msg.sender, amount, \"\");\n        userInfo[msg.sender].amount = 0;\n        userInfo[msg.sender].rewardDebt = 0;\n        emit LogMigrate(msg.sender, migrateTo, migratedAmount);\n    }\n\n    function pendingUno(address _to) external view returns (uint256 pending) {\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\n        uint128 accUnoPerShare = poolInfo.accUnoPerShare;\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n            accUnoPerShare = accUnoPerShare + uint128((unoReward * ACC_UNO_PRECISION) / tokenSupply);\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    function updatePool() public override {\n        if (block.number > poolInfo.lastRewardBlock) {\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\n            if (tokenSupply > 0) {\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + uint128(((unoReward * ACC_UNO_PRECISION) / tokenSupply));\n            }\n            poolInfo.lastRewardBlock = uint128(block.number);\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\n        }\n    }\n\n    function enterInPool(uint256 _amount) external override isStartTime nonReentrant {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        address token = IRiskPool(riskPool).currency();\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\n        IRiskPool(riskPool).enter(msg.sender, _amount);\n        userInfo[msg.sender].rewardDebt =\n            userInfo[msg.sender].rewardDebt +\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\n            ACC_UNO_PRECISION;\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + ((_amount * 1e18) / lpPriceUno);\n        ICapitalAgent(capitalAgent).SSIPStaking(_amount);\n        emit StakedInPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override isStartTime nonReentrant {\n        _harvest(msg.sender);\n        require(ICapitalAgent(capitalAgent).checkCapitalByMCR(_amount), \"UnoRe: minimum capital underflow\");\n        // Withdraw desired amount from pool\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\n        require(((amount - pendingAmount) * lpPriceUno) / 1e18 >= _amount, \"UnoRe: withdraw amount overflow\");\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\n\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n        emit LeftPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending() external override isStartTime nonReentrant {\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n        (uint256 pendingAmount, , uint256 pendingAmountInUNO) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\n        ICapitalAgent(capitalAgent).SSIPWithdraw(pendingAmountInUNO);\n\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        userInfo[msg.sender].rewardDebt =\n            accumulatedUno -\n            ((pendingAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender);\n        userInfo[msg.sender].amount = amount - withdrawAmount;\n        emit LogLeaveFromPendingSSIP(msg.sender, withdrawAmount, withdrawAmountInUNO);\n    }\n\n    function lpTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external override nonReentrant {\n        require(msg.sender == address(riskPool), \"UnoRe: not allow others transfer\");\n        if (_from != syntheticSSIP && _to != syntheticSSIP) {\n            _harvest(_from);\n            uint256 amount = userInfo[_from].amount;\n            (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\n            require(amount - pendingAmount >= _amount, \"UnoRe: balance overflow\");\n            uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n            userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_from].amount = amount - _amount;\n\n            userInfo[_to].rewardDebt =\n                userInfo[_to].rewardDebt +\n                ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_to].amount = userInfo[_to].amount + _amount;\n\n            emit LogLpTransferInSSIP(_from, _to, _amount);\n        }\n    }\n\n    function harvest(address _to) external override isStartTime nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[msg.sender].rewardDebt = accumulatedUno;\n        uint256 rewardAmount = 0;\n\n        if (rewarder != address(0) && _pendingUno != 0) {\n            rewardAmount = IRewarder(rewarder).onReward(_to, _pendingUno);\n        }\n\n        emit Harvest(msg.sender, _to, rewardAmount);\n    }\n\n    function cancelWithdrawRequest() external nonReentrant {\n        (uint256 cancelAmount, uint256 cancelAmountInUno) = IRiskPool(riskPool).cancelWithrawRequest(msg.sender);\n        emit LogCancelWithdrawRequest(msg.sender, cancelAmount, cancelAmountInUno);\n    }\n\n    function policyClaim(address _to, uint256 _amount) external onlyClaimAssessor isStartTime nonReentrant {\n        require(_to != address(0), \"UnoRe: zero address\");\n        require(_amount > 0, \"UnoRe: zero amount\");\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_to, _amount);\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim(realClaimAmount);\n        emit PolicyClaim(_to, realClaimAmount);\n    }\n\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\n        lpAmount = userInfo[_to].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get withdraw request amount in pending per user in UNO\n     */\n    function getWithdrawRequestPerUser(address _user)\n        external\n        view\n        returns (\n            uint256 pendingAmount,\n            uint256 pendingAmountInUno,\n            uint256 originUnoAmount,\n            uint256 requestTime\n        )\n    {\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\n     */\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\n    }\n}\n"
    },
    "contracts/interfaces/IMigration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\ninterface IMigration {\n    function onMigration(\n        address who_,\n        uint256 amount_,\n        bytes memory data_\n    ) external;\n}\n"
    },
    "contracts/interfaces/IRewarderFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface IRewarderFactory {\n    function newRewarder(\n        address _operator,\n        address _currency,\n        address _pool\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/IRiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface IRiskPoolFactory {\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _pool,\n        address _currency\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\n\ninterface IRewarder {\n    function currency() external view returns (address);\n\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISyntheticSSIPFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ISyntheticSSIPFactory {\n    function newSyntheticSSIP(address _owner, address _lpToken) external returns (address);\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.0;\n\n// from Uniswap TransferHelper library\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeApprove: approve failed\");\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeTransfer: transfer failed\");\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::transferFrom: transferFrom failed\");\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/SingleSidedReinsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRiskPoolFactory.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/ISingleSidedReinsurancePool.sol\";\nimport \"./interfaces/ISyntheticSSRPFactory.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SingleSidedReinsurancePool is ISingleSidedReinsurancePool, ReentrancyGuard {\n    address public owner;\n    address public claimAssessor;\n    address public migrateTo;\n    address public syntheticSSRP;\n\n    uint256 public LOCK_TIME = 1 days;\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\n    uint256 public STAKING_START_TIME;\n\n    address public rewarder;\n    address public override riskPool;\n    struct PoolInfo {\n        uint128 lastRewardBlock;\n        uint128 accUnoPerShare;\n        uint256 unoMultiplierPerBlock;\n    }\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n    }\n\n    mapping(address => UserInfo) public userInfo;\n\n    PoolInfo public poolInfo;\n\n    event RiskPoolCreated(address indexed _SSRP, address indexed _pool);\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogUpdatePool(uint128 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogLeaveFromPendingSSRP(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\n    event LogLpTransferInSSRP(address indexed _from, address indexed _to, uint256 _amount);\n    event LogCreateRewarder(address indexed _SSRP, address indexed _rewarder, address _currency);\n    event LogCreateSyntheticSSRP(address indexed _SSRP, address indexed _syntheticSSRP, address indexed _lpToken);\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _cancelAmount, uint256 _cancelAmountInUno);\n    event LogMigrate(address indexed _user, address indexed _migrateTo, uint256 _migratedAmount);\n\n    constructor(address _owner, address _claimAssessor) {\n        owner = _owner;\n        claimAssessor = _claimAssessor;\n        STAKING_START_TIME = block.timestamp + 3 days;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"UnoRe: Forbidden\");\n        _;\n    }\n\n    modifier onlyClaimAssessor() {\n        require(msg.sender == claimAssessor, \"UnoRe: Forbidden\");\n        _;\n    }\n\n    modifier isStartTime() {\n        require(block.timestamp >= STAKING_START_TIME, \"UnoRe: not available time\");\n        _;\n    }\n\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyOwner {\n        require(_rewardMultiplier > 0, \"UnoRe: zero value\");\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n    }\n\n    function setClaimAssessor(address _claimAssessor) external onlyOwner {\n        require(_claimAssessor != address(0), \"UnoRe: zero address\");\n        claimAssessor = _claimAssessor;\n    }\n\n    function setMigrateTo(address _migrateTo) external onlyOwner {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n    }\n\n    function setMinLPCapital(uint256 _minLPCapital) external onlyOwner {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\n    }\n\n    function setLockTime(uint256 _lockTime) external onlyOwner {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        LOCK_TIME = _lockTime;\n    }\n\n    function setStakingStartTime(uint256 _startTime) external onlyOwner {\n        require(_startTime > 0, \"UnoRe: not allow zero start time\");\n        STAKING_START_TIME = _startTime;\n    }\n\n    /**\n     * @dev create Risk pool with UNO from SSRP owner\n     */\n    function createRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _factory,\n        address _currency,\n        uint256 _rewardMultiplier\n    ) external onlyOwner nonReentrant {\n        require(riskPool == address(0), \"UnoRe: risk pool created already\");\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\n        poolInfo.lastRewardBlock = uint128(block.number);\n        poolInfo.accUnoPerShare = 0;\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        emit RiskPoolCreated(address(this), riskPool);\n    }\n\n    function createRewarder(\n        address _operator,\n        address _factory,\n        address _currency\n    ) external onlyOwner nonReentrant {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    function createSyntheticSSRP(address _owner, address _factory) external onlyOwner nonReentrant {\n        require(_owner != address(0), \"UnoRe: zero owner address\");\n        require(_factory != address(0), \"UnoRe:zero factory address\");\n        require(riskPool != address(0), \"UnoRe:zero LP token address\");\n        syntheticSSRP = ISyntheticSSRPFactory(_factory).newSyntheticSSRP(_owner, riskPool);\n        emit LogCreateSyntheticSSRP(address(this), syntheticSSRP, riskPool);\n    }\n\n    function migrate() external nonReentrant {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > LOCK_TIME;\n        uint256 migratedAmount = IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\n        IMigration(migrateTo).onMigration(msg.sender, amount, \"\");\n        userInfo[msg.sender].amount = 0;\n        userInfo[msg.sender].rewardDebt = 0;\n        emit LogMigrate(msg.sender, migrateTo, migratedAmount);\n    }\n\n    function pendingUno(address _to) external view returns (uint256 pending) {\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\n        uint128 accUnoPerShare = poolInfo.accUnoPerShare;\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n            accUnoPerShare = accUnoPerShare + uint128((unoReward * ACC_UNO_PRECISION) / tokenSupply);\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    function updatePool() public override {\n        if (block.number > poolInfo.lastRewardBlock) {\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\n            if (tokenSupply > 0) {\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + uint128(((unoReward * ACC_UNO_PRECISION) / tokenSupply));\n            }\n            poolInfo.lastRewardBlock = uint128(block.number);\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\n        }\n    }\n\n    function enterInPool(uint256 _amount) external override isStartTime nonReentrant {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        address token = IRiskPool(riskPool).currency();\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\n        IRiskPool(riskPool).enter(msg.sender, _amount);\n        userInfo[msg.sender].rewardDebt =\n            userInfo[msg.sender].rewardDebt +\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\n            ACC_UNO_PRECISION;\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + ((_amount * 1e18) / lpPriceUno);\n        emit StakedInPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override isStartTime nonReentrant {\n        _harvest(msg.sender);\n        // Withdraw desired amount from pool\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\n        require(((amount - pendingAmount) * lpPriceUno) / 1e18 >= _amount, \"UnoRe: withdraw amount overflow\");\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\n\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n        emit LeftPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending() external override isStartTime nonReentrant {\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        userInfo[msg.sender].rewardDebt =\n            accumulatedUno -\n            ((pendingAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender);\n        userInfo[msg.sender].amount = amount - withdrawAmount;\n        emit LogLeaveFromPendingSSRP(msg.sender, withdrawAmount, withdrawAmountInUNO);\n    }\n\n    function lpTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external override nonReentrant {\n        require(msg.sender == address(riskPool), \"UnoRe: not allow others transfer\");\n        if (_from != syntheticSSRP && _to != syntheticSSRP) {\n            _harvest(_from);\n            uint256 amount = userInfo[_from].amount;\n            (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\n            require(amount - pendingAmount >= _amount, \"UnoRe: balance overflow\");\n            uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n            userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_from].amount = amount - _amount;\n\n            userInfo[_to].rewardDebt =\n                userInfo[_to].rewardDebt +\n                ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_to].amount = userInfo[_to].amount + _amount;\n\n            emit LogLpTransferInSSRP(_from, _to, _amount);\n        }\n    }\n\n    function harvest(address _to) external override isStartTime nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[msg.sender].rewardDebt = accumulatedUno;\n        uint256 rewardAmount = 0;\n\n        if (rewarder != address(0) && _pendingUno != 0) {\n            rewardAmount = IRewarder(rewarder).onReward(_to, _pendingUno);\n        }\n\n        emit Harvest(msg.sender, _to, rewardAmount);\n    }\n\n    function cancelWithdrawRequest() external nonReentrant {\n        (uint256 cancelAmount, uint256 cancelAmountInUno) = IRiskPool(riskPool).cancelWithrawRequest(msg.sender);\n        emit LogCancelWithdrawRequest(msg.sender, cancelAmount, cancelAmountInUno);\n    }\n\n    function policyClaim(address _to, uint256 _amount) external onlyClaimAssessor isStartTime nonReentrant {\n        require(_to != address(0), \"UnoRe: zero address\");\n        require(_amount > 0, \"UnoRe: zero amount\");\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_to, _amount);\n        emit PolicyClaim(_to, realClaimAmount);\n    }\n\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\n        lpAmount = userInfo[_to].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get withdraw request amount in pending per user in UNO\n     */\n    function getWithdrawRequestPerUser(address _user)\n        external\n        view\n        returns (\n            uint256 pendingAmount,\n            uint256 pendingAmountInUno,\n            uint256 originUnoAmount,\n            uint256 requestTime\n        )\n    {\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\n     */\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\n    }\n}\n"
    },
    "contracts/interfaces/ISingleSidedReinsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ISingleSidedReinsurancePool {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending() external;\n\n    function harvest(address _to) external;\n\n    function lpTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function riskPool() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ISyntheticSSRPFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ISyntheticSSRPFactory {\n    function newSyntheticSSRP(address _owner, address _lpToken) external returns (address);\n}\n"
    },
    "contracts/RiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./RiskPoolERC20.sol\";\nimport \"./interfaces/ISingleSidedReinsurancePool.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract RiskPool is IRiskPool, RiskPoolERC20 {\n    // ERC20 attributes\n    string public name;\n    string public symbol;\n\n    address public SSRP;\n    address public override currency; // for now we should accept only UNO\n    uint256 public override lpPriceUno;\n    uint256 public MIN_LP_CAPITAL = 1e20;\n\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _amount, uint256 _amountInUno);\n    event LogPolicyClaim(address indexed _user, uint256 _amount);\n    event LogMigrateLP(address indexed _user, address indexed _migrateTo, uint256 _unoAmount);\n    event LogLeaveFromPending(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _SSRP,\n        address _currency\n    ) {\n        name = _name;\n        symbol = _symbol;\n        SSRP = _SSRP;\n        currency = _currency;\n        lpPriceUno = 1e18;\n    }\n\n    modifier onlySSRP() {\n        require(msg.sender == SSRP, \"UnoRe: RiskPool Forbidden\");\n        _;\n    }\n\n    /**\n     * @dev Users can stake only through Cohort\n     */\n    function enter(address _from, uint256 _amount) external override onlySSRP {\n        _mint(_from, (_amount * 1e18) / lpPriceUno);\n    }\n\n    /**\n     * @param _amount UNO amount to withdraw\n     */\n    function leaveFromPoolInPending(address _to, uint256 _amount) external override onlySSRP {\n        require(totalSupply() > 0, \"UnoRe: There's no remaining in the pool\");\n        uint256 requestAmountInLP = (_amount * 1e18) / lpPriceUno;\n        require(\n            (requestAmountInLP + uint256(withdrawRequestPerUser[_to].pendingAmount)) <= balanceOf(_to),\n            \"UnoRe: lp balance overflow\"\n        );\n        _withdrawRequest(_to, requestAmountInLP, _amount);\n    }\n\n    function leaveFromPending(address _to) external override onlySSRP returns (uint256, uint256) {\n        uint256 cryptoBalance = IERC20(currency).balanceOf(address(this));\n        uint256 pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\n        require(cryptoBalance > 0, \"UnoRe: zero uno balance\");\n        require(balanceOf(_to) >= pendingAmount, \"UnoRe: lp balance overflow\");\n        _withdrawImplement(_to);\n        uint256 pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\n        if (cryptoBalance - MIN_LP_CAPITAL > pendingAmountInUno) {\n            TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\n            emit LogLeaveFromPending(_to, pendingAmount, pendingAmountInUno);\n            return (pendingAmount, pendingAmountInUno);\n        } else {\n            TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n            emit LogLeaveFromPending(_to, pendingAmount, cryptoBalance - MIN_LP_CAPITAL);\n            return (((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\n        }\n    }\n\n    function cancelWithrawRequest(address _to) external override onlySSRP returns (uint256, uint256) {\n        uint256 _pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\n        require(_pendingAmount > 0, \"UnoRe: zero amount\");\n        _cancelWithdrawRequest(_to);\n        emit LogCancelWithdrawRequest(_to, _pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\n        return (_pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\n    }\n\n    function policyClaim(address _to, uint256 _amount) external override onlySSRP returns (uint256 realClaimAmount) {\n        uint256 cryptoBalance = IERC20(currency).balanceOf(address(this));\n        require(totalSupply() > 0, \"UnoRe: zero lp balance\");\n        require(cryptoBalance > MIN_LP_CAPITAL, \"UnoRe: minimum UNO capital underflow\");\n        if (cryptoBalance - MIN_LP_CAPITAL > _amount) {\n            TransferHelper.safeTransfer(currency, _to, _amount);\n            realClaimAmount = _amount;\n            emit LogPolicyClaim(_to, _amount);\n        } else {\n            TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n            realClaimAmount = cryptoBalance - MIN_LP_CAPITAL;\n            emit LogPolicyClaim(_to, cryptoBalance - MIN_LP_CAPITAL);\n        }\n        cryptoBalance = IERC20(currency).balanceOf(address(this));\n        lpPriceUno = (cryptoBalance * 1e18) / totalSupply(); // UNO value per lp\n    }\n\n    function migrateLP(\n        address _to,\n        address _migrateTo,\n        bool _isUnLocked\n    ) external override onlySSRP returns (uint256) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        if (_isUnLocked && withdrawRequestPerUser[_to].pendingAmount > 0) {\n            uint256 pendingAmountInUno = (uint256(withdrawRequestPerUser[_to].pendingAmount) * lpPriceUno) / 1e18;\n            uint256 cryptoBalance = IERC20(currency).balanceOf(address(this));\n            if (pendingAmountInUno < cryptoBalance - MIN_LP_CAPITAL) {\n                TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\n            } else {\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            _withdrawImplement(_to);\n        } else {\n            if (withdrawRequestPerUser[_to].pendingAmount > 0) {\n                _cancelWithdrawRequest(_to);\n            }\n        }\n        uint256 unoBalance = (balanceOf(_to) * lpPriceUno) / 1e18;\n        TransferHelper.safeTransfer(currency, _migrateTo, unoBalance);\n        _burn(_to, balanceOf(_to));\n        emit LogMigrateLP(_to, _migrateTo, unoBalance);\n        return unoBalance;\n    }\n\n    function setMinLPCapital(uint256 _minLPCapital) external override onlySSRP {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        MIN_LP_CAPITAL = _minLPCapital;\n    }\n\n    function getWithdrawRequest(address _to)\n        external\n        view\n        override\n        onlySSRP\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            uint256(withdrawRequestPerUser[_to].pendingAmount),\n            uint256(withdrawRequestPerUser[_to].requestTime),\n            withdrawRequestPerUser[_to].pendingUno\n        );\n    }\n\n    function getTotalWithdrawRequestAmount() external view override onlySSRP returns (uint256) {\n        return totalWithdrawPending;\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        require(\n            balanceOf(msg.sender) - uint256(withdrawRequestPerUser[msg.sender].pendingAmount) >= amount,\n            \"ERC20: transfer amount exceeds balance or pending WR\"\n        );\n        _transfer(msg.sender, recipient, amount);\n\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        require(\n            balanceOf(sender) - uint256(withdrawRequestPerUser[sender].pendingAmount) >= amount,\n            \"ERC20: transfer amount exceeds balance or pending WR\"\n        );\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][msg.sender];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, msg.sender, currentAllowance - amount);\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(sender, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/RiskPoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\n\nimport \"./interfaces/IRiskPoolERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract RiskPoolERC20 is Context, IRiskPoolERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    struct UserWithdrawRequestInfo {\n        uint128 pendingAmount;\n        uint128 requestTime;\n        uint256 pendingUno;\n    }\n    mapping(address => UserWithdrawRequestInfo) internal withdrawRequestPerUser;\n    uint256 internal totalWithdrawPending;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor() {}\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _withdrawRequest(\n        address _user,\n        uint256 _amount,\n        uint256 _amountInUno\n    ) internal {\n        require(balanceOf(_user) >= _amount, \"UnoRe: balance overflow\");\n        if (withdrawRequestPerUser[_user].pendingAmount == 0 && withdrawRequestPerUser[_user].requestTime == 0) {\n            withdrawRequestPerUser[_user] = UserWithdrawRequestInfo({\n                pendingAmount: uint128(_amount),\n                requestTime: uint128(block.timestamp),\n                pendingUno: _amountInUno\n            });\n        } else {\n            withdrawRequestPerUser[_user].pendingAmount += uint128(_amount);\n            withdrawRequestPerUser[_user].pendingUno += _amountInUno;\n            withdrawRequestPerUser[_user].requestTime = uint128(block.timestamp);\n        }\n        totalWithdrawPending += _amount;\n    }\n\n    function _withdrawImplement(address _user) internal {\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \"UnoRe: zero claim amount\");\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        _burn(_user, _pendingAmount);\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _cancelWithdrawRequest(address _user) internal {\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        delete withdrawRequestPerUser[_user];\n    }\n}\n"
    },
    "contracts/interfaces/IRiskPoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IRiskPoolERC20 {\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/SalesPolicy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/ICapitalAgent.sol\";\nimport \"./interfaces/ISingleSidedReinsurancePool.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./interfaces/IPremiumPool.sol\";\nimport \"./interfaces/ISalesPolicy.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./EIP712MetaTransaction.sol\";\n\ncontract SalesPolicy is EIP712MetaTransaction(\"BuyPolicyMetaTransaction\", \"1\"), ERC721, ISalesPolicy, ReentrancyGuard {\n    using Counters for Counters.Counter;\n\n    address public immutable factory;\n    struct Policy {\n        uint256 coverStartAt;\n        uint256 coverageDuration;\n        uint256 coverageAmount;\n        uint256 policyPriceInUSDC;\n        uint256 premiumPaid;\n        address premiumCurrency;\n        bool exist;\n        bool expired;\n    }\n\n    uint256 public maxDeadline;\n    uint16 public protocolIdx;\n    address private exchangeAgent;\n    address public premiumPool;\n    address public capitalAgent;\n    address public signer;\n    address private immutable UNORE_TOKEN; // 0x474021845C4643113458ea4414bdb7fB74A01A77\n    address public immutable USDC_TOKEN; //\n\n    string private protocolURI;\n\n    Counters.Counter private policyIdx;\n\n    mapping(uint256 => Policy) public getPolicy;\n\n    uint256 private MAX_INTEGER = type(uint256).max;\n\n    event BuyPolicy(\n        uint256 indexed _protocolIdx,\n        uint256 indexed _policyIdx,\n        address _owner,\n        uint256 _coverageAmount,\n        uint256 _policyPriceInUSDC,\n        address _premiumCurrency,\n        uint256 _premiumPaid\n    );\n    event LogSetExchangeAgentInPolicy(address indexed _exchangeAgent, address indexed _policyAddress, uint16 _protocolIdx);\n    event LogSetPremiumPoolInPolicy(address indexed _premiumPool, address indexed _policyAddress, uint16 _protocolIdx);\n    event LogSetProtocolURIInPolicy(uint16 _protocolIdx, address indexed _policyAddress, string _uri);\n    event LogSetSignerInPolicy(address indexed _signer, address indexed _policyAddress, uint16 _protocolIdx);\n    event LogSetBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline, address indexed _policyAddress, uint16 _protocolIdx);\n    event LogapprovePremiumIInPolicy(\n        uint16 _protocolIdx,\n        address indexed _policyAddress,\n        address indexed _premiumCurrency,\n        address premiumPool\n    );\n\n    constructor(\n        address _factory,\n        address _exchangeAgent,\n        address _premiumPool,\n        address _capitalAgent,\n        address _unoToken,\n        address _usdcToken,\n        string memory _protocolURI,\n        uint16 _protocolIdx\n    ) ERC721(\"Policy insurance\", \"Policy insurance\") {\n        factory = _factory;\n        protocolIdx = _protocolIdx;\n        exchangeAgent = _exchangeAgent;\n        capitalAgent = _capitalAgent;\n        UNORE_TOKEN = _unoToken;\n        USDC_TOKEN = _usdcToken;\n        premiumPool = _premiumPool;\n        maxDeadline = 7 days;\n        protocolURI = _protocolURI;\n    }\n\n    modifier onlyFactory() {\n        require(msgSender() == factory, \"UnoRe: SalesPolicy Forbidden\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function buyPolicy(\n        uint256 _coverageAmount,\n        uint256 _coverageDuration,\n        uint256 _policyPriceInUSDC,\n        uint256 _signedTime,\n        address _premiumCurrency,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) external payable nonReentrant {\n        address _signer = getSender(\n            _policyPriceInUSDC,\n            _coverageDuration,\n            _coverageAmount,\n            _signedTime,\n            _premiumCurrency,\n            r,\n            s,\n            v\n        );\n        require(_signer != address(0) && _signer == signer, \"UnoRe: invalid signer\");\n        require(_signedTime <= block.timestamp && block.timestamp - _signedTime < maxDeadline, \"UnoRe: signature expired\");\n\n        uint256 lastIdx = policyIdx.current();\n\n        uint256 premiumPaid = 0;\n        if (_premiumCurrency == address(0)) {\n            premiumPaid = IExchangeAgent(exchangeAgent).getETHAmountForUSDC(_policyPriceInUSDC);\n            require(msg.value >= premiumPaid, \"UnoRe: insufficient paid\");\n            if (msg.value > premiumPaid) {\n                TransferHelper.safeTransferETH(msgSender(), msg.value - premiumPaid);\n            }\n            TransferHelper.safeTransferETH(premiumPool, premiumPaid);\n            IPremiumPool(premiumPool).collectPremiumInETH(premiumPaid);\n        } else if (_premiumCurrency != USDC_TOKEN) {\n            premiumPaid = IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_premiumCurrency, _policyPriceInUSDC);\n            TransferHelper.safeTransferFrom(_premiumCurrency, msgSender(), address(this), premiumPaid);\n            IPremiumPool(premiumPool).collectPremium(_premiumCurrency, premiumPaid);\n        } else {\n            premiumPaid = _policyPriceInUSDC;\n            TransferHelper.safeTransferFrom(_premiumCurrency, msgSender(), address(this), _policyPriceInUSDC);\n            IPremiumPool(premiumPool).collectPremium(_premiumCurrency, _policyPriceInUSDC);\n        }\n\n        getPolicy[lastIdx] = Policy({\n            coverageAmount: _coverageAmount,\n            coverageDuration: _coverageDuration,\n            coverStartAt: block.timestamp,\n            policyPriceInUSDC: _policyPriceInUSDC,\n            premiumPaid: premiumPaid,\n            premiumCurrency: _premiumCurrency,\n            exist: true,\n            expired: false\n        });\n\n        _mint(msgSender(), lastIdx);\n\n        ICapitalAgent(capitalAgent).policySale(_coverageAmount);\n\n        policyIdx.increment();\n        emit BuyPolicy(protocolIdx, lastIdx, msgSender(), _coverageAmount, _policyPriceInUSDC, _premiumCurrency, premiumPaid);\n    }\n\n    function approvePremium(address _premiumCurrency) external override onlyFactory {\n        require(_premiumCurrency != address(0), \"UnoRe: zero address\");\n        require(premiumPool != address(0), \"UnoRe: not defiend premiumPool\");\n        TransferHelper.safeApprove(_premiumCurrency, premiumPool, MAX_INTEGER);\n        emit LogapprovePremiumIInPolicy(protocolIdx, address(this), _premiumCurrency, premiumPool);\n    }\n\n    function setProtocolURI(string memory newURI) external override onlyFactory {\n        protocolURI = newURI;\n        emit LogSetProtocolURIInPolicy(protocolIdx, address(this), newURI);\n    }\n\n    function setPremiumPool(address _premiumPool) external override onlyFactory {\n        require(_premiumPool != address(0), \"UnoRe: zero address\");\n        premiumPool = _premiumPool;\n        emit LogSetPremiumPoolInPolicy(_premiumPool, address(this), protocolIdx);\n    }\n\n    function setExchangeAgent(address _exchangeAgent) external override onlyFactory {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        exchangeAgent = _exchangeAgent;\n        emit LogSetExchangeAgentInPolicy(_exchangeAgent, address(this), protocolIdx);\n    }\n\n    function setSigner(address _signer) external override onlyFactory {\n        require(_signer != address(0), \"UnoRe: zero address\");\n        signer = _signer;\n        emit LogSetSignerInPolicy(_signer, address(this), protocolIdx);\n    }\n\n    function setCapitalAgent(address _capitalAgent) external override onlyFactory {\n        require(_capitalAgent != address(0), \"UnoRe: zero address\");\n        capitalAgent = _capitalAgent;\n        emit LogSetExchangeAgentInPolicy(_capitalAgent, address(this), protocolIdx);\n    }\n\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external override onlyFactory {\n        require(_maxDeadline > 0, \"UnoRe: zero max signedTime\");\n        maxDeadline = _maxDeadline;\n        emit LogSetBuyPolicyMaxDeadlineInPolicy(_maxDeadline, address(this), protocolIdx);\n    }\n\n    function markToClaim(uint256 _policyId) external override nonReentrant {\n        require(getPolicy[_policyId].exist, \"UnoRe: marked to claim already\");\n        getPolicy[_policyId].exist = false;\n        _burn(_policyId);\n    }\n\n    function updatePolicyExpired(uint256 _policyId) external override nonReentrant {\n        require(!getPolicy[_policyId].exist, \"UnoRe: expired already\");\n        getPolicy[_policyId].expired = true;\n        _burn(_policyId);\n    }\n\n    function allPoliciesLength() external view override returns (uint256) {\n        return policyIdx.current();\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return protocolURI;\n    }\n\n    function getPolicyData(uint256 _policyId)\n        external\n        view\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 coverageAmount = getPolicy[_policyId].coverageAmount;\n        uint256 coverageDuration = getPolicy[_policyId].coverageDuration;\n        uint256 coverStartAt = uint256(getPolicy[_policyId].coverStartAt);\n        uint256 premiumPaid = getPolicy[_policyId].policyPriceInUSDC;\n        return (coverageAmount, coverageDuration, coverStartAt, premiumPaid);\n    }\n\n    function getSender(\n        uint256 _policyPrice,\n        uint256 _coverageDuration,\n        uint256 _coverageAmount,\n        uint256 _signedTime,\n        address _premiumCurrency,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) private pure returns (address) {\n        // bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\n        bytes32 msgHash = keccak256(\n            abi.encodePacked(_policyPrice, _coverageDuration, _coverageAmount, _signedTime, _premiumCurrency)\n        );\n        // bytes32 msgHash = keccak256(abi.encodePacked(productName));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", msgHash));\n        // (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        return recoveredAddress;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/interfaces/IPremiumPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface IPremiumPool {\n    function collectPremium(address _premiumCurrency, uint256 _premiumAmount) external;\n\n    function collectPremiumInETH(uint256 _premiumAmount) external payable;\n\n    function withdrawPremium(\n        address _currency,\n        address _to,\n        uint256 _amount\n    ) external;\n}\n"
    },
    "contracts/EIP712MetaTransaction.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./libraries/EIP712Base.sol\";\n\ncontract EIP712MetaTransaction is EIP712Base {\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\n        keccak256(bytes(\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"));\n\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\n    mapping(address => uint256) private nonces;\n\n    /*\n     * Meta transaction structure.\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\n     * He should call the desired function directly in that case.\n     */\n    struct MetaTransaction {\n        uint256 nonce;\n        address from;\n        bytes functionSignature;\n    }\n\n    constructor(string memory name, string memory version) EIP712Base(name, version) {}\n\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\n        if (inBytes.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            outBytes4 := mload(add(inBytes, 32))\n        }\n    }\n\n    function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\n        require(destinationFunctionSig != msg.sig, \"functionSignature can not be of executeMetaTransaction method\");\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \"Signer and signature do not match\");\n        nonces[userAddress] = nonces[userAddress] + 1;\n        // Append userAddress at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\n\n        require(success, \"Function call not successful\");\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\n        return returnData;\n    }\n\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\n        return keccak256(abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature)));\n    }\n\n    function getNonce(address user) external view returns (uint256 nonce) {\n        nonce = nonces[user];\n    }\n\n    function verify(\n        address user,\n        MetaTransaction memory metaTx,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) internal view returns (bool) {\n        address signer = ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\n        require(signer != address(0), \"Invalid signature\");\n        return signer == user;\n    }\n\n    function msgSender() internal view returns (address sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/libraries/EIP712Base.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract EIP712Base {\n    struct EIP712Domain {\n        string name;\n        string version;\n        address verifyingContract;\n        bytes32 salt;\n    }\n\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\n        keccak256(bytes(\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"));\n\n    bytes32 internal domainSeparator;\n\n    constructor(string memory name, string memory version) {\n        domainSeparator = keccak256(\n            abi.encode(\n                EIP712_DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                address(this),\n                bytes32(getChainID())\n            )\n        );\n    }\n\n    function getChainID() internal view returns (uint256 id) {\n        assembly {\n            id := chainid()\n        }\n    }\n\n    function getDomainSeparator() private view returns (bytes32) {\n        return domainSeparator;\n    }\n\n    /**\n     * Accept message hash and returns hash message in EIP712 compatible form\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\n     * https://eips.ethereum.org/EIPS/eip-712\n     * \"\\\\x19\" makes the encoding deterministic\n     * \"\\\\x01\" is the version byte to make it compatible to EIP-191\n     */\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", getDomainSeparator(), messageHash));\n    }\n}\n"
    },
    "contracts/factories/SalesPolicyFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"../SalesPolicy.sol\";\nimport \"../interfaces/ISalesPolicy.sol\";\nimport \"../interfaces/ISalesPolicyFactory.sol\";\n\ncontract SalesPolicyFactory is ISalesPolicyFactory, ReentrancyGuard {\n    using Counters for Counters.Counter;\n    // It should be okay if Protocol is struct\n    struct Protocol {\n        uint256 coverDuration; // Duration of the protocol cover products\n        uint256 mcr; // Maximum Capital Requirement Ratio of that protocol\n        address protocolAddress; // Address of that protocol\n        address protocolCurrency;\n        string name; // protocol name\n        string productType; // Type of product i.e. Wallet insurance, smart contract bug insurance, etc.\n        string premiumDescription;\n        address salesPolicy;\n        bool exist; // initial true\n    }\n\n    address public premiumPool;\n    address public owner;\n    address public exchangeAgent;\n    address public capitalAgent;\n\n    mapping(uint16 => Protocol) public getProtocol;\n    Counters.Counter private protocolIds;\n\n    address public USDT_TOKEN;\n    address public UNO_TOKEN;\n\n    event ProtocolCreated(address indexed _salesPolicy, uint16 _protocolIdx);\n    event LogSetProtocolMCR(uint16 _protocolIdx, uint256 _mcr);\n    event LogSetPremiumPool(address indexed _premiumPool);\n\n    constructor(\n        address _owner,\n        address _usdt_token,\n        address _uno_token,\n        address _exchangeAgent,\n        address _premiumPool,\n        address _capitalAgent\n    ) {\n        USDT_TOKEN = _usdt_token;\n        UNO_TOKEN = _uno_token;\n        owner = _owner;\n        premiumPool = _premiumPool;\n        exchangeAgent = _exchangeAgent;\n        capitalAgent = _capitalAgent;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"UnoRe: Forbidden\");\n        _;\n    }\n\n    // This action can be done only by SSIP owner\n    function addProtocol(\n        string calldata _name,\n        string calldata _productType,\n        string calldata _premiumDescription,\n        uint256 _coverDuration,\n        address _protocolAddress,\n        address _protocolCurrency\n    ) external onlyOwner nonReentrant {\n        uint16 lastIdx = uint16(protocolIds.current());\n        address currency = _protocolCurrency;\n        address _salesPolicy = newSalesPolicy(lastIdx, exchangeAgent, premiumPool, capitalAgent, \"\");\n        ICapitalAgent(capitalAgent).addPolicy(_salesPolicy);\n\n        getProtocol[lastIdx] = Protocol({\n            name: _name,\n            coverDuration: _coverDuration,\n            mcr: 1,\n            protocolAddress: _protocolAddress,\n            protocolCurrency: currency,\n            productType: _productType,\n            premiumDescription: _premiumDescription,\n            salesPolicy: _salesPolicy,\n            exist: true\n        });\n\n        protocolIds.increment();\n        emit ProtocolCreated(_salesPolicy, lastIdx);\n    }\n\n    function newSalesPolicy(\n        uint16 _protocolIdx,\n        address _twapPriceFeed,\n        address _premiumPool,\n        address _capitalAgent,\n        string memory _protocolURI\n    ) private returns (address) {\n        SalesPolicy _salesPolicy = new SalesPolicy(\n            address(this),\n            _twapPriceFeed,\n            _premiumPool,\n            _capitalAgent,\n            UNO_TOKEN,\n            USDT_TOKEN,\n            _protocolURI,\n            _protocolIdx\n        );\n        address _salesPolicyAddr = address(_salesPolicy);\n\n        return _salesPolicyAddr;\n    }\n\n    function allProtocolsLength() external view returns (uint256) {\n        return protocolIds.current();\n    }\n\n    function setPremiumPool(address _premiumPool) external onlyOwner {\n        require(_premiumPool != address(0), \"UnoRe: zero address\");\n        premiumPool = _premiumPool;\n        emit LogSetPremiumPool(_premiumPool);\n    }\n\n    function setExchangeAgentInPolicy(uint16 _protocolIdx, address _exchangeAgent) external onlyOwner {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\n        ISalesPolicy(salesPolicy).setExchangeAgent(_exchangeAgent);\n    }\n\n    function setBuyPolicyMaxDeadlineInPolicy(uint16 _protocolIdx, uint256 _maxDeadline) external onlyOwner {\n        require(_maxDeadline > 0, \"UnoRe: zero max deadline\");\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\n        ISalesPolicy(salesPolicy).setBuyPolicyMaxDeadline(_maxDeadline);\n    }\n\n    function setPremiumPoolInPolicy(uint16 _protocolIdx, address _premiumPool) external onlyOwner {\n        require(_premiumPool != address(0), \"UnoRe: zero address\");\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\n        ISalesPolicy(salesPolicy).setPremiumPool(_premiumPool);\n    }\n\n    function setProtocolMCR(uint16 _protocolIdx, uint256 _mcr) external onlyOwner {\n        require(_mcr > 0, \"UnoRe: zero mcr\");\n        Protocol storage _protocol = getProtocol[_protocolIdx];\n        _protocol.mcr = _mcr;\n        emit LogSetProtocolMCR(_protocolIdx, _mcr);\n    }\n\n    function setSignerInPolicy(uint16 _protocolIdx, address _signer) external onlyOwner {\n        require(_signer != address(0), \"UnoRe: zero address\");\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\n        ISalesPolicy(salesPolicy).setSigner(_signer);\n    }\n\n    function setProtocolURIInPolicy(uint16 _protocolIdx, string memory _uri) external onlyOwner {\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\n        ISalesPolicy(salesPolicy).setProtocolURI(_uri);\n    }\n\n    function approvePremiumInPolicy(uint16 _protocolIdx, address _premiumCurrency) external onlyOwner {\n        address salesPolicy = getProtocol[_protocolIdx].salesPolicy;\n        ISalesPolicy(salesPolicy).approvePremium(_premiumCurrency);\n    }\n\n    function getProtocolData(uint16 _protocolIdx)\n        external\n        view\n        override\n        returns (\n            string memory protocolName,\n            string memory productType,\n            address protocolAddress\n        )\n    {\n        return (getProtocol[_protocolIdx].name, getProtocol[_protocolIdx].productType, getProtocol[_protocolIdx].protocolAddress);\n    }\n}\n"
    },
    "contracts/interfaces/ISalesPolicyFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ISalesPolicyFactory {\n    function getProtocolData(uint16 _protocolIdx)\n        external\n        view\n        returns (\n            string memory protocolName,\n            string memory productType,\n            address protocolAddress\n        );\n\n    // function newSalesPolicy(\n    //     uint16 _protocolIdx,\n    //     address _exchangeAgent,\n    //     address _premiumPool,\n    //     address _capitalAgent,\n    //     string memory _protocolURI\n    // ) external returns (address);\n}\n"
    },
    "contracts/PremiumPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./interfaces/IPremiumPool.sol\";\n\ncontract PremiumPool is IPremiumPool, ReentrancyGuard {\n    address public owner;\n    address public exchangeAgent;\n    address public UNO_TOKEN;\n    address public USDC_TOKEN;\n    mapping(address => bool) public availableCurrencies;\n    address[] public availableCurrencyList;\n\n    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;\n    mapping(address => uint256) public SSRP_PREMIUM;\n    mapping(address => uint256) public SSIP_PREMIUM;\n    mapping(address => uint256) public BACK_BURN_UNO_PREMIUM;\n    uint256 public SSRP_PREMIUM_ETH;\n    uint256 public SSIP_PREMIUM_ETH;\n    uint256 public BACK_BURN_PREMIUM_ETH;\n\n    uint256 private MAX_INTEGER = type(uint256).max;\n\n    event PremiumWithdraw(address indexed _currency, address indexed _to, uint256 _amount);\n    event LogBuyBackAndBurn(address indexed _operator, address indexed _premiumPool, uint256 _unoAmount);\n    event LogCollectPremium(address indexed _from, address _premiumCurrency, uint256 _premiumAmount);\n    event LogDepositToSyntheticSSRPRewarder(address indexed _rewarder, uint256 _ethAmountDeposited);\n    event LogDepositToSyntheticSSIPRewarder(address indexed _rewarder, address indexed _currency, uint256 _amountDeposited);\n\n    constructor(\n        address _exchangeAgent,\n        address _unoToken,\n        address _usdcToken\n    ) {\n        exchangeAgent = _exchangeAgent;\n        owner = msg.sender;\n        UNO_TOKEN = _unoToken;\n        USDC_TOKEN = _usdcToken;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"UnoRe: PremiumPool Forbidden\");\n        _;\n    }\n\n    modifier onlyAvailableCurrency(address _currency) {\n        require(availableCurrencies[_currency], \"UnoRe: not allowed currency\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function collectPremiumInETH(uint256 _premiumAmount) external payable override nonReentrant {\n        SSRP_PREMIUM_ETH = SSRP_PREMIUM_ETH + ((_premiumAmount * 1000) / 10000);\n        SSIP_PREMIUM_ETH = SSIP_PREMIUM_ETH + ((_premiumAmount * 7000) / 10000);\n        BACK_BURN_PREMIUM_ETH = BACK_BURN_PREMIUM_ETH + ((_premiumAmount * 2000) / 10000);\n        emit LogCollectPremium(msg.sender, address(0), _premiumAmount);\n    }\n\n    function collectPremium(address _premiumCurrency, uint256 _premiumAmount)\n        external\n        override\n        nonReentrant\n        onlyAvailableCurrency(_premiumCurrency)\n    {\n        require(IERC20(_premiumCurrency).balanceOf(msg.sender) >= _premiumAmount, \"UnoRe: premium balance overflow\");\n        TransferHelper.safeTransferFrom(_premiumCurrency, msg.sender, address(this), _premiumAmount);\n        SSRP_PREMIUM[_premiumCurrency] = SSRP_PREMIUM[_premiumCurrency] + ((_premiumAmount * 1000) / 10000);\n        SSIP_PREMIUM[_premiumCurrency] = SSIP_PREMIUM[_premiumCurrency] + ((_premiumAmount * 7000) / 10000);\n        BACK_BURN_UNO_PREMIUM[_premiumCurrency] = BACK_BURN_UNO_PREMIUM[_premiumCurrency] + ((_premiumAmount * 2000) / 10000);\n        emit LogCollectPremium(msg.sender, _premiumCurrency, _premiumAmount);\n    }\n\n    function depositToSyntheticSSRPRewarder(address _rewarder) external payable onlyOwner nonReentrant {\n        require(_rewarder != address(0), \"UnoRe: zero address\");\n        uint256 usdcAmountToDeposit = 0;\n        if (SSRP_PREMIUM_ETH > 0) {\n            TransferHelper.safeTransferETH(exchangeAgent, SSRP_PREMIUM_ETH);\n            uint256 convertedAmount = IExchangeAgent(exchangeAgent).convertForToken(address(0), USDC_TOKEN, SSRP_PREMIUM_ETH);\n            usdcAmountToDeposit += convertedAmount;\n            SSRP_PREMIUM_ETH = 0;\n        }\n        for (uint256 ii = 0; ii < availableCurrencyList.length; ii++) {\n            if (SSRP_PREMIUM[availableCurrencyList[ii]] > 0) {\n                if (availableCurrencyList[ii] == USDC_TOKEN) {\n                    usdcAmountToDeposit += SSRP_PREMIUM[availableCurrencyList[ii]];\n                } else {\n                    uint256 convertedUSDCAmount = IExchangeAgent(exchangeAgent).convertForToken(\n                        availableCurrencyList[ii],\n                        USDC_TOKEN,\n                        SSRP_PREMIUM[availableCurrencyList[ii]]\n                    );\n                    usdcAmountToDeposit += convertedUSDCAmount;\n                }\n                SSRP_PREMIUM[availableCurrencyList[ii]] = 0;\n            }\n        }\n        if (usdcAmountToDeposit > 0) {\n            TransferHelper.safeTransfer(USDC_TOKEN, _rewarder, usdcAmountToDeposit);\n            emit LogDepositToSyntheticSSRPRewarder(_rewarder, usdcAmountToDeposit);\n        }\n    }\n\n    function depositToSyntheticSSIPRewarder(address _currency, address _rewarder) external payable onlyOwner nonReentrant {\n        require(_rewarder != address(0), \"UnoRe: zero address\");\n        if (_currency == address(0) && SSIP_PREMIUM_ETH > 0) {\n            TransferHelper.safeTransferETH(_rewarder, SSIP_PREMIUM_ETH);\n            SSIP_PREMIUM_ETH = 0;\n            emit LogDepositToSyntheticSSIPRewarder(_rewarder, _currency, SSIP_PREMIUM_ETH);\n        } else {\n            if (availableCurrencies[_currency] && SSIP_PREMIUM[_currency] > 0) {\n                TransferHelper.safeTransfer(_currency, _rewarder, SSIP_PREMIUM[_currency]);\n                SSIP_PREMIUM[_currency] = 0;\n                emit LogDepositToSyntheticSSIPRewarder(_rewarder, _currency, SSIP_PREMIUM[_currency]);\n            }\n        }\n    }\n\n    function buyBackAndBurn() external onlyOwner {\n        uint256 unoAmount = 0;\n        if (BACK_BURN_PREMIUM_ETH > 0) {\n            TransferHelper.safeTransferETH(exchangeAgent, BACK_BURN_PREMIUM_ETH);\n            unoAmount += IExchangeAgent(exchangeAgent).convertForToken(address(0), UNO_TOKEN, BACK_BURN_PREMIUM_ETH);\n            BACK_BURN_PREMIUM_ETH = 0;\n        }\n        for (uint256 ii = 0; ii < availableCurrencyList.length; ii++) {\n            if (BACK_BURN_UNO_PREMIUM[availableCurrencyList[ii]] > 0) {\n                uint256 convertedAmount = IExchangeAgent(exchangeAgent).convertForToken(\n                    availableCurrencyList[ii],\n                    UNO_TOKEN,\n                    BACK_BURN_UNO_PREMIUM[availableCurrencyList[ii]]\n                );\n                unoAmount += convertedAmount;\n                BACK_BURN_UNO_PREMIUM[availableCurrencyList[ii]] = 0;\n            }\n        }\n        if (unoAmount > 0) {\n            TransferHelper.safeTransfer(UNO_TOKEN, burnAddress, unoAmount);\n        }\n        emit LogBuyBackAndBurn(msg.sender, address(this), unoAmount);\n    }\n\n    function withdrawPremium(\n        address _currency,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner {\n        require(_to != address(0), \"UnoRe: zero address\");\n        require(_amount > 0, \"UnoRe: zero amount\");\n        if (_currency == address(0)) {\n            require(address(this).balance >= _amount, \"UnoRe: Insufficient Premium\");\n            TransferHelper.safeTransferETH(_to, _amount);\n        } else {\n            require(IERC20(_currency).balanceOf(address(this)) >= _amount, \"UnoRe: Insufficient Premium\");\n            TransferHelper.safeTransfer(_currency, _to, _amount);\n        }\n        emit PremiumWithdraw(_currency, _to, _amount);\n    }\n\n    function addCurrency(address _currency) external onlyOwner {\n        require(!availableCurrencies[_currency], \"Already available\");\n        availableCurrencies[_currency] = true;\n        availableCurrencyList.push(_currency);\n        maxApproveCurrency(_currency, exchangeAgent);\n    }\n\n    function removeCurrency(address _currency) external onlyOwner {\n        require(availableCurrencies[_currency], \"Not available yet\");\n        availableCurrencies[_currency] = false;\n        uint256 len = availableCurrencyList.length;\n        address lastCurrency = availableCurrencyList[len - 1];\n        for (uint256 ii = 0; ii < len; ii++) {\n            if (_currency == availableCurrencyList[ii]) {\n                availableCurrencyList[ii] = lastCurrency;\n                availableCurrencyList.pop();\n                destroyCurrencyAllowance(_currency, exchangeAgent);\n                return;\n            }\n        }\n    }\n\n    function maxApproveCurrency(address _currency, address _to) public onlyOwner nonReentrant {\n        if (IERC20(_currency).allowance(address(this), _to) < MAX_INTEGER) {\n            TransferHelper.safeApprove(_currency, _to, MAX_INTEGER);\n        }\n    }\n\n    function destroyCurrencyAllowance(address _currency, address _to) public onlyOwner nonReentrant {\n        if (IERC20(_currency).allowance(address(this), _to) > 0) {\n            TransferHelper.safeApprove(_currency, _to, 0);\n        }\n    }\n}\n"
    },
    "contracts/ExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IUniswapFactory.sol\";\nimport \"./interfaces/IUniswapRouter02.sol\";\nimport \"./interfaces/ITwapOraclePriceFeedFactory.sol\";\nimport \"./interfaces/ITwapOraclePriceFeed.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract ExchangeAgent is IExchangeAgent, ReentrancyGuard {\n    address public immutable override USDC_TOKEN;\n    address public immutable UNISWAP_FACTORY;\n    address public immutable TWAP_ORACLE_PRICE_FEED_FACTORY;\n    address public immutable UNISWAP_ROUTER;\n    address public immutable WETH;\n    uint256 public slippage;\n    uint256 private constant SLIPPAGE_PRECISION = 100;\n\n    mapping(address => bool) public whiteList;\n    address public owner;\n\n    event ConvertedTokenToToken(\n        address indexed _dexAddress,\n        address indexed _convertToken,\n        address indexed _convertedToken,\n        uint256 _convertAmount,\n        uint256 _desiredAmount,\n        uint256 _convertedAmount\n    );\n\n    event ConvertedTokenToETH(\n        address indexed _dexAddress,\n        address indexed _convertToken,\n        uint256 _convertAmount,\n        uint256 _desiredAmount,\n        uint256 _convertedAmount\n    );\n\n    constructor(\n        address _usdtToken,\n        address _WETH,\n        address _twapOraclePriceFeedFactory,\n        address _uniswapRouter,\n        address _uniswapFactory\n    ) {\n        USDC_TOKEN = _usdtToken;\n        UNISWAP_FACTORY = _uniswapFactory;\n        TWAP_ORACLE_PRICE_FEED_FACTORY = _twapOraclePriceFeedFactory;\n        UNISWAP_ROUTER = _uniswapRouter;\n        WETH = _WETH;\n        owner = msg.sender;\n        whiteList[msg.sender] = true;\n        slippage = 5 * SLIPPAGE_PRECISION;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"UnoRe: ExchangeAgent Forbidden\");\n        _;\n    }\n\n    modifier onlyWhiteList() {\n        require(whiteList[msg.sender], \"UnoRe: ExchangeAgent Forbidden\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function addWhiteList(address _whiteListAddress) external onlyOwner {\n        require(_whiteListAddress != address(0), \"UnoRe: zero address\");\n        require(!whiteList[_whiteListAddress], \"UnoRe: white list already\");\n        whiteList[_whiteListAddress] = true;\n    }\n\n    function setSlippage(uint256 _slippage) external onlyOwner {\n        require(_slippage > 0, \"UnoRe: zero slippage\");\n        slippage = _slippage * SLIPPAGE_PRECISION;\n    }\n\n    // estimate token amount for amount in USDC\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view override returns (uint256) {\n        return _getNeededTokenAmount(USDC_TOKEN, _token, _usdtAmount);\n    }\n\n    // estimate ETH amount for amount in USDC\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view override returns (uint256) {\n        return _getNeededTokenAmount(USDC_TOKEN, WETH, _usdtAmount);\n    }\n\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view override returns (uint256) {\n        return _getNeededTokenAmount(_token, WETH, _tokenAmount);\n    }\n\n    function getNeededTokenAmount(\n        address _token0,\n        address _token1,\n        uint256 _token0Amount\n    ) external view override returns (uint256) {\n        return _getNeededTokenAmount(_token0, _token1, _token0Amount);\n    }\n\n    function convertForToken(\n        address _token0,\n        address _token1,\n        uint256 _token0Amount\n    ) external override onlyWhiteList nonReentrant returns (uint256) {\n        uint256 twapPrice = 0;\n        if (_token0 != address(0)) {\n            require(IERC20(_token0).balanceOf(msg.sender) > 0, \"UnoRe: zero balance\");\n            TransferHelper.safeTransferFrom(_token0, msg.sender, address(this), _token0Amount);\n            twapPrice = _getNeededTokenAmount(_token0, _token1, _token0Amount);\n        } else {\n            twapPrice = _getNeededTokenAmount(WETH, _token1, _token0Amount);\n        }\n        require(twapPrice > 0, \"UnoRe: no pairs\");\n        uint256 desiredAmount = (twapPrice * (100 * SLIPPAGE_PRECISION - slippage)) / 100 / SLIPPAGE_PRECISION;\n\n        uint256 convertedAmount = _convertTokenForToken(UNISWAP_ROUTER, _token0, _token1, _token0Amount, desiredAmount);\n        return convertedAmount;\n    }\n\n    function convertForETH(address _token, uint256 _convertAmount)\n        external\n        override\n        onlyWhiteList\n        nonReentrant\n        returns (uint256)\n    {\n        require(IERC20(_token).balanceOf(msg.sender) > 0, \"UnoRe: zero balance\");\n        if (_token != address(0)) {\n            TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _convertAmount);\n        }\n        uint256 twapPriceInUSDC = _getNeededTokenAmount(_token, WETH, _convertAmount);\n        require(twapPriceInUSDC > 0, \"UnoRe: no pairs\");\n        uint256 desiredAmount = (twapPriceInUSDC * (100 * SLIPPAGE_PRECISION - slippage)) / 100 / SLIPPAGE_PRECISION;\n\n        uint256 convertedAmount = _convertTokenForETH(UNISWAP_ROUTER, _token, _convertAmount, desiredAmount);\n        return convertedAmount;\n    }\n\n    function _convertTokenForToken(\n        address _dexAddress,\n        address _token0,\n        address _token1,\n        uint256 _convertAmount,\n        uint256 _desiredAmount\n    ) private returns (uint256) {\n        IUniswapRouter02 _dexRouter = IUniswapRouter02(_dexAddress);\n        address _factory = _dexRouter.factory();\n        uint256 usdtBalanceBeforeSwap = IERC20(_token1).balanceOf(msg.sender);\n        address inpToken = _dexRouter.WETH();\n        if (_token0 != address(0)) {\n            inpToken = _token0;\n            TransferHelper.safeApprove(_token0, address(_dexRouter), _convertAmount);\n        }\n        if (IUniswapFactory(_factory).getPair(inpToken, _token1) != address(0)) {\n            address[] memory path = new address[](2);\n            path[0] = inpToken;\n            path[1] = _token1;\n            if (_token0 == address(0)) {\n                _dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _convertAmount}(\n                    _desiredAmount,\n                    path,\n                    msg.sender,\n                    block.timestamp\n                );\n            } else {\n                _dexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                    _convertAmount,\n                    _desiredAmount,\n                    path,\n                    msg.sender,\n                    block.timestamp\n                );\n            }\n        }\n        uint256 usdtBalanceAfterSwap = IERC20(_token1).balanceOf(msg.sender);\n        emit ConvertedTokenToToken(\n            _dexAddress,\n            _token0,\n            _token1,\n            _convertAmount,\n            _desiredAmount,\n            usdtBalanceAfterSwap - usdtBalanceBeforeSwap\n        );\n        return usdtBalanceAfterSwap - usdtBalanceBeforeSwap;\n    }\n\n    function _convertTokenForETH(\n        address _dexAddress,\n        address _token,\n        uint256 _convertAmount,\n        uint256 _desiredAmount\n    ) private returns (uint256) {\n        IUniswapRouter02 _dexRouter = IUniswapRouter02(_dexAddress);\n        address _factory = _dexRouter.factory();\n        uint256 ethBalanceBeforeSwap = address(msg.sender).balance;\n        TransferHelper.safeApprove(_token, address(_dexRouter), _convertAmount);\n        if (IUniswapFactory(_factory).getPair(_token, WETH) != address(0)) {\n            address[] memory path = new address[](2);\n            path[0] = _token;\n            path[1] = WETH;\n            _dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                _convertAmount,\n                _desiredAmount,\n                path,\n                msg.sender,\n                block.timestamp\n            );\n        }\n        uint256 ethBalanceAfterSwap = address(msg.sender).balance;\n        emit ConvertedTokenToETH(_dexAddress, _token, _convertAmount, _desiredAmount, ethBalanceAfterSwap - ethBalanceBeforeSwap);\n        return ethBalanceAfterSwap - ethBalanceBeforeSwap;\n    }\n\n    /**\n     * @dev Get expected _token1 amount for _inputAmount of _token0\n     * _desiredAmount should consider decimals based on _token1\n     */\n    function _getNeededTokenAmount(\n        address _token0,\n        address _token1,\n        uint256 _token0Amount\n    ) private view returns (uint256) {\n        address pair = IUniswapFactory(UNISWAP_FACTORY).getPair(_token0, _token1);\n        require(pair != address(0), \"There's no pair\");\n\n        address twapOraclePriceFeed = ITwapOraclePriceFeedFactory(TWAP_ORACLE_PRICE_FEED_FACTORY).getTwapOraclePriceFeed(\n            _token0,\n            _token1\n        );\n\n        uint256 expectedToken1Amount = ITwapOraclePriceFeed(twapOraclePriceFeed).consult(_token0, _token0Amount);\n\n        return expectedToken1Amount;\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface IUniswapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IUniswapRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"./IUniswapRouter01.sol\";\n\ninterface IUniswapRouter02 is IUniswapRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/ITwapOraclePriceFeedFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ITwapOraclePriceFeedFactory {\n    function twapOraclePriceFeedList(address _pair) external view returns (address);\n\n    function getTwapOraclePriceFeed(address _token0, address _token1) external view returns (address twapOraclePriceFeed);\n}\n"
    },
    "contracts/interfaces/ITwapOraclePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ITwapOraclePriceFeed {\n    function update() external;\n\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/IUniswapRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\ninterface IUniswapRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/Mocks/MockUSDT.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * This smart contract\n */\n\ncontract MockUSDT is Ownable, ERC20 {\n    uint256 INITIAL_SUPPLY = 10000000000 * 10**18;\n\n    mapping(address => uint256) private _faucets;\n    uint256 public constant faucetLimit = 500000 * 10**18;\n\n    constructor() ERC20(\"USDC\", \"USDC\") {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function faucetToken(uint256 _amount) external {\n        require(msg.sender == owner() || _faucets[msg.sender] + _amount <= faucetLimit, \"Uno: Faucet amount limitation\");\n        _mint(msg.sender, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Mocks/MockUNO.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * This smart contract\n */\n\ncontract MockUNO is Ownable, ERC20 {\n    uint256 INITIAL_SUPPLY = 10000000000 * 10**18;\n\n    mapping(address => uint256) private _faucets;\n    uint256 public constant faucetLimit = 500000000 * 10**18;\n\n    constructor() ERC20(\"UNORE\", \"UNO\") {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function faucetToken(uint256 _amount) external {\n        require(msg.sender == owner() || _faucets[msg.sender] + _amount <= faucetLimit, \"Uno: Faucet amount limitation\");\n        _mint(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/Mocks/AirdropMockUNO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../libraries/TransferHelper.sol\";\n\ncontract AirdropMockUNO is Ownable {\n    receive() external payable {}\n\n    function airdrop(\n        address[] memory _receivers,\n        uint256[] memory _amounts,\n        address _token,\n        address _from\n    ) external onlyOwner {\n        require(_receivers.length == _amounts.length, \"Length should be equal\");\n        uint256 len = _receivers.length;\n        for (uint256 ii = 0; ii < len; ii++) {\n            TransferHelper.safeTransferFrom(_token, _from, _receivers[ii], _amounts[ii]);\n        }\n    }\n}\n"
    },
    "contracts/SyntheticSSRP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/ISyntheticSSRP.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SyntheticSSRP is ISyntheticSSRP, ReentrancyGuard {\n    address public owner;\n    address public migrateTo;\n\n    uint256 public LOCK_TIME = 1 days;\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\n\n    address public rewarder;\n    address public lpToken;\n\n    uint256 lastRewardBlock;\n    uint256 accRewardPerShare;\n    uint256 public rewardPerBlock;\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n        uint256 pendingWithdrawAmount;\n    }\n\n    mapping(address => UserInfo) public userInfo;\n\n    uint256 public totalStakedLPAmount;\n    uint256 public totalWithdrawPending;\n\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accRewardPerShare);\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\n    event LogCreateRewarder(address indexed _SSRP, address indexed _rewarder, address _currency);\n\n    constructor(address _owner, address _lpToken) {\n        owner = _owner;\n        lpToken = _lpToken;\n        rewardPerBlock = 1e18;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"UnoRe: Forbidden\");\n        _;\n    }\n\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\n        require(_rewardPerBlock > 0, \"UnoRe: zero value\");\n        rewardPerBlock = _rewardPerBlock;\n    }\n\n    function setMigrateTo(address _migrateTo) external onlyOwner {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n    }\n\n    function setLockTime(uint256 _lockTime) external onlyOwner {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        LOCK_TIME = _lockTime;\n    }\n\n    function createRewarder(\n        address _operator,\n        address _factory,\n        address _currency\n    ) external onlyOwner nonReentrant {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    function migrate() external nonReentrant {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        if (\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME\n        ) {\n            _leaveFromPending();\n        } else {\n            _cancelWithdrawRequest();\n        }\n        uint256 amount = userInfo[msg.sender].amount;\n        TransferHelper.safeTransfer(lpToken, migrateTo, amount);\n        IMigration(migrateTo).onMigration(msg.sender, amount, \"\");\n        userInfo[msg.sender].amount = 0;\n    }\n\n    function pendingReward(address _to) external view returns (uint256 pending) {\n        uint256 currentAccRewardPerShare = accRewardPerShare;\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\n            uint256 blocks = block.number - lastRewardBlock;\n            uint256 rewardAmount = blocks * rewardPerBlock;\n            currentAccRewardPerShare = accRewardPerShare + (rewardAmount * ACC_REWARD_PRECISION) / totalStakedLPAmount;\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * currentAccRewardPerShare) / ACC_REWARD_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    function updatePool() public override {\n        if (block.number > lastRewardBlock) {\n            if (totalStakedLPAmount > 0) {\n                uint256 blocks = block.number - lastRewardBlock;\n                uint256 rewardAmount = blocks * rewardPerBlock;\n                accRewardPerShare = accRewardPerShare + ((rewardAmount * ACC_REWARD_PRECISION) / totalStakedLPAmount);\n            }\n            lastRewardBlock = block.number;\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accRewardPerShare);\n        }\n    }\n\n    function enterInPool(uint256 _amount) external override nonReentrant {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\n        userInfo[msg.sender].rewardDebt = userInfo[msg.sender].rewardDebt + (_amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + _amount;\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\n        emit LogStakedInPool(msg.sender, address(this), _amount);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\n        // Withdraw desired amount from pool\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        require(amount - pendingWR >= _amount, \"UnoRe: withdraw amount overflow\");\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n\n        totalWithdrawPending = totalWithdrawPending + _amount;\n\n        emit LogLeftPool(msg.sender, address(this), _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending() external override nonReentrant {\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        _leaveFromPending();\n    }\n\n    function _leaveFromPending() private {\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\n\n        userInfo[msg.sender].rewardDebt = accumulatedReward - ((pendingWR * accRewardPerShare) / ACC_REWARD_PRECISION);\n        userInfo[msg.sender].amount = amount - pendingWR;\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\n    }\n\n    function harvest(address _to) external override nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n        uint256 _pendingReward = accumulatedReward - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[msg.sender].rewardDebt = accumulatedReward;\n\n        uint256 realRewardAmount = 0;\n        if (rewarder != address(0) && _pendingReward > 0) {\n            realRewardAmount = IRewarder(rewarder).onReward(_to, _pendingReward);\n        }\n\n        emit LogHarvest(msg.sender, _to, realRewardAmount);\n    }\n\n    function cancelWithdrawRequest() external nonReentrant {\n        _cancelWithdrawRequest();\n    }\n\n    function _cancelWithdrawRequest() private {\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\n    }\n}\n"
    },
    "contracts/interfaces/ISyntheticSSRP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ISyntheticSSRP {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending() external;\n\n    function harvest(address _to) external;\n}\n"
    },
    "contracts/SyntheticSSIP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/ISyntheticSSIP.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SyntheticSSIP is ISyntheticSSIP, ReentrancyGuard {\n    address public owner;\n    address public migrateTo;\n\n    uint256 public LOCK_TIME = 1 days;\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\n\n    address public rewarder;\n    address public lpToken;\n\n    uint256 lastRewardBlock;\n    uint256 accRewardPerShare;\n    uint256 public rewardPerBlock;\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n        uint256 pendingWithdrawAmount;\n    }\n\n    mapping(address => UserInfo) public userInfo;\n\n    uint256 public totalStakedLPAmount;\n    uint256 public totalWithdrawPending;\n\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accRewardPerShare);\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\n\n    constructor(address _owner, address _lpToken) {\n        owner = _owner;\n        lpToken = _lpToken;\n        rewardPerBlock = 1e18;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"UnoRe: Forbidden\");\n        _;\n    }\n\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\n        require(_rewardPerBlock > 0, \"UnoRe: zero value\");\n        rewardPerBlock = _rewardPerBlock;\n    }\n\n    function setMigrateTo(address _migrateTo) external onlyOwner {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n    }\n\n    function setLockTime(uint256 _lockTime) external onlyOwner {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        LOCK_TIME = _lockTime;\n    }\n\n    function createRewarder(\n        address _operator,\n        address _factory,\n        address _currency\n    ) external onlyOwner nonReentrant {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    function migrate() external nonReentrant {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        if (\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME\n        ) {\n            _leaveFromPending();\n        } else {\n            _cancelWithdrawRequest();\n        }\n        uint256 amount = userInfo[msg.sender].amount;\n        TransferHelper.safeTransfer(lpToken, migrateTo, amount);\n        IMigration(migrateTo).onMigration(msg.sender, amount, \"\");\n        userInfo[msg.sender].amount = 0;\n    }\n\n    function pendingReward(address _to) external view returns (uint256 pending) {\n        uint256 currentAccRewardPerShare = accRewardPerShare;\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\n            uint256 blocks = block.number - lastRewardBlock;\n            uint256 rewards = blocks * rewardPerBlock;\n            currentAccRewardPerShare = accRewardPerShare + (rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount;\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * currentAccRewardPerShare) / ACC_REWARD_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    function updatePool() public override {\n        if (block.number > lastRewardBlock) {\n            if (totalStakedLPAmount > 0) {\n                uint256 blocks = block.number - lastRewardBlock;\n                uint256 rewards = blocks * rewardPerBlock;\n                accRewardPerShare = accRewardPerShare + ((rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount);\n            }\n            lastRewardBlock = block.number;\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accRewardPerShare);\n        }\n    }\n\n    function enterInPool(uint256 _amount) external override nonReentrant {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\n        userInfo[msg.sender].rewardDebt = userInfo[msg.sender].rewardDebt + (_amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + _amount;\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\n        emit LogStakedInPool(msg.sender, address(this), _amount);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\n        // Withdraw desired amount from pool\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        require(amount - pendingWR >= _amount, \"UnoRe: withdraw amount overflow\");\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n\n        totalWithdrawPending = totalWithdrawPending + _amount;\n\n        emit LogLeftPool(msg.sender, address(this), _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending() external override nonReentrant {\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= LOCK_TIME, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        _leaveFromPending();\n    }\n\n    function _leaveFromPending() private {\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\n\n        userInfo[msg.sender].rewardDebt = accumulatedReward - ((pendingWR * accRewardPerShare) / ACC_REWARD_PRECISION);\n        userInfo[msg.sender].amount = amount - pendingWR;\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\n    }\n\n    function harvest(address _to) external override nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n        uint256 _pendingReward = accumulatedReward - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[msg.sender].rewardDebt = accumulatedReward;\n\n        uint256 realRewardAmount = 0;\n        if (rewarder != address(0) && _pendingReward > 0) {\n            realRewardAmount = IRewarder(rewarder).onReward(_to, _pendingReward);\n        }\n\n        emit LogHarvest(msg.sender, _to, realRewardAmount);\n    }\n\n    function cancelWithdrawRequest() external nonReentrant {\n        _cancelWithdrawRequest();\n    }\n\n    function _cancelWithdrawRequest() private {\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\n    }\n}\n"
    },
    "contracts/interfaces/ISyntheticSSIP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ISyntheticSSIP {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending() external;\n\n    function harvest(address _to) external;\n}\n"
    },
    "contracts/factories/RewarderFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"../Rewarder.sol\";\nimport \"../interfaces/IRewarderFactory.sol\";\n\ncontract RewarderFactory is IRewarderFactory {\n    constructor() {}\n\n    function newRewarder(\n        address _operator,\n        address _currency,\n        address _pool\n    ) external override returns (address) {\n        Rewarder _rewarder = new Rewarder(_operator, _currency, _pool);\n        address _rewarderAddr = address(_rewarder);\n\n        return _rewarderAddr;\n    }\n}\n"
    },
    "contracts/Rewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract Rewarder is IRewarder, ReentrancyGuard {\n    address public immutable override currency;\n    address public immutable pool;\n    address public operator;\n\n    event LogRewarderWithdraw(address indexed _rewarder, address _currency, address indexed _to, uint256 _amount);\n    event LogTransferOwnerShip(address indexed _rewarder, address indexed _oldOperator, address indexed _newOperator);\n\n    constructor(\n        address _operator,\n        address _currency,\n        address _pool\n    ) {\n        currency = _currency;\n        pool = _pool;\n        operator = _operator;\n    }\n\n    receive() external payable {}\n\n    function onReward(address _to, uint256 _amount) external payable override onlyPOOL returns (uint256) {\n        require(_to != address(0), \"UnoRe: zero address reward\");\n        if (currency == address(0)) {\n            if (address(this).balance >= _amount) {\n                TransferHelper.safeTransferETH(_to, _amount);\n                return _amount;\n            } else {\n                if (address(this).balance > 0) {\n                    TransferHelper.safeTransferETH(_to, address(this).balance);\n                    return address(this).balance;\n                } else {\n                    return 0;\n                }\n            }\n        } else {\n            if (IERC20(currency).balanceOf(address(this)) >= _amount) {\n                TransferHelper.safeTransfer(currency, _to, _amount);\n                return _amount;\n            } else {\n                if (IERC20(currency).balanceOf(address(this)) > 0) {\n                    TransferHelper.safeTransfer(currency, _to, IERC20(currency).balanceOf(address(this)));\n                    return IERC20(currency).balanceOf(address(this));\n                } else {\n                    return 0;\n                }\n            }\n        }\n    }\n\n    function withdraw(address _to, uint256 _amount) external onlyOperator nonReentrant {\n        require(_to != address(0), \"UnoRe: zero address reward\");\n        if (currency == address(0)) {\n            if (address(this).balance >= _amount) {\n                TransferHelper.safeTransferETH(_to, _amount);\n                emit LogRewarderWithdraw(address(this), currency, _to, _amount);\n            } else {\n                if (address(this).balance > 0) {\n                    TransferHelper.safeTransferETH(_to, address(this).balance);\n                    emit LogRewarderWithdraw(address(this), currency, _to, address(this).balance);\n                }\n            }\n        } else {\n            if (IERC20(currency).balanceOf(address(this)) >= _amount) {\n                TransferHelper.safeTransfer(currency, _to, _amount);\n                emit LogRewarderWithdraw(address(this), currency, _to, _amount);\n            } else {\n                if (IERC20(currency).balanceOf(address(this)) > 0) {\n                    TransferHelper.safeTransfer(currency, _to, IERC20(currency).balanceOf(address(this)));\n                    emit LogRewarderWithdraw(address(this), currency, _to, IERC20(currency).balanceOf(address(this)));\n                }\n            }\n        }\n    }\n\n    function transferOwnership(address _to) external onlyOperator nonReentrant {\n        require(_to != address(0), \"UnoRe: zero address reward\");\n        address oldOperator = operator;\n        operator = _to;\n        emit LogTransferOwnerShip(address(this), oldOperator, _to);\n    }\n\n    modifier onlyPOOL() {\n        require(msg.sender == pool, \"Only SSRP or SSIP contract can call this function.\");\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(msg.sender == operator, \"Only operator call this function.\");\n        _;\n    }\n}\n"
    },
    "contracts/Mocks/MigrationMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"../interfaces/IMigration.sol\";\n\ncontract MigrationMock is IMigration {\n    constructor() {}\n\n    function onMigration(\n        address who_,\n        uint256 amount_,\n        bytes memory data_\n    ) external virtual override {}\n}\n"
    },
    "contracts/factories/SyntheticSSIPFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"../SyntheticSSIP.sol\";\nimport \"../interfaces/ISyntheticSSIPFactory.sol\";\n\ncontract SyntheticSSIPFactory is ISyntheticSSIPFactory {\n    constructor() {}\n\n    function newSyntheticSSIP(address _owner, address _lpToken) external override returns (address) {\n        SyntheticSSIP _ssip = new SyntheticSSIP(_owner, _lpToken);\n        address _ssipAddr = address(_ssip);\n        return _ssipAddr;\n    }\n}\n"
    },
    "contracts/factories/SyntheticSSRPFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"../SyntheticSSRP.sol\";\nimport \"../interfaces/ISyntheticSSRPFactory.sol\";\n\ncontract SyntheticSSRPFactory is ISyntheticSSRPFactory {\n    constructor() {}\n\n    function newSyntheticSSRP(address _owner, address _lpToken) external override returns (address) {\n        SyntheticSSRP _ssip = new SyntheticSSRP(_owner, _lpToken);\n        address _ssipAddr = address(_ssip);\n        return _ssipAddr;\n    }\n}\n"
    },
    "contracts/factories/RiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"../RiskPool.sol\";\nimport \"../interfaces/IRiskPoolFactory.sol\";\n\ncontract RiskPoolFactory is IRiskPoolFactory {\n    constructor() {}\n\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _cohort,\n        address _currency\n    ) external override returns (address) {\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency);\n        address _riskPoolAddr = address(_riskPool);\n\n        return _riskPoolAddr;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}