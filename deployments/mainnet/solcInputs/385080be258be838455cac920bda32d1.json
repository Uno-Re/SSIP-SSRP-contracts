{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/ExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"./interfaces/IUniswapFactory.sol\";\nimport \"./interfaces/IUniswapRouter02.sol\";\nimport \"./interfaces/IOraclePriceFeed.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract ExchangeAgent is IExchangeAgent, ReentrancyGuard, Ownable2Step, Pausable {\n    address public immutable override usdcToken;\n    address public immutable UNISWAP_FACTORY;\n    address public immutable UNISWAP_ROUTER;\n    address public immutable WETH;\n    address public oraclePriceFeed;\n    uint256 public slippage;\n    uint256 private constant SLIPPAGE_PRECISION = 100;\n    uint256 public swapDeadline;\n\n    mapping(address => bool) public whiteList;\n\n    event ConvertedTokenToToken(\n        address indexed _dexAddress,\n        address indexed _convertToken,\n        address indexed _convertedToken,\n        uint256 _convertAmount,\n        uint256 _desiredAmount,\n        uint256 _convertedAmount\n    );\n\n    event ConvertedTokenToETH(\n        address indexed _dexAddress,\n        address indexed _convertToken,\n        uint256 _convertAmount,\n        uint256 _desiredAmount,\n        uint256 _convertedAmount\n    );\n\n    event LogAddWhiteList(address indexed _exchangeAgent, address indexed _whiteListAddress);\n    event LogRemoveWhiteList(address indexed _exchangeAgent, address indexed _whiteListAddress);\n    event LogSetSlippage(address indexed _exchangeAgent, uint256 _slippage);\n    event LogSetOraclePriceFeed(address indexed _exchangeAgent, address indexed _oraclePriceFeed);\n\n    constructor(\n        address _usdcToken,\n        address _WETH,\n        address _oraclePriceFeed,\n        address _uniswapRouter,\n        address _uniswapFactory,\n        address _multiSigWallet,\n        uint256 _swapDeadline\n    ) Ownable(_multiSigWallet) {\n        require(_usdcToken != address(0), \"UnoRe: zero USDC address\");\n        require(_uniswapRouter != address(0), \"UnoRe: zero uniswapRouter address\");\n        require(_uniswapFactory != address(0), \"UnoRe: zero uniswapFactory address\");\n        require(_WETH != address(0), \"UnoRe: zero WETH address\");\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        usdcToken = _usdcToken;\n        UNISWAP_FACTORY = _uniswapFactory;\n        UNISWAP_ROUTER = _uniswapRouter;\n        WETH = _WETH;\n        oraclePriceFeed = _oraclePriceFeed;\n        whiteList[msg.sender] = true;\n        slippage = 5 * SLIPPAGE_PRECISION;\n        swapDeadline = _swapDeadline;\n    }\n\n    modifier onlyWhiteList() {\n        require(whiteList[msg.sender], \"UnoRe: ExchangeAgent Forbidden\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function killPool() external onlyOwner {\n        _pause();\n    }\n\n    function revivePool() external onlyOwner {\n        _unpause();\n    }\n\n    function setSwapDeadline(uint256 _swapDeadline) external onlyOwner {\n        swapDeadline = _swapDeadline;\n    }\n\n    /**\n     * @dev add address to whiteListed Address, can only be called by owner\n     * @param _whiteListAddress address to white list\n     */\n    function addWhiteList(address _whiteListAddress) external onlyOwner {\n        require(_whiteListAddress != address(0), \"UnoRe: zero address\");\n        require(!whiteList[_whiteListAddress], \"UnoRe: white list already\");\n        whiteList[_whiteListAddress] = true;\n        emit LogAddWhiteList(address(this), _whiteListAddress);\n    }\n\n    /**\n     * @dev remove address from whiteListed Address, can only be called by owner\n     * @param _whiteListAddress address to remove from white list\n     */\n    function removeWhiteList(address _whiteListAddress) external onlyOwner {\n        require(_whiteListAddress != address(0), \"UnoRe: zero address\");\n        require(whiteList[_whiteListAddress], \"UnoRe: white list removed or unadded already\");\n        whiteList[_whiteListAddress] = false;\n        emit LogRemoveWhiteList(address(this), _whiteListAddress);\n    }\n\n    /**\n     * @dev set slippage, can only be called by owner\n     */\n    function setSlippage(uint256 _slippage) external onlyOwner {\n        require(_slippage > 0, \"UnoRe: zero slippage\");\n        require(_slippage < 100, \"UnoRe: 100% slippage overflow\");\n        slippage = _slippage * SLIPPAGE_PRECISION;\n        emit LogSetSlippage(address(this), _slippage);\n    }\n\n    /**\n     * @dev set oracle price feed, can only be called by owner\n     */\n    function setOraclePriceFeed(address _oraclePriceFeed) external onlyOwner {\n        require(_oraclePriceFeed != address(0), \"UnoRe: zero address\");\n        oraclePriceFeed = _oraclePriceFeed;\n        emit LogSetOraclePriceFeed(address(this), oraclePriceFeed);\n    }\n\n    // estimate token amount for amount in USDC\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view override returns (uint256) {\n        return _getNeededTokenAmount(usdcToken, _token, _usdtAmount);\n    }\n\n    // estimate ETH amount for amount in USDC\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view override returns (uint256) {\n        uint256 ethPrice = IOraclePriceFeed(oraclePriceFeed).getAssetEthPrice(usdcToken);\n        uint256 tokenDecimal = IERC20Metadata(usdcToken).decimals();\n        return (_usdtAmount * ethPrice) / (10 ** tokenDecimal);\n    }\n\n    // estimate ETH amount for amount in _token\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) public view override returns (uint256) {\n        uint256 ethPrice = IOraclePriceFeed(oraclePriceFeed).getAssetEthPrice(_token);\n        uint256 tokenDecimal = IERC20Metadata(_token).decimals();\n        return (_tokenAmount * ethPrice) / (10 ** tokenDecimal);\n    }\n\n    // estimate token amount for amount in _token\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) public view override returns (uint256) {\n        uint256 ethPrice = IOraclePriceFeed(oraclePriceFeed).getAssetEthPrice(_token);\n        uint256 tokenDecimal = IERC20Metadata(_token).decimals();\n        return (_ethAmount * (10 ** tokenDecimal)) / ethPrice;\n    }\n\n    /**\n     * @dev Get expected _token1 amount for _inputAmount of _token0\n     * _desiredAmount should consider decimals based on _token1,\n     */\n    function getNeededTokenAmount(\n        address _token0,\n        address _token1,\n        uint256 _token0Amount\n    ) external view override returns (uint256) {\n        return _getNeededTokenAmount(_token0, _token1, _token0Amount);\n    }\n\n    /**\n     * @dev convert expected _token1 amount for _inputAmount of _token0\n     * _desiredAmount should consider decimals based on _token1,\n     * only whitlisted address can call this function\n     */\n    function convertForToken(\n        address _token0,\n        address _token1,\n        uint256 _token0Amount\n    ) external override onlyWhiteList whenNotPaused nonReentrant returns (uint256) {\n        uint256 twapPrice = 0;\n        if (_token0 != address(0)) {\n            require(IERC20(_token0).balanceOf(msg.sender) > 0, \"UnoRe: zero balance\");\n            TransferHelper.safeTransferFrom(_token0, msg.sender, address(this), _token0Amount);\n            twapPrice = _getNeededTokenAmount(_token0, _token1, _token0Amount);\n        } else {\n            twapPrice = getTokenAmountForETH(_token1, _token0Amount);\n        }\n        require(twapPrice > 0, \"UnoRe: no pairs\");\n        uint256 desiredAmount = (twapPrice * (100 * SLIPPAGE_PRECISION - slippage)) / 100 / SLIPPAGE_PRECISION;\n\n        uint256 convertedAmount = _convertTokenForToken(UNISWAP_ROUTER, _token0, _token1, _token0Amount, desiredAmount);\n        return convertedAmount;\n    }\n\n    /**\n     * @dev convert expected eth amount for _inputAmount of _token\n     * only whitlisted address can call this function\n     */\n    function convertForETH(\n        address _token,\n        uint256 _convertAmount\n    ) external override onlyWhiteList whenNotPaused nonReentrant returns (uint256) {\n        require(IERC20(_token).balanceOf(msg.sender) > 0, \"UnoRe: zero balance\");\n        if (_token != address(0)) {\n            TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _convertAmount);\n        }\n        uint256 twapPriceInUSDC = getETHAmountForToken(_token, _convertAmount);\n        require(twapPriceInUSDC > 0, \"UnoRe: no pairs\");\n        uint256 desiredAmount = (twapPriceInUSDC * (100 * SLIPPAGE_PRECISION - slippage)) / 100 / SLIPPAGE_PRECISION;\n\n        uint256 convertedAmount = _convertTokenForETH(UNISWAP_ROUTER, _token, _convertAmount, desiredAmount);\n        return convertedAmount;\n    }\n\n    function _convertTokenForToken(\n        address _dexAddress,\n        address _token0,\n        address _token1,\n        uint256 _convertAmount,\n        uint256 _desiredAmount\n    ) private returns (uint256) {\n        IUniswapRouter02 _dexRouter = IUniswapRouter02(_dexAddress);\n        address _factory = _dexRouter.factory();\n        uint256 usdtBalanceBeforeSwap = IERC20(_token1).balanceOf(msg.sender);\n        address inpToken = _dexRouter.WETH();\n        if (_token0 != address(0)) {\n            inpToken = _token0;\n            TransferHelper.safeApprove(_token0, address(_dexRouter), _convertAmount);\n        }\n        if (IUniswapFactory(_factory).getPair(inpToken, _token1) != address(0)) {\n            address[] memory path = new address[](2);\n            path[0] = inpToken;\n            path[1] = _token1;\n            if (_token0 == address(0)) {\n                _dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _convertAmount}(\n                    _desiredAmount,\n                    path,\n                    msg.sender,\n                    block.timestamp + swapDeadline\n                );\n            } else {\n                _dexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                    _convertAmount,\n                    _desiredAmount,\n                    path,\n                    msg.sender,\n                    block.timestamp\n                );\n            }\n        }\n        uint256 usdtBalanceAfterSwap = IERC20(_token1).balanceOf(msg.sender);\n        emit ConvertedTokenToToken(\n            _dexAddress,\n            _token0,\n            _token1,\n            _convertAmount,\n            _desiredAmount,\n            usdtBalanceAfterSwap - usdtBalanceBeforeSwap\n        );\n        return usdtBalanceAfterSwap - usdtBalanceBeforeSwap;\n    }\n\n    function _convertTokenForETH(\n        address _dexAddress,\n        address _token,\n        uint256 _convertAmount,\n        uint256 _desiredAmount\n    ) private returns (uint256) {\n        IUniswapRouter02 _dexRouter = IUniswapRouter02(_dexAddress);\n        address _factory = _dexRouter.factory();\n        uint256 ethBalanceBeforeSwap = address(msg.sender).balance;\n        SafeERC20.forceApprove(IERC20(_token), address(_dexRouter), _convertAmount);\n        if (IUniswapFactory(_factory).getPair(_token, WETH) != address(0)) {\n            address[] memory path = new address[](2);\n            path[0] = _token;\n            path[1] = WETH;\n            _dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                _convertAmount,\n                _desiredAmount,\n                path,\n                msg.sender,\n                block.timestamp + swapDeadline\n            );\n        }\n        uint256 ethBalanceAfterSwap = address(msg.sender).balance;\n        emit ConvertedTokenToETH(_dexAddress, _token, _convertAmount, _desiredAmount, ethBalanceAfterSwap - ethBalanceBeforeSwap);\n        return ethBalanceAfterSwap - ethBalanceBeforeSwap;\n    }\n\n    /**\n     * @dev Get expected _token1 amount for _inputAmount of _token0\n     * _desiredAmount should consider decimals based on _token1\n     */\n    function _getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) private view returns (uint256) {\n        uint256 expectedToken1Amount = IOraclePriceFeed(oraclePriceFeed).consult(_token0, _token1, _token0Amount);\n\n        return expectedToken1Amount;\n    }\n}\n"
    },
    "contracts/interfaces/EscalationManagerInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity =0.8.23;\n\nimport \"./OptimisticOracleV3CallbackRecipientInterface.sol\";\n\n/**\n * @title Escalation Manager Interface\n * @notice Interface for contracts that manage the escalation policy for assertions.\n */\ninterface EscalationManagerInterface is OptimisticOracleV3CallbackRecipientInterface {\n    // Assertion policy parameters as returned by the escalation manager.\n    struct AssertionPolicy {\n        bool blockAssertion; // If true, the the assertion should be blocked.\n        bool arbitrateViaEscalationManager; // If true, the escalation manager will arbitrate the assertion.\n        bool discardOracle; // If true, the Optimistic Oracle V3 should discard the oracle price.\n        bool validateDisputers; // If true, the escalation manager will validate the disputers.\n    }\n\n    /**\n     * @notice Returns the assertion policy for the given assertion.\n     * @param assertionId the assertion identifier to get the assertion policy for.\n     * @return the assertion policy for the given assertion identifier.\n     */\n    function getAssertionPolicy(bytes32 assertionId) external view returns (AssertionPolicy memory);\n\n    /**\n     * @notice Callback function that is called by Optimistic Oracle V3 when an assertion is disputed. Used to validate\n     * if the dispute should be allowed based on the escalation policy.\n     * @param assertionId the assertionId to validate the dispute for.\n     * @param disputeCaller the caller of the dispute function.\n     * @return bool true if the dispute is allowed, false otherwise.\n     */\n    function isDisputeAllowed(bytes32 assertionId, address disputeCaller) external view returns (bool);\n\n    /**\n     * @notice Implements price getting logic. This method is called by Optimistic Oracle V3 settling an assertion that\n     * is configured to use the escalation manager as the oracle. The interface is constructed to mimic the UMA DVM.\n     * @param identifier price identifier being requested.\n     * @param time timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return price from the escalation manager to inform the resolution of the dispute.\n     */\n    function getPrice(bytes32 identifier, uint256 time, bytes memory ancillaryData) external returns (int256);\n\n    /**\n     * @notice Implements price requesting logic for the escalation manager. This function is called by the Optimistic\n     * Oracle V3 on dispute and is constructed to mimic that of the UMA DVM interface.\n     * @param identifier the identifier to fetch the price for.\n     * @param time the time to fetch the price for.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function requestPrice(bytes32 identifier, uint256 time, bytes memory ancillaryData) external;\n}\n"
    },
    "contracts/interfaces/IAggregatorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}"
    },
    "contracts/interfaces/ICapitalAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface ICapitalAgent {\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\n\n    function setPolicy(address _policy) external;\n\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\n\n    function SSIPStaking(uint256 _stakingAmount) external;\n\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isMigrate) external;\n\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\n\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\n\n    function policySale(uint256 _coverageAmount) external;\n\n    function updatePolicyStatus(uint256 _policyId) external;\n\n    function getPolicyInfo() external returns(address, uint256, bool);\n\n    function claimedAmount(address _policy, uint256 _policyId) external returns(uint256);\n\n    function exchangeAgent() external view returns(address);\n\n    function getPoolInfo(address _pool) external view returns(uint256, uint256, address, bool);\n}\n"
    },
    "contracts/interfaces/IExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface IExchangeAgent {\n    function usdcToken() external view returns (address);\n\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\n\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\n\n    function getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) external view returns (uint256);\n\n    function convertForToken(address _token0, address _token1, uint256 _token0Amount) external returns (uint256);\n\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IMigration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface IMigration {\n    function onMigration(address who_, uint256 amount_, bytes memory data_) external;\n}\n"
    },
    "contracts/interfaces/IOraclePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IOraclePriceFeed {\n    function getEthUsdPrice() external view returns (uint256);\n\n    function getAssetEthPrice(address _asset) external view returns (uint256);\n\n    function consult(address tokenA, address tokenB, uint256 amountIn) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\ninterface IRewarder {\n    function currency() external view returns (address);\n\n    function onReward(address to, uint256 unoAmount, uint256 accumulatedAmount) external payable returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRewarderFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRewarderFactory {\n    function newRewarder(address _operator, address _currency, address _pool) external returns (address);\n}\n"
    },
    "contracts/interfaces/IRiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRiskPool {\n    function enter(address _from, uint256 _amount) external;\n\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\n\n    function leaveFromPending(address _to, uint256 _amount) external returns (uint256, uint256);\n\n    function cancelWithdrawRequest(address _to) external returns (uint256, uint256);\n\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\n\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external returns (uint256);\n\n    function setMinLPCapital(uint256 _minLPCapital) external;\n\n    function currency() external view returns (address);\n\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\n\n    function getWithdrawRequest(address _to) external view returns (uint256, uint256, uint256);\n\n    function lpPriceUno() external view returns (uint256);\n\n    function emergencyWithdraw(address _to, uint256 _amount) external returns (bool);\n\n    function setLpPriceUno(uint256 _lpPriceUno) external;\n}\n"
    },
    "contracts/interfaces/IRiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRiskPoolFactory {\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _pool,\n        address _currency\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/ISingleSidedInsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISingleSidedInsurancePool {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external payable;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending(uint256 _amount) external;\n\n    function harvest(address _to) external;\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\n\n    function riskPool() external view returns (address);\n\n    function settlePayout(uint256 _policyId, address _payout, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IUniswapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IUniswapRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface IUniswapRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);\n\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IUniswapRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\nimport \"./IUniswapRouter01.sol\";\n\ninterface IUniswapRouter02 is IUniswapRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/OptimisticOracleV3CallbackRecipientInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity =0.8.23;\n\n/**\n * @title Optimistic Oracle V3 Callback Recipient Interface\n * @notice Interface for contracts implementing callbacks to be received from the Optimistic Oracle V3.\n */\ninterface OptimisticOracleV3CallbackRecipientInterface {\n    /**\n     * @notice Callback function that is called by Optimistic Oracle V3 when an assertion is resolved.\n     * @param assertionId The identifier of the assertion that was resolved.\n     * @param assertedTruthfully Whether the assertion was resolved as truthful or not.\n     */\n    function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully) external;\n\n    /**\n     * @notice Callback function that is called by Optimistic Oracle V3 when an assertion is disputed.\n     * @param assertionId The identifier of the assertion that was disputed.\n     */\n    function assertionDisputedCallback(bytes32 assertionId) external;\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity =0.8.23;\n\n// from Uniswap TransferHelper library\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeApprove: approve failed\");\n    }\n\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeTransfer: transfer failed\");\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::transferFrom: transferFrom failed\");\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/Mocks/OraclePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {AggregatorV3Interface} from \"../interfaces/IAggregatorV3.sol\";\n\ninterface IERC20Metadata {\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\ncontract PriceOracle is Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private _stableCoins;\n    /**\n     * @dev please take care token decimal\n     * e.x ethPrice[uno_address] = 123456 means 1 UNO = 123456 / (10 ** 18 eth)\n     */\n    mapping(address => uint256) ethPrices;\n    address private ethUSDAggregator = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\n\n    event AssetPriceUpdated(address _asset, uint256 _price, uint256 timestamp);\n    event SetETHUSDAggregator(address _oldAggregator, address _newAggregator);\n\n    constructor(address _admin) Ownable(_admin) {\n\n    }\n\n    function stableCoins() external view returns (address[] memory) {\n        return _stableCoins.values();\n    }\n\n    function addStableCoin(address _token) external onlyOwner {\n        _stableCoins.add(_token);\n    }\n\n    function removeStableCoin(address _token) external onlyOwner {\n        _stableCoins.remove(_token);\n    }\n\n    function getEthUsdPrice() external view returns (uint256) {\n        return _fetchEthUsdPrice();\n    }\n\n    function _fetchEthUsdPrice() private view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(ethUSDAggregator);\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price) / 1e8;\n    }\n\n    function getAssetEthPrice(address _asset) external view returns (uint256) {\n        return _stableCoins.contains(_asset) ? (10 ** 18) / _fetchEthUsdPrice() : ethPrices[_asset];\n    }\n\n    function setAssetEthPrice(address _asset, uint256 _price) external onlyOwner {\n        ethPrices[_asset] = _price;\n        emit AssetPriceUpdated(_asset, _price, block.timestamp);\n    }\n\n    function setETHUSDAggregator(address _aggregator) external onlyOwner {\n        address oldAggregator = ethUSDAggregator;\n        ethUSDAggregator = _aggregator;\n        emit SetETHUSDAggregator(oldAggregator, _aggregator);\n    }\n\n    /**\n     * returns the tokenB amount for tokenA\n     */\n    function consult(\n        address tokenA,\n        address tokenB,\n        uint256 amountA\n    ) external view returns (uint256) {\n        if (_stableCoins.contains(tokenA) && _stableCoins.contains(tokenB)) {\n            return amountA;\n        }\n\n        uint256 ethPriceA = _stableCoins.contains(tokenA) ? 1e18 / _fetchEthUsdPrice() : ethPrices[tokenA];\n\n        uint256 ethPriceB = _stableCoins.contains(tokenB) ? 1e18 / _fetchEthUsdPrice() : ethPrices[tokenB];\n\n        require(ethPriceA != 0 && ethPriceB != 0, \"PO: Prices of both tokens should be set\");\n\n        return\n            (amountA * ethPriceA * (10**IERC20Metadata(tokenB).decimals())) /\n            (10**IERC20Metadata(tokenA).decimals() * ethPriceB);\n    }\n}\n"
    },
    "contracts/SingleSidedInsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\nimport \"./interfaces/ICapitalAgent.sol\";\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/IRiskPoolFactory.sol\";\nimport \"./interfaces/ISingleSidedInsurancePool.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SingleSidedInsurancePool is\n    ISingleSidedInsurancePool,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable\n{\n    bytes32 public constant CLAIM_PROCESSOR_ROLE = keccak256(\"CLAIM_PROCESSOR_ROLE\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant BOT_ROLE = keccak256(\"BOT_ROLE\");\n\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\n\n    address public migrateTo;\n    address public capitalAgent;\n\n    bool public killed;\n    bool public emergencyWithdrawAllowed;\n    address public rewarder;\n\n    address public override riskPool;\n\n    uint256 public lockTime;\n    uint256 public stakingStartTime;\n\n    struct PoolInfo {\n        uint256 lastRewardBlock;\n        uint256 accUnoPerShare;\n        uint256 unoMultiplierPerBlock;\n    }\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n        bool isNotRollOver;\n    }\n\n    struct Policy {\n        uint256 insuranceAmount;\n        address payoutAddress;\n        bool settled;\n    }\n\n    mapping(bytes32 => mapping(address => uint256)) public roleLockTime;\n\n    mapping(uint256 => Policy) public policies;\n\n    mapping(address => UserInfo) public userInfo;\n\n    PoolInfo public poolInfo;\n\n    event RiskPoolCreated(address indexed _SSIP, address indexed _pool);\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogLeaveFromPendingSSIP(\n        address indexed _user,\n        address indexed _riskPool,\n        uint256 _withdrawLpAmount,\n        uint256 _withdrawUnoAmount\n    );\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\n    event LogLpTransferInSSIP(address indexed _from, address indexed _to, uint256 _amount);\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _cancelAmount, uint256 _cancelAmountInUno);\n    event LogMigrate(address indexed _user, address indexed _migrateTo, uint256 _migratedAmount);\n    event LogSetCapitalAgent(address indexed _SSIP, address indexed _capitalAgent);\n    event LogSetRewardMultiplier(address indexed _SSIP, uint256 _rewardPerBlock);\n    event LogSetRole(address indexed _SSIP, bytes32 _role, address indexed _account);\n    event LogSetMigrateTo(address indexed _SSIP, address indexed _migrateTo);\n    event LogSetMinLPCapital(address indexed _SSIP, uint256 _minLPCapital);\n    event LogSetLockTime(address indexed _SSIP, uint256 _lockTime);\n    event LogSetStakingStartTime(address indexed _SSIP, uint256 _startTime);\n    event PoolAlived(address indexed _owner, bool _alive);\n    event PoolFailed(address indexed _owner, bool _fail);\n    event KillPool(address indexed _owner, bool _killed);\n    event InsurancePayoutSettled(uint256 indexed policyId, address indexed payout, uint256 amount);\n    event RollOverReward(address[] indexed _staker, address indexed _pool, uint256 _amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event EmergencyWithdrawToggled(address indexed user, bool EmergencyWithdraw);\n    event LogUserUpdated(address indexed pool, address indexed user, uint256 amount);\n\n    function initialize(address _capitalAgent, address _multiSigWallet) external initializer {\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        capitalAgent = _capitalAgent;\n        lockTime = 10 days;\n        __ReentrancyGuard_init();\n        __Pausable_init();\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(CLAIM_PROCESSOR_ROLE, ADMIN_ROLE); // TODO\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\n    }\n\n    modifier isStartTime() {\n        require(block.timestamp >= stakingStartTime, \"UnoRe: not available time\");\n        _;\n    }\n\n    modifier roleLockTimePassed(bytes32 _role) {\n        require(block.timestamp >= roleLockTime[_role][msg.sender], \"UnoRe: roll lock time not passed\");\n        _;\n    }\n\n    modifier isAlive() {\n        require(!killed, \"UnoRe: pool is killed\");\n        _;\n    }\n\n    /**\n     * @dev pause pool to restrict pool functionality, can only by called by admin role\n     */\n    function pausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @dev unpause pool, can only by called by admin role\n     */\n    function unpausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * @dev kill pool to restrict pool functionality, can only by called by admin role\n     */\n    function killPool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = true;\n        emit KillPool(msg.sender, true);\n    }\n\n    /**\n     * @dev revive pool, can only by called by admin role\n     */\n    function revivePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = false;\n        emit PoolAlived(msg.sender, false);\n    }\n\n    function setRole(\n        bytes32 _role,\n        address _account\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) whenNotPaused isAlive {\n        require(_account != address(0), \"UnoRe: zero address\");\n        roleLockTime[_role][_account] = block.timestamp + lockTime;\n        _grantRole(_role, _account);\n        emit LogSetRole(address(this), _role, _account);\n    }\n\n    /**\n     * @dev set new capital agent, can only by called by admin role\n     * @param _capitalAgent new capital agent address\n     */\n    function setCapitalAgent(address _capitalAgent) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_capitalAgent != address(0), \"UnoRe: zero address\");\n        capitalAgent = _capitalAgent;\n        emit LogSetCapitalAgent(address(this), _capitalAgent);\n    }\n\n    /**\n     * @dev update reward muiltiplier, can only by called by admin role\n     * @param _rewardMultiplier value to set\n     */\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_rewardMultiplier > 0, \"UnoRe: zero value\");\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        emit LogSetRewardMultiplier(address(this), _rewardMultiplier);\n    }\n\n    /**\n     * @dev set migrate address, can only by called by admin role\n     * @param _migrateTo new migrate address\n     */\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n        emit LogSetMigrateTo(address(this), _migrateTo);\n    }\n\n    /**\n     * @dev update min lp capital, only admin role call this function\n     */\n    function setMinLPCapital(uint256 _minLPCapital) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\n        emit LogSetMinLPCapital(address(this), _minLPCapital);\n    }\n\n    /**\n     * @dev lock time, only admin role call this function\n     */\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        lockTime = _lockTime;\n        emit LogSetLockTime(address(this), _lockTime);\n    }\n\n    /**\n     * @dev set staking start time, only admin role call this function\n     */\n    function setStakingStartTime(uint256 _startTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        stakingStartTime = _startTime + block.timestamp;\n        emit LogSetStakingStartTime(address(this), stakingStartTime);\n    }\n\n    /**\n     * @dev toggle emergency withdraw bool to restrict or use this emergency withdraw,\n     * only admin role call this function\n     */\n    function toggleEmergencyWithdraw() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        emergencyWithdrawAllowed = !emergencyWithdrawAllowed;\n        emit EmergencyWithdrawToggled(address(this), emergencyWithdrawAllowed);\n    }\n\n    /**\n     * @dev create Risk pool with UNO from SSIP owner\n     */\n    function createRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _factory,\n        address _currency,\n        uint256 _rewardMultiplier,\n        uint256 _SCR\n    ) external nonReentrant onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\n        poolInfo.lastRewardBlock = block.number;\n        poolInfo.accUnoPerShare = 0;\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        ICapitalAgent(capitalAgent).addPool(address(this), _currency, _SCR);\n        emit RiskPoolCreated(address(this), riskPool);\n    }\n\n    /**\n     * @dev create rewarder with UNO token\n     */\n    function createRewarder(\n        address _operator,\n        address _factory,\n        address _currency\n    ) external nonReentrant onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    /**\n     * @dev migrate user to new version\n     */\n    function migrate() external nonReentrant whenNotPaused isAlive {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > lockTime;\n        uint256 migratedAmount = IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim(migratedAmount, 0, false);\n        IMigration(migrateTo).onMigration(msg.sender, migratedAmount, \"\");\n        userInfo[msg.sender].amount = 0;\n        userInfo[msg.sender].rewardDebt = 0;\n        emit LogMigrate(msg.sender, migrateTo, migratedAmount);\n    }\n\n    /**\n     * @dev return pending uno to claim of `_to` address\n     */\n    function pendingUno(address _to) external view returns (uint256 pending) {\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\n        uint256 accUnoPerShare = poolInfo.accUnoPerShare;\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n            accUnoPerShare = accUnoPerShare + (unoReward * ACC_UNO_PRECISION) / tokenSupply;\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    /**\n     * @dev update pool last reward and accumulated uno per share,\n     * update every time when use enter, withdraw from pool\n     */\n    function updatePool() public override {\n        if (block.number > poolInfo.lastRewardBlock) {\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\n            if (tokenSupply > 0) {\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + ((unoReward * ACC_UNO_PRECISION) / tokenSupply);\n            }\n            poolInfo.lastRewardBlock = block.number;\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\n        }\n    }\n\n    /**\n     * @dev stake user collateral, update user reward per block\n     * @param _amount amount to deposit to pool\n     */\n    function enterInPool(uint256 _amount) external payable override whenNotPaused isAlive isStartTime nonReentrant {\n        _depositIn(_amount);\n        _enterInPool(_amount, msg.sender);\n        emit StakedInPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override whenNotPaused isStartTime nonReentrant {\n        _harvest(msg.sender);\n        require(ICapitalAgent(capitalAgent).checkCapitalByMCR(address(this), _amount), \"UnoRe: minimum capital underflow\");\n        // Withdraw desired amount from pool\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\n        require(amount - pendingAmount >= (_amount * 1e18) / lpPriceUno, \"UnoRe: withdraw amount overflow\");\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\n\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n        emit LeftPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending(uint256 _amount) external override isStartTime whenNotPaused nonReentrant {\n        require(_amount > 0, \"Withdraw amount should be greator than zero\");\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender, _amount);\n\n        ICapitalAgent(capitalAgent).SSIPWithdraw(withdrawAmountInUNO);\n\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        userInfo[msg.sender].rewardDebt =\n            accumulatedUno -\n            ((withdrawAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n\n        userInfo[msg.sender].amount = amount - withdrawAmount;\n\n        emit LogLeaveFromPendingSSIP(msg.sender, riskPool, withdrawAmount, withdrawAmountInUNO);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public nonReentrant whenNotPaused {\n        require(emergencyWithdrawAllowed, \"Unore: emergencyWithdraw is not allowed\");\n        UserInfo memory user = userInfo[msg.sender];\n        uint256 amount = user.amount;\n        require(amount > 0, \"Unore: Zero user amount\");\n        delete userInfo[msg.sender];\n        IRiskPool(riskPool).emergencyWithdraw(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, amount);\n    }\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external override nonReentrant whenNotPaused isAlive {\n        require(msg.sender == address(riskPool), \"UnoRe: not allow others transfer\");\n        _harvest(_from);\n        uint256 amount = userInfo[_from].amount;\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\n        require(amount - pendingAmount >= _amount, \"UnoRe: balance overflow\");\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n        userInfo[_from].amount = amount - _amount;\n\n        userInfo[_to].rewardDebt = userInfo[_to].rewardDebt + ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n        userInfo[_to].amount = userInfo[_to].amount + _amount;\n\n        emit LogLpTransferInSSIP(_from, _to, _amount);\n    }\n\n    /**\n     * @dev withdraw user pending uno\n     * @param _to user address\n     */\n    function harvest(address _to) external override whenNotPaused isAlive isStartTime nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n\n        (uint256 _pendingUno, uint256 _amount) = _updateReward(_to);\n\n        if (rewarder != address(0) && _pendingUno != 0) {\n            IRewarder(rewarder).onReward(_to, _pendingUno, _amount);\n        }\n\n        emit Harvest(msg.sender, _to, _pendingUno);\n    }\n\n    /**\n     * @dev user can toggle its roll over bool\n     */\n    function toggleRollOver() external {\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\n    }\n\n    /**\n     * @dev user roll over its pending uno to stake\n     */\n    function rollOverReward(address[] memory _to) external isStartTime whenNotPaused isAlive onlyRole(BOT_ROLE) nonReentrant {\n        require(IRiskPool(riskPool).currency() == IRewarder(rewarder).currency(), \"UnoRe: currency not matched\");\n        updatePool();\n        uint256 _totalPendingUno;\n        uint256 _accumulatedAmount;\n        for (uint256 i; i < _to.length; i++) {\n            require(!userInfo[_to[i]].isNotRollOver, \"UnoRe: rollover is not set\");\n\n            (uint256 _pendingUno, uint256 _amount) = _updateReward(_to[i]);\n            _totalPendingUno += _pendingUno;\n            _accumulatedAmount += _amount;\n            _enterInPool(_pendingUno, _to[i]);\n        }\n\n        if (rewarder != address(0) && _totalPendingUno != 0 && _accumulatedAmount > 0) {\n            IRewarder(rewarder).onReward(riskPool, _totalPendingUno, _accumulatedAmount);\n        }\n        emit RollOverReward(_to, riskPool, _totalPendingUno);\n    }\n\n    /**\n     * @dev user can cancel its pending withdraw request\n     */\n    function cancelWithdrawRequest() external nonReentrant whenNotPaused isAlive {\n        (uint256 cancelAmount, uint256 cancelAmountInUno) = IRiskPool(riskPool).cancelWithdrawRequest(msg.sender);\n        emit LogCancelWithdrawRequest(msg.sender, cancelAmount, cancelAmountInUno);\n    }\n\n    /**\n     * @dev return user staked currency corresponding to current lp price of uno\n     */\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\n        lpAmount = userInfo[_to].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get withdraw request amount in pending per user in UNO\n     */\n    function getWithdrawRequestPerUser(\n        address _user\n    ) external view returns (uint256 pendingAmount, uint256 pendingAmountInUno, uint256 originUnoAmount, uint256 requestTime) {\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\n     */\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\n    }\n\n    /**\n     * @dev claim policy to payout, can only be called by claim processor role\n     */\n    function settlePayout(\n        uint256 _policyId,\n        address _payout,\n        uint256 _amount\n    ) public whenNotPaused isAlive onlyRole(CLAIM_PROCESSOR_ROLE) roleLockTimePassed(CLAIM_PROCESSOR_ROLE) {\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_payout, _amount);\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim(realClaimAmount, uint256(_policyId), true);\n\n        emit InsurancePayoutSettled(_policyId, _payout, _amount);\n    }\n\n    function setUserDetails(\n        address _user,\n        uint256 _amount,\n        uint256 _rewardDebt\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        userInfo[_user].amount = _amount;\n        userInfo[_user].rewardDebt = _rewardDebt;\n        IRiskPool(riskPool).enter(_user, _amount);\n\n        emit LogUserUpdated(address(this), _user, _amount);\n    }\n\n    function setLpPriceInRiskPool(\n        uint256 _lpPriceUno\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n\n        IRiskPool(riskPool).setLpPriceUno(_lpPriceUno);\n    }\n\n    function setAccUnoPerShare(\n        uint256 _accUnoPerShare,\n        uint256 _lastRewardBlock\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        poolInfo.accUnoPerShare = _accUnoPerShare;\n        poolInfo.lastRewardBlock = _lastRewardBlock;\n    }\n\n    function grantRole(\n        bytes32 role,\n        address account\n    ) public override isAlive whenNotPaused onlyRole(getRoleAdmin(role)) roleLockTimePassed(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    function _revokeRole(\n        bytes32 role,\n        address account\n    ) internal override isAlive whenNotPaused roleLockTimePassed(getRoleAdmin(role)) returns (bool) {\n        return super._revokeRole(role, account);\n    }\n\n    function _enterInPool(uint256 _amount, address _to) internal {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        IRiskPool(riskPool).enter(_to, _amount);\n        UserInfo memory _userInfo = userInfo[_to];\n        _userInfo.rewardDebt =\n            _userInfo.rewardDebt +\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\n            ACC_UNO_PRECISION;\n        _userInfo.amount = _userInfo.amount + ((_amount * 1e18) / lpPriceUno);\n        userInfo[_to] = _userInfo;\n        ICapitalAgent(capitalAgent).SSIPStaking(_amount);\n    }\n\n    function _updateReward(address _to) internal returns (uint256, uint256) {\n        uint256 requestTime;\n        (, requestTime, ) = IRiskPool(riskPool).getWithdrawRequest(_to);\n        if (requestTime > 0) {\n            return (0, 0);\n        }\n\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[_to].rewardDebt = accumulatedUno;\n        return (_pendingUno, amount);\n    }\n\n    function _depositIn(uint256 _amount) internal {\n        address token = IRiskPool(riskPool).currency();\n        if (token == address(0)) {\n            require(msg.value >= _amount, \"UnoRe: insufficient paid\");\n            if (msg.value > _amount) {\n                TransferHelper.safeTransferETH(msg.sender, msg.value - _amount);\n            }\n            TransferHelper.safeTransferETH(riskPool, _amount);\n        } else {\n            TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\n        }\n    }\n}\n"
    },
    "contracts/uma/EscalationManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../interfaces/EscalationManagerInterface.sol\";\n\ncontract EscalationManager is EscalationManagerInterface, AccessControl{\n\n    struct AssertionApproval {\n        bool exist;\n        bool approved;\n        bool settled;\n    }\n\n    bytes32 public constant OPTMISTIC_ORACLE_V3_ROLE = keccak256(\"OPTMISTIC_ORACLE_V3_ROLE\");\n    bytes32 public constant CLAIM_ASSESSOR_ROLE = keccak256(\"CLAIM_ASSESSOR_ROLE\");\n\n    int256 public constant NUMERICAL_VALUE = 1e18;\n\n    bool public arbitrateViaEscalationManager;\n    bool public discardOracle;\n    bool public validateDisputers;\n\n    mapping (address => bool) public checkDisputers;\n    mapping (bytes32 => int256) public oraclePrice;\n    mapping (bytes32 => bool) public isOraclePriceCalled;\n\n    event PriceRequestAdded(bytes32 indexed identifier, uint256 time, bytes ancillaryData);\n    event UpdatedArbitrateViaEscalationManager(address indexed owner, bool arbitrateViaEscalationManager);\n    event UpdatedDiscardOracle(address indexed owner, bool discardOracle);\n    event UpdatedValidateDisputers(address indexed owner, bool validateDisputers);\n    \n\n    /**\n     * @notice Constructs the escalation manager.\n     */\n    constructor(address _optimisticOracleV3, address _governance) {\n        _grantRole(CLAIM_ASSESSOR_ROLE, _governance);\n        _setRoleAdmin(CLAIM_ASSESSOR_ROLE, CLAIM_ASSESSOR_ROLE);\n        _grantRole(OPTMISTIC_ORACLE_V3_ROLE, _optimisticOracleV3);\n        _setRoleAdmin(OPTMISTIC_ORACLE_V3_ROLE, CLAIM_ASSESSOR_ROLE);\n    }\n    \n    function getAssertionPolicy(bytes32) external override view returns (AssertionPolicy memory) {\n        return AssertionPolicy({\n            blockAssertion: false,\n            arbitrateViaEscalationManager: arbitrateViaEscalationManager,\n            discardOracle: discardOracle,\n            validateDisputers: validateDisputers\n        });\n    }\n\n    function isDisputeAllowed(bytes32 assertionId, address disputeCaller) external override view returns (bool) {\n        return checkDisputers[disputeCaller];\n    }\n\n    function setArbitrateViaEscalationManager(bool _arbitrateViaEscalationManager) external onlyRole(CLAIM_ASSESSOR_ROLE) {\n        arbitrateViaEscalationManager = _arbitrateViaEscalationManager;\n\n        emit UpdatedArbitrateViaEscalationManager(msg.sender, _arbitrateViaEscalationManager);\n    }\n\n    function setDiscardOracle(bool _discardOracle) external onlyRole(CLAIM_ASSESSOR_ROLE) {\n        discardOracle = _discardOracle;\n\n        emit UpdatedDiscardOracle(msg.sender, _discardOracle);\n    }\n\n    function setValidateDisputers(bool _validateDisputers) external onlyRole(CLAIM_ASSESSOR_ROLE) {\n        validateDisputers = _validateDisputers;\n\n        emit UpdatedValidateDisputers(msg.sender, _validateDisputers);\n    }\n\n    function toggleDisputer(address _disputer) external onlyRole(CLAIM_ASSESSOR_ROLE) {\n        checkDisputers[_disputer] = !checkDisputers[_disputer];\n    }\n\n    function getPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) external view override returns (int256) {\n        bytes32 data = keccak256(abi.encodePacked(identifier, time, ancillaryData));\n        require(isOraclePriceCalled[data], \"EManager: no price request\");\n        return oraclePrice[data];\n    }\n\n    function setOraclePrice(bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        int256 price\n    ) external onlyRole(CLAIM_ASSESSOR_ROLE) {\n        require(price == 0 || price == NUMERICAL_VALUE, \"EManager: invalid price\");\n        bytes32 data = keccak256(abi.encodePacked(identifier, time, ancillaryData));\n        oraclePrice[data] = price;\n        isOraclePriceCalled[data] = true;\n    }\n\n    function requestPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) external override onlyRole(OPTMISTIC_ORACLE_V3_ROLE) {\n        emit PriceRequestAdded(identifier, time, ancillaryData);\n    }\n\n    function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully) external override onlyRole(OPTMISTIC_ORACLE_V3_ROLE) {}\n\n    function assertionDisputedCallback(bytes32 assertionId) external override onlyRole(OPTMISTIC_ORACLE_V3_ROLE) {}\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}