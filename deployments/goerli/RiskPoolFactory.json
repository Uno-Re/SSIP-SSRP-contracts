{
  "address": "0x18A4B3e08305Eb5F8319CDaB6f1bc8C03057D1d1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_cohort",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "newRiskPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8457214d9ec9f17c4c10638d853145fd529f1728d3b998c64176b64677b9cf60",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0x18A4B3e08305Eb5F8319CDaB6f1bc8C03057D1d1",
    "transactionIndex": 45,
    "gasUsed": "2939491",
    "logsBloom": "0x
    "blockHash": "0x7ea6672b21a68a9d38fb1bf241a6829117a058df79e7901c242877f7e8825e27",
    "transactionHash": "0x8457214d9ec9f17c4c10638d853145fd529f1728d3b998c64176b64677b9cf60",
    "logs": [],
    "blockNumber": 10399720,
    "cumulativeGasUsed": "7500240",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e6be0aec43eeac86bc132ed8aa44059c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cohort\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"newRiskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/RiskPoolFactory.sol\":\"RiskPoolFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/RiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./RiskPoolERC20.sol\\\";\\nimport \\\"./interfaces/ISingleSidedReinsurancePool.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract RiskPool is IRiskPool, RiskPoolERC20 {\\n    // ERC20 attributes\\n    string public name;\\n    string public symbol;\\n\\n    address public SSRP;\\n    address public override currency; // for now we should accept only UNO\\n    uint256 public override lpPriceUno;\\n    uint256 public MIN_LP_CAPITAL = 1e7;\\n\\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _amount, uint256 _amountInUno);\\n    event LogPolicyClaim(address indexed _user, uint256 _amount);\\n    event LogMigrateLP(address indexed _user, address indexed _migrateTo, uint256 _unoAmount);\\n    event LogLeaveFromPending(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\\n\\n    constructor(string memory _name, string memory _symbol, address _SSRP, address _currency) {\\n        require(_SSRP != address(0), \\\"UnoRe: zero pool address\\\");\\n        name = _name;\\n        symbol = _symbol;\\n        SSRP = _SSRP;\\n        currency = _currency;\\n        lpPriceUno = 1e18;\\n        if (_currency == address(0)) {\\n            MIN_LP_CAPITAL = 7 * 1e15;\\n        }\\n    }\\n\\n    modifier onlySSRP() {\\n        require(msg.sender == SSRP, \\\"UnoRe: RiskPool Forbidden\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function decimals() external view virtual override returns (uint8) {\\n        return IERC20Metadata(currency).decimals();\\n    }\\n\\n    /**\\n     * @dev Users can stake only through Cohort\\n     */\\n    function enter(address _from, uint256 _amount) external override onlySSRP {\\n        _mint(_from, (_amount * 1e18) / lpPriceUno);\\n    }\\n\\n    /**\\n     * @param _amount UNO amount to withdraw\\n     */\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external override onlySSRP {\\n        require(totalSupply() > 0, \\\"UnoRe: There's no remaining in the pool\\\");\\n        uint256 requestAmountInLP = (_amount * 1e18) / lpPriceUno;\\n        require(\\n            (requestAmountInLP + uint256(withdrawRequestPerUser[_to].pendingAmount)) <= balanceOf(_to),\\n            \\\"UnoRe: lp balance overflow\\\"\\n        );\\n        _withdrawRequest(_to, requestAmountInLP, _amount);\\n    }\\n\\n    function leaveFromPending(address _to, uint256 _amount) external override onlySSRP returns (uint256, uint256) {\\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        uint256 pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\\n        require(_amount <= pendingAmount, \\\"Amount should less than pending amount\\\");\\n        require(cryptoBalance > 0, \\\"UnoRe: zero uno balance\\\");\\n        require(balanceOf(_to) >= _amount, \\\"UnoRe: lp balance overflow\\\");\\n        uint256 amountInUno = (_amount * lpPriceUno) / 1e18;\\n        if (cryptoBalance - MIN_LP_CAPITAL > amountInUno) {\\n            _withdrawImplement(_to);\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, amountInUno);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, amountInUno);\\n            }\\n            emit LogLeaveFromPending(_to, pendingAmount, amountInUno);\\n            return (pendingAmount, amountInUno);\\n        } else {\\n            _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            emit LogLeaveFromPending(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\\n            return (((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n    }\\n\\n    function cancelWithdrawRequest(address _to) external override onlySSRP returns (uint256, uint256) {\\n        uint256 _pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\\n        require(_pendingAmount > 0, \\\"UnoRe: zero amount\\\");\\n        _cancelWithdrawRequest(_to);\\n        emit LogCancelWithdrawRequest(_to, _pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\\n        return (_pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\\n    }\\n\\n    function policyClaim(address _to, uint256 _amount) external override onlySSRP returns (uint256 realClaimAmount) {\\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        require(totalSupply() > 0, \\\"UnoRe: zero lp balance\\\");\\n        require(cryptoBalance > MIN_LP_CAPITAL, \\\"UnoRe: minimum UNO capital underflow\\\");\\n        if (cryptoBalance - MIN_LP_CAPITAL > _amount) {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, _amount);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, _amount);\\n            }\\n            realClaimAmount = _amount;\\n            emit LogPolicyClaim(_to, _amount);\\n        } else {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n            } else {\\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            realClaimAmount = cryptoBalance - MIN_LP_CAPITAL;\\n            emit LogPolicyClaim(_to, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        lpPriceUno = (cryptoBalance * 1e18) / totalSupply(); // UNO value per lp\\n    }\\n\\n    function emergencyWithdraw(address _to, uint256 _amount) external override onlySSRP returns (bool) {\\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        require(cryptoBalance > 0, \\\"UnoRe: zero uno balance\\\");\\n        _emergencyWithdraw(_to);\\n        if (currency != address(0)) {\\n            TransferHelper.safeTransfer(currency, _to, _amount);\\n        } else {\\n            TransferHelper.safeTransferETH(_to, _amount);\\n        }\\n        return true;\\n    }\\n\\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external override onlySSRP returns (uint256) {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        uint256 migratedAmount;\\n        uint256 cryptoBalance;\\n        if (_isUnLocked && withdrawRequestPerUser[_to].pendingAmount > 0) {\\n            uint256 pendingAmountInUno = (uint256(withdrawRequestPerUser[_to].pendingAmount) * lpPriceUno) / 1e18;\\n            cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n            if (pendingAmountInUno < cryptoBalance - MIN_LP_CAPITAL) {\\n                if (currency != address(0)) {\\n                    TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\\n                } else {\\n                    TransferHelper.safeTransferETH(_to, pendingAmountInUno);\\n                }\\n                _withdrawImplement(_to);\\n            } else {\\n                if (currency != address(0)) {\\n                    TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\\n                } else {\\n                    TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\\n                }\\n                _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\\n            }\\n        } else {\\n            if (withdrawRequestPerUser[_to].pendingAmount > 0) {\\n                _cancelWithdrawRequest(_to);\\n            }\\n        }\\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\\n        uint256 unoBalance = (balanceOf(_to) * lpPriceUno) / 1e18;\\n        if (unoBalance < cryptoBalance - MIN_LP_CAPITAL) {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _migrateTo, unoBalance);\\n            } else {\\n                TransferHelper.safeTransferETH(_migrateTo, unoBalance);\\n            }\\n            migratedAmount += unoBalance;\\n            emit LogMigrateLP(_to, _migrateTo, unoBalance);\\n        } else {\\n            if (currency != address(0)) {\\n                TransferHelper.safeTransfer(currency, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\\n            } else {\\n                TransferHelper.safeTransferETH(_migrateTo, cryptoBalance - MIN_LP_CAPITAL);\\n            }\\n            migratedAmount += cryptoBalance - MIN_LP_CAPITAL;\\n            emit LogMigrateLP(_to, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\\n        }\\n        _burn(_to, balanceOf(_to));\\n        return migratedAmount;\\n    }\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external override onlySSRP {\\n        require(_minLPCapital > 0, \\\"UnoRe: not allow zero value\\\");\\n        MIN_LP_CAPITAL = _minLPCapital;\\n    }\\n\\n    function getWithdrawRequest(address _to) external view override onlySSRP returns (uint256, uint256, uint256) {\\n        return (\\n            uint256(withdrawRequestPerUser[_to].pendingAmount),\\n            uint256(withdrawRequestPerUser[_to].requestTime),\\n            withdrawRequestPerUser[_to].pendingUno\\n        );\\n    }\\n\\n    function getTotalWithdrawRequestAmount() external view override onlySSRP returns (uint256) {\\n        return totalWithdrawPending;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        require(\\n            balanceOf(msg.sender) - uint256(withdrawRequestPerUser[msg.sender].pendingAmount) >= amount,\\n            \\\"ERC20: transfer amount exceeds balance or pending WR\\\"\\n        );\\n        _transfer(msg.sender, recipient, amount);\\n\\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        require(\\n            balanceOf(sender) - uint256(withdrawRequestPerUser[sender].pendingAmount) >= amount,\\n            \\\"ERC20: transfer amount exceeds balance or pending WR\\\"\\n        );\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(sender, recipient, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xbf7d9c081072b4bec019f8a37df3bdb8c761f30c85372378422383580fa5d7e8\",\"license\":\"GPL-3.0\"},\"contracts/RiskPoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/IRiskPoolERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract RiskPoolERC20 is Context, IRiskPoolERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    struct UserWithdrawRequestInfo {\\n        uint256 pendingAmount;\\n        uint256 requestTime;\\n        uint256 pendingUno;\\n    }\\n    mapping(address => UserWithdrawRequestInfo) internal withdrawRequestPerUser;\\n    uint256 internal totalWithdrawPending;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    function _withdrawRequest(address _user, uint256 _amount, uint256 _amountInUno) internal {\\n        require(balanceOf(_user) >= _amount, \\\"UnoRe: balance overflow\\\");\\n        require(_amount <= type(uint128).max, \\\"Amount exceeds max uint128\\\");\\n        if (withdrawRequestPerUser[_user].pendingAmount == 0 && withdrawRequestPerUser[_user].requestTime == 0) {\\n            withdrawRequestPerUser[_user] = UserWithdrawRequestInfo({\\n                pendingAmount: _amount,\\n                requestTime: block.timestamp,\\n                pendingUno: _amountInUno\\n            });\\n        } else {\\n            withdrawRequestPerUser[_user].pendingAmount += _amount;\\n            withdrawRequestPerUser[_user].pendingUno += _amountInUno;\\n            withdrawRequestPerUser[_user].requestTime = block.timestamp;\\n        }\\n        totalWithdrawPending += _amount;\\n    }\\n\\n    function _withdrawImplement(address _user) internal {\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \\\"UnoRe: zero claim amount\\\");\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        _burn(_user, _pendingAmount);\\n        delete withdrawRequestPerUser[_user];\\n    }\\n\\n    function _withdrawImplementIrregular(address _user, uint256 _amount) internal {\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \\\"UnoRe: zero claim amount\\\");\\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) >= _amount, \\\"UnoRe: pending amount overflow\\\");\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        _burn(_user, _amount);\\n        delete withdrawRequestPerUser[_user];\\n    }\\n\\n    function _emergencyWithdraw(address _user) internal {\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        if (_pendingAmount > 0) {\\n            _burn(_user, _pendingAmount);\\n        }\\n        delete withdrawRequestPerUser[_user];\\n    }\\n\\n    function _cancelWithdrawRequest(address _user) internal {\\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\\n        totalWithdrawPending -= _pendingAmount;\\n        delete withdrawRequestPerUser[_user];\\n    }\\n}\\n\",\"keccak256\":\"0x3bd77321249e52dec1f98992d5510353b74b40c3742ad759acf58fb545741f6c\",\"license\":\"MIT\"},\"contracts/factories/RiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\nimport \\\"../RiskPool.sol\\\";\\nimport \\\"../interfaces/IRiskPoolFactory.sol\\\";\\n\\ncontract RiskPoolFactory is IRiskPoolFactory {\\n    constructor() {}\\n\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _cohort,\\n        address _currency\\n    ) external override returns (address) {\\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency);\\n        address _riskPoolAddr = address(_riskPool);\\n\\n        return _riskPoolAddr;\\n    }\\n}\\n\",\"keccak256\":\"0xa02c3c17deac98329260663ee64461b5366980fb310feeccbe262846037a96b6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\\n\\n    function leaveFromPending(address _to, uint256 _amount) external returns (uint256, uint256);\\n\\n    function cancelWithdrawRequest(address _to) external returns (uint256, uint256);\\n\\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\\n\\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external returns (uint256);\\n\\n    function setMinLPCapital(uint256 _minLPCapital) external;\\n\\n    function currency() external view returns (address);\\n\\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\\n\\n    function getWithdrawRequest(address _to) external view returns (uint256, uint256, uint256);\\n\\n    function lpPriceUno() external view returns (uint256);\\n\\n    function emergencyWithdraw(address _to, uint256 _amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf1c85f36ee91b9ad36f4ae0263ae4b6baac27a2b53f4bf2b8cc8ee0e0d2db9dc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IRiskPoolERC20 {\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x082a3e0f294ba2355c287f78f879cd77d1c0a1ffe74429df39dcb29ee0b2eaf9\",\"license\":\"MIT\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _pool,\\n        address _currency\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x1822ada2ed41c99cb910cbfa6ff170a7723016983a873f2f31585ccdd04f6e5a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISingleSidedReinsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending(uint256 _amount) external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd79aef6bfa043e9ab1010f8e4acd758e8d9041a5592d6b2999a8482ed99ea1ca\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613458806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630d98e31f14610030575b600080fd5b61004361003e366004610138565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600080878787878787604051610081906100b9565b61009096959493929190610211565b604051809103906000f0801580156100ac573d6000803e3d6000fd5b5098975050505050505050565b6131b68061026d83390190565b60008083601f8401126100d857600080fd5b50813567ffffffffffffffff8111156100f057600080fd5b60208301915083602082850101111561010857600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461013357600080fd5b919050565b6000806000806000806080878903121561015157600080fd5b863567ffffffffffffffff8082111561016957600080fd5b6101758a838b016100c6565b9098509650602089013591508082111561018e57600080fd5b5061019b89828a016100c6565b90955093506101ae90506040880161010f565b91506101bc6060880161010f565b90509295509295509295565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60808152600061022560808301888a6101c8565b82810360208401526102388187896101c8565b91505073ffffffffffffffffffffffffffffffffffffffff808516604084015280841660608401525097965050505050505056fe608060405262989680600a553480156200001857600080fd5b50604051620031b6380380620031b68339810160408190526200003b91620001ee565b6001600160a01b038216620000965760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604482015260640160405180910390fd5b6005620000a485826200030e565b506006620000b384826200030e565b50600780546001600160a01b038085166001600160a01b031992831617909255600880549284169290911682179055670de0b6b3a7640000600955620000ff576618de76816d8000600a555b50505050620003da565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013157600080fd5b81516001600160401b03808211156200014e576200014e62000109565b604051601f8301601f19908116603f0116810190828211818310171562000179576200017962000109565b81604052838152602092508660208588010111156200019757600080fd5b600091505b83821015620001bb57858201830151818301840152908201906200019c565b6000602085830101528094505050505092915050565b80516001600160a01b0381168114620001e957600080fd5b919050565b600080600080608085870312156200020557600080fd5b84516001600160401b03808211156200021d57600080fd5b6200022b888389016200011f565b955060208701519150808211156200024257600080fd5b5062000251878288016200011f565b9350506200026260408601620001d1565b91506200027260608601620001d1565b905092959194509250565b600181811c908216806200029257607f821691505b602082108103620002b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000309576000816000526020600020601f850160051c81016020861015620002e45750805b601f850160051c820191505b818110156200030557828155600101620002f0565b5050505b505050565b81516001600160401b038111156200032a576200032a62000109565b62000342816200033b84546200027d565b84620002b9565b602080601f8311600181146200037a5760008415620003615750858301515b600019600386901b1c1916600185901b17855562000305565b600085815260208120601f198616915b82811015620003ab578886015182559484019460019091019084016200038a565b5085821015620003ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612dcc80620003ea6000396000f3fe60806040526004361061019a5760003560e01c80636ce40c79116100e1578063a457c2d71161008a578063dd62ed3e11610064578063dd62ed3e146104b2578063e5a6b10f146104f8578063e95aa8d314610518578063f53fb2001461052d57600080fd5b8063a457c2d71461045c578063a9059cbb1461047c578063d7e3655a1461049c57600080fd5b806393b6b86c116100bb57806393b6b86c1461040757806395ccea671461042757806395d89b411461044757600080fd5b80636ce40c791461039157806370a08231146103b15780637e348b7d146103e757600080fd5b80632e4a014211610143578063395093511161011d578063395093511461031a57806347bcdb2a1461033a5780635d2cd2a71461035c57600080fd5b80632e4a0142146102b3578063313ce567146102d35780633613302f146102fa57600080fd5b806318160ddd1161017457806318160ddd1461023957806323b872dd146102585780632ccae8961461027857600080fd5b806306fdde03146101a6578063095ea7b3146101d157806311ca73991461020157600080fd5b366101a157005b600080fd5b3480156101b257600080fd5b506101bb610543565b6040516101c89190612ad9565b60405180910390f35b3480156101dd57600080fd5b506101f16101ec366004612b46565b6105d1565b60405190151581526020016101c8565b34801561020d57600080fd5b50600754610221906001600160a01b031681565b6040516001600160a01b0390911681526020016101c8565b34801561024557600080fd5b506004545b6040519081526020016101c8565b34801561026457600080fd5b506101f1610273366004612b70565b6105e8565b34801561028457600080fd5b50610298610293366004612bac565b6107da565b604080519384526020840192909252908201526060016101c8565b3480156102bf57600080fd5b5061024a6102ce366004612b46565b61086b565b3480156102df57600080fd5b506102e8610c13565b60405160ff90911681526020016101c8565b34801561030657600080fd5b5061024a610315366004612bdf565b610c9f565b34801561032657600080fd5b506101f1610335366004612b46565b6111a0565b34801561034657600080fd5b5061035a610355366004612b46565b6111d7565b005b34801561036857600080fd5b5061037c610377366004612bac565b611373565b604080519283526020830191909152016101c8565b34801561039d57600080fd5b5061037c6103ac366004612b46565b6114d2565b3480156103bd57600080fd5b5061024a6103cc366004612bac565b6001600160a01b031660009081526020819052604090205490565b3480156103f357600080fd5b5061035a610402366004612b46565b6118f2565b34801561041357600080fd5b5061035a610422366004612c26565b61197a565b34801561043357600080fd5b506101f1610442366004612b46565b611a29565b34801561045357600080fd5b506101bb611ba7565b34801561046857600080fd5b506101f1610477366004612b46565b611bb4565b34801561048857600080fd5b506101f1610497366004612b46565b611c5d565b3480156104a857600080fd5b5061024a600a5481565b3480156104be57600080fd5b5061024a6104cd366004612c3f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561050457600080fd5b50600854610221906001600160a01b031681565b34801561052457600080fd5b5061024a611d8f565b34801561053957600080fd5b5061024a60095481565b6005805461055090612c72565b80601f016020809104026020016040519081016040528092919081815260200182805461057c90612c72565b80156105c95780601f1061059e576101008083540402835291602001916105c9565b820191906000526020600020905b8154815290600101906020018083116105ac57829003601f168201915b505050505081565b60006105de338484611df3565b5060015b92915050565b6001600160a01b03831660009081526002602090815260408083205491839052822054839161061691612cc2565b101561068f5760405162461bcd60e51b815260206004820152603460248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365206f722070656e64696e6720575200000000000000000000000060648201526084015b60405180910390fd5b61069a848484611f4b565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156107345760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e63650000000000000000000000000000000000000000000000006064820152608401610686565b61074885336107438685612cc2565b611df3565b6007546040517f0e9ae4200000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301526044820186905290911690630e9ae42090606401600060405180830381600087803b1580156107b757600080fd5b505af11580156107cb573d6000803e3d6000fd5b50600198975050505050505050565b600754600090819081906001600160a01b0316331461083b5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b5050506001600160a01b031660009081526002602081905260409091208054600182015491909201549192909190565b6007546000906001600160a01b031633146108c85760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6008546000906001600160a01b03166108e1574761094d565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094d9190612cd5565b9050600061095a60045490565b116109a75760405162461bcd60e51b815260206004820152601660248201527f556e6f52653a207a65726f206c702062616c616e6365000000000000000000006044820152606401610686565b600a548111610a1d5760405162461bcd60e51b8152602060048201526024808201527f556e6f52653a206d696e696d756d20554e4f206361706974616c20756e64657260448201527f666c6f77000000000000000000000000000000000000000000000000000000006064820152608401610686565b82600a5482610a2c9190612cc2565b1115610ab4576008546001600160a01b031615610a5f57600854610a5a906001600160a01b0316858561216c565b610a69565b610a6984846122db565b829150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def36284604051610aa791815260200190565b60405180910390a2610b60565b6008546001600160a01b031615610aef57600854600a54610aea916001600160a01b0316908690610ae59085612cc2565b61216c565b610b06565b610b0684600a5483610b019190612cc2565b6122db565b600a54610b139082612cc2565b9150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def362600a5483610b4e9190612cc2565b60405190815260200160405180910390a25b6008546001600160a01b0316610b765747610be2565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be29190612cd5565b9050610bed60045490565b610bff82670de0b6b3a7640000612cee565b610c099190612d05565b6009555092915050565b600854604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9a9190612d27565b905090565b6007546000906001600160a01b03163314610cfc5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6001600160a01b038316610d525760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610686565b600080838015610d7957506001600160a01b03861660009081526002602052604090205415155b15610f1f576009546001600160a01b0387166000908152600260205260408120549091670de0b6b3a764000091610db09190612cee565b610dba9190612d05565b6008549091506001600160a01b0316610dd35747610e3f565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190612cd5565b9150600a5482610e4f9190612cc2565b811015610e9b576008546001600160a01b031615610e8357600854610e7e906001600160a01b0316888361216c565b610e8d565b610e8d87826122db565b610e96876123be565b610f19565b6008546001600160a01b031615610ed157600854600a54610ecc916001600160a01b0316908990610ae59086612cc2565b610ee3565b610ee387600a5484610b019190612cc2565b610f1987600954600a5485610ef89190612cc2565b610f0a90670de0b6b3a7640000612cee565b610f149190612d05565b612487565b50610f46565b6001600160a01b03861660009081526002602052604090205415610f4657610f46866125b9565b6008546001600160a01b0316610f5c5747610fc8565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc89190612cd5565b90506000670de0b6b3a7640000600954610ff7896001600160a01b031660009081526020819052604090205490565b6110019190612cee565b61100b9190612d05565b9050600a548261101b9190612cc2565b8110156110b7576008546001600160a01b03161561104f5760085461104a906001600160a01b0316878361216c565b611059565b61105986826122db565b6110638184612d4a565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d5419819836040516110aa91815260200190565b60405180910390a361116d565b6008546001600160a01b0316156110ed57600854600a546110e8916001600160a01b0316908890610ae59086612cc2565b6110ff565b6110ff86600a5484610b019190612cc2565b600a5461110c9083612cc2565b6111169084612d4a565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d5419819600a548561115b9190612cc2565b60405190815260200160405180910390a35b61119587611190896001600160a01b031660009081526020819052604090205490565b612612565b509095945050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105de918590610743908690612d4a565b6007546001600160a01b031633146112315760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b600061123c60045490565b116112af5760405162461bcd60e51b815260206004820152602760248201527f556e6f52653a2054686572652773206e6f2072656d61696e696e6720696e207460448201527f686520706f6f6c000000000000000000000000000000000000000000000000006064820152608401610686565b6009546000906112c783670de0b6b3a7640000612cee565b6112d19190612d05565b90506112f2836001600160a01b031660009081526020819052604090205490565b6001600160a01b0384166000908152600260205260409020546113159083612d4a565b11156113635760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a206c702062616c616e6365206f766572666c6f770000000000006044820152606401610686565b61136e8382846127a0565b505050565b60075460009081906001600160a01b031633146113d25760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6001600160a01b038316600090815260026020526040902054806114385760405162461bcd60e51b815260206004820152601260248201527f556e6f52653a207a65726f20616d6f756e7400000000000000000000000000006044820152606401610686565b611441846125b9565b836001600160a01b03167f09c6481cb228ea7f61ceb67c8e708038eb74bbb68cfcc54a9cfca199087ecfb782670de0b6b3a7640000600954856114849190612cee565b61148e9190612d05565b6040805192835260208301919091520160405180910390a280670de0b6b3a7640000600954836114be9190612cee565b6114c89190612d05565b9250925050915091565b60075460009081906001600160a01b031633146115315760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6008546000906001600160a01b031661154a57476115b6565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b69190612cd5565b6001600160a01b038616600090815260026020526040902054909150808511156116485760405162461bcd60e51b815260206004820152602660248201527f416d6f756e742073686f756c64206c657373207468616e2070656e64696e672060448201527f616d6f756e7400000000000000000000000000000000000000000000000000006064820152608401610686565b600082116116985760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a207a65726f20756e6f2062616c616e63650000000000000000006044820152606401610686565b846116b8876001600160a01b031660009081526020819052604090205490565b10156117065760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a206c702062616c616e6365206f766572666c6f770000000000006044820152606401610686565b6000670de0b6b3a76400006009548761171f9190612cee565b6117299190612d05565b905080600a548461173a9190612cc2565b11156117d057611749876123be565b6008546001600160a01b03161561177657600854611771906001600160a01b0316888361216c565b611780565b61178087826122db565b60408051838152602081018390526001600160a01b038916917f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0910160405180910390a290935091506118eb9050565b6117e587600954600a5486610ef89190612cc2565b6008546001600160a01b03161561181b57600854600a54611816916001600160a01b0316908990610ae59087612cc2565b61182d565b61182d87600a5485610b019190612cc2565b866001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0600954600a54866118699190612cc2565b61187b90670de0b6b3a7640000612cee565b6118859190612d05565b600a546118929087612cc2565b6040805192835260208301919091520160405180910390a2600954600a546118ba9085612cc2565b6118cc90670de0b6b3a7640000612cee565b6118d69190612d05565b600a546118e39085612cc2565b945094505050505b9250929050565b6007546001600160a01b0316331461194c5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6119768260095483670de0b6b3a76400006119679190612cee565b6119719190612d05565b612995565b5050565b6007546001600160a01b031633146119d45760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b60008111611a245760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c756500000000006044820152606401610686565b600a55565b6007546000906001600160a01b03163314611a865760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6008546000906001600160a01b0316611a9f5747611b0b565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0b9190612cd5565b905060008111611b5d5760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a207a65726f20756e6f2062616c616e63650000000000000000006044820152606401610686565b611b6684612a74565b6008546001600160a01b031615611b9357600854611b8e906001600160a01b0316858561216c565b611b9d565b611b9d84846122db565b5060019392505050565b6006805461055090612c72565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015611c4e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610686565b611b9d33856107438685612cc2565b33600090815260026020908152604080832054918390528220548391611c8291612cc2565b1015611cf65760405162461bcd60e51b815260206004820152603460248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365206f722070656e64696e672057520000000000000000000000006064820152608401610686565b611d01338484611f4b565b6007546040517f0e9ae4200000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0385811660248301526044820185905290911690630e9ae42090606401600060405180830381600087803b158015611d6e57600080fd5b505af1158015611d82573d6000803e3d6000fd5b5060019695505050505050565b6007546000906001600160a01b03163314611dec5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b5060035490565b6001600160a01b038316611e6e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b038216611eea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611fc75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b0382166120435760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b038316600090815260208190526040902054818110156120d25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610686565b6120dc8282612cc2565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290612112908490612d4a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161215e91815260200190565b60405180910390a350505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916121f69190612d5d565b6000604051808303816000865af19150503d8060008114612233576040519150601f19603f3d011682016040523d82523d6000602084013e612238565b606091505b50915091508180156122625750805115806122625750808060200190518101906122629190612d79565b6122d45760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610686565b5050505050565b604080516000808252602082019092526001600160a01b0384169083906040516123059190612d5d565b60006040518083038185875af1925050503d8060008114612342576040519150601f19603f3d011682016040523d82523d6000602084013e612347565b606091505b505090508061136e5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608401610686565b6001600160a01b0381166000908152600260205260409020546124235760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20636c61696d20616d6f756e7400000000000000006044820152606401610686565b6001600160a01b038116600090815260026020526040812054600380549192839261244f908490612cc2565b9091555061245f90508282612612565b506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b0382166000908152600260205260409020546124ec5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20636c61696d20616d6f756e7400000000000000006044820152606401610686565b6001600160a01b0382166000908152600260205260409020548111156125545760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a2070656e64696e6720616d6f756e74206f766572666c6f7700006044820152606401610686565b6001600160a01b0382166000908152600260205260408120546003805491928392612580908490612cc2565b9091555061259090508383612612565b50506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b03811660009081526002602052604081205460038054919283926125e5908490612cc2565b9091555050506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b03821661268e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b0382166000908152602081905260409020548181101561271d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610686565b6127278282612cc2565b6001600160a01b03841660009081526020819052604081209190915560048054849290612755908490612cc2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b816127c0846001600160a01b031660009081526020819052604090205490565b101561280e5760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a2062616c616e6365206f766572666c6f770000000000000000006044820152606401610686565b6fffffffffffffffffffffffffffffffff82111561286e5760405162461bcd60e51b815260206004820152601a60248201527f416d6f756e742065786365656473206d61782075696e743132380000000000006044820152606401610686565b6001600160a01b0383166000908152600260205260409020541580156128ad57506001600160a01b038316600090815260026020526040902060010154155b156128fc57604080516060810182528381524260208083019182528284018581526001600160a01b03881660009081526002928390529490942092518355905160018301559151910155612979565b6001600160a01b03831660009081526002602052604081208054849290612924908490612d4a565b90915550506001600160a01b03831660009081526002602081905260408220018054839290612954908490612d4a565b90915550506001600160a01b0383166000908152600260205260409020426001909101555b816003600082825461298b9190612d4a565b9091555050505050565b6001600160a01b0382166129eb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610686565b80600460008282546129fd9190612d4a565b90915550506001600160a01b03821660009081526020819052604081208054839290612a2a908490612d4a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0381166000908152600260205260408120546003805491928392612aa0908490612cc2565b9091555050801561245f5761245f8282612612565b60005b83811015612ad0578181015183820152602001612ab8565b50506000910152565b6020815260008251806020840152612af8816040850160208701612ab5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b80356001600160a01b0381168114612b4157600080fd5b919050565b60008060408385031215612b5957600080fd5b612b6283612b2a565b946020939093013593505050565b600080600060608486031215612b8557600080fd5b612b8e84612b2a565b9250612b9c60208501612b2a565b9150604084013590509250925092565b600060208284031215612bbe57600080fd5b612bc782612b2a565b9392505050565b8015158114612bdc57600080fd5b50565b600080600060608486031215612bf457600080fd5b612bfd84612b2a565b9250612c0b60208501612b2a565b91506040840135612c1b81612bce565b809150509250925092565b600060208284031215612c3857600080fd5b5035919050565b60008060408385031215612c5257600080fd5b612c5b83612b2a565b9150612c6960208401612b2a565b90509250929050565b600181811c90821680612c8657607f821691505b602082108103612ca657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105e2576105e2612cac565b600060208284031215612ce757600080fd5b5051919050565b80820281158282048414176105e2576105e2612cac565b600082612d2257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612d3957600080fd5b815160ff81168114612bc757600080fd5b808201808211156105e2576105e2612cac565b60008251612d6f818460208701612ab5565b9190910192915050565b600060208284031215612d8b57600080fd5b8151612bc781612bce56fea26469706673582212201b7e285fb0a84431bd1c0ea30a88e631b00d54bff1c5b28c866c3948b1c806e464736f6c63430008170033a2646970667358221220df1dfec54be402533ae02938fbc8c0d1fd4dd0b7e9f131831b752935e17cc49464736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630d98e31f14610030575b600080fd5b61004361003e366004610138565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600080878787878787604051610081906100b9565b61009096959493929190610211565b604051809103906000f0801580156100ac573d6000803e3d6000fd5b5098975050505050505050565b6131b68061026d83390190565b60008083601f8401126100d857600080fd5b50813567ffffffffffffffff8111156100f057600080fd5b60208301915083602082850101111561010857600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461013357600080fd5b919050565b6000806000806000806080878903121561015157600080fd5b863567ffffffffffffffff8082111561016957600080fd5b6101758a838b016100c6565b9098509650602089013591508082111561018e57600080fd5b5061019b89828a016100c6565b90955093506101ae90506040880161010f565b91506101bc6060880161010f565b90509295509295509295565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60808152600061022560808301888a6101c8565b82810360208401526102388187896101c8565b91505073ffffffffffffffffffffffffffffffffffffffff808516604084015280841660608401525097965050505050505056fe608060405262989680600a553480156200001857600080fd5b50604051620031b6380380620031b68339810160408190526200003b91620001ee565b6001600160a01b038216620000965760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604482015260640160405180910390fd5b6005620000a485826200030e565b506006620000b384826200030e565b50600780546001600160a01b038085166001600160a01b031992831617909255600880549284169290911682179055670de0b6b3a7640000600955620000ff576618de76816d8000600a555b50505050620003da565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013157600080fd5b81516001600160401b03808211156200014e576200014e62000109565b604051601f8301601f19908116603f0116810190828211818310171562000179576200017962000109565b81604052838152602092508660208588010111156200019757600080fd5b600091505b83821015620001bb57858201830151818301840152908201906200019c565b6000602085830101528094505050505092915050565b80516001600160a01b0381168114620001e957600080fd5b919050565b600080600080608085870312156200020557600080fd5b84516001600160401b03808211156200021d57600080fd5b6200022b888389016200011f565b955060208701519150808211156200024257600080fd5b5062000251878288016200011f565b9350506200026260408601620001d1565b91506200027260608601620001d1565b905092959194509250565b600181811c908216806200029257607f821691505b602082108103620002b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000309576000816000526020600020601f850160051c81016020861015620002e45750805b601f850160051c820191505b818110156200030557828155600101620002f0565b5050505b505050565b81516001600160401b038111156200032a576200032a62000109565b62000342816200033b84546200027d565b84620002b9565b602080601f8311600181146200037a5760008415620003615750858301515b600019600386901b1c1916600185901b17855562000305565b600085815260208120601f198616915b82811015620003ab578886015182559484019460019091019084016200038a565b5085821015620003ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612dcc80620003ea6000396000f3fe60806040526004361061019a5760003560e01c80636ce40c79116100e1578063a457c2d71161008a578063dd62ed3e11610064578063dd62ed3e146104b2578063e5a6b10f146104f8578063e95aa8d314610518578063f53fb2001461052d57600080fd5b8063a457c2d71461045c578063a9059cbb1461047c578063d7e3655a1461049c57600080fd5b806393b6b86c116100bb57806393b6b86c1461040757806395ccea671461042757806395d89b411461044757600080fd5b80636ce40c791461039157806370a08231146103b15780637e348b7d146103e757600080fd5b80632e4a014211610143578063395093511161011d578063395093511461031a57806347bcdb2a1461033a5780635d2cd2a71461035c57600080fd5b80632e4a0142146102b3578063313ce567146102d35780633613302f146102fa57600080fd5b806318160ddd1161017457806318160ddd1461023957806323b872dd146102585780632ccae8961461027857600080fd5b806306fdde03146101a6578063095ea7b3146101d157806311ca73991461020157600080fd5b366101a157005b600080fd5b3480156101b257600080fd5b506101bb610543565b6040516101c89190612ad9565b60405180910390f35b3480156101dd57600080fd5b506101f16101ec366004612b46565b6105d1565b60405190151581526020016101c8565b34801561020d57600080fd5b50600754610221906001600160a01b031681565b6040516001600160a01b0390911681526020016101c8565b34801561024557600080fd5b506004545b6040519081526020016101c8565b34801561026457600080fd5b506101f1610273366004612b70565b6105e8565b34801561028457600080fd5b50610298610293366004612bac565b6107da565b604080519384526020840192909252908201526060016101c8565b3480156102bf57600080fd5b5061024a6102ce366004612b46565b61086b565b3480156102df57600080fd5b506102e8610c13565b60405160ff90911681526020016101c8565b34801561030657600080fd5b5061024a610315366004612bdf565b610c9f565b34801561032657600080fd5b506101f1610335366004612b46565b6111a0565b34801561034657600080fd5b5061035a610355366004612b46565b6111d7565b005b34801561036857600080fd5b5061037c610377366004612bac565b611373565b604080519283526020830191909152016101c8565b34801561039d57600080fd5b5061037c6103ac366004612b46565b6114d2565b3480156103bd57600080fd5b5061024a6103cc366004612bac565b6001600160a01b031660009081526020819052604090205490565b3480156103f357600080fd5b5061035a610402366004612b46565b6118f2565b34801561041357600080fd5b5061035a610422366004612c26565b61197a565b34801561043357600080fd5b506101f1610442366004612b46565b611a29565b34801561045357600080fd5b506101bb611ba7565b34801561046857600080fd5b506101f1610477366004612b46565b611bb4565b34801561048857600080fd5b506101f1610497366004612b46565b611c5d565b3480156104a857600080fd5b5061024a600a5481565b3480156104be57600080fd5b5061024a6104cd366004612c3f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561050457600080fd5b50600854610221906001600160a01b031681565b34801561052457600080fd5b5061024a611d8f565b34801561053957600080fd5b5061024a60095481565b6005805461055090612c72565b80601f016020809104026020016040519081016040528092919081815260200182805461057c90612c72565b80156105c95780601f1061059e576101008083540402835291602001916105c9565b820191906000526020600020905b8154815290600101906020018083116105ac57829003601f168201915b505050505081565b60006105de338484611df3565b5060015b92915050565b6001600160a01b03831660009081526002602090815260408083205491839052822054839161061691612cc2565b101561068f5760405162461bcd60e51b815260206004820152603460248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365206f722070656e64696e6720575200000000000000000000000060648201526084015b60405180910390fd5b61069a848484611f4b565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156107345760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e63650000000000000000000000000000000000000000000000006064820152608401610686565b61074885336107438685612cc2565b611df3565b6007546040517f0e9ae4200000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301526044820186905290911690630e9ae42090606401600060405180830381600087803b1580156107b757600080fd5b505af11580156107cb573d6000803e3d6000fd5b50600198975050505050505050565b600754600090819081906001600160a01b0316331461083b5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b5050506001600160a01b031660009081526002602081905260409091208054600182015491909201549192909190565b6007546000906001600160a01b031633146108c85760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6008546000906001600160a01b03166108e1574761094d565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094d9190612cd5565b9050600061095a60045490565b116109a75760405162461bcd60e51b815260206004820152601660248201527f556e6f52653a207a65726f206c702062616c616e6365000000000000000000006044820152606401610686565b600a548111610a1d5760405162461bcd60e51b8152602060048201526024808201527f556e6f52653a206d696e696d756d20554e4f206361706974616c20756e64657260448201527f666c6f77000000000000000000000000000000000000000000000000000000006064820152608401610686565b82600a5482610a2c9190612cc2565b1115610ab4576008546001600160a01b031615610a5f57600854610a5a906001600160a01b0316858561216c565b610a69565b610a6984846122db565b829150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def36284604051610aa791815260200190565b60405180910390a2610b60565b6008546001600160a01b031615610aef57600854600a54610aea916001600160a01b0316908690610ae59085612cc2565b61216c565b610b06565b610b0684600a5483610b019190612cc2565b6122db565b600a54610b139082612cc2565b9150836001600160a01b03167f3eff38a5593bd626ebea5fa8096047f41bed92d9c75cf4a4050216aea6def362600a5483610b4e9190612cc2565b60405190815260200160405180910390a25b6008546001600160a01b0316610b765747610be2565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be29190612cd5565b9050610bed60045490565b610bff82670de0b6b3a7640000612cee565b610c099190612d05565b6009555092915050565b600854604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9a9190612d27565b905090565b6007546000906001600160a01b03163314610cfc5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6001600160a01b038316610d525760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610686565b600080838015610d7957506001600160a01b03861660009081526002602052604090205415155b15610f1f576009546001600160a01b0387166000908152600260205260408120549091670de0b6b3a764000091610db09190612cee565b610dba9190612d05565b6008549091506001600160a01b0316610dd35747610e3f565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190612cd5565b9150600a5482610e4f9190612cc2565b811015610e9b576008546001600160a01b031615610e8357600854610e7e906001600160a01b0316888361216c565b610e8d565b610e8d87826122db565b610e96876123be565b610f19565b6008546001600160a01b031615610ed157600854600a54610ecc916001600160a01b0316908990610ae59086612cc2565b610ee3565b610ee387600a5484610b019190612cc2565b610f1987600954600a5485610ef89190612cc2565b610f0a90670de0b6b3a7640000612cee565b610f149190612d05565b612487565b50610f46565b6001600160a01b03861660009081526002602052604090205415610f4657610f46866125b9565b6008546001600160a01b0316610f5c5747610fc8565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc89190612cd5565b90506000670de0b6b3a7640000600954610ff7896001600160a01b031660009081526020819052604090205490565b6110019190612cee565b61100b9190612d05565b9050600a548261101b9190612cc2565b8110156110b7576008546001600160a01b03161561104f5760085461104a906001600160a01b0316878361216c565b611059565b61105986826122db565b6110638184612d4a565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d5419819836040516110aa91815260200190565b60405180910390a361116d565b6008546001600160a01b0316156110ed57600854600a546110e8916001600160a01b0316908890610ae59086612cc2565b6110ff565b6110ff86600a5484610b019190612cc2565b600a5461110c9083612cc2565b6111169084612d4a565b9250856001600160a01b0316876001600160a01b03167fb644c280a27f46639994a63e4feb334394bfd8ca28bb6b0cda104f57d5419819600a548561115b9190612cc2565b60405190815260200160405180910390a35b61119587611190896001600160a01b031660009081526020819052604090205490565b612612565b509095945050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105de918590610743908690612d4a565b6007546001600160a01b031633146112315760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b600061123c60045490565b116112af5760405162461bcd60e51b815260206004820152602760248201527f556e6f52653a2054686572652773206e6f2072656d61696e696e6720696e207460448201527f686520706f6f6c000000000000000000000000000000000000000000000000006064820152608401610686565b6009546000906112c783670de0b6b3a7640000612cee565b6112d19190612d05565b90506112f2836001600160a01b031660009081526020819052604090205490565b6001600160a01b0384166000908152600260205260409020546113159083612d4a565b11156113635760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a206c702062616c616e6365206f766572666c6f770000000000006044820152606401610686565b61136e8382846127a0565b505050565b60075460009081906001600160a01b031633146113d25760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6001600160a01b038316600090815260026020526040902054806114385760405162461bcd60e51b815260206004820152601260248201527f556e6f52653a207a65726f20616d6f756e7400000000000000000000000000006044820152606401610686565b611441846125b9565b836001600160a01b03167f09c6481cb228ea7f61ceb67c8e708038eb74bbb68cfcc54a9cfca199087ecfb782670de0b6b3a7640000600954856114849190612cee565b61148e9190612d05565b6040805192835260208301919091520160405180910390a280670de0b6b3a7640000600954836114be9190612cee565b6114c89190612d05565b9250925050915091565b60075460009081906001600160a01b031633146115315760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6008546000906001600160a01b031661154a57476115b6565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b69190612cd5565b6001600160a01b038616600090815260026020526040902054909150808511156116485760405162461bcd60e51b815260206004820152602660248201527f416d6f756e742073686f756c64206c657373207468616e2070656e64696e672060448201527f616d6f756e7400000000000000000000000000000000000000000000000000006064820152608401610686565b600082116116985760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a207a65726f20756e6f2062616c616e63650000000000000000006044820152606401610686565b846116b8876001600160a01b031660009081526020819052604090205490565b10156117065760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a206c702062616c616e6365206f766572666c6f770000000000006044820152606401610686565b6000670de0b6b3a76400006009548761171f9190612cee565b6117299190612d05565b905080600a548461173a9190612cc2565b11156117d057611749876123be565b6008546001600160a01b03161561177657600854611771906001600160a01b0316888361216c565b611780565b61178087826122db565b60408051838152602081018390526001600160a01b038916917f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0910160405180910390a290935091506118eb9050565b6117e587600954600a5486610ef89190612cc2565b6008546001600160a01b03161561181b57600854600a54611816916001600160a01b0316908990610ae59087612cc2565b61182d565b61182d87600a5485610b019190612cc2565b866001600160a01b03167f535c1088af46a351970267b3e201e5a9b53e365fec02e4fe54e6eb22496f1ea0600954600a54866118699190612cc2565b61187b90670de0b6b3a7640000612cee565b6118859190612d05565b600a546118929087612cc2565b6040805192835260208301919091520160405180910390a2600954600a546118ba9085612cc2565b6118cc90670de0b6b3a7640000612cee565b6118d69190612d05565b600a546118e39085612cc2565b945094505050505b9250929050565b6007546001600160a01b0316331461194c5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6119768260095483670de0b6b3a76400006119679190612cee565b6119719190612d05565b612995565b5050565b6007546001600160a01b031633146119d45760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b60008111611a245760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f7420616c6c6f77207a65726f2076616c756500000000006044820152606401610686565b600a55565b6007546000906001600160a01b03163314611a865760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b6008546000906001600160a01b0316611a9f5747611b0b565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0b9190612cd5565b905060008111611b5d5760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a207a65726f20756e6f2062616c616e63650000000000000000006044820152606401610686565b611b6684612a74565b6008546001600160a01b031615611b9357600854611b8e906001600160a01b0316858561216c565b611b9d565b611b9d84846122db565b5060019392505050565b6006805461055090612c72565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015611c4e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610686565b611b9d33856107438685612cc2565b33600090815260026020908152604080832054918390528220548391611c8291612cc2565b1015611cf65760405162461bcd60e51b815260206004820152603460248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365206f722070656e64696e672057520000000000000000000000006064820152608401610686565b611d01338484611f4b565b6007546040517f0e9ae4200000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0385811660248301526044820185905290911690630e9ae42090606401600060405180830381600087803b158015611d6e57600080fd5b505af1158015611d82573d6000803e3d6000fd5b5060019695505050505050565b6007546000906001600160a01b03163314611dec5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a205269736b506f6f6c20466f7262696464656e000000000000006044820152606401610686565b5060035490565b6001600160a01b038316611e6e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b038216611eea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611fc75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b0382166120435760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b038316600090815260208190526040902054818110156120d25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610686565b6120dc8282612cc2565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290612112908490612d4a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161215e91815260200190565b60405180910390a350505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916121f69190612d5d565b6000604051808303816000865af19150503d8060008114612233576040519150601f19603f3d011682016040523d82523d6000602084013e612238565b606091505b50915091508180156122625750805115806122625750808060200190518101906122629190612d79565b6122d45760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610686565b5050505050565b604080516000808252602082019092526001600160a01b0384169083906040516123059190612d5d565b60006040518083038185875af1925050503d8060008114612342576040519150601f19603f3d011682016040523d82523d6000602084013e612347565b606091505b505090508061136e5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608401610686565b6001600160a01b0381166000908152600260205260409020546124235760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20636c61696d20616d6f756e7400000000000000006044820152606401610686565b6001600160a01b038116600090815260026020526040812054600380549192839261244f908490612cc2565b9091555061245f90508282612612565b506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b0382166000908152600260205260409020546124ec5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20636c61696d20616d6f756e7400000000000000006044820152606401610686565b6001600160a01b0382166000908152600260205260409020548111156125545760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a2070656e64696e6720616d6f756e74206f766572666c6f7700006044820152606401610686565b6001600160a01b0382166000908152600260205260408120546003805491928392612580908490612cc2565b9091555061259090508383612612565b50506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b03811660009081526002602052604081205460038054919283926125e5908490612cc2565b9091555050506001600160a01b031660009081526002602081905260408220828155600181018390550155565b6001600160a01b03821661268e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610686565b6001600160a01b0382166000908152602081905260409020548181101561271d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610686565b6127278282612cc2565b6001600160a01b03841660009081526020819052604081209190915560048054849290612755908490612cc2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b816127c0846001600160a01b031660009081526020819052604090205490565b101561280e5760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a2062616c616e6365206f766572666c6f770000000000000000006044820152606401610686565b6fffffffffffffffffffffffffffffffff82111561286e5760405162461bcd60e51b815260206004820152601a60248201527f416d6f756e742065786365656473206d61782075696e743132380000000000006044820152606401610686565b6001600160a01b0383166000908152600260205260409020541580156128ad57506001600160a01b038316600090815260026020526040902060010154155b156128fc57604080516060810182528381524260208083019182528284018581526001600160a01b03881660009081526002928390529490942092518355905160018301559151910155612979565b6001600160a01b03831660009081526002602052604081208054849290612924908490612d4a565b90915550506001600160a01b03831660009081526002602081905260408220018054839290612954908490612d4a565b90915550506001600160a01b0383166000908152600260205260409020426001909101555b816003600082825461298b9190612d4a565b9091555050505050565b6001600160a01b0382166129eb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610686565b80600460008282546129fd9190612d4a565b90915550506001600160a01b03821660009081526020819052604081208054839290612a2a908490612d4a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0381166000908152600260205260408120546003805491928392612aa0908490612cc2565b9091555050801561245f5761245f8282612612565b60005b83811015612ad0578181015183820152602001612ab8565b50506000910152565b6020815260008251806020840152612af8816040850160208701612ab5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b80356001600160a01b0381168114612b4157600080fd5b919050565b60008060408385031215612b5957600080fd5b612b6283612b2a565b946020939093013593505050565b600080600060608486031215612b8557600080fd5b612b8e84612b2a565b9250612b9c60208501612b2a565b9150604084013590509250925092565b600060208284031215612bbe57600080fd5b612bc782612b2a565b9392505050565b8015158114612bdc57600080fd5b50565b600080600060608486031215612bf457600080fd5b612bfd84612b2a565b9250612c0b60208501612b2a565b91506040840135612c1b81612bce565b809150509250925092565b600060208284031215612c3857600080fd5b5035919050565b60008060408385031215612c5257600080fd5b612c5b83612b2a565b9150612c6960208401612b2a565b90509250929050565b600181811c90821680612c8657607f821691505b602082108103612ca657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105e2576105e2612cac565b600060208284031215612ce757600080fd5b5051919050565b80820281158282048414176105e2576105e2612cac565b600082612d2257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612d3957600080fd5b815160ff81168114612bc757600080fd5b808201808211156105e2576105e2612cac565b60008251612d6f818460208701612ab5565b9190910192915050565b600060208284031215612d8b57600080fd5b8151612bc781612bce56fea26469706673582212201b7e285fb0a84431bd1c0ea30a88e631b00d54bff1c5b28c866c3948b1c806e464736f6c63430008170033a2646970667358221220df1dfec54be402533ae02938fbc8c0d1fd4dd0b7e9f131831b752935e17cc49464736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}