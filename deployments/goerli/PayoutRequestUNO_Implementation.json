{
  "address": "0x12091D6739454A10c42b6Fea9A52D97B48D9e9F4",
  "abi": [
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assertionId",
          "type": "bytes32"
        }
      ],
      "name": "InsurancePayoutRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payout",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assertionAliveTime",
          "type": "uint256"
        }
      ],
      "name": "LogSetAssertionAliveTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payout",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "capitalAgent",
          "type": "address"
        }
      ],
      "name": "LogSetCapitalAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payout",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimProccessor",
          "type": "address"
        }
      ],
      "name": "LogSetClaimProccessor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payout",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "escalatingManager",
          "type": "address"
        }
      ],
      "name": "LogSetEscalationManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fail",
          "type": "bool"
        }
      ],
      "name": "PoolFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "assertedPolicies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assertionId",
          "type": "bytes32"
        }
      ],
      "name": "assertionDisputedCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_assertionId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_assertedTruthfully",
          "type": "bool"
        }
      ],
      "name": "assertionResolvedCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assertionliveTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalAgent",
      "outputs": [
        {
          "internalType": "contract ICapitalAgent",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimsDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultCurrency",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultIdentifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escalationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "initRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "assertionId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISingleSidedInsurancePool",
          "name": "_ssip",
          "type": "address"
        },
        {
          "internalType": "contract OptimisticOracleV3Interface",
          "name": "_optimisticOracleV3",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_defaultCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_escalationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__guardianCouncil",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_claimsDao",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isRequestInit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUMAFailed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optimisticOracle",
      "outputs": [
        {
          "internalType": "contract OptimisticOracleV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "policies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "insuranceAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "payoutAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "policiesAssertionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assertionliveTime",
          "type": "uint256"
        }
      ],
      "name": "setAliveness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICapitalAgent",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "name": "setCapitalAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escalatingManager",
          "type": "address"
        }
      ],
      "name": "setEscalatingManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_failed",
          "type": "bool"
        }
      ],
      "name": "setFailed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssip",
      "outputs": [
        {
          "internalType": "contract ISingleSidedInsurancePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x78533fabc9ba73e24f862d93df13327b58e5db5a4d148930fcdd6953e17469d5",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0x12091D6739454A10c42b6Fea9A52D97B48D9e9F4",
    "transactionIndex": 77,
    "gasUsed": "1579713",
    "logsBloom": "0x
    "blockHash": "0xe2d47be397d249e541a907e1ab4729d764a1ff99c0aae88882629ab5e17db8c8",
    "transactionHash": "0x78533fabc9ba73e24f862d93df13327b58e5db5a4d148930fcdd6953e17469d5",
    "logs": [],
    "blockNumber": 10399752,
    "cumulativeGasUsed": "12995414",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d2fc875e3afcbd9499ae3f5e7a33f9ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"InsurancePayoutRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assertionAliveTime\",\"type\":\"uint256\"}],\"name\":\"LogSetAssertionAliveTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capitalAgent\",\"type\":\"address\"}],\"name\":\"LogSetCapitalAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimProccessor\",\"type\":\"address\"}],\"name\":\"LogSetClaimProccessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"escalatingManager\",\"type\":\"address\"}],\"name\":\"LogSetEscalationManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fail\",\"type\":\"bool\"}],\"name\":\"PoolFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assertedPolicies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"assertionDisputedCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_assertionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_assertedTruthfully\",\"type\":\"bool\"}],\"name\":\"assertionResolvedCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assertionliveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalAgent\",\"outputs\":[{\"internalType\":\"contract ICapitalAgent\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimsDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escalationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"initRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISingleSidedInsurancePool\",\"name\":\"_ssip\",\"type\":\"address\"},{\"internalType\":\"contract OptimisticOracleV3Interface\",\"name\":\"_optimisticOracleV3\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_defaultCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escalationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__guardianCouncil\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimsDao\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isRequestInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUMAFailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticOracle\",\"outputs\":[{\"internalType\":\"contract OptimisticOracleV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policiesAssertionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assertionliveTime\",\"type\":\"uint256\"}],\"name\":\"setAliveness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICapitalAgent\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"name\":\"setCapitalAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escalatingManager\",\"type\":\"address\"}],\"name\":\"setEscalatingManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_failed\",\"type\":\"bool\"}],\"name\":\"setFailed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssip\",\"outputs\":[{\"internalType\":\"contract ISingleSidedInsurancePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uma/PayoutRequest.sol\":\"PayoutRequest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\\n\\n    function setPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isFinished) external;\\n\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\\n\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(uint256 _policyId) external;\\n\\n    function getPolicyInfo() external returns(address, uint256, bool);\\n}\\n\",\"keccak256\":\"0xc9eeaa12b53a52a3e23ff3bb09a308b0e428345e033bb47b417b903f4183eb4f\",\"license\":\"MIT\"},\"contracts/interfaces/ISalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISalesPolicy {\\n    function setPremiumPool(address _premiumPool) external;\\n\\n    function setExchangeAgent(address _exchangeAgent) external;\\n\\n    function setCapitalAgent(address _capitalAgent) external;\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\\n\\n    function approvePremium(address _premiumCurrency) external;\\n\\n    function setProtocolURI(string memory newURI) external;\\n\\n    function setSigner(address _signer) external;\\n\\n    function updatePolicyExpired(uint256 _policyId) external;\\n\\n    function markToClaim(uint256 _policyId) external;\\n\\n    function allPoliciesLength() external view returns (uint256);\\n\\n    function killPool() external;\\n\\n    function revivePool() external;\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x2866e770aad9425cd7fffd3da31e1225b9c391df41aabff8e84583e6df58f598\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISingleSidedInsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external payable;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending(uint256 _amount) external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\\n\\n    function riskPool() external view returns (address);\\n\\n    function settlePayout(uint256 _policyId, address _payout, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa5bcd329319b9d62543c54bfd87773b27b1e276a884495ea0b8f133b411de6ce\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/OptimisticOracleV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Optimistic Oracle V3 Interface that callers must use to assert truths about the world.\\n */\\ninterface OptimisticOracleV3Interface {\\n    // Struct grouping together the settings related to the escalation manager stored in the assertion.\\n    struct EscalationManagerSettings {\\n        bool arbitrateViaEscalationManager; // False if the DVM is used as an oracle (EscalationManager on True).\\n        bool discardOracle; // False if Oracle result is used for resolving assertion after dispute.\\n        bool validateDisputers; // True if the EM isDisputeAllowed should be checked on disputes.\\n        address assertingCaller; // Stores msg.sender when assertion was made.\\n        address escalationManager; // Address of the escalation manager (zero address if not configured).\\n    }\\n\\n    // Struct for storing properties and lifecycle of an assertion.\\n    struct Assertion {\\n        EscalationManagerSettings escalationManagerSettings; // Settings related to the escalation manager.\\n        address asserter; // Address of the asserter.\\n        uint64 assertionTime; // Time of the assertion.\\n        bool settled; // True if the request is settled.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        uint64 expirationTime; // Unix timestamp marking threshold when the assertion can no longer be disputed.\\n        bool settlementResolution; // Resolution of the assertion (false till resolved).\\n        bytes32 domainId; // Optional domain that can be used to relate the assertion to others in the escalationManager.\\n        bytes32 identifier; // DVM identifier to use for price requests in the event of a dispute.\\n        uint256 bond; // Amount of currency that the asserter has bonded.\\n        address callbackRecipient; // Address that receives the callback.\\n        address disputer; // Address of the disputer.\\n    }\\n\\n    // Struct for storing cached currency whitelist.\\n    struct WhitelistedCurrency {\\n        bool isWhitelisted; // True if the currency is whitelisted.\\n        uint256 finalFee; // Final fee of the currency.\\n    }\\n\\n    /**\\n     * @notice Returns the default identifier used by the Optimistic Oracle V3.\\n     * @return The default identifier.\\n     */\\n    function defaultIdentifier() external view returns (bytes32);\\n\\n    /**\\n     * @notice Fetches information about a specific assertion and returns it.\\n     * @param assertionId unique identifier for the assertion to fetch information for.\\n     * @return assertion information about the assertion.\\n     */\\n    function getAssertion(bytes32 assertionId) external view returns (Assertion memory);\\n\\n    /**\\n     * @notice Asserts a truth about the world, using the default currency and liveness. No callback recipient or\\n     * escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage\\n     * (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\\n     * @dev The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\\n     * any other account that the caller wants to receive the bond at settlement time.\\n     * @return assertionId unique identifier for this assertion.\\n     */\\n    function assertTruthWithDefaults(bytes memory claim, address asserter) external returns (bytes32);\\n\\n    /**\\n     * @notice Asserts a truth about the world, using a fully custom configuration.\\n     * @dev The caller must approve this contract to spend at least bond amount of currency.\\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\\n     * any other account that the caller wants to receive the bond at settlement time.\\n     * @param callbackRecipient if configured, this address will receive a function call assertionResolvedCallback and\\n     * assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The\\n     * recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\\n     * @param escalationManager if configured, this address will control escalation properties of the assertion. This\\n     * means a) choosing to arbitrate via the DVM, b) choosing to discard assertions on dispute, or choosing to\\n     * validate disputes. Combining these, the asserter can define their own security properties for the assertion.\\n     * escalationManager also _must_ implement the same callbacks as callbackRecipient.\\n     * @param liveness time to wait before the assertion can be resolved. Assertion can be disputed in this time.\\n     * @param currency bond currency pulled from the caller and held in escrow until the assertion is resolved.\\n     * @param bond amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This\\n     * must be >= getMinimumBond(address(currency)).\\n     * @param identifier DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\\n     * @param domainId optional domain that can be used to relate this assertion to others in the escalationManager and\\n     * can be used by the configured escalationManager to define custom behavior for groups of assertions. This is\\n     * typically used for \\\"escalation games\\\" by changing bonds or other assertion properties based on the other\\n     * assertions that have come before. If not needed this value should be 0 to save gas.\\n     * @return assertionId unique identifier for this assertion.\\n     */\\n    function assertTruth(\\n        bytes memory claim,\\n        address asserter,\\n        address callbackRecipient,\\n        address escalationManager,\\n        uint64 liveness,\\n        IERC20 currency,\\n        uint256 bond,\\n        bytes32 identifier,\\n        bytes32 domainId\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Fetches information about a specific identifier & currency from the contracts and stores a local copy\\n     * of the information within this contract. This is used to save gas when making assertions as we can avoid an\\n     * external call to the contracts to fetch this.\\n     * @param identifier identifier to fetch information for and store locally.\\n     * @param currency currency to fetch information for and store locally.\\n     */\\n    function synParams(bytes32 identifier, address currency) external;\\n\\n    /**\\n     * @notice Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the\\n     * asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle\\n     * result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an\\n     * amount of the bond is sent to the Store as an oracle fee based on the burnedBondPercentage. The remainder of\\n     * the bond is returned to the asserter or disputer.\\n     * @param assertionId unique identifier for the assertion to resolve.\\n     */\\n    function settleAssertion(bytes32 assertionId) external;\\n\\n    /**\\n     * @notice Settles an assertion and returns the resolution.\\n     * @param assertionId unique identifier for the assertion to resolve and return the resolution for.\\n     * @return resolution of the assertion.\\n     */\\n    function settleAndGetAssertionResult(bytes32 assertionId) external returns (bool);\\n\\n    /**\\n     * @notice Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then\\n     * this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\\n     * @param assertionId unique identifier for the assertion to fetch the resolution for.\\n     * @return resolution of the assertion.\\n     */\\n    function getAssertionResult(bytes32 assertionId) external view returns (bool);\\n\\n    function disputeAssertion(bytes32 assertionId, address disputer) external;\\n\\n    /**\\n     * @notice Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the\\n     * currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\\n     * @param currency currency to calculate the minimum bond for.\\n     * @return minimum bond amount.\\n     */\\n    function getMinimumBond(address currency) external view returns (uint256);\\n\\n    event AssertionMade(\\n        bytes32 indexed assertionId,\\n        bytes32 domainId,\\n        bytes claim,\\n        address indexed asserter,\\n        address callbackRecipient,\\n        address escalationManager,\\n        address caller,\\n        uint64 expirationTime,\\n        IERC20 currency,\\n        uint256 bond,\\n        bytes32 indexed identifier\\n    );\\n\\n    event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer);\\n\\n    event AssertionSettled(\\n        bytes32 indexed assertionId,\\n        address indexed bondRecipient,\\n        bool disputed,\\n        bool settlementResolution,\\n        address settleCaller\\n    );\\n\\n    event AdminPropertiesSet(IERC20 defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage);\\n}\\n\",\"keccak256\":\"0x3c17f7acd367ad833ebf1464e065e1b6939b2db4422d0f13454a38cceadb528b\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/AncillaryData.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity =0.8.23;\\n\\n/**\\n * @title Library for encoding and decoding ancillary data for DVM price requests.\\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\\n * smart contracts. More details on UMA's ancillary data guidelines below:\\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\\n */\\nlibrary AncillaryData {\\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\\n        unchecked {\\n            uint256 x = uint256(bytesIn);\\n\\n            // Nibble interleave\\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\n            x = (x | (x * 2 ** 64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\\n            x = (x | (x * 2 ** 32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\\n            x = (x | (x * 2 ** 16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\\n            x = (x | (x * 2 ** 8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\\n            x = (x | (x * 2 ** 4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\\n\\n            // Hex encode\\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\\n\\n            // Return the result.\\n            return bytes32(x);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\\n     * @param bytesIn bytes32 to encode.\\n     * @return utf8 encoded bytes32.\\n     */\\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\\n    }\\n\\n    /**\\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\\n     * @dev Will return address in all lower case characters and without the leading 0x.\\n     * @param x address to encode.\\n     * @return utf8 encoded address bytes.\\n     */\\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\\n    }\\n\\n    /**\\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\\n     */\\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\\n        if (x == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = x;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (x != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            x /= 10;\\n        }\\n        return bstr;\\n    }\\n\\n    function appendKeyValueBytes32(\\n        bytes memory currentAncillaryData,\\n        bytes memory key,\\n        bytes32 value\\n    ) internal pure returns (bytes memory) {\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\\n    }\\n\\n    /**\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is an address that first needs to be converted\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\\n     * @return Newly appended ancillary data.\\n     */\\n    function appendKeyValueAddress(\\n        bytes memory currentAncillaryData,\\n        bytes memory key,\\n        address value\\n    ) internal pure returns (bytes memory) {\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\\n    }\\n\\n    /**\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\\n     * @return Newly appended ancillary data.\\n     */\\n    function appendKeyValueUint(\\n        bytes memory currentAncillaryData,\\n        bytes memory key,\\n        uint256 value\\n    ) internal pure returns (bytes memory) {\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\\n    }\\n\\n    /**\\n     * @notice Helper method that returns the left hand side of a \\\"key:value\\\" pair plus the colon \\\":\\\" and a leading\\n     * comma \\\",\\\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\\n     */\\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\\n        if (currentAncillaryData.length > 0) {\\n            return abi.encodePacked(\\\",\\\", key, \\\":\\\");\\n        } else {\\n            return abi.encodePacked(key, \\\":\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6985b3ece41aac1a26770e3e9be3a3a525ec652e0e4895ba756b1093c1574e5f\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/uma/ClaimData.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity =0.8.23;\\n\\nimport { AncillaryData as ClaimData } from \\\"../libraries/AncillaryData.sol\\\";\\n\",\"keccak256\":\"0x6e6a37fccd94229ecaadbd6cf6c84884a419ae60b48a250be368f34f209a51f3\",\"license\":\"AGPL-3.0-only\"},\"contracts/uma/PayoutRequest.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ClaimData.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/OptimisticOracleV3Interface.sol\\\";\\nimport \\\"../interfaces/ICapitalAgent.sol\\\";\\nimport \\\"../interfaces/ISalesPolicy.sol\\\";\\nimport \\\"../interfaces/ISingleSidedInsurancePool.sol\\\";\\n\\ncontract PayoutRequest is PausableUpgradeable {\\n    struct Policy {\\n        uint256 insuranceAmount;\\n        address payoutAddress;\\n        bool settled;\\n    }\\n\\n    address private _guardianCouncil;\\n\\n    OptimisticOracleV3Interface public optimisticOracle;\\n    ISingleSidedInsurancePool public ssip;\\n    ICapitalAgent public capitalAgent;\\n    IERC20 public defaultCurrency;\\n    bytes32 public defaultIdentifier;\\n    uint256 public assertionliveTime;\\n    address public escalationManager;\\n    address public claimsDao;\\n    mapping(uint256 => Policy) public policies;\\n    mapping(bytes32 => uint256) public assertedPolicies;\\n    mapping(uint256 => bytes32) public policiesAssertionId;\\n    mapping(uint256 => bool) public isRequestInit;\\n    bool public isUMAFailed;\\n\\n    event InsurancePayoutRequested(uint256 indexed policyId, bytes32 indexed assertionId);\\n    event LogSetEscalationManager(address indexed payout, address indexed escalatingManager);\\n    event LogSetAssertionAliveTime(address indexed payout, uint256 assertionAliveTime);\\n    event LogSetClaimProccessor(address indexed payout, address indexed claimProccessor);\\n    event LogSetCapitalAgent(address indexed payout, address indexed capitalAgent);\\n    event PoolFailed(address indexed owner, bool fail);\\n\\n    function initialize(\\n        ISingleSidedInsurancePool _ssip,\\n        OptimisticOracleV3Interface _optimisticOracleV3,\\n        IERC20 _defaultCurrency,\\n        address _escalationManager,\\n        address __guardianCouncil,\\n        address _claimsDao\\n    ) external initializer {\\n        ssip = _ssip;\\n        optimisticOracle = _optimisticOracleV3;\\n        defaultCurrency = _defaultCurrency;\\n        escalationManager = _escalationManager;\\n        claimsDao = _claimsDao;\\n        _guardianCouncil = __guardianCouncil;\\n        defaultIdentifier = optimisticOracle.defaultIdentifier();\\n        assertionliveTime = 10 days;\\n        isUMAFailed = true;\\n    }\\n\\n    function initRequest(uint256 _policyId, uint256 _amount, address _to) public whenNotPaused returns (bytes32 assertionId) {\\n        (address salesPolicy, , ) = ICapitalAgent(capitalAgent).getPolicyInfo();\\n        (uint256 _coverageAmount, , , bool _exist, bool _expired) = ISalesPolicy(salesPolicy).getPolicyData(_policyId);\\n        require(_amount <= _coverageAmount, \\\"UnoRe: amount exceeds coverage amount\\\");\\n        require(_exist && !_expired, \\\"UnoRe: policy expired or not exist\\\");\\n        Policy memory _policyData = policies[_policyId];\\n        _policyData.insuranceAmount = _amount;\\n        _policyData.payoutAddress = _to;\\n        policies[_policyId] = _policyData;\\n        if (!isUMAFailed) {\\n            require(IERC721(salesPolicy).ownerOf(_policyId) == msg.sender, \\\"UnoRe: not owner of policy id\\\");\\n            uint256 bond = optimisticOracle.getMinimumBond(address(defaultCurrency));\\n            TransferHelper.safeTransferFrom(address(defaultCurrency), msg.sender, address(this), bond);\\n            defaultCurrency.approve(address(optimisticOracle), bond);\\n            assertionId = optimisticOracle.assertTruth(\\n                abi.encodePacked(\\n                    \\\"Insurance contract is claiming that insurance event \\\",\\n                    \\\" had occurred as of \\\",\\n                    ClaimData.toUtf8BytesUint(block.timestamp),\\n                    \\\".\\\"\\n                ),\\n                _to,\\n                address(ssip),\\n                escalationManager,\\n                uint64(assertionliveTime),\\n                defaultCurrency,\\n                bond,\\n                defaultIdentifier,\\n                bytes32(0) // No domain.\\n            );\\n            assertedPolicies[assertionId] = _policyId;\\n            policiesAssertionId[_policyId] = assertionId;\\n            emit InsurancePayoutRequested(_policyId, assertionId);\\n        } else {\\n            require(msg.sender == claimsDao, \\\"RPayout: can only called by claimsDao\\\");\\n            policies[_policyId].settled = true;\\n            ssip.settlePayout(_policyId, _to, _amount);\\n        }\\n        isRequestInit[_policyId] = true;\\n    }\\n\\n    function assertionResolvedCallback(bytes32 _assertionId, bool _assertedTruthfully) external whenNotPaused {\\n        require(!isUMAFailed, \\\"RPayout: pool failed\\\");\\n        require(msg.sender == address(optimisticOracle), \\\"RPayout: !optimistic oracle\\\");\\n        // If the assertion was true, then the policy is settled.\\n        uint256 _policyId = assertedPolicies[_assertionId];\\n        if (_assertedTruthfully) {\\n            // If already settled, do nothing. We don't revert because this function is called by the\\n            // OptimisticOracleV3, which may block the assertion resolution.\\n            Policy storage policy = policies[_policyId];\\n            if (policy.settled) return;\\n            policy.settled = true;\\n            ssip.settlePayout(_policyId, policy.payoutAddress, policy.insuranceAmount);\\n        } else {\\n            isRequestInit[_policyId] = false;\\n        }\\n    }\\n\\n    function assertionDisputedCallback(bytes32 assertionId) external {}\\n\\n    function setEscalatingManager(address _escalatingManager) external {\\n        _requireGuardianCouncil();\\n        escalationManager = _escalatingManager;\\n        emit LogSetEscalationManager(address(this), _escalatingManager);\\n    }\\n\\n    function setFailed(bool _failed) external {\\n        _requireGuardianCouncil();\\n        isUMAFailed = _failed;\\n        emit PoolFailed(msg.sender, _failed);\\n    }\\n\\n    function setAliveness(uint256 _assertionliveTime) external {\\n        _requireGuardianCouncil();\\n        require(_assertionliveTime > 0, \\\"RPayout: zero assertion live time\\\");\\n        assertionliveTime = _assertionliveTime;\\n        emit LogSetAssertionAliveTime(address(this), _assertionliveTime);\\n    }\\n\\n    function setCapitalAgent(ICapitalAgent _capitalAgent) external {\\n        _requireGuardianCouncil();\\n        capitalAgent = _capitalAgent;\\n        emit LogSetCapitalAgent(address(this), address(_capitalAgent));\\n    }\\n\\n    function togglePause() external {\\n        _requireGuardianCouncil();\\n        paused() ? _unpause() : _pause();\\n    }\\n\\n    function _requireGuardianCouncil() internal view {\\n        require(msg.sender == _guardianCouncil, \\\"RPayout: unauthorised\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3d63d72b5c2fee54b42f5b9ca2306dc2c82b1572a7c31a7c6c0d7690dd1d6f1f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611bbb806100206000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c8063c2eb8eb9116100e3578063d509b0171161008c578063f1b156b211610066578063f1b156b2146103a6578063f320b51f146103b9578063f53713d5146103d957600080fd5b8063d509b0171461036a578063dd33acc214610373578063f0bb285b1461039357600080fd5b8063cc2a9a5b116100bd578063cc2a9a5b146102e5578063d3e89483146102f8578063d448a4ec1461035957600080fd5b8063c2eb8eb9146102b7578063c4ae3168146102ca578063c5b02989146102d257600080fd5b8063421981601161014557806371548adc1161011f57806371548adc1461026e5780639203891314610281578063a49ad1231461029457600080fd5b8063421981601461021e5780635c975abb1461023157806363f2bee51461025b57600080fd5b806320402e1d1161017657806320402e1d146101cb57806322302922146101f6578063406cca231461020957600080fd5b8063026dca351461019257806316908fed146101b4575b600080fd5b600d5461019f9060ff1681565b60405190151581526020015b60405180910390f35b6101bd60065481565b6040519081526020016101ab565b6004546101de906001600160a01b031681565b6040516001600160a01b0390911681526020016101ab565b6001546101de906001600160a01b031681565b61021c6102173660046116c6565b6103ec565b005b6003546101de906001600160a01b031681565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff1661019f565b6008546101de906001600160a01b031681565b6101bd61027c3660046116ff565b61043e565b61021c61028f366004611738565b610c2c565b61019f6102a2366004611755565b600c6020526000908152604090205460ff1681565b61021c6102c5366004611738565b610c8d565b61021c610cee565b6007546101de906001600160a01b031681565b61021c6102f336600461176e565b610d31565b610334610306366004611755565b600960205260009081526040902080546001909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b0390921660208401521515908201526060016101ab565b61021c610367366004611755565b50565b6101bd60055481565b6101bd610381366004611755565b600b6020526000908152604090205481565b6002546101de906001600160a01b031681565b61021c6103b43660046117f0565b610f81565b6101bd6103c7366004611755565b600a6020526000908152604090205481565b61021c6103e7366004611755565b61114d565b6103f4611202565b600d805460ff191682151590811790915560405190815233907fe86205fd4b28bc975ade25d5bbd8096df537071d8536eb2fa726496c1e561d22906020015b60405180910390a250565b600061044861125c565b600354604080517f3fecfbf200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691633fecfbf2916004808301926060929190829003018187875af11580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190611820565b505090506000806000836001600160a01b0316637a5402e9896040518263ffffffff1660e01b815260040161050791815260200190565b60a060405180830381865afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190611858565b9450945050509250828711156105cb5760405162461bcd60e51b815260206004820152602560248201527f556e6f52653a20616d6f756e74206578636565647320636f766572616765206160448201527f6d6f756e7400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b8180156105d6575080155b6106485760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a20706f6c6963792065787069726564206f72206e6f742065786960448201527f737400000000000000000000000000000000000000000000000000000000000060648201526084016105c2565b6000600960008a8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900460ff1615151515815250509050878160000181815250508681602001906001600160a01b031690816001600160a01b03168152505080600960008b81526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548160ff021916908315150217905550905050600d60009054906101000a900460ff16610ac1576040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018a905233906001600160a01b03871690636352211e90602401602060405180830381865afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec91906118af565b6001600160a01b0316146108425760405162461bcd60e51b815260206004820152601d60248201527f556e6f52653a206e6f74206f776e6572206f6620706f6c69637920696400000060448201526064016105c2565b600154600480546040517f4360af3d0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216928101929092526000921690634360af3d90602401602060405180830381865afa1580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d091906118cc565b6004549091506108eb906001600160a01b03163330846112b8565b600480546001546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039182169381019390935260248301849052169063095ea7b3906044016020604051808303816000875af115801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f91906118e5565b506001546001600160a01b0316636457c97961099a42611430565b6040516020016109aa9190611926565b6040516020818303038152906040528a600260009054906101000a90046001600160a01b0316600760009054906101000a90046001600160a01b0316600654600460009054906101000a90046001600160a01b0316886005546000801b6040518a63ffffffff1660e01b8152600401610a2b999897969594939291906119de565b6020604051808303816000875af1158015610a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e91906118cc565b6000818152600a602090815260408083208e90558d8352600b9091528082208390555191985088918c917f1a1feb7e2311cdd8c08d411741ddc6a84f54391c1927082e6e1c870fe136d13091a350610c06565b6008546001600160a01b03163314610b415760405162461bcd60e51b815260206004820152602560248201527f525061796f75743a2063616e206f6e6c792063616c6c656420627920636c616960448201527f6d7344616f00000000000000000000000000000000000000000000000000000060648201526084016105c2565b6000898152600960205260409081902060010180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b17905560025490517ffe30e7e6000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b038981166024830152604482018b90529091169063fe30e7e690606401600060405180830381600087803b158015610bed57600080fd5b505af1158015610c01573d6000803e3d6000fd5b505050505b50505060009586525050600c6020526040909320805460ff191660011790555090919050565b610c34611202565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811790915560405130907f45f734c792ccab188daebff0355896691246940a4daa87e512511b916ac7b16190600090a350565b610c95611202565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811790915560405130907fdf8e7a62b39a2ec070924d5c5dce9a1957d75476af59af5a7e7ce2ee48bc777490600090a350565b610cf6611202565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff16610d2957610d27611590565b565b610d27611605565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff16600081158015610d7c5750825b905060008267ffffffffffffffff166001148015610d995750303b155b905081158015610da7575080155b15610dde576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011785558315610e2957845468ff00000000000000001916680100000000000000001785555b6002805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038e8116919091179092556001805482168d84169081179091556004805483168d85161781556007805484168d86161790556008805484168b861617905560008054909316938b1693909317909155604080517fd509b0170000000000000000000000000000000000000000000000000000000081529051919263d509b0179282820192602092908290030181865afa158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1291906118cc565b600555620d2f00600655600d805460ff191660011790558315610f7457845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b610f8961125c565b600d5460ff1615610fdc5760405162461bcd60e51b815260206004820152601460248201527f525061796f75743a20706f6f6c206661696c656400000000000000000000000060448201526064016105c2565b6001546001600160a01b031633146110365760405162461bcd60e51b815260206004820152601b60248201527f525061796f75743a20216f7074696d6973746963206f7261636c65000000000060448201526064016105c2565b6000828152600a602052604090205481156111335760008181526009602052604090206001810154600160a01b900460ff16156110735750505050565b600181018054600160a01b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff82161790915560025482546040517ffe30e7e6000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b039384166024820152604481019190915291169063fe30e7e690606401600060405180830381600087803b15801561111557600080fd5b505af1158015611129573d6000803e3d6000fd5b5050505050505050565b6000908152600c60205260409020805460ff191690555050565b611155611202565b600081116111cb5760405162461bcd60e51b815260206004820152602160248201527f525061796f75743a207a65726f20617373657274696f6e206c6976652074696d60448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016105c2565b600681905560405181815230907f6d61c2e16ec51869e6d13ed016bb63815ca584310be5413d6c9e1926bffe76b790602001610433565b6000546001600160a01b03163314610d275760405162461bcd60e51b815260206004820152601560248201527f525061796f75743a20756e617574686f7269736564000000000000000000000060448201526064016105c2565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff1615610d27576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161134a9190611a84565b6000604051808303816000865af19150503d8060008114611387576040519150601f19603f3d011682016040523d82523d6000602084013e61138c565b606091505b50915091508180156113b65750805115806113b65750808060200190518101906113b691906118e5565b6114285760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c656400000000000000000000000000000060648201526084016105c2565b505050505050565b60608160000361147357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561149d578061148781611ab6565b91506114969050600a83611aee565b9150611477565b60008167ffffffffffffffff8111156114b8576114b8611b10565b6040519080825280601f01601f1916602001820160405280156114e2576020820181803683370190505b509050815b8515611587576114f8600182611b26565b90506000611507600a88611aee565b61151290600a611b3f565b61151c9088611b26565b611527906030611b56565b905060008160f81b90508084848151811061154457611544611b6f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061157e600a89611aee565b975050506114e7565b50949350505050565b61159861125c565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b6040516001600160a01b03909116815260200160405180910390a150565b61160d61165d565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336115e7565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff16610d27576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b801515811461036757600080fd5b6000602082840312156116d857600080fd5b81356116e3816116b8565b9392505050565b6001600160a01b038116811461036757600080fd5b60008060006060848603121561171457600080fd5b8335925060208401359150604084013561172d816116ea565b809150509250925092565b60006020828403121561174a57600080fd5b81356116e3816116ea565b60006020828403121561176757600080fd5b5035919050565b60008060008060008060c0878903121561178757600080fd5b8635611792816116ea565b955060208701356117a2816116ea565b945060408701356117b2816116ea565b935060608701356117c2816116ea565b925060808701356117d2816116ea565b915060a08701356117e2816116ea565b809150509295509295509295565b6000806040838503121561180357600080fd5b823591506020830135611815816116b8565b809150509250929050565b60008060006060848603121561183557600080fd5b8351611840816116ea565b60208501516040860151919450925061172d816116b8565b600080600080600060a0868803121561187057600080fd5b8551945060208601519350604086015192506060860151611890816116b8565b60808701519092506118a1816116b8565b809150509295509295909350565b6000602082840312156118c157600080fd5b81516116e3816116ea565b6000602082840312156118de57600080fd5b5051919050565b6000602082840312156118f757600080fd5b81516116e3816116b8565b60005b8381101561191d578181015183820152602001611905565b50506000910152565b7f496e737572616e636520636f6e747261637420697320636c61696d696e67207481527f68617420696e737572616e6365206576656e742000000000000000000000000060208201527f20686164206f63637572726564206173206f66200000000000000000000000006034820152600082516119aa816048850160208701611902565b7f2e000000000000000000000000000000000000000000000000000000000000006048939091019283015250604901919050565b610120815260008a5180610120840152611a0081610140850160208f01611902565b6001600160a01b039a8b166020840152988a16604083015250958816606087015267ffffffffffffffff9490941660808601529190951660a084015260c083019490945260e0820193909352610100810192909252601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160161014001919050565b60008251611a96818460208701611902565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ae757611ae7611aa0565b5060010190565b600082611b0b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b81810381811115611b3957611b39611aa0565b92915050565b8082028115828204841417611b3957611b39611aa0565b60ff8181168382160190811115611b3957611b39611aa0565b634e487b7160e01b600052603260045260246000fdfea264697066735822122017e46754b2ae4b730287cbd8d39921fd09ea9face6ab3e58b2dcaba9dfe8c03364736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c8063c2eb8eb9116100e3578063d509b0171161008c578063f1b156b211610066578063f1b156b2146103a6578063f320b51f146103b9578063f53713d5146103d957600080fd5b8063d509b0171461036a578063dd33acc214610373578063f0bb285b1461039357600080fd5b8063cc2a9a5b116100bd578063cc2a9a5b146102e5578063d3e89483146102f8578063d448a4ec1461035957600080fd5b8063c2eb8eb9146102b7578063c4ae3168146102ca578063c5b02989146102d257600080fd5b8063421981601161014557806371548adc1161011f57806371548adc1461026e5780639203891314610281578063a49ad1231461029457600080fd5b8063421981601461021e5780635c975abb1461023157806363f2bee51461025b57600080fd5b806320402e1d1161017657806320402e1d146101cb57806322302922146101f6578063406cca231461020957600080fd5b8063026dca351461019257806316908fed146101b4575b600080fd5b600d5461019f9060ff1681565b60405190151581526020015b60405180910390f35b6101bd60065481565b6040519081526020016101ab565b6004546101de906001600160a01b031681565b6040516001600160a01b0390911681526020016101ab565b6001546101de906001600160a01b031681565b61021c6102173660046116c6565b6103ec565b005b6003546101de906001600160a01b031681565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff1661019f565b6008546101de906001600160a01b031681565b6101bd61027c3660046116ff565b61043e565b61021c61028f366004611738565b610c2c565b61019f6102a2366004611755565b600c6020526000908152604090205460ff1681565b61021c6102c5366004611738565b610c8d565b61021c610cee565b6007546101de906001600160a01b031681565b61021c6102f336600461176e565b610d31565b610334610306366004611755565b600960205260009081526040902080546001909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b0390921660208401521515908201526060016101ab565b61021c610367366004611755565b50565b6101bd60055481565b6101bd610381366004611755565b600b6020526000908152604090205481565b6002546101de906001600160a01b031681565b61021c6103b43660046117f0565b610f81565b6101bd6103c7366004611755565b600a6020526000908152604090205481565b61021c6103e7366004611755565b61114d565b6103f4611202565b600d805460ff191682151590811790915560405190815233907fe86205fd4b28bc975ade25d5bbd8096df537071d8536eb2fa726496c1e561d22906020015b60405180910390a250565b600061044861125c565b600354604080517f3fecfbf200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691633fecfbf2916004808301926060929190829003018187875af11580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190611820565b505090506000806000836001600160a01b0316637a5402e9896040518263ffffffff1660e01b815260040161050791815260200190565b60a060405180830381865afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190611858565b9450945050509250828711156105cb5760405162461bcd60e51b815260206004820152602560248201527f556e6f52653a20616d6f756e74206578636565647320636f766572616765206160448201527f6d6f756e7400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b8180156105d6575080155b6106485760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a20706f6c6963792065787069726564206f72206e6f742065786960448201527f737400000000000000000000000000000000000000000000000000000000000060648201526084016105c2565b6000600960008a8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900460ff1615151515815250509050878160000181815250508681602001906001600160a01b031690816001600160a01b03168152505080600960008b81526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548160ff021916908315150217905550905050600d60009054906101000a900460ff16610ac1576040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018a905233906001600160a01b03871690636352211e90602401602060405180830381865afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec91906118af565b6001600160a01b0316146108425760405162461bcd60e51b815260206004820152601d60248201527f556e6f52653a206e6f74206f776e6572206f6620706f6c69637920696400000060448201526064016105c2565b600154600480546040517f4360af3d0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216928101929092526000921690634360af3d90602401602060405180830381865afa1580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d091906118cc565b6004549091506108eb906001600160a01b03163330846112b8565b600480546001546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039182169381019390935260248301849052169063095ea7b3906044016020604051808303816000875af115801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f91906118e5565b506001546001600160a01b0316636457c97961099a42611430565b6040516020016109aa9190611926565b6040516020818303038152906040528a600260009054906101000a90046001600160a01b0316600760009054906101000a90046001600160a01b0316600654600460009054906101000a90046001600160a01b0316886005546000801b6040518a63ffffffff1660e01b8152600401610a2b999897969594939291906119de565b6020604051808303816000875af1158015610a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e91906118cc565b6000818152600a602090815260408083208e90558d8352600b9091528082208390555191985088918c917f1a1feb7e2311cdd8c08d411741ddc6a84f54391c1927082e6e1c870fe136d13091a350610c06565b6008546001600160a01b03163314610b415760405162461bcd60e51b815260206004820152602560248201527f525061796f75743a2063616e206f6e6c792063616c6c656420627920636c616960448201527f6d7344616f00000000000000000000000000000000000000000000000000000060648201526084016105c2565b6000898152600960205260409081902060010180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b17905560025490517ffe30e7e6000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b038981166024830152604482018b90529091169063fe30e7e690606401600060405180830381600087803b158015610bed57600080fd5b505af1158015610c01573d6000803e3d6000fd5b505050505b50505060009586525050600c6020526040909320805460ff191660011790555090919050565b610c34611202565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811790915560405130907f45f734c792ccab188daebff0355896691246940a4daa87e512511b916ac7b16190600090a350565b610c95611202565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811790915560405130907fdf8e7a62b39a2ec070924d5c5dce9a1957d75476af59af5a7e7ce2ee48bc777490600090a350565b610cf6611202565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff16610d2957610d27611590565b565b610d27611605565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff16600081158015610d7c5750825b905060008267ffffffffffffffff166001148015610d995750303b155b905081158015610da7575080155b15610dde576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011785558315610e2957845468ff00000000000000001916680100000000000000001785555b6002805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038e8116919091179092556001805482168d84169081179091556004805483168d85161781556007805484168d86161790556008805484168b861617905560008054909316938b1693909317909155604080517fd509b0170000000000000000000000000000000000000000000000000000000081529051919263d509b0179282820192602092908290030181865afa158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1291906118cc565b600555620d2f00600655600d805460ff191660011790558315610f7457845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b610f8961125c565b600d5460ff1615610fdc5760405162461bcd60e51b815260206004820152601460248201527f525061796f75743a20706f6f6c206661696c656400000000000000000000000060448201526064016105c2565b6001546001600160a01b031633146110365760405162461bcd60e51b815260206004820152601b60248201527f525061796f75743a20216f7074696d6973746963206f7261636c65000000000060448201526064016105c2565b6000828152600a602052604090205481156111335760008181526009602052604090206001810154600160a01b900460ff16156110735750505050565b600181018054600160a01b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff82161790915560025482546040517ffe30e7e6000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b039384166024820152604481019190915291169063fe30e7e690606401600060405180830381600087803b15801561111557600080fd5b505af1158015611129573d6000803e3d6000fd5b5050505050505050565b6000908152600c60205260409020805460ff191690555050565b611155611202565b600081116111cb5760405162461bcd60e51b815260206004820152602160248201527f525061796f75743a207a65726f20617373657274696f6e206c6976652074696d60448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016105c2565b600681905560405181815230907f6d61c2e16ec51869e6d13ed016bb63815ca584310be5413d6c9e1926bffe76b790602001610433565b6000546001600160a01b03163314610d275760405162461bcd60e51b815260206004820152601560248201527f525061796f75743a20756e617574686f7269736564000000000000000000000060448201526064016105c2565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff1615610d27576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161134a9190611a84565b6000604051808303816000865af19150503d8060008114611387576040519150601f19603f3d011682016040523d82523d6000602084013e61138c565b606091505b50915091508180156113b65750805115806113b65750808060200190518101906113b691906118e5565b6114285760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c656400000000000000000000000000000060648201526084016105c2565b505050505050565b60608160000361147357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561149d578061148781611ab6565b91506114969050600a83611aee565b9150611477565b60008167ffffffffffffffff8111156114b8576114b8611b10565b6040519080825280601f01601f1916602001820160405280156114e2576020820181803683370190505b509050815b8515611587576114f8600182611b26565b90506000611507600a88611aee565b61151290600a611b3f565b61151c9088611b26565b611527906030611b56565b905060008160f81b90508084848151811061154457611544611b6f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061157e600a89611aee565b975050506114e7565b50949350505050565b61159861125c565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b6040516001600160a01b03909116815260200160405180910390a150565b61160d61165d565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336115e7565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff16610d27576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b801515811461036757600080fd5b6000602082840312156116d857600080fd5b81356116e3816116b8565b9392505050565b6001600160a01b038116811461036757600080fd5b60008060006060848603121561171457600080fd5b8335925060208401359150604084013561172d816116ea565b809150509250925092565b60006020828403121561174a57600080fd5b81356116e3816116ea565b60006020828403121561176757600080fd5b5035919050565b60008060008060008060c0878903121561178757600080fd5b8635611792816116ea565b955060208701356117a2816116ea565b945060408701356117b2816116ea565b935060608701356117c2816116ea565b925060808701356117d2816116ea565b915060a08701356117e2816116ea565b809150509295509295509295565b6000806040838503121561180357600080fd5b823591506020830135611815816116b8565b809150509250929050565b60008060006060848603121561183557600080fd5b8351611840816116ea565b60208501516040860151919450925061172d816116b8565b600080600080600060a0868803121561187057600080fd5b8551945060208601519350604086015192506060860151611890816116b8565b60808701519092506118a1816116b8565b809150509295509295909350565b6000602082840312156118c157600080fd5b81516116e3816116ea565b6000602082840312156118de57600080fd5b5051919050565b6000602082840312156118f757600080fd5b81516116e3816116b8565b60005b8381101561191d578181015183820152602001611905565b50506000910152565b7f496e737572616e636520636f6e747261637420697320636c61696d696e67207481527f68617420696e737572616e6365206576656e742000000000000000000000000060208201527f20686164206f63637572726564206173206f66200000000000000000000000006034820152600082516119aa816048850160208701611902565b7f2e000000000000000000000000000000000000000000000000000000000000006048939091019283015250604901919050565b610120815260008a5180610120840152611a0081610140850160208f01611902565b6001600160a01b039a8b166020840152988a16604083015250958816606087015267ffffffffffffffff9490941660808601529190951660a084015260c083019490945260e0820193909352610100810192909252601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160161014001919050565b60008251611a96818460208701611902565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ae757611ae7611aa0565b5060010190565b600082611b0b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b81810381811115611b3957611b39611aa0565b92915050565b8082028115828204841417611b3957611b39611aa0565b60ff8181168382160190811115611b3957611b39611aa0565b634e487b7160e01b600052603260045260246000fdfea264697066735822122017e46754b2ae4b730287cbd8d39921fd09ea9face6ab3e58b2dcaba9dfe8c03364736f6c63430008170033",
  "devdoc": {
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28584,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "_guardianCouncil",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 28587,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "optimisticOracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(OptimisticOracleV3Interface)27128"
      },
      {
        "astId": 28590,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "ssip",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISingleSidedInsurancePool)26308"
      },
      {
        "astId": 28593,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "capitalAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICapitalAgent)25730"
      },
      {
        "astId": 28596,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "defaultCurrency",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)2264"
      },
      {
        "astId": 28598,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "defaultIdentifier",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 28600,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "assertionliveTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 28602,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "escalationManager",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 28604,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "claimsDao",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 28609,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "policies",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Policy)28582_storage)"
      },
      {
        "astId": 28613,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "assertedPolicies",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 28617,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "policiesAssertionId",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 28621,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "isRequestInit",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 28623,
        "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
        "label": "isUMAFailed",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICapitalAgent)25730": {
        "encoding": "inplace",
        "label": "contract ICapitalAgent",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2264": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISingleSidedInsurancePool)26308": {
        "encoding": "inplace",
        "label": "contract ISingleSidedInsurancePool",
        "numberOfBytes": "20"
      },
      "t_contract(OptimisticOracleV3Interface)27128": {
        "encoding": "inplace",
        "label": "contract OptimisticOracleV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Policy)28582_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PayoutRequest.Policy)",
        "numberOfBytes": "32",
        "value": "t_struct(Policy)28582_storage"
      },
      "t_struct(Policy)28582_storage": {
        "encoding": "inplace",
        "label": "struct PayoutRequest.Policy",
        "members": [
          {
            "astId": 28577,
            "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
            "label": "insuranceAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28579,
            "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
            "label": "payoutAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 28581,
            "contract": "contracts/uma/PayoutRequest.sol:PayoutRequest",
            "label": "settled",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}