{
  "address": "0x31B0327B710e485C7aAaa0c758FE1892234f56CE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "newRewarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7d0886ed9673312c3a800cb755deed6dc42ccd7af9cbbcea99f6fecf623a3ba",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0x31B0327B710e485C7aAaa0c758FE1892234f56CE",
    "transactionIndex": 25,
    "gasUsed": "1433316",
    "logsBloom": "0x
    "blockHash": "0x048b47f5fbeb24b98303fc498a7ba32f34154792d22eaaeda3e9206680f34cf3",
    "transactionHash": "0xe7d0886ed9673312c3a800cb755deed6dc42ccd7af9cbbcea99f6fecf623a3ba",
    "logs": [],
    "blockNumber": 10399721,
    "cumulativeGasUsed": "4946368",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b03844d1a6c61077bfe3ad7e20b6f493",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"newRewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/RewarderFactory.sol\":\"RewarderFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Rewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ninterface ISSIP {\\n    struct PoolInfo {\\n        uint256 lastRewardBlock;\\n        uint256 accUnoPerShare;\\n        uint256 unoMultiplierPerBlock;\\n    }\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n    }\\n\\n    function poolInfo() external view returns (PoolInfo memory);\\n\\n    function userInfo(address _user) external view returns (UserInfo memory);\\n\\n    function riskPool() external view returns (address);\\n}\\n\\ncontract Rewarder is IRewarder, ReentrancyGuard, Pausable {\\n    using Address for address;\\n\\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\\n\\n    address public immutable override currency;\\n    address public immutable pool;\\n    address public operator;\\n\\n    event LogRewarderWithdraw(address indexed _rewarder, address _currency, address indexed _to, uint256 _amount);\\n    event LogTransferOwnerShip(address indexed _rewarder, address indexed _oldOperator, address indexed _newOperator);\\n\\n    constructor(address _operator, address _currency, address _pool) {\\n        require(_operator != address(0), \\\"UnoRe: zero operator address\\\");\\n        require(_pool != address(0), \\\"UnoRe: zero pool address\\\");\\n        currency = _currency;\\n        pool = _pool;\\n        operator = _operator;\\n    }\\n\\n    receive() external payable {}\\n\\n    function pausePool() external onlyOperator {\\n        _pause();\\n    }\\n\\n    function unpausePool() external onlyOperator {\\n        _unpause();\\n    }\\n\\n    function onReward(address _to, uint256 _amount) external payable override onlyPOOL whenNotPaused returns (uint256) {\\n        ISSIP ssip = ISSIP(pool);\\n        ISSIP.UserInfo memory userInfos = ssip.userInfo(_to);\\n        ISSIP.PoolInfo memory poolInfos = ssip.poolInfo();\\n        uint256 accumulatedUno = (userInfos.amount * uint256(poolInfos.accUnoPerShare)) / ACC_UNO_PRECISION;\\n\\n        require(accumulatedUno > _amount, \\\"UnoRe: invalid reward amount\\\");\\n\\n        if (currency == address(0)) {\\n            require(address(this).balance >= _amount, \\\"UnoRe: insufficient reward balance\\\");\\n            TransferHelper.safeTransferETH(_to, _amount);\\n            return _amount;\\n        } else {\\n            require(IERC20(currency).balanceOf(address(this)) >= _amount, \\\"UnoRe: insufficient reward balance\\\");\\n            TransferHelper.safeTransfer(currency, _to, _amount);\\n            return _amount;\\n        }\\n    }\\n\\n    function onRewardForRollOver(\\n        address _to,\\n        uint256 _amount,\\n        uint256 _accumulatedAmount\\n    ) external payable onlyPOOL whenNotPaused returns (uint256) {\\n        ISSIP ssip = ISSIP(pool);\\n        ISSIP.PoolInfo memory poolInfos = ssip.poolInfo();\\n        uint256 accumulatedUno = (_accumulatedAmount * uint256(poolInfos.accUnoPerShare)) / ACC_UNO_PRECISION;\\n\\n        require(accumulatedUno > _amount, \\\"UnoRe: invalid reward amount\\\");\\n\\n        if (currency == address(0)) {\\n            require(address(this).balance >= _amount, \\\"UnoRe: insufficient reward balance\\\");\\n            TransferHelper.safeTransferETH(_to, _amount);\\n            return _amount;\\n        } else {\\n            require(IERC20(currency).balanceOf(address(this)) >= _amount, \\\"UnoRe: insufficient reward balance\\\");\\n            TransferHelper.safeTransfer(currency, _to, _amount);\\n            return _amount;\\n        }\\n    }\\n\\n    function withdraw(address _to, uint256 _amount) external onlyOperator whenNotPaused {\\n        require(_to != address(0), \\\"UnoRe: zero address reward\\\");\\n        if (currency == address(0)) {\\n            if (address(this).balance >= _amount) {\\n                TransferHelper.safeTransferETH(_to, _amount);\\n                emit LogRewarderWithdraw(address(this), currency, _to, _amount);\\n            } else {\\n                if (address(this).balance > 0) {\\n                    uint256 rewardAmount = address(this).balance;\\n                    TransferHelper.safeTransferETH(_to, address(this).balance);\\n                    emit LogRewarderWithdraw(address(this), currency, _to, rewardAmount);\\n                }\\n            }\\n        } else {\\n            if (IERC20(currency).balanceOf(address(this)) >= _amount) {\\n                TransferHelper.safeTransfer(currency, _to, _amount);\\n                emit LogRewarderWithdraw(address(this), currency, _to, _amount);\\n            } else {\\n                if (IERC20(currency).balanceOf(address(this)) > 0) {\\n                    uint256 rewardAmount = IERC20(currency).balanceOf(address(this));\\n                    TransferHelper.safeTransfer(currency, _to, IERC20(currency).balanceOf(address(this)));\\n                    emit LogRewarderWithdraw(address(this), currency, _to, rewardAmount);\\n                }\\n            }\\n        }\\n    }\\n\\n    function transferOwnership(address _to) external onlyOperator {\\n        require(_to != address(0), \\\"UnoRe: zero address reward\\\");\\n        address oldOperator = operator;\\n        operator = _to;\\n        emit LogTransferOwnerShip(address(this), oldOperator, _to);\\n    }\\n\\n    modifier onlyPOOL() {\\n        require(msg.sender == pool, \\\"Only SSRP or SSIP contract can call this function.\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Only operator call this function.\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb6850c809061dcba89f90c1d52217f6278f876c8e35588a831d3592a64bf2e9d\",\"license\":\"MIT\"},\"contracts/factories/RewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\nimport \\\"../Rewarder.sol\\\";\\nimport \\\"../interfaces/IRewarderFactory.sol\\\";\\n\\ncontract RewarderFactory is IRewarderFactory {\\n    constructor() {}\\n\\n    function newRewarder(address _operator, address _currency, address _pool) external override returns (address) {\\n        Rewarder _rewarder = new Rewarder(_operator, _currency, _pool);\\n        address _rewarderAddr = address(_rewarder);\\n\\n        return _rewarderAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x8e5aac88c34907fa1b63c1ee4aa0409f60a6e436d71ca5849f51c51cc43ca71b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n\\n    function onRewardForRollOver(address to, uint256 unoAmount, uint256 accumulatedAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x28b10a4d8660aaa04cea9c4295f513d0db7a21b60f125dd7af3952e072734aca\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(address _operator, address _currency, address _pool) external returns (address);\\n}\\n\",\"keccak256\":\"0xb2169c5d0bf598726c67dfdc8bceab45390d7514afd6463b52efccd1b6bbd78e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806369ee745114610030575b600080fd5b61004361003e366004610107565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60008084848460405161007e906100d1565b73ffffffffffffffffffffffffffffffffffffffff938416815291831660208301529091166040820152606001604051809103906000f0801580156100c7573d6000803e3d6000fd5b5095945050505050565b6117a68061014b83390190565b803573ffffffffffffffffffffffffffffffffffffffff8116811461010257600080fd5b919050565b60008060006060848603121561011c57600080fd5b610125846100de565b9250610133602085016100de565b9150610141604085016100de565b9050925092509256fe60c06040523480156200001157600080fd5b50604051620017a6380380620017a683398101604081905262000034916200014a565b60016000819055805460ff191690556001600160a01b0383166200009f5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206f70657261746f7220616464726573730000000060448201526064015b60405180910390fd5b6001600160a01b038116620000f75760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20706f6f6c20616464726573730000000000000000604482015260640162000096565b6001600160a01b03918216608052811660a05260018054610100600160a81b031916610100939092169290920217905562000194565b80516001600160a01b03811681146200014557600080fd5b919050565b6000806000606084860312156200016057600080fd5b6200016b846200012d565b92506200017b602085016200012d565b91506200018b604085016200012d565b90509250925092565b60805160a05161156e620002386000396000818161011b015281816102da01528181610379015281816106a7015261077a0152600081816101f3015281816104780152818161052b015281816105fc015281816108ce0152818161098201528181610a5301528181610c7a01528181610cc501528181610d4201528181610db901528181610e3601528181610e7401528181610f050152610f94015261156e6000f3fe6080604052600436106100c05760003560e01c806389919b7111610074578063e5a6b10f1161004e578063e5a6b10f146101e1578063f2fde38b14610215578063f3fef3a31461023557600080fd5b806389919b711461019d578063aa09d5b7146101b9578063c3723288146101ce57600080fd5b806316f0115b116100a557806316f0115b14610109578063570ca735146101555780635c975abb1461017a57600080fd5b8063068cc514146100cc5780630d97f74b146100e357600080fd5b366100c757005b600080fd5b3480156100d857600080fd5b506100e1610255565b005b6100f66100f1366004611389565b6102cd565b6040519081526020015b60405180910390f35b34801561011557600080fd5b5061013d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610100565b34801561016157600080fd5b5060015461013d9061010090046001600160a01b031681565b34801561018657600080fd5b5060015460ff166040519015158152602001610100565b3480156101a957600080fd5b506100f6670de0b6b3a764000081565b3480156101c557600080fd5b506100e1610629565b6100f66101dc3660046113bc565b61069a565b3480156101ed57600080fd5b5061013d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561022157600080fd5b506100e16102303660046113e6565b610a7f565b34801561024157600080fd5b506100e16102503660046113bc565b610bb1565b60015461010090046001600160a01b031633146102c35760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f70657261746f722063616c6c20746869732066756e6374696f6e6044820152601760f91b60648201526084015b60405180910390fd5b6102cb611010565b565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461036d5760405162461bcd60e51b815260206004820152603260248201527f4f6e6c792053535250206f72205353495020636f6e74726163742063616e206360448201527f616c6c20746869732066756e6374696f6e2e000000000000000000000000000060648201526084016102ba565b610375611062565b60007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b0316635a2f3d096040518163ffffffff1660e01b8152600401606060405180830381865afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe919061146b565b90506000670de0b6b3a764000082602001518661041b9190611487565b61042591906114ac565b90508581116104765760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a20696e76616c69642072657761726420616d6f756e740000000060448201526064016102ba565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661051457854710156104ff5760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a20696e73756666696369656e74207265776172642062616c616e604482015261636560f01b60648201526084016102ba565b610509878761109f565b859350505050610622565b6040516370a0823160e01b815230600482015286907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e91906114ce565b10156105f75760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a20696e73756666696369656e74207265776172642062616c616e604482015261636560f01b60648201526084016102ba565b6105097f00000000000000000000000000000000000000000000000000000000000000008888611187565b9392505050565b60015461010090046001600160a01b031633146106925760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f70657261746f722063616c6c20746869732066756e6374696f6e6044820152601760f91b60648201526084016102ba565b6102cb6112f6565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461073a5760405162461bcd60e51b815260206004820152603260248201527f4f6e6c792053535250206f72205353495020636f6e74726163742063616e206360448201527f616c6c20746869732066756e6374696f6e2e000000000000000000000000000060648201526084016102ba565b610742611062565b6040517f1959a0020000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000091600091831690631959a00290602401606060405180830381865afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea919061146b565b90506000826001600160a01b0316635a2f3d096040518163ffffffff1660e01b8152600401606060405180830381865afa15801561082c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610850919061146b565b90506000670de0b6b3a7640000826020015184604001516108719190611487565b61087b91906114ac565b90508581116108cc5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a20696e76616c69642072657761726420616d6f756e740000000060448201526064016102ba565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661096b57854710156109555760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a20696e73756666696369656e74207265776172642062616c616e604482015261636560f01b60648201526084016102ba565b61095f878761109f565b85945050505050610a79565b6040516370a0823160e01b815230600482015286907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f591906114ce565b1015610a4e5760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a20696e73756666696369656e74207265776172642062616c616e604482015261636560f01b60648201526084016102ba565b61095f7f00000000000000000000000000000000000000000000000000000000000000008888611187565b92915050565b60015461010090046001600160a01b03163314610ae85760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f70657261746f722063616c6c20746869732066756e6374696f6e6044820152601760f91b60648201526084016102ba565b6001600160a01b038116610b3e5760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a207a65726f20616464726573732072657761726400000000000060448201526064016102ba565b600180546001600160a01b038381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff851617909455604051939092041691829030907f47c976e5452318b6b1a69e30851ef22b5fe752d4fabe5271b89c52c3d03a884d90600090a45050565b60015461010090046001600160a01b03163314610c1a5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f70657261746f722063616c6c20746869732066756e6374696f6e6044820152601760f91b60648201526084016102ba565b610c22611062565b6001600160a01b038216610c785760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a207a65726f20616464726573732072657761726400000000000060448201526064016102ba565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610da257804710610d2357610cb7828261109f565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682526020820184905284169130917fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb975096910160405180910390a35050565b4715610d9e5747610d34834761109f565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682526020820184905285169130917fd29d3d001850cedc5d5d3cad05ac52962e3f2e0aa84aeb99f813d515eb975096910160405180910390a3505b5050565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c91906114ce565b10610e5c57610cb77f00000000000000000000000000000000000000000000000000000000000000008383611187565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee791906114ce565b1115610d9e576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7891906114ce565b6040516370a0823160e01b8152306004820152909150610d34907f00000000000000000000000000000000000000000000000000000000000000009085906001600160a01b038316906370a0823190602401602060405180830381865afa158015610fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100b91906114ce565b611187565b611018611331565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60015460ff16156102cb576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516000808252602082019092526001600160a01b0384169083906040516110c991906114e7565b60006040518083038185875af1925050503d8060008114611106576040519150601f19603f3d011682016040523d82523d6000602084013e61110b565b606091505b50509050806111825760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c656400000000000000000000000060648201526084016102ba565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161121191906114e7565b6000604051808303816000865af19150503d806000811461124e576040519150601f19603f3d011682016040523d82523d6000602084013e611253565b606091505b509150915081801561127d57508051158061127d57508080602001905181019061127d9190611516565b6112ef5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c65640000000000000000000000000000000000000060648201526084016102ba565b5050505050565b6112fe611062565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611045565b60015460ff166102cb576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80356001600160a01b038116811461138457600080fd5b919050565b60008060006060848603121561139e57600080fd5b6113a78461136d565b95602085013595506040909401359392505050565b600080604083850312156113cf57600080fd5b6113d88361136d565b946020939093013593505050565b6000602082840312156113f857600080fd5b6106228261136d565b60006060828403121561141357600080fd5b6040516060810181811067ffffffffffffffff8211171561144457634e487b7160e01b600052604160045260246000fd5b80604052508091508251815260208301516020820152604083015160408201525092915050565b60006060828403121561147d57600080fd5b6106228383611401565b8082028115828204841417610a7957634e487b7160e01b600052601160045260246000fd5b6000826114c957634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156114e057600080fd5b5051919050565b6000825160005b8181101561150857602081860181015185830152016114ee565b506000920191825250919050565b60006020828403121561152857600080fd5b8151801515811461062257600080fdfea26469706673582212207b51ead0fb21f56a02963dd834e83a14666ad16dfeeeda23b4fb551913d8ac6c64736f6c63430008170033a2646970667358221220d34887b824c800ed919e639840a89811efba3a7f9e2662e7e13eaf8ac058ff4164736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}