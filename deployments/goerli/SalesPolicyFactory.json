{
  "address": "0xD7009e01Ab21dc6806f9347D6F65af6Eb3449263",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        }
      ],
      "name": "LogApprovePremiumInPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_protocolId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "LogSetBlackListProtocol",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxDeadline",
          "type": "uint256"
        }
      ],
      "name": "LogSetBuyPolicyMaxDeadlineInPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "name": "LogSetCapitalAgentInPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "LogSetExchangeAgentInPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "LogSetPremiumPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "LogSetPremiumPoolInPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "LogSetProtocolURIInPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "LogSetSignerInPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "LogUpdateCheckIfProtocolInWhitelistArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "ProtocolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolAddress",
          "type": "address"
        }
      ],
      "name": "addProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allProtocolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        }
      ],
      "name": "approvePremiumInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkIfProtocolInWhitelistArray",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "getProtocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBlackList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        }
      ],
      "name": "getProtocolData",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBlackList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getProtocolId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killSalesPolicyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "name": "newSalesPolicy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reviveSalesPolicyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salesPolicy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "setBlackListProtocolByAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolId",
          "type": "uint16"
        }
      ],
      "name": "setBlackListProtocolById",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDeadline",
          "type": "uint256"
        }
      ],
      "name": "setBuyPolicyMaxDeadlineInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "name": "setCapitalAgentInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgentInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "setPremiumPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "setPremiumPoolInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setProtocolURIInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSignerInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateCheckIfProtocolInWhitelistArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb258bd3f1903a96dc737351d6a931f45ae60071a5caeec7b43d591efe34b569d",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0xD7009e01Ab21dc6806f9347D6F65af6Eb3449263",
    "transactionIndex": 22,
    "gasUsed": "5411610",
    "logsBloom": "0x
    "blockHash": "0xf219c39a37317bdf8acf808b49ab10b761d4a4bbde32639596c06e0561411087",
    "transactionHash": "0xb258bd3f1903a96dc737351d6a931f45ae60071a5caeec7b43d591efe34b569d",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 10399722,
        "transactionHash": "0xb258bd3f1903a96dc737351d6a931f45ae60071a5caeec7b43d591efe34b569d",
        "address": "0xD7009e01Ab21dc6806f9347D6F65af6Eb3449263",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bc13ca15b56beea075e39f6f6c09ca40c10ddba6"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0xf219c39a37317bdf8acf808b49ab10b761d4a4bbde32639596c06e0561411087"
      }
    ],
    "blockNumber": 10399722,
    "cumulativeGasUsed": "7598205",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB6b67A0b6B3e627d9e9aD6232c1CEf3cBb719620",
    "0x3BF02ae707a38CD1443C380c7d908D89ec58B0C4",
    "0x4eE516d5B4b874EcCb8567eF665ba6F75bCe07cC",
    "0xd1E834C2E110D4607F53ecbcaac0733a402487d0",
    "0xBC13Ca15b56BEEA075E39F6f6C09CA40c10Ddba6"
  ],
  "numDeployments": 1,
  "solcInputHash": "b03844d1a6c61077bfe3ad7e20b6f493",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"}],\"name\":\"LogApprovePremiumInPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_protocolId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"LogSetBlackListProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxDeadline\",\"type\":\"uint256\"}],\"name\":\"LogSetBuyPolicyMaxDeadlineInPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"name\":\"LogSetCapitalAgentInPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"LogSetExchangeAgentInPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"LogSetPremiumPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"LogSetPremiumPoolInPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"LogSetProtocolURIInPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"LogSetSignerInPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"LogUpdateCheckIfProtocolInWhitelistArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"ProtocolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolAddress\",\"type\":\"address\"}],\"name\":\"addProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allProtocolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"}],\"name\":\"approvePremiumInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfProtocolInWhitelistArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"getProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlackList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"}],\"name\":\"getProtocolData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlackList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getProtocolId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killSalesPolicyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"name\":\"newSalesPolicy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reviveSalesPolicyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesPolicy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setBlackListProtocolByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolId\",\"type\":\"uint16\"}],\"name\":\"setBlackListProtocolById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeadline\",\"type\":\"uint256\"}],\"name\":\"setBuyPolicyMaxDeadlineInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"name\":\"setCapitalAgentInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgentInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"setPremiumPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"setPremiumPoolInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setProtocolURIInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSignerInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateCheckIfProtocolInWhitelistArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/SalesPolicyFactory.sol\":\"SalesPolicyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/EIP712MetaTransaction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./libraries/EIP712Base.sol\\\";\\n\\ncontract EIP712MetaTransaction is EIP712Base {\\n    using ECDSA for bytes32;\\n\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\n        keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n    mapping(address => uint256) private nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    constructor(string memory name, string memory version) EIP712Base(name, version) {}\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 32))\\n        }\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\\n        require(destinationFunctionSig != msg.sig, \\\"functionSignature can not be of executeMetaTransaction method\\\");\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n        // Append userAddress at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n\\n        require(success, \\\"Function call not successful\\\");\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature)));\\n    }\\n\\n    function getNonce(address user) external view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address user,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        bytes32 message = toTypedMessageHash(hashMetaTransaction(metaTx));\\n        address signer = message.recover(sigV, sigR, sigS);\\n        require(signer != address(0), \\\"Invalid signature\\\");\\n        return signer == user;\\n    }\\n\\n    function msgSender() internal view returns (address sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\",\"keccak256\":\"0x51588b184b139b9de3cdc9af0ff9269830cbd9a069872e1556296a26bc04c14a\",\"license\":\"MIT\"},\"contracts/SalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./libraries/Counters.sol\\\";\\nimport \\\"./interfaces/ICapitalAgent.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./interfaces/IPremiumPool.sol\\\";\\nimport \\\"./interfaces/ISalesPolicyFactory.sol\\\";\\nimport \\\"./interfaces/ISalesPolicy.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./EIP712MetaTransaction.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract SalesPolicy is EIP712MetaTransaction(\\\"BuyPolicyMetaTransaction\\\", \\\"1\\\"), ERC721, ISalesPolicy, ReentrancyGuard, Pausable {\\n    using Counters for Counters.Counter;\\n    using ECDSA for bytes32;\\n\\n    address public immutable factory;\\n    struct Policy {\\n        uint256 coverStartAt;\\n        uint256 coverageDuration;\\n        uint256 coverageAmount;\\n        address protocolAddress;\\n        address premiumCurrency;\\n        bool exist;\\n        bool expired;\\n    }\\n\\n    uint256 public maxDeadline;\\n    address private exchangeAgent;\\n    address public premiumPool;\\n    address public capitalAgent;\\n    address public signer;\\n    address public immutable usdcToken; //\\n\\n    string private protocolURI;\\n\\n    Counters.Counter private policyIdx;\\n\\n    mapping(uint256 => Policy) public getPolicy;\\n    mapping(bytes32 => address) public usedHash;\\n\\n    uint256 private maxInteger = type(uint256).max;\\n\\n    event BuyPolicy(\\n        address indexed _owner,\\n        address indexed _asset,\\n        address _premiumCurrency,\\n        address _protocol,\\n        uint256 indexed _policyIdx,\\n        uint256 _coverageAmount,\\n        uint256 _coverageDuration,\\n        uint256 _premiumPaid\\n    );\\n    event LogSetExchangeAgentInPolicy(address indexed _exchangeAgent, address indexed _policyAddress);\\n    event LogSetPremiumPoolInPolicy(address indexed _premiumPool, address indexed _policyAddress);\\n    event LogSetProtocolURIInPolicy(address indexed _policyAddress, string _uri);\\n    event LogSetSignerInPolicy(address indexed _signer, address indexed _policyAddress);\\n    event LogSetBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline, address indexed _policyAddress);\\n    event LogSetCapitalAgentInPolicy(address indexed _capitalAgent, address indexed _policyAddress);\\n    event LogapprovePremiumIInPolicy(address indexed _policyAddress, address indexed _premiumCurrency, address premiumPool);\\n    event LogMarkToClaim(uint256 indexed _policyId, uint256 _coverageAmount);\\n    event LogUpdatePolicyExpired(uint256 indexed _policyId, uint256 _coverageAmount);\\n\\n    constructor(\\n        address _factory,\\n        address _exchangeAgent,\\n        address _premiumPool,\\n        address _capitalAgent,\\n        address _usdcToken\\n    ) ERC721(\\\"Policy insurance\\\", \\\"Policy insurance\\\") {\\n        require(_factory != address(0), \\\"UnoRe: zero factory address\\\");\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero exchangeAgent address\\\");\\n        require(_premiumPool != address(0), \\\"UnoRe: zero premiumPool address\\\");\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero capitalAgent address\\\");\\n        require(_usdcToken != address(0), \\\"UnoRe: zero USDC address\\\");\\n        factory = _factory;\\n        exchangeAgent = _exchangeAgent;\\n        capitalAgent = _capitalAgent;\\n        usdcToken = _usdcToken;\\n        premiumPool = _premiumPool;\\n        maxDeadline = 7 days;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msgSender() == factory, \\\"UnoRe: SalesPolicy Forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyCapitalAgent() {\\n        require(msgSender() == capitalAgent, \\\"UnoRe: SalesPolicy Forbidden\\\");\\n        _;\\n    }\\n\\n    function killPool() external onlyFactory {\\n        _pause();\\n    }\\n\\n    function revivePool() external onlyFactory {\\n        _unpause();\\n    }\\n\\n    receive() external payable {}\\n\\n    function buyPolicy(\\n        address[] memory _assets,\\n        address[] memory _protocols,\\n        uint256[] memory _coverageAmount,\\n        uint256[] memory _coverageDuration,\\n        uint256 _policyPriceInUSDC,\\n        uint256 _signedTime,\\n        address _premiumCurrency,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 nonce\\n    ) external payable whenNotPaused nonReentrant {\\n        uint256 len = _protocols.length;\\n        require(len > 0, \\\"UnoRe: no policy\\\");\\n        require(len == _assets.length, \\\"UnoRe: no match protocolIds with assets\\\");\\n        require(len == _coverageAmount.length, \\\"UnoRe: no match protocolIds with coverageAmount\\\");\\n        require(len == _coverageDuration.length, \\\"UnoRe: no match protocolIds with coverageDuration\\\");\\n\\n        address _signer = getSender(\\n            _policyPriceInUSDC,\\n            _protocols,\\n            _coverageDuration,\\n            _coverageAmount,\\n            _signedTime,\\n            _premiumCurrency,\\n            r,\\n            s,\\n            v,\\n            nonce,\\n            msg.sender\\n        );\\n        require(_signer != address(0) && _signer == signer, \\\"UnoRe: invalid signer\\\");\\n        require(_signedTime <= block.timestamp && block.timestamp - _signedTime < maxDeadline, \\\"UnoRe: signature expired\\\");\\n\\n        uint256 premiumPaid;\\n        if (_premiumCurrency == address(0)) {\\n            premiumPaid = IExchangeAgent(exchangeAgent).getETHAmountForUSDC(_policyPriceInUSDC);\\n            require(msg.value >= premiumPaid, \\\"UnoRe: insufficient paid\\\");\\n            if (msg.value > premiumPaid) {\\n                TransferHelper.safeTransferETH(msgSender(), msg.value - premiumPaid);\\n            }\\n            IPremiumPool(premiumPool).collectPremiumInETH{value: premiumPaid}();\\n        } else {\\n            premiumPaid = _premiumCurrency != usdcToken\\n                ? IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_premiumCurrency, _policyPriceInUSDC)\\n                : _policyPriceInUSDC;\\n            TransferHelper.safeTransferFrom(_premiumCurrency, msgSender(), address(this), premiumPaid);\\n            IPremiumPool(premiumPool).collectPremium(_premiumCurrency, premiumPaid);\\n        }\\n\\n        _buyPolicy(_assets, _protocols, _coverageAmount, _coverageDuration, premiumPaid, _premiumCurrency);\\n    }\\n\\n    function _buyPolicy(\\n        address[] memory _assets,\\n        address[] memory _protocols,\\n        uint256[] memory _coverageAmount,\\n        uint256[] memory _coverageDuration,\\n        uint256 _premiumPaid,\\n        address _premiumCurrency\\n    ) private {\\n        uint256 _totalCoverage;\\n        uint256 lastIdx;\\n        uint256 coverAmount;\\n        uint256 coverDuration;\\n        address _protocol;\\n        address _assetLocked;\\n\\n        bool checkIfProtocolInWhitelistArray = ISalesPolicyFactory(factory).checkIfProtocolInWhitelistArray();\\n\\n        for (uint256 ii = 0; ii < _protocols.length; ii++) {\\n            lastIdx = policyIdx.current;\\n            coverAmount = _coverageAmount[ii];\\n            coverDuration = _coverageDuration[ii];\\n            _protocol = _protocols[ii];\\n            _assetLocked = _assets[ii];\\n            uint256 premiumPaid = _premiumPaid;\\n            bool isAvailableSale = false;\\n            if (checkIfProtocolInWhitelistArray) {\\n                uint16 _protocolId = ISalesPolicyFactory(factory).getProtocolId(_protocol);\\n                if (_protocolId > 0) {\\n                    (, bool isBlackList) = ISalesPolicyFactory(factory).getProtocolData(_protocolId);\\n                    if (!isBlackList) {\\n                        isAvailableSale = true;\\n                    }\\n                }\\n            } else {\\n                isAvailableSale = true;\\n            }\\n            require(isAvailableSale, \\\"UnoRe: unavailable policy\\\");\\n            getPolicy[lastIdx] = Policy({\\n                protocolAddress: _protocol,\\n                coverageAmount: coverAmount,\\n                coverageDuration: coverDuration,\\n                coverStartAt: block.timestamp,\\n                premiumCurrency: _premiumCurrency,\\n                exist: true,\\n                expired: false\\n            });\\n\\n            _mint(msgSender(), lastIdx);\\n\\n            _totalCoverage += coverAmount;\\n\\n            emit BuyPolicy(\\n                msgSender(),\\n                _assetLocked,\\n                _premiumCurrency,\\n                _protocol,\\n                lastIdx,\\n                coverAmount,\\n                coverDuration,\\n                premiumPaid\\n            );\\n            policyIdx.next();\\n        }\\n        if (_totalCoverage > 0) {\\n            ICapitalAgent(capitalAgent).policySale(_totalCoverage);\\n        }\\n    }\\n\\n    function approvePremium(address _premiumCurrency) external override onlyFactory {\\n        require(_premiumCurrency != address(0), \\\"UnoRe: zero address\\\");\\n        require(premiumPool != address(0), \\\"UnoRe: not defiend premiumPool\\\");\\n        TransferHelper.safeApprove(_premiumCurrency, premiumPool, maxInteger);\\n        emit LogapprovePremiumIInPolicy(address(this), _premiumCurrency, premiumPool);\\n    }\\n\\n    function setProtocolURI(string memory newURI) external override onlyFactory {\\n        protocolURI = newURI;\\n        emit LogSetProtocolURIInPolicy(address(this), newURI);\\n    }\\n\\n    function setPremiumPool(address _premiumPool) external override onlyFactory {\\n        require(_premiumPool != address(0), \\\"UnoRe: zero address\\\");\\n        premiumPool = _premiumPool;\\n        emit LogSetPremiumPoolInPolicy(_premiumPool, address(this));\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external override onlyFactory {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit LogSetExchangeAgentInPolicy(_exchangeAgent, address(this));\\n    }\\n\\n    function setSigner(address _signer) external override onlyFactory {\\n        require(_signer != address(0), \\\"UnoRe: zero address\\\");\\n        signer = _signer;\\n        emit LogSetSignerInPolicy(_signer, address(this));\\n    }\\n\\n    function setCapitalAgent(address _capitalAgent) external override onlyFactory {\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero address\\\");\\n        capitalAgent = _capitalAgent;\\n        emit LogSetCapitalAgentInPolicy(_capitalAgent, address(this));\\n    }\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external override onlyFactory {\\n        require(_maxDeadline > 0, \\\"UnoRe: zero max signedTime\\\");\\n        maxDeadline = _maxDeadline;\\n        emit LogSetBuyPolicyMaxDeadlineInPolicy(_maxDeadline, address(this));\\n    }\\n\\n    function markToClaim(uint256 _policyId) external override nonReentrant onlyCapitalAgent {\\n        require(getPolicy[_policyId].exist, \\\"UnoRe: marked to claim already\\\");\\n        require(!getPolicy[_policyId].expired, \\\"UnoRe: policy expired\\\");\\n        getPolicy[_policyId].exist = false;\\n        _burn(_policyId);\\n        emit LogMarkToClaim(_policyId, getPolicy[_policyId].coverageAmount);\\n    }\\n\\n    function updatePolicyExpired(uint256 _policyId) external override nonReentrant onlyCapitalAgent {\\n        require(getPolicy[_policyId].exist, \\\"UnoRe: marked to claim already\\\");\\n        getPolicy[_policyId].expired = true;\\n        _burn(_policyId);\\n        emit LogUpdatePolicyExpired(_policyId, getPolicy[_policyId].coverageAmount);\\n    }\\n\\n    function allPoliciesLength() external view override returns (uint256) {\\n        return policyIdx.current;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return protocolURI;\\n    }\\n\\n    function getPolicyData(uint256 _policyId) external view override returns (uint256, uint256, uint256, bool, bool) {\\n        bool exist = getPolicy[_policyId].exist;\\n        bool expired = getPolicy[_policyId].expired;\\n        uint256 coverageAmount = getPolicy[_policyId].coverageAmount;\\n        uint256 coverageDuration = getPolicy[_policyId].coverageDuration;\\n        uint256 coverStartAt = uint256(getPolicy[_policyId].coverStartAt);\\n        return (coverageAmount, coverageDuration, coverStartAt, exist, expired);\\n    }\\n\\n    function getSender(\\n        uint256 _policyPrice,\\n        address[] memory _protocols,\\n        uint256[] memory _coverageDuration,\\n        uint256[] memory _coverageAmount,\\n        uint256 _signedTime,\\n        address _premiumCurrency,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 nonce,\\n        address sender\\n    ) private returns (address) {\\n        // bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\\n        bytes32 msgHash = keccak256(\\n            abi.encodePacked(\\n                _policyPrice,\\n                _protocols,\\n                _coverageDuration,\\n                _coverageAmount,\\n                _signedTime,\\n                _premiumCurrency,\\n                nonce,\\n                sender,\\n                block.chainid\\n            )\\n        );\\n\\n        require(usedHash[msgHash] == address(0), \\\"Already used hash\\\");\\n\\n        usedHash[msgHash] = sender;\\n\\n        // bytes32 msgHash = keccak256(abi.encodePacked(productName));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", msgHash));\\n        // (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\\n        address recoveredAddress = digest.recover(v, r, s);\\n        return recoveredAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x7b441699cebe206b628d5216a0efab18adc2c306854fe2516b37f3ee33613854\",\"license\":\"GPL-3.0\"},\"contracts/factories/SalesPolicyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libraries/Counters.sol\\\";\\nimport \\\"../SalesPolicy.sol\\\";\\nimport \\\"../interfaces/ISalesPolicy.sol\\\";\\nimport \\\"../interfaces/ISalesPolicyFactory.sol\\\";\\nimport \\\"../interfaces/IGnosisSafe.sol\\\";\\n\\ncontract SalesPolicyFactory is ISalesPolicyFactory, ReentrancyGuard, Ownable {\\n    using Counters for Counters.Counter;\\n    // It should be okay if Protocol is struct\\n    struct Protocol {\\n        address protocolAddress; // Address of that protocol\\n        bool isBlackList; // initial true\\n    }\\n\\n    bool public override checkIfProtocolInWhitelistArray;\\n\\n    address public premiumPool;\\n    address public exchangeAgent;\\n    address public capitalAgent;\\n\\n    address public salesPolicy;\\n\\n    mapping(uint16 => Protocol) public getProtocol;\\n    mapping(address => uint16) public override getProtocolId;\\n    Counters.Counter private protocolIds;\\n\\n    address public usdcToken;\\n\\n    event ProtocolCreated(uint16 _protocolIdx, address _protocol);\\n    event LogSetPremiumPool(address indexed _premiumPool);\\n    event LogUpdateCheckIfProtocolInWhitelistArray(bool _status);\\n    event LogSetBlackListProtocol(uint16 _protocolId, address indexed _protocol);\\n    event LogSetExchangeAgentInPolicy(address _exchangeAgent);\\n    event LogSetBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline);\\n    event LogSetPremiumPoolInPolicy(address _premiumPool);\\n    event LogSetSignerInPolicy(address _signer);\\n    event LogSetCapitalAgentInPolicy(address _capitalAgent);\\n    event LogSetProtocolURIInPolicy(string _uri);\\n    event LogApprovePremiumInPolicy(address _premiumCurrency);\\n\\n    constructor(\\n        address _usdcToken,\\n        address _exchangeAgent,\\n        address _premiumPool,\\n        address _capitalAgent,\\n        address _multiSigWallet\\n    ) Ownable(_multiSigWallet) {\\n        require(_usdcToken != address(0), \\\"UnoRe: zero USDC address\\\");\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero exchangeAgent address\\\");\\n        require(_premiumPool != address(0), \\\"UnoRe: zero premiumPool address\\\");\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero capitalAgent address\\\");\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multisigwallet address\\\");\\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \\\"UnoRe: more than three owners requied\\\");\\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \\\"UnoRe: more than one owners requied to verify\\\");\\n        usdcToken = _usdcToken;\\n        premiumPool = _premiumPool;\\n        exchangeAgent = _exchangeAgent;\\n        capitalAgent = _capitalAgent;\\n    }\\n\\n    // This action can be done only by owner\\n    // protoco id will be started from no.1 instead of no.0.\\n    function addProtocol(address _protocolAddress) external onlyOwner nonReentrant {\\n        protocolIds.next();\\n        uint16 lastIdx = uint16(protocolIds.current);\\n\\n        getProtocol[lastIdx] = Protocol({protocolAddress: _protocolAddress, isBlackList: false});\\n\\n        getProtocolId[_protocolAddress] = lastIdx;\\n\\n        emit ProtocolCreated(lastIdx, _protocolAddress);\\n    }\\n\\n    function newSalesPolicy(\\n        address _exchangeAgent,\\n        address _premiumPool,\\n        address _capitalAgent\\n    ) external onlyOwner nonReentrant returns (address) {\\n        SalesPolicy _salesPolicy = new SalesPolicy(address(this), _exchangeAgent, _premiumPool, _capitalAgent, usdcToken);\\n        salesPolicy = address(_salesPolicy);\\n        ICapitalAgent(capitalAgent).setPolicy(address(_salesPolicy));\\n\\n        return address(_salesPolicy);\\n    }\\n\\n    function allProtocolsLength() external view returns (uint256) {\\n        return protocolIds.current;\\n    }\\n\\n    function updateCheckIfProtocolInWhitelistArray(bool _status) external onlyOwner {\\n        checkIfProtocolInWhitelistArray = _status;\\n        emit LogUpdateCheckIfProtocolInWhitelistArray(_status);\\n    }\\n\\n    function setBlackListProtocolById(uint16 _protocolId) external onlyOwner {\\n        getProtocol[_protocolId].isBlackList = true;\\n        emit LogSetBlackListProtocol(_protocolId, getProtocol[_protocolId].protocolAddress);\\n    }\\n\\n    function setBlackListProtocolByAddress(address _protocol) external onlyOwner {\\n        // require(_protocol != address(0), \\\"UnoRe: zero address\\\");\\n        uint16 _protocolId = getProtocolId[_protocol];\\n        getProtocol[_protocolId].isBlackList = true;\\n        emit LogSetBlackListProtocol(_protocolId, _protocol);\\n    }\\n\\n    function setPremiumPool(address _premiumPool) external onlyOwner {\\n        require(_premiumPool != address(0), \\\"UnoRe: zero address\\\");\\n        premiumPool = _premiumPool;\\n        emit LogSetPremiumPool(_premiumPool);\\n    }\\n\\n    function setExchangeAgentInPolicy(address _exchangeAgent) external onlyOwner {\\n        ISalesPolicy(salesPolicy).setExchangeAgent(_exchangeAgent);\\n        emit LogSetExchangeAgentInPolicy(_exchangeAgent);\\n    }\\n\\n    function setBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline) external onlyOwner {\\n        require(_maxDeadline > 0, \\\"UnoRe: zero max deadline\\\");\\n        ISalesPolicy(salesPolicy).setBuyPolicyMaxDeadline(_maxDeadline);\\n        emit LogSetBuyPolicyMaxDeadlineInPolicy(_maxDeadline);\\n    }\\n\\n    function setPremiumPoolInPolicy(address _premiumPool) external onlyOwner {\\n        ISalesPolicy(salesPolicy).setPremiumPool(_premiumPool);\\n        emit LogSetPremiumPoolInPolicy(_premiumPool);\\n    }\\n\\n    function setSignerInPolicy(address _signer) external onlyOwner {\\n        ISalesPolicy(salesPolicy).setSigner(_signer);\\n        emit LogSetSignerInPolicy(_signer);\\n    }\\n\\n    function setCapitalAgentInPolicy(address _capitalAgent) external onlyOwner {\\n        ISalesPolicy(salesPolicy).setCapitalAgent(_capitalAgent);\\n        emit LogSetCapitalAgentInPolicy(_capitalAgent);\\n    }\\n\\n    function setProtocolURIInPolicy(string memory _uri) external onlyOwner {\\n        ISalesPolicy(salesPolicy).setProtocolURI(_uri);\\n        emit LogSetProtocolURIInPolicy(_uri);\\n    }\\n\\n    function approvePremiumInPolicy(address _premiumCurrency) external onlyOwner {\\n        ISalesPolicy(salesPolicy).approvePremium(_premiumCurrency);\\n        emit LogApprovePremiumInPolicy(_premiumCurrency);\\n    }\\n\\n    function getProtocolData(uint16 _protocolIdx) external view override returns (address protocolAddress, bool isBlackList) {\\n        return (getProtocol[_protocolIdx].protocolAddress, getProtocol[_protocolIdx].isBlackList);\\n    }\\n\\n    function killSalesPolicyPool() external onlyOwner {\\n        ISalesPolicy(salesPolicy).killPool();\\n    }\\n\\n    function reviveSalesPolicyPool() external onlyOwner {\\n        ISalesPolicy(salesPolicy).revivePool();\\n    }\\n}\\n\",\"keccak256\":\"0xe627661950fa2d45709817222876606f7a898eb59b0ab8c2921688613b4ffbd1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\\n\\n    function setPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isFinished) external;\\n\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\\n\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(uint256 _policyId) external;\\n\\n    function getPolicyInfo() external returns(address, uint256, bool);\\n}\\n\",\"keccak256\":\"0xc9eeaa12b53a52a3e23ff3bb09a308b0e428345e033bb47b417b903f4183eb4f\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface IExchangeAgent {\\n    function usdcToken() external view returns (address);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) external view returns (uint256);\\n\\n    function convertForToken(address _token0, address _token1, uint256 _token0Amount) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3a0b6e72d0cac4ea4a6044538673f2cac3568a1bd9f2b3359979065b8486472\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface IGnosisSafe {\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getThreshold() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa958d03be51c456e26205695b66fd76ea243c91c24ca549360074b4782575e4d\",\"license\":\"MIT\"},\"contracts/interfaces/IPremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IPremiumPool {\\n    function collectPremium(address _premiumCurrency, uint256 _premiumAmount) external;\\n\\n    function collectPremiumInETH() external payable;\\n\\n    function withdrawPremium(address _currency, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x384950f5ec28f0f5b3ebafc5c68f8bd146c6ceec3a58d8e21287351c329bb0a4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISalesPolicy {\\n    function setPremiumPool(address _premiumPool) external;\\n\\n    function setExchangeAgent(address _exchangeAgent) external;\\n\\n    function setCapitalAgent(address _capitalAgent) external;\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\\n\\n    function approvePremium(address _premiumCurrency) external;\\n\\n    function setProtocolURI(string memory newURI) external;\\n\\n    function setSigner(address _signer) external;\\n\\n    function updatePolicyExpired(uint256 _policyId) external;\\n\\n    function markToClaim(uint256 _policyId) external;\\n\\n    function allPoliciesLength() external view returns (uint256);\\n\\n    function killPool() external;\\n\\n    function revivePool() external;\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x2866e770aad9425cd7fffd3da31e1225b9c391df41aabff8e84583e6df58f598\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISalesPolicyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISalesPolicyFactory {\\n    function getProtocolId(address _protocolAddress) external view returns (uint16);\\n\\n    function checkIfProtocolInWhitelistArray() external view returns (bool);\\n\\n    function getProtocolData(uint16 _protocolIdx) external view returns (address protocolAddress, bool isBlackList);\\n}\\n\",\"keccak256\":\"0x03a3794164f783a822b1373eebafea2906d2164e60f2bba8f2bc964416fc8d50\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Counters.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\n/**\\n * @title Counter\\n * @author Matt Condon (@shrugs)\\n * @dev Provides an incrementing uint256 id acquired by the `Counter#next` getter.\\n * Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really.\\n *\\n * Include with `using Counter for Counter.Counter;`\\n * @notice Does not allow an Id of 0, which is popularly used to signify a null state in solidity.\\n * Does not protect from overflows, but if you have 2^256 ids, you have other problems.\\n * (But actually, it's generally impossible to increment a counter this many times, energy wise\\n * so it's not something you have to worry about.)\\n */\\nlibrary Counters {\\n    struct Counter {\\n        uint256 current; // default: 0\\n    }\\n\\n    function next(Counter storage index) internal returns (uint256) {\\n        index.current += 1;\\n        return index.current;\\n    }\\n}\\n\",\"keccak256\":\"0xd19f3acb656f1f9fe7dc9f8cd42f10da844b8293fb5c8c1d21b337f7413b513d\",\"license\":\"MIT\"},\"contracts/libraries/EIP712Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ncontract EIP712Base {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"));\\n\\n    bytes32 internal domainSeparator;\\n\\n    constructor(string memory name, string memory version) {\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                bytes32(getChainID())\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function getDomainSeparator() private view returns (bytes32) {\\n        return domainSeparator;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), messageHash));\\n    }\\n}\\n\",\"keccak256\":\"0x95e2d2d3828688940657ee16c772eb324df90510739b70d15307f86436a22767\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001e95760003560e01c8063aeba91d0116200010d578063c5870a4b11620000a3578063d9203b91116200007a578063d9203b911462000492578063dc962e4514620004a6578063dfca978114620004bd578063f2fde38b14620004d457600080fd5b8063c5870a4b146200042c578063d191097e1462000443578063d2c7c2a4146200045a57600080fd5b8063b64a775e11620000e4578063b64a775e146200038d578063bbd9d8e114620003a4578063bcd54f0c1462000401578063c3c3b55b146200041857600080fd5b8063aeba91d0146200034d578063b31b9fee1462000364578063b381ff82146200037b57600080fd5b80634ba69faa1162000183578063771d4c28116200015a578063771d4c2814620002f65780638bc798dc146200030d5780638da5cb5b1462000324578063924589c5146200033657600080fd5b80634ba69faa146200029d5780636c18443d14620002b1578063715018a614620002ec57600080fd5b80631eaf26d811620001c45780631eaf26d8146200024f578063222a5df614620002595780633bd77b2c146200027f57806342198160146200028957600080fd5b806302f3318d14620001ee57806311eac85514620002075780631bcc24721462000238575b600080fd5b62000205620001ff366004620011b9565b620004eb565b005b6009546200021b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6200020562000249366004620011b9565b620005b0565b6200020562000687565b6001546200026e90600160a01b900460ff1681565b60405190151581526020016200022f565b62000205620006fd565b6004546200021b906001600160a01b031681565b6002546200021b906001600160a01b031681565b620002d8620002c2366004620011b9565b60076020526000908152604090205461ffff1681565b60405161ffff90911681526020016200022f565b6200020562000758565b6200020562000307366004620011b9565b62000770565b620002056200031e366004620011b9565b62000878565b6001546001600160a01b03166200021b565b6200020562000347366004620011d7565b62000937565b620002056200035e366004620011b9565b620009c5565b6200021b62000375366004620011fd565b62000a5c565b6008546040519081526020016200022f565b620002056200039e366004620011b9565b62000b99565b620003e1620003b5366004620011d7565b61ffff166000908152600660205260409020546001600160a01b03811691600160a01b90910460ff1690565b604080516001600160a01b0390931683529015156020830152016200022f565b620002056200041236600462001276565b62000c58565b6005546200021b906001600160a01b031681565b620002056200043d366004620011b9565b62000d12565b620002056200045436600462001331565b62000dd1565b620003e16200046b366004620011d7565b6006602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b6003546200021b906001600160a01b031681565b62000205620004b73660046200134b565b62000ef2565b62000205620004ce366004620011b9565b62000f65565b62000205620004e5366004620011b9565b62001024565b620004f56200107e565b6005546040517f1bcc24720000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015290911690631bcc247290602401600060405180830381600087803b1580156200055657600080fd5b505af11580156200056b573d6000803e3d6000fd5b50506040516001600160a01b03841681527f901a140d78903c603146fb34abddcb4eb3bd955766116712f267c68f3ee3dd0b925060200190505b60405180910390a150565b620005ba6200107e565b6001600160a01b03811662000630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f556e6f52653a207a65726f20616464726573730000000000000000000000000060448201526064015b60405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517faa0150507cbcab99f33127173fcbdd580e5710d253406b99952e1feda3cdcc0e90600090a250565b620006916200107e565b600560009054906101000a90046001600160a01b03166001600160a01b031663677554156040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620006e257600080fd5b505af1158015620006f7573d6000803e3d6000fd5b50505050565b620007076200107e565b600560009054906101000a90046001600160a01b03166001600160a01b0316637a39b8d86040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620006e257600080fd5b620007626200107e565b6200076e6000620010c6565b565b6200077a6200107e565b6200078462001125565b62000790600862001169565b506008546040805180820182526001600160a01b038481168083526000602080850182815261ffff8816808452600683528784209651875492511515600160a01b027fffffffffffffffffffffff000000000000000000000000000000000000000000909316961695909517179094558181526007845284902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016831790558351918252918101919091527fc3971223019c1361f0a91605997c54932599b5f815f2f7d49e183fbc21014029910160405180910390a150620008756001600055565b50565b620008826200107e565b6005546040517f6c19e7830000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015290911690636c19e78390602401600060405180830381600087803b158015620008e357600080fd5b505af1158015620008f8573d6000803e3d6000fd5b50506040516001600160a01b03841681527f9b62fe13476d0a7f908d90e180935392e86c56b8a7cf8c5235044b0c79419adc92506020019050620005a5565b620009416200107e565b61ffff81166000818152600660209081526040918290208054600160a01b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff82161790915591519283526001600160a01b03909116917f599cca7c0d636819ca3833dcdbcd266536199c19522d35eb59e13d07f1041770910160405180910390a250565b620009cf6200107e565b6001600160a01b03811660008181526007602090815260408083205461ffff16808452600683529281902080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055518281529192917f599cca7c0d636819ca3833dcdbcd266536199c19522d35eb59e13d07f1041770910160405180910390a25050565b600062000a686200107e565b62000a7262001125565b60095460405160009130918791879187916001600160a01b03169062000a98906200118e565b6001600160a01b0395861681529385166020850152918416604084015283166060830152909116608082015260a001604051809103906000f08015801562000ae4573d6000803e3d6000fd5b506005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03838116918217909255600480546040517f7d4163d3000000000000000000000000000000000000000000000000000000008152918201929092529293501690637d4163d390602401600060405180830381600087803b15801562000b6b57600080fd5b505af115801562000b80573d6000803e3d6000fd5b5092935050505062000b926001600055565b9392505050565b62000ba36200107e565b6005546040517f18a00d8e0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906318a00d8e90602401600060405180830381600087803b15801562000c0457600080fd5b505af115801562000c19573d6000803e3d6000fd5b50506040516001600160a01b03841681527fe4fe8844d1e5998ef63f21ffbff963c6c413c8652c2d1d5e789cafabd2cc693b92506020019050620005a5565b62000c626200107e565b6005546040517f9da0e7380000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690639da0e7389062000cad9084906004016200136f565b600060405180830381600087803b15801562000cc857600080fd5b505af115801562000cdd573d6000803e3d6000fd5b505050507fe2320890b741157bc1c8bfacd484c1bcc09e63bb2ac13f0c2c026e7dd4cc26e981604051620005a591906200136f565b62000d1c6200107e565b6005546040517fc2eb8eb90000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063c2eb8eb990602401600060405180830381600087803b15801562000d7d57600080fd5b505af115801562000d92573d6000803e3d6000fd5b50506040516001600160a01b03841681527fd5b4f49340c2225ec716a0c588248053821d16fbfc897c021f23e664ed2ffd7792506020019050620005a5565b62000ddb6200107e565b6000811162000e47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e6f52653a207a65726f206d617820646561646c696e650000000000000000604482015260640162000627565b6005546040517ffda2071d000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063fda2071d90602401600060405180830381600087803b15801562000ea757600080fd5b505af115801562000ebc573d6000803e3d6000fd5b505050507f6b9b557bfefa92e934516e0d9934ba204689bdbb8d6279ec351b1f67b267f76d81604051620005a591815260200190565b62000efc6200107e565b60018054821515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556040517f8488d1fbbfabc3e41bea48b6d06c5139182eccbd9942a27a1142748120d0285890620005a590831515815260200190565b62000f6f6200107e565b6005546040517f21ecf7010000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906321ecf70190602401600060405180830381600087803b15801562000fd057600080fd5b505af115801562000fe5573d6000803e3d6000fd5b50506040516001600160a01b03841681527fa1ebcc173cc3b3fe102bd730c868e636d67232919419b2865b10ec2c0eb7f4dc92506020019050620005a5565b6200102e6200107e565b6001600160a01b03811662001073576040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526000600482015260240162000627565b6200087581620010c6565b6001546001600160a01b031633146200076e576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240162000627565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026000540362001162576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b60006001826000016000828254620011829190620013c0565b90915550509054919050565b6149d7806200140283390190565b80356001600160a01b0381168114620011b457600080fd5b919050565b600060208284031215620011cc57600080fd5b62000b92826200119c565b600060208284031215620011ea57600080fd5b813561ffff8116811462000b9257600080fd5b6000806000606084860312156200121357600080fd5b6200121e846200119c565b92506200122e602085016200119c565b91506200123e604085016200119c565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156200128957600080fd5b813567ffffffffffffffff80821115620012a257600080fd5b818401915084601f830112620012b757600080fd5b813581811115620012cc57620012cc62001247565b604051601f8201601f19908116603f01168101908382118183101715620012f757620012f762001247565b816040528281528760208487010111156200131157600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156200134457600080fd5b5035919050565b6000602082840312156200135e57600080fd5b8135801515811462000b9257600080fd5b60006020808352835180602085015260005b818110156200139f5785810183015185820160400152820162001381565b506000604082860101526040601f19601f8301168501019250505092915050565b80820180821115620013fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fe60c06040526000196013553480156200001757600080fd5b50604051620049d7380380620049d78339810160408190526200003a91620003dc565b6040518060400160405280601081526020016f506f6c69637920696e737572616e636560801b8152506040518060400160405280601081526020016f506f6c69637920696e737572616e636560801b8152506040518060400160405280601881526020017f427579506f6c6963794d6574615472616e73616374696f6e0000000000000000815250604051806040016040528060018152602001603160f81b81525081816040518060800160405280604f815260200162004988604f913980519060200120828051906020012082805190602001203062000120620003bb60201b60201c565b60408051602081019690965285019390935260608401919091526001600160a01b0316608083015260a082015260c00160408051601f198184030181529190528051602090910120600055506002925062000180915084905082620004f3565b5060036200018f8282620004f3565b50506001600855506009805460ff191690556001600160a01b038516620001fd5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a207a65726f20666163746f72792061646472657373000000000060448201526064015b60405180910390fd5b6001600160a01b0384166200025f5760405162461bcd60e51b815260206004820152602160248201527f556e6f52653a207a65726f2065786368616e67654167656e74206164647265736044820152607360f81b6064820152608401620001f4565b6001600160a01b038316620002b75760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a207a65726f207072656d69756d506f6f6c2061646472657373006044820152606401620001f4565b6001600160a01b0382166200030f5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a207a65726f206361706974616c4167656e7420616464726573736044820152606401620001f4565b6001600160a01b038116620003675760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f2055534443206164647265737300000000000000006044820152606401620001f4565b6001600160a01b03948516608052600b80549486166001600160a01b0319958616179055600d805492861692851692909217909155831660a052600c805491909316911617905562093a80600a55620005bf565b4690565b80516001600160a01b0381168114620003d757600080fd5b919050565b600080600080600060a08688031215620003f557600080fd5b6200040086620003bf565b94506200041060208701620003bf565b93506200042060408701620003bf565b92506200043060608701620003bf565b91506200044060808701620003bf565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200047757607f821691505b6020821081036200049857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004ee576000816000526020600020601f850160051c81016020861015620004c95750805b601f850160051c820191505b81811015620004ea57828155600101620004d5565b5050505b505050565b81516001600160401b038111156200050f576200050f6200044c565b620005278162000520845462000462565b846200049e565b602080601f8311600181146200055f5760008415620005465750858301515b600019600386901b1c1916600185901b178555620004ea565b600085815260208120601f198616915b8281101562000590578886015182559484019460019091019084016200056f565b5085821015620005af5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051614348620006406000396000818161036b01526115e10152600081816107d401528181610d0a01528181610e4201528181610f7a0152818161197601528181611a0801528181611ba101528181611c4001528181611ea3015281816120430152818161294701528181612a950152612b4301526143486000f3fe6080604052600436106102895760003560e01c80635c975abb11610153578063a22cb465116100cb578063c87b56dd1161007f578063de4e420111610064578063de4e42011461082b578063e985e9c514610841578063fda2071d1461088a57600080fd5b8063c87b56dd146107f6578063d341960b1461081657600080fd5b8063b88d4fde116100b0578063b88d4fde14610782578063c2eb8eb9146107a2578063c45a0155146107c257600080fd5b8063a22cb46514610742578063a5d5e1421461076257600080fd5b806370a08231116101225780637a5402e9116101075780637a5402e91461068b57806395d89b411461070d5780639da0e7381461072257600080fd5b806370a08231146106565780637a39b8d81461067657600080fd5b80635c975abb146105e95780636352211e1461060157806367755415146106215780636c19e7831461063657600080fd5b8063238ac9331161020157806333b3691e116101b557806342842e0e1161019a57806342842e0e146105735780634ba69faa14610593578063560ebbd1146105b357600080fd5b806333b3691e14610533578063421981601461055357600080fd5b80632b07fce3116101e65780632b07fce31461042d5780632d0335ab146104dc5780632fb172df1461052057600080fd5b8063238ac933146103ed57806323b872dd1461040d57600080fd5b80630c53c51c1161025857806318a00d8e1161023d57806318a00d8e1461038d5780631bcc2472146103ad57806321ecf701146103cd57600080fd5b80630c53c51c1461034657806311eac8551461035957600080fd5b806301ffc9a71461029557806306fdde03146102ca578063081812fc146102ec578063095ea7b31461032457600080fd5b3661029057005b600080fd5b3480156102a157600080fd5b506102b56102b0366004613915565b6108aa565b60405190151581526020015b60405180910390f35b3480156102d657600080fd5b506102df61098f565b6040516102c19190613982565b3480156102f857600080fd5b5061030c610307366004613995565b610a21565b6040516001600160a01b0390911681526020016102c1565b34801561033057600080fd5b5061034461033f3660046139d3565b610a4a565b005b6102df610354366004613acf565b610a59565b34801561036557600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039957600080fd5b506103446103a8366004613b43565b610d08565b3480156103b957600080fd5b506103446103c8366004613b43565b610e40565b3480156103d957600080fd5b506103446103e8366004613b43565b610f78565b3480156103f957600080fd5b50600e5461030c906001600160a01b031681565b34801561041957600080fd5b50610344610428366004613b60565b611114565b34801561043957600080fd5b5061049a610448366004613995565b601160205260009081526040902080546001820154600283015460038401546004909401549293919290916001600160a01b03908116919081169060ff600160a01b8204811691600160a81b90041687565b604080519788526020880196909652948601939093526001600160a01b039182166060860152166080840152151560a0830152151560c082015260e0016102c1565b3480156104e857600080fd5b506105126104f7366004613b43565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016102c1565b61034461052e366004613c9c565b6111b8565b34801561053f57600080fd5b5061034461054e366004613995565b611769565b34801561055f57600080fd5b50600d5461030c906001600160a01b031681565b34801561057f57600080fd5b5061034461058e366004613b60565b611949565b34801561059f57600080fd5b50600c5461030c906001600160a01b031681565b3480156105bf57600080fd5b5061030c6105ce366004613995565b6012602052600090815260409020546001600160a01b031681565b3480156105f557600080fd5b5060095460ff166102b5565b34801561060d57600080fd5b5061030c61061c366004613995565b611969565b34801561062d57600080fd5b50610344611974565b34801561064257600080fd5b50610344610651366004613b43565b611a06565b34801561066257600080fd5b50610512610671366004613b43565b611b3e565b34801561068257600080fd5b50610344611b9f565b34801561069757600080fd5b506106e16106a6366004613995565b600090815260116020526040902060048101546002820154600183015492549093909160ff600160a01b8204811692600160a81b9092041690565b60408051958652602086019490945292840191909152151560608301521515608082015260a0016102c1565b34801561071957600080fd5b506102df611c2f565b34801561072e57600080fd5b5061034461073d366004613da0565b611c3e565b34801561074e57600080fd5b5061034461075d366004613df7565b611d17565b34801561076e57600080fd5b5061034461077d366004613995565b611d22565b34801561078e57600080fd5b5061034461079d366004613e30565b611e8a565b3480156107ae57600080fd5b506103446107bd366004613b43565b611ea1565b3480156107ce57600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561080257600080fd5b506102df610811366004613995565b611fd9565b34801561082257600080fd5b50601054610512565b34801561083757600080fd5b50610512600a5481565b34801561084d57600080fd5b506102b561085c366004613e9c565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561089657600080fd5b506103446108a5366004613995565b612041565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061093d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061098957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606002805461099e90613eca565b80601f01602080910402602001604051908101604052809291908181526020018280546109ca90613eca565b8015610a175780601f106109ec57610100808354040283529160200191610a17565b820191906000526020600020905b8154815290600101906020018083116109fa57829003601f168201915b5050505050905090565b6000610a2c82612150565b506000828152600660205260409020546001600160a01b0316610989565b610a55828233612189565b5050565b60606000610a6686612196565b90507fffffffff00000000000000000000000000000000000000000000000000000000600035811690821603610b095760405162461bcd60e51b815260206004820152603d60248201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060448201527f657865637574654d6574615472616e73616374696f6e206d6574686f6400000060648201526084015b60405180910390fd5b604080516060810182526001600160a01b03891660008181526001602090815290849020548352820152908101879052610b4688828888886121b1565b610bb85760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360448201527f68000000000000000000000000000000000000000000000000000000000000006064820152608401610b00565b6001600160a01b038816600090815260016020819052604090912054610bdd91613f1a565b6001600160a01b0389166000908152600160209081526040808320939093559151909182913091610c12918c918e9101613f2d565b60408051601f1981840301815290829052610c2c91613f64565b6000604051808303816000865af19150503d8060008114610c69576040519150601f19603f3d011682016040523d82523d6000602084013e610c6e565b606091505b509150915081610cc05760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c000000006044820152606401610b00565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b604051610cf393929190613f80565b60405180910390a19998505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d3a61224f565b6001600160a01b031614610d905760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b6001600160a01b038116610de65760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610b00565b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040513091907f5ca4aeaf5ab178bf08d3e1eb491b9a13a2de5b100038437cf5ed0e361fff8f3790600090a350565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e7261224f565b6001600160a01b031614610ec85760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b6001600160a01b038116610f1e5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610b00565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040513091907fb6f78fe449cc310adeef201f18b6afe9569041a997be6b619607692854999c8190600090a350565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610faa61224f565b6001600160a01b0316146110005760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b6001600160a01b0381166110565760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610b00565b600c546001600160a01b03166110ae5760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a206e6f742064656669656e64207072656d69756d506f6f6c00006044820152606401610b00565b600c546013546110cb9183916001600160a01b03909116906122ab565b600c546040516001600160a01b0391821681529082169030907fc571353a8852cd132c515d367a4fa7c21e9c38baf9c7e9818f59d40b2b156b7c9060200160405180910390a350565b6001600160a01b03821661113e57604051633250574960e11b815260006004820152602401610b00565b600061114b83833361241a565b9050836001600160a01b0316816001600160a01b0316146111b2576040517f64283d7b0000000000000000000000000000000000000000000000000000000081526001600160a01b0380861660048301526024820184905282166044820152606401610b00565b50505050565b6111c0612520565b6111c861255d565b8951806112175760405162461bcd60e51b815260206004820152601060248201527f556e6f52653a206e6f20706f6c696379000000000000000000000000000000006044820152606401610b00565b8b51811461128d5760405162461bcd60e51b815260206004820152602760248201527f556e6f52653a206e6f206d617463682070726f746f636f6c496473207769746860448201527f20617373657473000000000000000000000000000000000000000000000000006064820152608401610b00565b895181146113035760405162461bcd60e51b815260206004820152602f60248201527f556e6f52653a206e6f206d617463682070726f746f636f6c496473207769746860448201527f20636f766572616765416d6f756e7400000000000000000000000000000000006064820152608401610b00565b885181146113795760405162461bcd60e51b815260206004820152603160248201527f556e6f52653a206e6f206d617463682070726f746f636f6c496473207769746860448201527f20636f7665726167654475726174696f6e0000000000000000000000000000006064820152608401610b00565b600061138e898d8c8e8c8c8c8c8c8c336125a0565b90506001600160a01b038116158015906113b55750600e546001600160a01b038281169116145b6114015760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20696e76616c6964207369676e657200000000000000000000006044820152606401610b00565b42881115801561141b5750600a546114198942613fb5565b105b6114675760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207369676e6174757265206578706972656400000000000000006044820152606401610b00565b60006001600160a01b0388166115df57600b546040517f531a2211000000000000000000000000000000000000000000000000000000008152600481018c90526001600160a01b039091169063531a221190602401602060405180830381865afa1580156114d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fd9190613fc8565b90508034101561154f5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a20696e73756666696369656e74207061696400000000000000006044820152606401610b00565b803411156115715761157161156261224f565b61156c8334613fb5565b6126df565b600c60009054906101000a90046001600160a01b03166001600160a01b031663bc181416826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156115c157600080fd5b505af11580156115d5573d6000803e3d6000fd5b5050505050611741565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b03160361161e57896116ac565b600b546040517fa9a12d430000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152602482018d90529091169063a9a12d4390604401602060405180830381865afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac9190613fc8565b90506116c1886116ba61224f565b30846127c2565b600c546040517f8c8ac76d0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301526024820184905290911690638c8ac76d90604401600060405180830381600087803b15801561172857600080fd5b505af115801561173c573d6000803e3d6000fd5b505050505b61174f8e8e8e8e858d61293a565b50505061175c6001600855565b5050505050505050505050565b61177161255d565b600d546001600160a01b031661178561224f565b6001600160a01b0316146117db5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b600081815260116020526040902060040154600160a01b900460ff166118435760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a206d61726b656420746f20636c61696d20616c726561647900006044820152606401610b00565b600081815260116020526040902060040154600160a81b900460ff16156118ac5760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20706f6c696379206578706972656400000000000000000000006044820152606401610b00565b600081815260116020526040902060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556118ec81612e7b565b807f048ce8e17c5255ee6428918540ffd64ab271d402ec9f5cdc6976d66043b174ab601160008481526020019081526020016000206002015460405161193491815260200190565b60405180910390a26119466001600855565b50565b61196483838360405180602001604052806000815250611e8a565b505050565b600061098982612150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166119a661224f565b6001600160a01b0316146119fc5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b611a04612eb6565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a3861224f565b6001600160a01b031614611a8e5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b6001600160a01b038116611ae45760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610b00565b600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040513091907f8e2c76c578fb1494886741ea1b707ab0b9b0f8001354273d5b491bd68299720e90600090a350565b60006001600160a01b038216611b83576040517f89c62b6400000000000000000000000000000000000000000000000000000000815260006004820152602401610b00565b506001600160a01b031660009081526005602052604090205490565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611bd161224f565b6001600160a01b031614611c275760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b611a04612f08565b60606003805461099e90613eca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c7061224f565b6001600160a01b031614611cc65760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b600f611cd28282614029565b50306001600160a01b03167f970aa99b4d9e40ecd777dc926534019dbf26bef2c6021c90c036984b5a9e0fde82604051611d0c9190613982565b60405180910390a250565b610a55338383612f45565b611d2a61255d565b600d546001600160a01b0316611d3e61224f565b6001600160a01b031614611d945760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b600081815260116020526040902060040154600160a01b900460ff16611dfc5760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a206d61726b656420746f20636c61696d20616c726561647900006044820152606401610b00565b600081815260116020526040902060040180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b179055611e4281612e7b565b807f184fb82e16552a73263d53d4dcb23c8300d042a0578b8633d30680ac2f09f076601160008481526020019081526020016000206002015460405161193491815260200190565b611e95848484611114565b6111b284848484612ffd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611ed361224f565b6001600160a01b031614611f295760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b6001600160a01b038116611f7f5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610b00565b600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040513091907f8dadc789ed91201272dd8c71737c6f84bb2d72bca3f5ec01601694cda82868c090600090a350565b6060611fe482612150565b506000611fef613169565b9050600081511161200f576040518060200160405280600081525061203a565b8061201984613178565b60405160200161202a9291906140e9565b6040516020818303038152906040525b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661207361224f565b6001600160a01b0316146120c95760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e000000006044820152606401610b00565b600081116121195760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a207a65726f206d6178207369676e656454696d650000000000006044820152606401610b00565b600a81905560405181815230907fef0e0784016a6db87327a652697e3f4ff408f7e7951378b26c113979017f7f0290602001611d0c565b6000818152600460205260408120546001600160a01b03168061098957604051637e27328960e01b815260048101849052602401610b00565b6119648383836001613218565b600081516000036121a957506000919050565b506020015190565b6000806121c56121c087613363565b6133e0565b905060006121d582858888613424565b90506001600160a01b03811661222d5760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610b00565b876001600160a01b0316816001600160a01b0316149250505095945050505050565b60003033036122a557600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506122a89050565b50335b90565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905291516000928392908716916123359190613f64565b6000604051808303816000865af19150503d8060008114612372576040519150601f19603f3d011682016040523d82523d6000602084013e612377565b606091505b50915091508180156123a15750805115806123a15750808060200190518101906123a19190614118565b6124135760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c65640000000000000000000000000000000000000000006064820152608401610b00565b5050505050565b6000828152600460205260408120546001600160a01b039081169083161561244757612447818486613452565b6001600160a01b0381161561248557612464600085600080613218565b6001600160a01b038116600090815260056020526040902080546000190190555b6001600160a01b038516156124b4576001600160a01b0385166000908152600560205260409020805460010190555b600084815260046020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b60095460ff1615611a04576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260085403612599576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600855565b6000808c8c8c8c8c8c8989466040516020016125c499989796959493929190614168565b60408051601f198184030181529181528151602092830120600081815260129093529120549091506001600160a01b0316156126425760405162461bcd60e51b815260206004820152601160248201527f416c7265616479207573656420686173680000000000000000000000000000006044820152606401610b00565b6000818152601260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03881617905580517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081840152603c80820186905282518083039091018152605c9091019091528051910120906126cc82888b8b613424565b9f9e505050505050505050505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516127099190613f64565b60006040518083038185875af1925050503d8060008114612746576040519150601f19603f3d011682016040523d82523d6000602084013e61274b565b606091505b50509050806119645760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608401610b00565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916128549190613f64565b6000604051808303816000865af19150503d8060008114612891576040519150601f19603f3d011682016040523d82523d6000602084013e612896565b606091505b50915091508180156128c05750805115806128c05750808060200190518101906128c09190614118565b6129325760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610b00565b505050505050565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663222a5df66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c79190614118565b905060005b8c51811015612ded5760106000015496508b81815181106129ef576129ef6141f7565b602002602001015195508a8181518110612a0b57612a0b6141f7565b602002602001015194508c8181518110612a2757612a276141f7565b602002602001015193508d8181518110612a4357612a436141f7565b6020026020010151925060008a905060008315612bca576040517f6c18443d0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636c18443d90602401602060405180830381865afa158015612ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b02919061420d565b905061ffff811615612bc4576040517fbbd9d8e100000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bbd9d8e1906024016040805180830381865afa158015612b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb59190614231565b91505080612bc257600192505b505b50612bce565b5060015b80612c1b5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a20756e617661696c61626c6520706f6c696379000000000000006044820152606401610b00565b6040518060e00160405280428152602001888152602001898152602001876001600160a01b031681526020018c6001600160a01b0316815260200160011515815260200160001515815250601160008b815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c08201518160040160156101000a81548160ff021916908315150217905550905050612d45612d3f61224f565b8a6134cf565b612d4f888b613f1a565b995088856001600160a01b0316612d6461224f565b6001600160a01b03167f15c2b464a5dd92b73eb56515f6c99c04fbeec68d56dda66903c8a136d53e27f18e8a8d8d89604051612dd09594939291906001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60405180910390a4612de2601061354d565b5050506001016129cc565b508615612e6c57600d546040517fa0931af2000000000000000000000000000000000000000000000000000000008152600481018990526001600160a01b039091169063a0931af290602401600060405180830381600087803b158015612e5357600080fd5b505af1158015612e67573d6000803e3d6000fd5b505050505b50505050505050505050505050565b6000612e8a600083600061241a565b90506001600160a01b038116610a5557604051637e27328960e01b815260048101839052602401610b00565b612ebe613570565b6009805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b612f10612520565b6009805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612eeb3390565b6001600160a01b038216612f90576040517f5b08ba180000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610b00565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156111b2576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063150b7a0290613058903390889087908790600401614260565b6020604051808303816000875af1925050508015613093575060408051601f3d908101601f191682019092526130909181019061429c565b60015b6130fc573d8080156130c1576040519150601f19603f3d011682016040523d82523d6000602084013e6130c6565b606091505b5080516000036130f457604051633250574960e11b81526001600160a01b0385166004820152602401610b00565b805181602001fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081167f150b7a02000000000000000000000000000000000000000000000000000000001461241357604051633250574960e11b81526001600160a01b0385166004820152602401610b00565b6060600f805461099e90613eca565b60606000613185836135ac565b600101905060008167ffffffffffffffff8111156131a5576131a56139ff565b6040519080825280601f01601f1916602001820160405280156131cf576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846131d957509392505050565b808061322c57506001600160a01b03821615155b1561332657600061323c84612150565b90506001600160a01b038316158015906132685750826001600160a01b0316816001600160a01b031614155b801561329a57506001600160a01b0380821660009081526007602090815260408083209387168352929052205460ff16155b156132dc576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610b00565b81156133245783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b50506000908152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006040518060800160405280604381526020016142d060439139805160209182012083518483015160408087015180519086012090516133c3950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b600080546040517f190100000000000000000000000000000000000000000000000000000000000060208201526022810191909152604281018390526062016133c3565b6000806000806134368888888861368e565b925092509250613446828261375d565b50909695505050505050565b61345d838383613861565b611964576001600160a01b03831661348b57604051637e27328960e01b815260048101829052602401610b00565b6040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260248101829052604401610b00565b6001600160a01b0382166134f957604051633250574960e11b815260006004820152602401610b00565b60006135078383600061241a565b90506001600160a01b03811615611964576040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260006004820152602401610b00565b600060018260000160008282546135649190613f1a565b90915550509054919050565b60095460ff16611a04576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106135f5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310613621576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061363f57662386f26fc10000830492506010015b6305f5e1008310613657576305f5e100830492506008015b612710831061366b57612710830492506004015b6064831061367d576064830492506002015b600a83106109895760010192915050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156136c95750600091506003905082613753565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561371d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661374957506000925060019150829050613753565b9250600091508190505b9450945094915050565b6000826003811115613771576137716142b9565b0361377a575050565b600182600381111561378e5761378e6142b9565b036137c5576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028260038111156137d9576137d96142b9565b03613813576040517ffce698f700000000000000000000000000000000000000000000000000000000815260048101829052602401610b00565b6003826003811115613827576138276142b9565b03610a55576040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260048101829052602401610b00565b60006001600160a01b038316158015906138df5750826001600160a01b0316846001600160a01b031614806138bb57506001600160a01b0380851660009081526007602090815260408083209387168352929052205460ff165b806138df57506000828152600660205260409020546001600160a01b038481169116145b949350505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461194657600080fd5b60006020828403121561392757600080fd5b813561203a816138e7565b60005b8381101561394d578181015183820152602001613935565b50506000910152565b6000815180845261396e816020860160208601613932565b601f01601f19169290920160200192915050565b60208152600061203a6020830184613956565b6000602082840312156139a757600080fd5b5035919050565b6001600160a01b038116811461194657600080fd5b80356139ce816139ae565b919050565b600080604083850312156139e657600080fd5b82356139f1816139ae565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613a3e57613a3e6139ff565b604052919050565b600067ffffffffffffffff831115613a6057613a606139ff565b613a736020601f19601f86011601613a15565b9050828152838383011115613a8757600080fd5b828260208301376000602084830101529392505050565b600082601f830112613aaf57600080fd5b61203a83833560208501613a46565b803560ff811681146139ce57600080fd5b600080600080600060a08688031215613ae757600080fd5b8535613af2816139ae565b9450602086013567ffffffffffffffff811115613b0e57600080fd5b613b1a88828901613a9e565b9450506040860135925060608601359150613b3760808701613abe565b90509295509295909350565b600060208284031215613b5557600080fd5b813561203a816139ae565b600080600060608486031215613b7557600080fd5b8335613b80816139ae565b92506020840135613b90816139ae565b929592945050506040919091013590565b600067ffffffffffffffff821115613bbb57613bbb6139ff565b5060051b60200190565b600082601f830112613bd657600080fd5b81356020613beb613be683613ba1565b613a15565b8083825260208201915060208460051b870101935086841115613c0d57600080fd5b602086015b84811015613c32578035613c25816139ae565b8352918301918301613c12565b509695505050505050565b600082601f830112613c4e57600080fd5b81356020613c5e613be683613ba1565b8083825260208201915060208460051b870101935086841115613c8057600080fd5b602086015b84811015613c325780358352918301918301613c85565b60008060008060008060008060008060006101608c8e031215613cbe57600080fd5b67ffffffffffffffff808d351115613cd557600080fd5b613ce28e8e358f01613bc5565b9b508060208e01351115613cf557600080fd5b613d058e60208f01358f01613bc5565b9a508060408e01351115613d1857600080fd5b613d288e60408f01358f01613c3d565b99508060608e01351115613d3b57600080fd5b50613d4c8d60608e01358e01613c3d565b975060808c0135965060a08c01359550613d6860c08d016139c3565b945060e08c013593506101008c01359250613d866101208d01613abe565b91506101408c013590509295989b509295989b9093969950565b600060208284031215613db257600080fd5b813567ffffffffffffffff811115613dc957600080fd5b8201601f81018413613dda57600080fd5b6138df84823560208401613a46565b801515811461194657600080fd5b60008060408385031215613e0a57600080fd5b8235613e15816139ae565b91506020830135613e2581613de9565b809150509250929050565b60008060008060808587031215613e4657600080fd5b8435613e51816139ae565b93506020850135613e61816139ae565b925060408501359150606085013567ffffffffffffffff811115613e8457600080fd5b613e9087828801613a9e565b91505092959194509250565b60008060408385031215613eaf57600080fd5b8235613eba816139ae565b91506020830135613e25816139ae565b600181811c90821680613ede57607f821691505b602082108103613efe57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561098957610989613f04565b60008351613f3f818460208801613932565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60008251613f76818460208701613932565b9190910192915050565b60006001600160a01b03808616835280851660208401525060606040830152613fac6060830184613956565b95945050505050565b8181038181111561098957610989613f04565b600060208284031215613fda57600080fd5b5051919050565b601f821115611964576000816000526020600020601f850160051c8101602086101561400a5750805b601f850160051c820191505b8181101561293257828155600101614016565b815167ffffffffffffffff811115614043576140436139ff565b614057816140518454613eca565b84613fe1565b602080601f83116001811461408c57600084156140745750858301515b600019600386901b1c1916600185901b178555612932565b600085815260208120601f198616915b828110156140bb5788860151825594840194600190910190840161409c565b50858210156140d95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600083516140fb818460208801613932565b83519083019061410f818360208801613932565b01949350505050565b60006020828403121561412a57600080fd5b815161203a81613de9565b60008151602080840160005b8381101561415d57815187529582019590820190600101614141565b509495945050505050565b898152600060208083018b5160208d0160005b828110156141a05781516001600160a01b03168452928401929084019060010161417b565b5050506141b66141b0828d614135565b8b614135565b9889525050506bffffffffffffffffffffffff19606095861b81166020880152603487019490945250921b1660548301526068820152608801949350505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561421f57600080fd5b815161ffff8116811461203a57600080fd5b6000806040838503121561424457600080fd5b825161424f816139ae565b6020840151909250613e2581613de9565b60006001600160a01b038087168352808616602084015250836040830152608060608301526142926080830184613956565b9695505050505050565b6000602082840312156142ae57600080fd5b815161203a816138e7565b634e487b7160e01b600052602160045260246000fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a26469706673582212201e856e0e0b0f7970a57de55fc5c8853181533ba12d0574fef576874989c1c51464736f6c63430008170033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429a264697066735822122034d61eafc9438841fa966a9b70fbc007abe84f690ddb08b547b4a0f8521b097164736f6c63430008170033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3332,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1395,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15872,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "checkIfProtocolInWhitelistArray",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 15874,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "premiumPool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15876,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15878,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "capitalAgent",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 15880,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "salesPolicy",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 15885,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "getProtocol",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_struct(Protocol)15869_storage)"
      },
      {
        "astId": 15890,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "getProtocolId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 15893,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "protocolIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)17745_storage"
      },
      {
        "astId": 15895,
        "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
        "label": "usdcToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_struct(Protocol)15869_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct SalesPolicyFactory.Protocol)",
        "numberOfBytes": "32",
        "value": "t_struct(Protocol)15869_storage"
      },
      "t_struct(Counter)17745_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 17744,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "current",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Protocol)15869_storage": {
        "encoding": "inplace",
        "label": "struct SalesPolicyFactory.Protocol",
        "members": [
          {
            "astId": 15866,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "protocolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15868,
            "contract": "contracts/factories/SalesPolicyFactory.sol:SalesPolicyFactory",
            "label": "isBlackList",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}