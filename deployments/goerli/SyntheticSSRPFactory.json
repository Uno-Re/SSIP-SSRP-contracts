{
  "address": "0x3b0f1dD9Ac943dD3d870dF54E2ddf082225747D8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "newSyntheticSSRP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x58b634ebdbefdb3c94806f2cbfcb9e66ccca89b6e909d190ad211504e068155a",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0x3b0f1dD9Ac943dD3d870dF54E2ddf082225747D8",
    "transactionIndex": 5,
    "gasUsed": "2343381",
    "logsBloom": "0x
    "blockHash": "0xb4d4a40f7fa626741c0c3068a1e1ef576e1a58f99f8071a616d4b35ec2ebe1fd",
    "transactionHash": "0x58b634ebdbefdb3c94806f2cbfcb9e66ccca89b6e909d190ad211504e068155a",
    "logs": [],
    "blockNumber": 10399735,
    "cumulativeGasUsed": "2787220",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d2fc875e3afcbd9499ae3f5e7a33f9ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"newSyntheticSSRP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/SyntheticSSRPFactory.sol\":\"SyntheticSSRPFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/SyntheticSSRP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/ISyntheticSSRP.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SyntheticSSRP is ISyntheticSSRP, ReentrancyGuard, AccessControl, Pausable {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant BOT_ROLE = keccak256(\\\"BOT_ROLE\\\");\\n\\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\\n\\n    uint256 public lockTime = 10 days;\\n\\n    address public migrateTo;\\n    address public rewarder;\\n    address public lpToken;\\n    bool public killed;\\n\\n    uint256 lastRewardBlock;\\n    uint256 accRewardPerShare;\\n    uint256 public rewardPerBlock;\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n        uint256 pendingWithdrawAmount;\\n        bool isNotRollOver;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public totalStakedLPAmount;\\n    uint256 public totalWithdrawPending;\\n\\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accRewardPerShare);\\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\\n    event LogCreateRewarder(address indexed _SSRP, address indexed _rewarder, address _currency);\\n    event LogSetRewardPerBlock(address indexed _pool, uint256 _rewardPerBlock);\\n    event LogSetMigrateTo(address indexed _pool, address indexed _migrateTo);\\n    event LogSetLockTime(address indexed _pool, uint256 _lockTime);\\n    event LogMigrate(address indexed _user, address indexed _pool, address indexed _migrateTo, uint256 amount);\\n    event PoolAlived(address indexed _owner, bool _alive);\\n    event KillPool(address indexed _owner, bool _killed);\\n    event RollOverReward(address indexed _pool, address[] indexed _staker, uint256 _amount);\\n\\n    constructor(address _lpToken, address _multiSigWallet) {\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multiSigWallet address\\\");\\n        require(_lpToken != address(0), \\\"UnoRe: zero lp token address\\\");\\n        lpToken = _lpToken;\\n        rewardPerBlock = 1e18;\\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n    }\\n\\n    modifier isAlive() {\\n        require(!killed, \\\"UnoRe: pool is killed\\\");\\n        _;\\n    }\\n\\n    function pause() external onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unPause() external onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    function killPool() external onlyRole(ADMIN_ROLE) {\\n        killed = true;\\n        emit KillPool(msg.sender, true);\\n    }\\n\\n    function revivePool() external onlyRole(ADMIN_ROLE) {\\n        killed = false;\\n        emit PoolAlived(msg.sender, false);\\n    }\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyRole(ADMIN_ROLE) {\\n        require(_rewardPerBlock > 0, \\\"UnoRe: zero value\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n        emit LogSetRewardPerBlock(address(this), _rewardPerBlock);\\n    }\\n\\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n        emit LogSetMigrateTo(address(this), _migrateTo);\\n    }\\n\\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) {\\n        require(_lockTime > 0, \\\"UnoRe: not allow zero lock time\\\");\\n        lockTime = _lockTime;\\n        emit LogSetLockTime(address(this), _lockTime);\\n    }\\n\\n    function createRewarder(address _operator, address _factory, address _currency) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        require(_operator != address(0), \\\"UnoRe: zero operator address\\\");\\n        require(_currency != address(0), \\\"UnoRe: zero currency address\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    function migrate() external isAlive nonReentrant {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        if (\\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime\\n        ) {\\n            _leaveFromPending();\\n        } else {\\n            _cancelWithdrawRequest();\\n        }\\n        uint256 amount = userInfo[msg.sender].amount;\\n        TransferHelper.safeTransfer(lpToken, migrateTo, amount);\\n        IMigration(migrateTo).onMigration(msg.sender, amount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n        emit LogMigrate(msg.sender, address(this), migrateTo, amount);\\n    }\\n\\n    function pendingReward(address _to) external view returns (uint256 pending) {\\n        uint256 currentAccRewardPerShare = accRewardPerShare;\\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\\n            uint256 blocks = block.number - lastRewardBlock;\\n            uint256 rewardAmount = blocks * rewardPerBlock;\\n            currentAccRewardPerShare = accRewardPerShare + (rewardAmount * ACC_REWARD_PRECISION) / totalStakedLPAmount;\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * currentAccRewardPerShare) / ACC_REWARD_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    function updatePool() public override {\\n        if (block.number > lastRewardBlock) {\\n            if (totalStakedLPAmount > 0) {\\n                uint256 blocks = block.number - lastRewardBlock;\\n                uint256 rewardAmount = blocks * rewardPerBlock;\\n                accRewardPerShare = accRewardPerShare + ((rewardAmount * ACC_REWARD_PRECISION) / totalStakedLPAmount);\\n            }\\n            lastRewardBlock = block.number;\\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accRewardPerShare);\\n        }\\n    }\\n\\n    function toggleRollOver() external {\\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\\n    }\\n\\n    function enterInPool(uint256 _amount) external override isAlive nonReentrant {\\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\\n        _enterInPool(_amount, msg.sender);\\n        emit LogStakedInPool(msg.sender, address(this), _amount);\\n    }\\n\\n    function rollOverReward(address[] memory _to) external isAlive onlyRole(BOT_ROLE) nonReentrant {\\n        require(lpToken == IRewarder(rewarder).currency(), \\\"UnoRe: currency not matched\\\");\\n        updatePool();\\n\\n        uint256 _totalPendingReward;\\n        uint256 _accumulatedAmount;\\n        for (uint256 i; i < _to.length; i++) {\\n            require(!userInfo[_to[i]].isNotRollOver, \\\"UnoRe: rollover is not set\\\");\\n\\n            uint256 _pendingReward = _updateReward(_to[i]);\\n            _totalPendingReward += _pendingReward;\\n            _accumulatedAmount += userInfo[_to[i]].amount;\\n            _enterInPool(_pendingReward, _to[i]);\\n        }\\n\\n        if (rewarder != address(0) && _totalPendingReward > 0) {\\n            IRewarder(rewarder).onRewardForRollOver(address(this), _totalPendingReward, _accumulatedAmount);\\n        }\\n\\n        emit RollOverReward(address(this), _to, _totalPendingReward);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\\n        // Withdraw desired amount from pool\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        require(amount - pendingWR >= _amount, \\\"UnoRe: withdraw amount overflow\\\");\\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n\\n        totalWithdrawPending = totalWithdrawPending + _amount;\\n\\n        emit LogLeftPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending() external override whenNotPaused nonReentrant {\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        _leaveFromPending();\\n    }\\n\\n    function _leaveFromPending() private {\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n\\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\\n\\n        userInfo[msg.sender].rewardDebt = accumulatedReward - ((pendingWR * accRewardPerShare) / ACC_REWARD_PRECISION);\\n        userInfo[msg.sender].amount = amount - pendingWR;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\\n    }\\n\\n    function harvest(address _to) external override whenNotPaused isAlive nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n\\n        uint256 _pendingReward = _updateReward(_to);\\n\\n        if (rewarder != address(0) && _pendingReward > 0) {\\n            IRewarder(rewarder).onReward(_to, _pendingReward);\\n        }\\n\\n        emit LogHarvest(msg.sender, _to, _pendingReward);\\n    }\\n\\n    function _updateReward(address _to) internal returns (uint256) {\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        uint256 _pendingReward = accumulatedReward - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[_to].rewardDebt = accumulatedReward;\\n        return _pendingReward;\\n    }\\n\\n    function _enterInPool(uint256 _amount, address _to) internal {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        userInfo[_to].rewardDebt = userInfo[_to].rewardDebt + (_amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        userInfo[_to].amount = userInfo[_to].amount + _amount;\\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\\n    }\\n\\n    function cancelWithdrawRequest() external nonReentrant {\\n        _cancelWithdrawRequest();\\n    }\\n\\n    function _cancelWithdrawRequest() private {\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\\n    }\\n}\\n\",\"keccak256\":\"0x1c0aa4d5a8f3f24aa6c345bda8ee81b5676d79b1c4780ae25f0c1e2901e06055\",\"license\":\"GPL-3.0\"},\"contracts/factories/SyntheticSSRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\nimport \\\"../SyntheticSSRP.sol\\\";\\nimport \\\"../interfaces/ISyntheticSSRPFactory.sol\\\";\\n\\ncontract SyntheticSSRPFactory is ISyntheticSSRPFactory {\\n    constructor() {}\\n\\n    function newSyntheticSSRP(address _multiSigWallet, address _lpToken) external override returns (address) {\\n        SyntheticSSRP _ssip = new SyntheticSSRP(_lpToken, _multiSigWallet);\\n        address _ssipAddr = address(_ssip);\\n        return _ssipAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x4cd0eb4a8317da049668a3efe078a02b64cb5f2138ef4a3dd519393faa7737ce\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface IMigration {\\n    function onMigration(address who_, uint256 amount_, bytes memory data_) external;\\n}\\n\",\"keccak256\":\"0x188d20aa6fe4544987fe651e4cd7c7068c1d42b5d5b9630f7385d1abe931ed0a\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n\\n    function onRewardForRollOver(address to, uint256 unoAmount, uint256 accumulatedAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x28b10a4d8660aaa04cea9c4295f513d0db7a21b60f125dd7af3952e072734aca\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(address _operator, address _currency, address _pool) external returns (address);\\n}\\n\",\"keccak256\":\"0xb2169c5d0bf598726c67dfdc8bceab45390d7514afd6463b52efccd1b6bbd78e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSRP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISyntheticSSRP {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n}\\n\",\"keccak256\":\"0x97406c17fd0bab289f1ce68ebd753ab7342c84aeac1e41230cfcc689eecd8a44\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISyntheticSSRPFactory {\\n    function newSyntheticSSRP(address _multiSigWallet, address _lpToken) external returns (address);\\n}\\n\",\"keccak256\":\"0xf363cec8ab9305d055b73de4f40b2fd8161f91f8f57619d43599278d53a9ab5a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806377b3d99714610030575b600080fd5b61004361003e3660046100fc565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600080828460405161007d906100c6565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604001604051809103906000f0801580156100bd573d6000803e3d6000fd5b50949350505050565b61282a8061013083390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100f757600080fd5b919050565b6000806040838503121561010f57600080fd5b610118836100d3565b9150610126602084016100d3565b9050925092905056fe6080604052620d2f006003553480156200001857600080fd5b506040516200282a3803806200282a8339810160408190526200003b91620002ab565b60016000556002805460ff191690556001600160a01b038116620000b15760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a207a65726f206d756c746953696757616c6c6574206164647265604482015261737360f01b60648201526084015b60405180910390fd5b6001600160a01b038216620001095760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206c7020746f6b656e2061646472657373000000006044820152606401620000a8565b600680546001600160a01b0319166001600160a01b038416179055670de0b6b3a76400006009556200014b6000805160206200280a83398151915282620001aa565b50620001877f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b6000805160206200280a83398151915262000241565b620001a26000805160206200280a8339815191528062000241565b5050620002e3565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16620002375760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016200023b565b5060005b92915050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b80516001600160a01b0381168114620002a657600080fd5b919050565b60008060408385031215620002bf57600080fd5b620002ca836200028e565b9150620002da602084016200028e565b90509250929050565b61251780620002f36000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80638ae39cac11610160578063bc8f8828116100d8578063e3161ddd1161008c578063f40f0f5211610071578063f40f0f52146105ac578063f7b188a5146105bf578063fd91db96146105c757600080fd5b8063e3161ddd14610591578063e3824a381461059957600080fd5b8063d547741f116100bd578063d547741f14610563578063dcc3e06e14610576578063e19e71681461058957600080fd5b8063bc8f88281461054c578063d1c6a2311461055457600080fd5b8063a217fddf1161012f578063af16d6e011610114578063af16d6e0146104ff578063b150377414610512578063bb872b4a1461053957600080fd5b8063a217fddf146104e4578063ae04d45d146104ec57600080fd5b80638ae39cac146104875780638fd3ab801461049057806391d148541461049857806398c6e760146104d157600080fd5b806336642c211161020e57806375b238fc116101c25780637da2a4a7116101a75780637da2a4a7146104455780638395206c1461046c5780638456cb591461047f57600080fd5b806375b238fc146104165780637a39b8d81461043d57600080fd5b80635fcbd285116101f35780635fcbd285146103d057806367755415146103fb578063736ec05c1461040357600080fd5b806336642c21146103bc5780635c975abb146103c557600080fd5b80631959a00211610265578063248a9ca31161024a578063248a9ca3146103725780632f2ff15d1461039657806336568abe146103a957600080fd5b80631959a002146102f45780631f3a0e411461035e57600080fd5b806301ffc9a7146102975780630d668087146102bf5780630e5c011e146102d657806313a10036146102eb575b600080fd5b6102aa6102a5366004612178565b6105da565b60405190151581526020015b60405180910390f35b6102c860035481565b6040519081526020016102b6565b6102e96102e43660046121e6565b610673565b005b6102c8600b5481565b6103346103023660046121e6565b600a60205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a0016102b6565b6006546102aa90600160a01b900460ff1681565b6102c8610380366004612203565b6000908152600160208190526040909120015490565b6102e96103a436600461221c565b6106f8565b6102e96103b736600461221c565b610724565b6102c8600c5481565b60025460ff166102aa565b6006546103e3906001600160a01b031681565b6040516001600160a01b0390911681526020016102b6565b6102e9610775565b6102e96104113660046121e6565b610801565b6102c87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6102e96108e6565b6102e9336000908152600a60205260409020600401805460ff19811660ff90911615179055565b6102e961047a366004612203565b610971565b6102e9610a81565b6102c860095481565b6102e9610ab3565b6102aa6104a636600461221c565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6004546103e3906001600160a01b031681565b6102c8600081565b6102e96104fa366004612203565b610cef565b6102e961050d36600461224c565b610da8565b6102c87f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b81565b6102e9610547366004612203565b610fe8565b6102e9611099565b6102c8670de0b6b3a764000081565b6102e961057136600461221c565b61112f565b6005546103e3906001600160a01b031681565b6102e9611155565b6102e9611165565b6102e96105a7366004612203565b61121d565b6102c86105ba3660046121e6565b6112e2565b6102e96113a8565b6102e96105d53660046122ad565b6113da565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061066d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b61067b61179c565b600654600160a01b900460ff16156106da5760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20706f6f6c206973206b696c6c6564000000000000000000000060448201526064015b60405180910390fd5b6106e26117d9565b6106eb8161181c565b6106f56001600055565b50565b6000828152600160208190526040909120015461071481611927565b61071e8383611931565b50505050565b6001600160a01b0381163314610766576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077082826119c4565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561079f81611927565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040516000815233907f77337fcf1b48e6e024b256962b66c49de98c9f606b2cd9937cc0edbc7a0fb709906020015b60405180910390a250565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561082b81611927565b6001600160a01b0382166108815760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f20616464726573730000000000000000000000000060448201526064016106d1565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915560405130907f877238238dbd7134e89b00809ea73fabb50da117ace807a6b31c733bbf55d36990600090a35050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561091081611927565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790556040516001815233907f7c952f2e528aa25b4eaf8b6c07af29184b27ce591295e543ced0a27b167dc794906020016107f6565b6109796117d9565b6109823361181c565b336000908152600a602052604090206002810154600390910154826109a782846123a6565b10156109f55760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f770060448201526064016106d1565b336000908152600a6020526040902060030154610a139084906123b9565b336000908152600a602052604090206003810191909155429055600c54610a3b9084906123b9565b600c55604051838152309033907fd60ea263bba686471127787b82c1f8b19bddbd87f52b83498879e720d839d51f9060200160405180910390a350506106f56001600055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610aab81611927565b6106f5611a4b565b600654600160a01b900460ff1615610b0d5760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20706f6f6c206973206b696c6c6564000000000000000000000060448201526064016106d1565b610b156117d9565b6004546001600160a01b0316610b6d5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f20616464726573730000000000000000000000000060448201526064016106d1565b610b763361181c565b336000908152600a602052604090206003015415801590610bb25750600354336000908152600a6020526040902054610baf90426123a6565b10155b15610bc457610bbf611aa0565b610bcc565b610bcc611bbc565b336000908152600a6020526040902060020154600654600454610bfc916001600160a01b03908116911683611c1e565b600480546040517fed59344b00000000000000000000000000000000000000000000000000000000815233928101929092526024820183905260606044830152600060648301526001600160a01b03169063ed59344b90608401600060405180830381600087803b158015610c7057600080fd5b505af1158015610c84573d6000803e3d6000fd5b5050336000818152600a602090815260408083206002019290925560045491518681526001600160a01b0390921694503093507f49208a4dfe6cade3e0d45c2c52e5e68917971aeb5714c4b3151c74337e9e860f910160405180910390a450610ced6001600055565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d1981611927565b60008211610d695760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d650060448201526064016106d1565b600382905560405182815230907f2c2c43c64e937ae35257af782c222986dc5adb4f56dc0881594e79bf83658d8c906020015b60405180910390a25050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610dd281611927565b610dda6117d9565b6001600160a01b038316610e305760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a20726577617264657220666163746f7279206e6f20657869737460448201526064016106d1565b6001600160a01b038416610e865760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206f70657261746f7220616464726573730000000060448201526064016106d1565b6001600160a01b038216610edc5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f2063757272656e637920616464726573730000000060448201526064016106d1565b6040517f69ee74510000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015283811660248301523060448301528416906369ee7451906064016020604051808303816000875af1158015610f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6f91906123cc565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392831690811790915560405191841682529030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b9060200160405180910390a361071e6001600055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561101281611927565b600082116110625760405162461bcd60e51b815260206004820152601160248201527f556e6f52653a207a65726f2076616c756500000000000000000000000000000060448201526064016106d1565b600982905560405182815230907f5cd67ede94fe3507535f0408ae70afe426103c9d5d51a909bd9dbd931e09875c90602001610d9c565b6110a161179c565b6110a96117d9565b600354336000908152600a60205260409020546110c690426123a6565b10156111145760405162461bcd60e51b815260206004820152601260248201527f556e6f52653a204c6f636b65642074696d65000000000000000000000000000060448201526064016106d1565b61111d3361181c565b611125611aa0565b610ced6001600055565b6000828152600160208190526040909120015461114b81611927565b61071e83836119c4565b61115d6117d9565b611125611bbc565b600754431115610ced57600b54156111ce5760006007544361118791906123a6565b905060006009548261119991906123e9565b600b549091506111b1670de0b6b3a7640000836123e9565b6111bb9190612400565b6008546111c891906123b9565b60085550505b436007819055600b54600854604080519384526020840192909252908201527f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f7853906060015b60405180910390a1565b600654600160a01b900460ff16156112775760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20706f6f6c206973206b696c6c6564000000000000000000000060448201526064016106d1565b61127f6117d9565b600654611297906001600160a01b0316333084611d8d565b6112a18133611f05565b604051818152309033907f19db7bd0d4b3b497594ec1221d3c790b31e985baeb3c80851231d930db53578b9060200160405180910390a36106f56001600055565b60085460075460009190431180156112fb5750600b5415155b156113565760006007544361131091906123a6565b905060006009548261132291906123e9565b600b5490915061133a670de0b6b3a7640000836123e9565b6113449190612400565b60085461135191906123b9565b925050505b6001600160a01b0383166000908152600a602052604090206002810154600190910154670de0b6b3a764000061138c84846123e9565b6113969190612400565b6113a091906123a6565b949350505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756113d281611927565b6106f5612004565b600654600160a01b900460ff16156114345760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20706f6f6c206973206b696c6c6564000000000000000000000060448201526064016106d1565b7f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b61145e81611927565b6114666117d9565b600560009054906101000a90046001600160a01b03166001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd91906123cc565b6006546001600160a01b0390811691161461153a5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a2063757272656e6379206e6f74206d617463686564000000000060448201526064016106d1565b611542611165565b60008060005b845181101561168b57600a600086838151811061156757611567612422565b6020908102919091018101516001600160a01b031682528101919091526040016000206004015460ff16156115de5760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a20726f6c6c6f766572206973206e6f742073657400000000000060448201526064016106d1565b60006116028683815181106115f5576115f5612422565b602002602001015161203d565b905061160e81856123b9565b9350600a600087848151811061162657611626612422565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600201548361165d91906123b9565b92506116828187848151811061167557611675612422565b6020026020010151611f05565b50600101611548565b506005546001600160a01b0316158015906116a65750600082115b15611742576005546040517f0d97f74b00000000000000000000000000000000000000000000000000000000815230600482015260248101849052604481018390526001600160a01b0390911690630d97f74b906064016020604051808303816000875af115801561171c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117409190612438565b505b836040516117509190612451565b6040519081900381208382529030907ff1ed90dcc96085d1d901cce2d0746c5c4f60aefb033128edea1426a6013f2a959060200160405180910390a350506117986001600055565b5050565b60025460ff1615610ced576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260005403611815576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b611824611165565b600061182f8261203d565b6005549091506001600160a01b03161580159061184c5750600081115b156118e3576005546040517fc37232880000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529091169063c3723288906044016020604051808303816000875af11580156118bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e19190612438565b505b6040518181526001600160a01b0383169033907f1501dd260e02a8825a24ab4e4875600b0093dd977e06b49bba75faaebe2836479060200160405180910390a35050565b6106f581336120ce565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff166119bc5760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a450600161066d565b50600061066d565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16156119bc5760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161066d565b611a5361179c565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a883390565b6040516001600160a01b039091168152602001611213565b336000908152600a60205260408120600281015460039091015460085491929091670de0b6b3a764000090611ad590856123e9565b611adf9190612400565b600654909150611af9906001600160a01b03163384611c1e565b670de0b6b3a764000060085483611b1091906123e9565b611b1a9190612400565b611b2490826123a6565b336000908152600a6020526040902060010155611b4182846123a6565b336000908152600a602052604081206002810192909255600390910155600c54611b6c9083906123a6565b600c55600b54611b7d9083906123a6565b600b55604051828152309033907f082897d5a3548ef5742607ecedf0f1b9e4c355dcc81c81d5bfda47f2b49084a79060200160405180910390a3505050565b336000908152600a602052604081206003018054919055600c54611be19082906123a6565b600c55604051818152309033907faa15bd4bbb83b4c5e5bf28548326ffc2e718d46db45779599cf4d87b42fbd1049060200160405180910390a350565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691611ca89190612490565b6000604051808303816000865af19150503d8060008114611ce5576040519150601f19603f3d011682016040523d82523d6000602084013e611cea565b606091505b5091509150818015611d14575080511580611d14575080806020019051810190611d1491906124bf565b611d865760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c65640000000000000000000000000000000000000060648201526084016106d1565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691611e1f9190612490565b6000604051808303816000865af19150503d8060008114611e5c576040519150601f19603f3d011682016040523d82523d6000602084013e611e61565b606091505b5091509150818015611e8b575080511580611e8b575080806020019051810190611e8b91906124bf565b611efd5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c656400000000000000000000000000000060648201526084016106d1565b505050505050565b81600003611f555760405162461bcd60e51b815260206004820152601160248201527f556e6f52653a205a45524f2056616c756500000000000000000000000000000060448201526064016106d1565b611f5d611165565b670de0b6b3a764000060085483611f7491906123e9565b611f7e9190612400565b6001600160a01b0382166000908152600a6020526040902060010154611fa491906123b9565b6001600160a01b0382166000908152600a60205260409020600181019190915560020154611fd39083906123b9565b6001600160a01b0382166000908152600a6020526040902060020155600b54611ffd9083906123b9565b600b555050565b61200c61213c565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611a88565b6001600160a01b0381166000908152600a60205260408120600201546008548290670de0b6b3a76400009061207290846123e9565b61207c9190612400565b6001600160a01b0385166000908152600a6020526040812060010154919250906120a690836123a6565b6001600160a01b039095166000908152600a6020526040902060010191909155509192915050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16611798576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018390526044016106d1565b60025460ff16610ced576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561218a57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146121ba57600080fd5b9392505050565b6001600160a01b03811681146106f557600080fd5b80356121e1816121c1565b919050565b6000602082840312156121f857600080fd5b81356121ba816121c1565b60006020828403121561221557600080fd5b5035919050565b6000806040838503121561222f57600080fd5b823591506020830135612241816121c1565b809150509250929050565b60008060006060848603121561226157600080fd5b833561226c816121c1565b9250602084013561227c816121c1565b9150604084013561228c816121c1565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156122c057600080fd5b823567ffffffffffffffff808211156122d857600080fd5b818501915085601f8301126122ec57600080fd5b8135818111156122fe576122fe612297565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561234157612341612297565b60405291825284820192508381018501918883111561235f57600080fd5b938501935b8285101561238457612375856121d6565b84529385019392850192612364565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561066d5761066d612390565b8082018082111561066d5761066d612390565b6000602082840312156123de57600080fd5b81516121ba816121c1565b808202811582820484141761066d5761066d612390565b60008261241d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561244a57600080fd5b5051919050565b815160009082906020808601845b838110156124845781516001600160a01b03168552938201939082019060010161245f565b50929695505050505050565b6000825160005b818110156124b15760208186018101518583015201612497565b506000920191825250919050565b6000602082840312156124d157600080fd5b815180151581146121ba57600080fdfea2646970667358221220817351f5c88683d9d993c8188e7b002b4b00add92b823c14b5a63294185c07e864736f6c63430008170033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220073941fe603b2dc6a71965cf7796aa34d87debfa87ba527fb6efe0ec80aeb51764736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}