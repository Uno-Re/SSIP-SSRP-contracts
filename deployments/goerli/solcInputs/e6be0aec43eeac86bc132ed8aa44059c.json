{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/factories/RiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"../RiskPool.sol\";\nimport \"../interfaces/IRiskPoolFactory.sol\";\n\ncontract RiskPoolFactory is IRiskPoolFactory {\n    constructor() {}\n\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _cohort,\n        address _currency\n    ) external override returns (address) {\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency);\n        address _riskPoolAddr = address(_riskPool);\n\n        return _riskPoolAddr;\n    }\n}\n"
    },
    "contracts/interfaces/IRiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRiskPool {\n    function enter(address _from, uint256 _amount) external;\n\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\n\n    function leaveFromPending(address _to, uint256 _amount) external returns (uint256, uint256);\n\n    function cancelWithdrawRequest(address _to) external returns (uint256, uint256);\n\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\n\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external returns (uint256);\n\n    function setMinLPCapital(uint256 _minLPCapital) external;\n\n    function currency() external view returns (address);\n\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\n\n    function getWithdrawRequest(address _to) external view returns (uint256, uint256, uint256);\n\n    function lpPriceUno() external view returns (uint256);\n\n    function emergencyWithdraw(address _to, uint256 _amount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IRiskPoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IRiskPoolERC20 {\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IRiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRiskPoolFactory {\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _pool,\n        address _currency\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/ISingleSidedReinsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISingleSidedReinsurancePool {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending(uint256 _amount) external;\n\n    function harvest(address _to) external;\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\n\n    function riskPool() external view returns (address);\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity =0.8.23;\n\n// from Uniswap TransferHelper library\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeApprove: approve failed\");\n    }\n\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeTransfer: transfer failed\");\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::transferFrom: transferFrom failed\");\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/RiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./RiskPoolERC20.sol\";\nimport \"./interfaces/ISingleSidedReinsurancePool.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract RiskPool is IRiskPool, RiskPoolERC20 {\n    // ERC20 attributes\n    string public name;\n    string public symbol;\n\n    address public SSRP;\n    address public override currency; // for now we should accept only UNO\n    uint256 public override lpPriceUno;\n    uint256 public MIN_LP_CAPITAL = 1e7;\n\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _amount, uint256 _amountInUno);\n    event LogPolicyClaim(address indexed _user, uint256 _amount);\n    event LogMigrateLP(address indexed _user, address indexed _migrateTo, uint256 _unoAmount);\n    event LogLeaveFromPending(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\n\n    constructor(string memory _name, string memory _symbol, address _SSRP, address _currency) {\n        require(_SSRP != address(0), \"UnoRe: zero pool address\");\n        name = _name;\n        symbol = _symbol;\n        SSRP = _SSRP;\n        currency = _currency;\n        lpPriceUno = 1e18;\n        if (_currency == address(0)) {\n            MIN_LP_CAPITAL = 7 * 1e15;\n        }\n    }\n\n    modifier onlySSRP() {\n        require(msg.sender == SSRP, \"UnoRe: RiskPool Forbidden\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function decimals() external view virtual override returns (uint8) {\n        return IERC20Metadata(currency).decimals();\n    }\n\n    /**\n     * @dev Users can stake only through Cohort\n     */\n    function enter(address _from, uint256 _amount) external override onlySSRP {\n        _mint(_from, (_amount * 1e18) / lpPriceUno);\n    }\n\n    /**\n     * @param _amount UNO amount to withdraw\n     */\n    function leaveFromPoolInPending(address _to, uint256 _amount) external override onlySSRP {\n        require(totalSupply() > 0, \"UnoRe: There's no remaining in the pool\");\n        uint256 requestAmountInLP = (_amount * 1e18) / lpPriceUno;\n        require(\n            (requestAmountInLP + uint256(withdrawRequestPerUser[_to].pendingAmount)) <= balanceOf(_to),\n            \"UnoRe: lp balance overflow\"\n        );\n        _withdrawRequest(_to, requestAmountInLP, _amount);\n    }\n\n    function leaveFromPending(address _to, uint256 _amount) external override onlySSRP returns (uint256, uint256) {\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        uint256 pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\n        require(_amount <= pendingAmount, \"Amount should less than pending amount\");\n        require(cryptoBalance > 0, \"UnoRe: zero uno balance\");\n        require(balanceOf(_to) >= _amount, \"UnoRe: lp balance overflow\");\n        uint256 amountInUno = (_amount * lpPriceUno) / 1e18;\n        if (cryptoBalance - MIN_LP_CAPITAL > amountInUno) {\n            _withdrawImplement(_to);\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, amountInUno);\n            } else {\n                TransferHelper.safeTransferETH(_to, amountInUno);\n            }\n            emit LogLeaveFromPending(_to, pendingAmount, amountInUno);\n            return (pendingAmount, amountInUno);\n        } else {\n            _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n            } else {\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            emit LogLeaveFromPending(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\n            return (((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\n        }\n    }\n\n    function cancelWithdrawRequest(address _to) external override onlySSRP returns (uint256, uint256) {\n        uint256 _pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\n        require(_pendingAmount > 0, \"UnoRe: zero amount\");\n        _cancelWithdrawRequest(_to);\n        emit LogCancelWithdrawRequest(_to, _pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\n        return (_pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\n    }\n\n    function policyClaim(address _to, uint256 _amount) external override onlySSRP returns (uint256 realClaimAmount) {\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        require(totalSupply() > 0, \"UnoRe: zero lp balance\");\n        require(cryptoBalance > MIN_LP_CAPITAL, \"UnoRe: minimum UNO capital underflow\");\n        if (cryptoBalance - MIN_LP_CAPITAL > _amount) {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, _amount);\n            } else {\n                TransferHelper.safeTransferETH(_to, _amount);\n            }\n            realClaimAmount = _amount;\n            emit LogPolicyClaim(_to, _amount);\n        } else {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n            } else {\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            realClaimAmount = cryptoBalance - MIN_LP_CAPITAL;\n            emit LogPolicyClaim(_to, cryptoBalance - MIN_LP_CAPITAL);\n        }\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        lpPriceUno = (cryptoBalance * 1e18) / totalSupply(); // UNO value per lp\n    }\n\n    function emergencyWithdraw(address _to, uint256 _amount) external override onlySSRP returns (bool) {\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        require(cryptoBalance > 0, \"UnoRe: zero uno balance\");\n        _emergencyWithdraw(_to);\n        if (currency != address(0)) {\n            TransferHelper.safeTransfer(currency, _to, _amount);\n        } else {\n            TransferHelper.safeTransferETH(_to, _amount);\n        }\n        return true;\n    }\n\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external override onlySSRP returns (uint256) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        uint256 migratedAmount;\n        uint256 cryptoBalance;\n        if (_isUnLocked && withdrawRequestPerUser[_to].pendingAmount > 0) {\n            uint256 pendingAmountInUno = (uint256(withdrawRequestPerUser[_to].pendingAmount) * lpPriceUno) / 1e18;\n            cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n            if (pendingAmountInUno < cryptoBalance - MIN_LP_CAPITAL) {\n                if (currency != address(0)) {\n                    TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\n                } else {\n                    TransferHelper.safeTransferETH(_to, pendingAmountInUno);\n                }\n                _withdrawImplement(_to);\n            } else {\n                if (currency != address(0)) {\n                    TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n                } else {\n                    TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\n                }\n                _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\n            }\n        } else {\n            if (withdrawRequestPerUser[_to].pendingAmount > 0) {\n                _cancelWithdrawRequest(_to);\n            }\n        }\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        uint256 unoBalance = (balanceOf(_to) * lpPriceUno) / 1e18;\n        if (unoBalance < cryptoBalance - MIN_LP_CAPITAL) {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _migrateTo, unoBalance);\n            } else {\n                TransferHelper.safeTransferETH(_migrateTo, unoBalance);\n            }\n            migratedAmount += unoBalance;\n            emit LogMigrateLP(_to, _migrateTo, unoBalance);\n        } else {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\n            } else {\n                TransferHelper.safeTransferETH(_migrateTo, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            migratedAmount += cryptoBalance - MIN_LP_CAPITAL;\n            emit LogMigrateLP(_to, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\n        }\n        _burn(_to, balanceOf(_to));\n        return migratedAmount;\n    }\n\n    function setMinLPCapital(uint256 _minLPCapital) external override onlySSRP {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        MIN_LP_CAPITAL = _minLPCapital;\n    }\n\n    function getWithdrawRequest(address _to) external view override onlySSRP returns (uint256, uint256, uint256) {\n        return (\n            uint256(withdrawRequestPerUser[_to].pendingAmount),\n            uint256(withdrawRequestPerUser[_to].requestTime),\n            withdrawRequestPerUser[_to].pendingUno\n        );\n    }\n\n    function getTotalWithdrawRequestAmount() external view override onlySSRP returns (uint256) {\n        return totalWithdrawPending;\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        require(\n            balanceOf(msg.sender) - uint256(withdrawRequestPerUser[msg.sender].pendingAmount) >= amount,\n            \"ERC20: transfer amount exceeds balance or pending WR\"\n        );\n        _transfer(msg.sender, recipient, amount);\n\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        require(\n            balanceOf(sender) - uint256(withdrawRequestPerUser[sender].pendingAmount) >= amount,\n            \"ERC20: transfer amount exceeds balance or pending WR\"\n        );\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][msg.sender];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, msg.sender, currentAllowance - amount);\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(sender, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/RiskPoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/IRiskPoolERC20.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract RiskPoolERC20 is Context, IRiskPoolERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    struct UserWithdrawRequestInfo {\n        uint256 pendingAmount;\n        uint256 requestTime;\n        uint256 pendingUno;\n    }\n    mapping(address => UserWithdrawRequestInfo) internal withdrawRequestPerUser;\n    uint256 internal totalWithdrawPending;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    function _withdrawRequest(address _user, uint256 _amount, uint256 _amountInUno) internal {\n        require(balanceOf(_user) >= _amount, \"UnoRe: balance overflow\");\n        require(_amount <= type(uint128).max, \"Amount exceeds max uint128\");\n        if (withdrawRequestPerUser[_user].pendingAmount == 0 && withdrawRequestPerUser[_user].requestTime == 0) {\n            withdrawRequestPerUser[_user] = UserWithdrawRequestInfo({\n                pendingAmount: _amount,\n                requestTime: block.timestamp,\n                pendingUno: _amountInUno\n            });\n        } else {\n            withdrawRequestPerUser[_user].pendingAmount += _amount;\n            withdrawRequestPerUser[_user].pendingUno += _amountInUno;\n            withdrawRequestPerUser[_user].requestTime = block.timestamp;\n        }\n        totalWithdrawPending += _amount;\n    }\n\n    function _withdrawImplement(address _user) internal {\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \"UnoRe: zero claim amount\");\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        _burn(_user, _pendingAmount);\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _withdrawImplementIrregular(address _user, uint256 _amount) internal {\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \"UnoRe: zero claim amount\");\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) >= _amount, \"UnoRe: pending amount overflow\");\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        _burn(_user, _amount);\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _emergencyWithdraw(address _user) internal {\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        if (_pendingAmount > 0) {\n            _burn(_user, _pendingAmount);\n        }\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _cancelWithdrawRequest(address _user) internal {\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        delete withdrawRequestPerUser[_user];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}