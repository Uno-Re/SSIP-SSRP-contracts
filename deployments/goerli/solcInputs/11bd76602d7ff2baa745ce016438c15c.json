{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/CapitalAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"./interfaces/ISalesPolicy.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./interfaces/ICapitalAgent.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\n\n/**\n * @dev update and manage all pools capital and policy utlized amount,\n * whenever user stake and withdraw from the pool and buy policy from salesPolicy\n * notifies to capital agent to update pool capital and policy coverage\n **/\ncontract CapitalAgent is ICapitalAgent, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    address public exchangeAgent;\n    address public salesPolicyFactory;\n    address public usdcToken;\n    address public operator;\n\n    struct PoolInfo {\n        uint256 totalCapital;\n        uint256 SCR;\n        address currency;\n        bool exist;\n    }\n\n    struct PolicyInfo {\n        address policy;\n        uint256 utilizedAmount;\n        bool exist;\n    }\n\n    mapping(address => PoolInfo) public poolInfo;\n\n    address[] private currencyList;\n    mapping(address => bool) private existedCurrencies;\n    mapping(address => uint256) private totalCapitalStakedByCurrency;\n\n    PolicyInfo public policyInfo;\n\n    uint256 public totalUtilizedAmount;\n\n    uint256 public MCR;\n    uint256 public MLR;\n\n    uint256 public constant CALC_PRECISION = 1e18;\n\n    mapping(address => bool) public poolWhiteList;\n\n    mapping(address => mapping(uint256 => uint256)) public claimedAmount;\n\n    event LogAddPool(address indexed _ssip, address _currency, uint256 _scr);\n    event LogRemovePool(address indexed _ssip);\n    event LogSetPolicy(address indexed _salesPolicy);\n    event LogRemovePolicy(address indexed _salesPolicy);\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\n    event LogUpdatePolicyCoverage(\n        address indexed _policy,\n        uint256 _amount,\n        uint256 _policyUtilized,\n        uint256 _totalUtilizedAmount\n    );\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\n    event LogSetMCR(address indexed _owner, address indexed _capitalAgent, uint256 _MCR);\n    event LogSetMLR(address indexed _owner, address indexed _capitalAgent, uint256 _MLR);\n    event LogSetSCR(address indexed _owner, address indexed _capitalAgent, address indexed _pool, uint256 _SCR);\n    event LogSetExchangeAgent(address indexed _owner, address indexed _capitalAgent, address _exchangeAgent);\n    event LogSetSalesPolicyFactory(address indexed _factory);\n    event LogAddPoolWhiteList(address indexed _pool);\n    event LogRemovePoolWhiteList(address indexed _pool);\n    event LogSetOperator(address indexed _operator);\n    event LogSetUSDC(address indexed _usdcToken);\n\n    function initialize(\n        address _exchangeAgent,\n        address _USDC_TOKEN,\n        address _multiSigWallet,\n        address _operator\n    ) external initializer {\n        require(_exchangeAgent != address(0), \"UnoRe: zero exchangeAgent address\");\n        require(_USDC_TOKEN != address(0), \"UnoRe: zero USDC address\");\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \"UnoRe: more than three owners requied\");\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \"UnoRe: more than one owners requied to verify\");\n        exchangeAgent = _exchangeAgent;\n        usdcToken = _USDC_TOKEN;\n        operator = _operator;\n        __ReentrancyGuard_init();\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    }\n\n    modifier onlyPoolWhiteList() {\n        require(poolWhiteList[msg.sender], \"UnoRe: Capital Agent Forbidden\");\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"UnoRe: Capital Agent Forbidden\");\n        _;\n    }\n\n    function getPolicyInfo() external view returns (address, uint256, bool) {\n        PolicyInfo memory _policy = policyInfo;\n        return (_policy.policy, _policy.utilizedAmount, _policy.exist);\n    }\n\n    /**\n     * @dev set sales policy factory, can only be call by admin role\n     * @param _factory new sales policy factory address\n     **/\n    function setSalesPolicyFactory(address _factory) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        salesPolicyFactory = _factory;\n        emit LogSetSalesPolicyFactory(_factory);\n    }\n\n    /**\n     * @dev set operator, can only be call by admin role\n     * @param _operator new operator address\n     **/\n    function setOperator(address _operator) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        operator = _operator;\n        emit LogSetOperator(_operator);\n    }\n\n    /**\n     * @dev set usdc token, can only be call by admin role\n     * @param _usdcToken new usdc token address\n     **/\n    function setUSDCToken(address _usdcToken) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_usdcToken != address(0), \"UnoRe: zero usdc address\");\n        usdcToken = _usdcToken;\n        emit LogSetUSDC(_usdcToken);\n    }\n\n    /**\n     * @dev whitelist pool address, can only be call by admin role\n     * @param _pool address of pool to whitelist\n     **/\n    function addPoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_pool != address(0), \"UnoRe: zero pool address\");\n        require(!poolWhiteList[_pool], \"UnoRe: white list already\");\n        poolWhiteList[_pool] = true;\n        emit LogAddPoolWhiteList(_pool);\n    }\n\n    /**\n     * @dev remove whitelisted pool, can only be call by admin role\n     * @param _pool address of pool to remove from whitelist\n     **/\n    function removePoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolWhiteList[_pool], \"UnoRe: no white list\");\n        poolWhiteList[_pool] = false;\n        emit LogRemovePoolWhiteList(_pool);\n    }\n\n    /**\n     * @dev return total capital in usdc staked in capital agent by pools \n     **/\n    function totalCapitalStaked() public view returns(uint256) {\n        return _getTotalCapitalStakedInUSDC();\n    }\n\n    /**\n     * @dev add pool into capitalAgent to stake capital, can only be call by whitelisted pools\n     * @param _ssip address of pool to add\n     * @param _currency pool lp currency address\n     * @param _scr pool scr value(minimum capital should maintain in capital agent)\n     **/\n    function addPool(address _ssip, address _currency, uint256 _scr) external override onlyPoolWhiteList {\n        require(_ssip != address(0), \"UnoRe: zero address\");\n        require(!poolInfo[_ssip].exist, \"UnoRe: already exist pool\");\n\n        if (existedCurrencies[_currency] == false) {\n            existedCurrencies[_currency] = true;\n            currencyList.push(_currency);\n        }\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\n\n        emit LogAddPool(_ssip, _currency, _scr);\n    }\n\n    /**\n     * @dev add pool into capitalAgent to stake capital, can only be call by admin role\n     * @param _ssip address of pool to add\n     * @param _currency pool lp currency address\n     * @param _scr pool scr value(minimum capital should maintain in capital agent)\n     **/\n    function addPoolByAdmin(address _ssip, address _currency, uint256 _scr) external onlyRole(ADMIN_ROLE) {\n        require(_ssip != address(0), \"UnoRe: zero address\");\n        require(!poolInfo[_ssip].exist, \"UnoRe: already exist pool\");\n\n        if (existedCurrencies[_currency] == false) {\n            existedCurrencies[_currency] = true;\n            currencyList.push(_currency);\n        }\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\n\n        emit LogAddPool(_ssip, _currency, _scr);\n    }\n\n    /**\n     * @dev remove pool from capitalAgent, can only be call by admin role\n     * @param _ssip address of pool to remove\n     **/\n    function removePool(address _ssip) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolInfo[_ssip].exist, \"UnoRe: no exit pool\");\n        if (poolInfo[_ssip].totalCapital > 0) {\n            address currency = poolInfo[_ssip].currency;\n            totalCapitalStakedByCurrency[currency] = totalCapitalStakedByCurrency[currency] - poolInfo[_ssip].totalCapital;\n        }\n        delete poolInfo[_ssip];\n        emit LogRemovePool(_ssip);\n    }\n\n    function setPoolCapital(address _ssip, uint256 _capital) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolInfo[_ssip].exist, \"UnoRe: no exit pool\");\n        address currency = poolInfo[_ssip].currency;\n        totalCapitalStakedByCurrency[currency] += _capital;\n        poolInfo[_ssip].totalCapital = _capital;\n    }\n\n    /**\n     * @dev set sales policy, can only be call by SalesPolicyFactory\n     * @param _policy address of new SalesPolicy\n     **/\n    function setPolicy(address _policy) external override nonReentrant {\n        require(!policyInfo.exist, \"UnoRe: Policy exists\");\n        require(salesPolicyFactory == msg.sender, \"UnoRe: only salesPolicyFactory can call\");\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\n\n        emit LogSetPolicy(_policy);\n    }\n\n    /**\n     * @dev set sales policy, can only be call by admin role\n     * @param _policy address of new SalesPolicy\n     **/\n    function setPolicyByAdmin(address _policy) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_policy != address(0), \"UnoRe: zero address\");\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\n\n        emit LogSetPolicy(_policy);\n    }\n\n    /**\n     * @dev remove sales policy from capital agent, can only be call by admin role\n     **/\n    function removePolicy() external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(policyInfo.exist, \"UnoRe: no exit pool\");\n        totalUtilizedAmount = 0;\n        address _policy = policyInfo.policy;\n        policyInfo.policy = address(0);\n        policyInfo.exist = false;\n        policyInfo.utilizedAmount = 0;\n        emit LogRemovePolicy(_policy);\n    }\n\n    /**\n     * @dev update pool(caller) capital from capital agent,\n     * decrease capital of pool by _withdrawAmount, if user withdraw from pool\n     * remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively\n     * @param _withdrawAmount amount to withdraw\n     **/\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        require(_checkCapitalByMCRAndSCR(msg.sender, _withdrawAmount), \"UnoRe: minimum capital underflow\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n    }\n\n    /**\n     * @dev update pool(caller) capital from capital agent,\n     * decrease capital of pool by _withdrawAmount, if user claim policy from pool \n     * @param _withdrawAmount amount to withdraw\n     **/\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isNotMigrate) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n        if (_isNotMigrate) {\n            _SSIPPolicyClaim(_withdrawAmount, _policyId);\n        }\n    }\n\n    function _SSIPPolicyClaim(uint256 _withdrawAmount, uint256 _policyId) internal {\n        address _salesPolicyAddress = policyInfo.policy;\n        (uint256 _coverageAmount, , , , ) = ISalesPolicy(_salesPolicyAddress).getPolicyData(_policyId);\n        uint256 _claimed = claimedAmount[_salesPolicyAddress][_policyId];\n        require(_coverageAmount >= _withdrawAmount + _claimed, \"UnoRe: coverage amount is less\");\n        claimedAmount[_salesPolicyAddress][_policyId] += _withdrawAmount;\n        bool _isFinished = !(_coverageAmount > (_withdrawAmount + _claimed));\n        if (_isFinished) { // @Audit: DUST amount will prevent marking a policy complete\n            _markToClaimPolicy(_policyId, _coverageAmount);\n        }\n    }\n\n    /**\n     * @dev update pool(caller) capital from capital agent,\n     * increase capital of pool by _stakingAmount, if user stake in pool\n     * @param _stakingAmount amount to deposit\n     **/\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\n    }\n\n    /**\n     * @dev return if pool can withdraw this amount,\n     * remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively\n     * @param _pool address of pool\n     * @param _withdrawAmount withdraw amount\n     **/\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view override returns (bool) {\n        return _checkCapitalByMCRAndSCR(_pool, _withdrawAmount);\n    }\n\n    /**\n     * @dev return if user can buy policy from this coverage amount, \n     * total utlized amount plus coverage should be less than MLR of total capital staked\n     * @param _coverageAmount coverage amount\n     **/\n    function checkCoverageByMLR(uint256 _coverageAmount) external view override returns (bool) {\n        return _checkCoverageByMLR(_coverageAmount);\n    }\n\n    /**\n     * @dev update policy coverage if user buy policy from SalesPolicy, only sales policy can call this function\n     * @param _coverageAmount coverage amount\n     **/\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\n        require(msg.sender == policyInfo.policy, \"UnoRe: only salesPolicy can call\");\n        require(policyInfo.exist, \"UnoRe: no exist policy\");\n        require(_checkCoverageByMLR(_coverageAmount), \"UnoRe: maximum leverage overflow\");\n        _updatePolicyCoverage(_coverageAmount, true);\n    }\n\n    /**\n     * @dev update policy status, if expired update policy coverage and notify to sales policy\n     * @param _policyId policy id to update status\n     **/\n    function updatePolicyStatus(uint256 _policyId) external override nonReentrant {\n        require(policyInfo.policy != address(0), \"UnoRe: no exist salesPolicy\");\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt, , ) = ISalesPolicy(policyInfo.policy)\n            .getPolicyData(_policyId);\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\n        if (isExpired) {\n            _updatePolicyCoverage(_coverageAmount, false);\n            ISalesPolicy(policyInfo.policy).updatePolicyExpired(_policyId);\n            emit LogUpdatePolicyExpired(policyInfo.policy, _policyId);\n        }\n    }\n\n    /**\n     * @dev update policy status to not exist, can only be called by admin role\n     * @param _policyId policy id to update status\n     **/\n    function markToClaimPolicy(uint256 _policyId) external onlyRole(ADMIN_ROLE) nonReentrant {\n        (uint256 _coverageAmount, , , , ) = ISalesPolicy(policyInfo.policy).getPolicyData(_policyId);\n        _markToClaimPolicy(_policyId, _coverageAmount);\n    }\n\n    function _markToClaimPolicy(uint256 _policyId, uint256 _coverageAmount) private {\n        require(policyInfo.policy != address(0), \"UnoRe: no exist salesPolicy\");\n        _updatePolicyCoverage(_coverageAmount, false);\n        ISalesPolicy(policyInfo.policy).markToClaim(_policyId);\n        emit LogMarkToClaimPolicy(policyInfo.policy, _policyId);\n    }\n\n    function _updatePoolCapital(address _pool, uint256 _amount, bool isAdd) private {\n        if (!isAdd) {\n            require(poolInfo[_pool].totalCapital >= _amount, \"UnoRe: pool capital overflow\");\n        }\n        address currency = poolInfo[_pool].currency;\n        poolInfo[_pool].totalCapital = isAdd ? poolInfo[_pool].totalCapital + _amount : poolInfo[_pool].totalCapital - _amount;\n        totalCapitalStakedByCurrency[currency] = isAdd ? totalCapitalStakedByCurrency[currency] + _amount : totalCapitalStakedByCurrency[currency] - _amount;\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStakedByCurrency[currency]);\n    }\n\n    function _updatePolicyCoverage(uint256 _amount, bool isAdd) private {\n        if (!isAdd) {\n            require(policyInfo.utilizedAmount >= _amount, \"UnoRe: policy coverage overflow\");\n        }\n        policyInfo.utilizedAmount = isAdd ? policyInfo.utilizedAmount + _amount : policyInfo.utilizedAmount - _amount;\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\n        emit LogUpdatePolicyCoverage(policyInfo.policy, _amount, policyInfo.utilizedAmount, totalUtilizedAmount);\n    }\n\n    function _checkCapitalByMCRAndSCR(address _pool, uint256 _withdrawAmount) private view returns (bool) {\n        address currency = poolInfo[_pool].currency;\n        uint256 totalCapitalStakedInUSDC;\n        uint256 mcrInUSDC;\n        uint256 scrInUSDC;\n\n        totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\n        mcrInUSDC = _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency] - _withdrawAmount);\n        scrInUSDC = _convertTokenToUSDC(currency, poolInfo[_pool].totalCapital - _withdrawAmount);\n\n        bool isMCRPass = mcrInUSDC >= (totalCapitalStakedInUSDC * MCR) / CALC_PRECISION;\n        bool isSCRPass = scrInUSDC >= poolInfo[_pool].SCR;\n\n        return isMCRPass && isSCRPass;\n    }\n\n    function _convertTokenToUSDC(address _currency, uint256 _amount) private view returns (uint256) {\n        uint256 tokenInUSDC;\n        if (_currency == usdcToken) {\n            tokenInUSDC = _amount;\n        } else {\n            tokenInUSDC = _currency != address(0)\n                ? IExchangeAgent(exchangeAgent).getNeededTokenAmount(_currency, usdcToken, _amount)\n                : IExchangeAgent(exchangeAgent).getTokenAmountForETH(usdcToken, _amount);\n        }\n\n        return tokenInUSDC;\n    }\n\n    function _getTotalCapitalStakedInUSDC() private view returns (uint256) {\n        uint256 totalCapitalStakedInUSDC;\n        for (uint256 i = 0; i < currencyList.length; i++) {\n            address currency = currencyList[i];\n            totalCapitalStakedInUSDC = totalCapitalStakedInUSDC + _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency]);\n        }\n\n        return totalCapitalStakedInUSDC;\n    }\n\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\n        uint256 totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStakedInUSDC * MLR) / CALC_PRECISION;\n    }\n\n    /**\n     * @dev set new MCR, can only be called by operator\n     * @param _MCR new value to update\n     **/\n    function setMCR(uint256 _MCR) external onlyOperator nonReentrant {\n        require(_MCR > 0, \"UnoRe: zero mcr\");\n        MCR = _MCR;\n        emit LogSetMCR(msg.sender, address(this), _MCR);\n    }\n\n    /**\n     * @dev set new MLR, can only be called by operator\n     * @param _MLR new value to update\n     **/\n    function setMLR(uint256 _MLR) external onlyOperator nonReentrant {\n        require(_MLR > 0, \"UnoRe: zero mlr\");\n        MLR = _MLR;\n        emit LogSetMLR(msg.sender, address(this), _MLR);\n    }\n\n    /**\n     * @dev set new SCR of pool, can only be called by operator\n     * @param _SCR new value to update\n     * @param _pool address of pool\n     **/\n    function setSCR(uint256 _SCR, address _pool) external onlyOperator nonReentrant {\n        require(_SCR > 0, \"UnoRe: zero scr\");\n        poolInfo[_pool].SCR = _SCR;\n        emit LogSetSCR(msg.sender, address(this), _pool, _SCR);\n    }\n\n    /**\n     * @dev set new exchange agent address, can only be called by admin role\n     * @param _exchangeAgent new exchange agent address\n     **/\n    function setExchangeAgent(address _exchangeAgent) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        exchangeAgent = _exchangeAgent;\n        emit LogSetExchangeAgent(msg.sender, address(this), _exchangeAgent);\n    }\n}\n"
    },
    "contracts/factories/RiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"../RiskPool.sol\";\nimport \"../interfaces/IRiskPoolFactory.sol\";\n\ncontract RiskPoolFactory is IRiskPoolFactory {\n    constructor() {}\n\n    /**\n     * @dev create new RiskPool Contract\n     * @param _name name of the risk pool\n     * @param _symbol symbol of the risk pool\n     * @param _cohort address of the ssip-ssrp pool\n     * @param _currency address of the currency to distribute as a reward to user\n     * @return new RiskPool address\n     **/\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _cohort,\n        address _currency\n    ) external override returns (address) {\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency);\n        address _riskPoolAddr = address(_riskPool);\n\n        return _riskPoolAddr;\n    }\n}\n"
    },
    "contracts/interfaces/ICapitalAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface ICapitalAgent {\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\n\n    function setPolicy(address _policy) external;\n\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\n\n    function SSIPStaking(uint256 _stakingAmount) external;\n\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isMigrate) external;\n\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\n\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\n\n    function policySale(uint256 _coverageAmount) external;\n\n    function updatePolicyStatus(uint256 _policyId) external;\n\n    function getPolicyInfo() external returns(address, uint256, bool);\n\n    function claimedAmount(address _policy, uint256 _policyId) external returns(uint256);\n}\n"
    },
    "contracts/interfaces/IExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface IExchangeAgent {\n    function usdcToken() external view returns (address);\n\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\n\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\n\n    function getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) external view returns (uint256);\n\n    function convertForToken(address _token0, address _token1, uint256 _token0Amount) external returns (uint256);\n\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGnosisSafe.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\ninterface IGnosisSafe {\n    function getOwners() external view returns (address[] memory);\n\n    function getThreshold() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IMigration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface IMigration {\n    function onMigration(address who_, uint256 amount_, bytes memory data_) external;\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\ninterface IRewarder {\n    function currency() external view returns (address);\n\n    function onReward(address to, uint256 unoAmount, uint256 accumulatedAmount) external payable returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRewarderFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRewarderFactory {\n    function newRewarder(address _operator, address _currency, address _pool) external returns (address);\n}\n"
    },
    "contracts/interfaces/IRiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRiskPool {\n    function enter(address _from, uint256 _amount) external;\n\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\n\n    function leaveFromPending(address _to, uint256 _amount) external returns (uint256, uint256);\n\n    function cancelWithdrawRequest(address _to) external returns (uint256, uint256);\n\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\n\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external returns (uint256);\n\n    function setMinLPCapital(uint256 _minLPCapital) external;\n\n    function currency() external view returns (address);\n\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\n\n    function getWithdrawRequest(address _to) external view returns (uint256, uint256, uint256);\n\n    function lpPriceUno() external view returns (uint256);\n\n    function emergencyWithdraw(address _to, uint256 _amount) external returns (bool);\n\n    function setLpPriceUno(uint256 _lpPriceUno) external;\n}\n"
    },
    "contracts/interfaces/IRiskPoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IRiskPoolERC20 {\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IRiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRiskPoolFactory {\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _pool,\n        address _currency\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/ISalesPolicy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISalesPolicy {\n    function setPremiumPool(address _premiumPool) external;\n\n    function setExchangeAgent(address _exchangeAgent) external;\n\n    function setCapitalAgent(address _capitalAgent) external;\n\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\n\n    function approvePremium(address _premiumCurrency) external;\n\n    function setProtocolURI(string memory newURI) external;\n\n    function setSigner(address _signer) external;\n\n    function updatePolicyExpired(uint256 _policyId) external;\n\n    function markToClaim(uint256 _policyId) external;\n\n    function allPoliciesLength() external view returns (uint256);\n\n    function killPool() external;\n\n    function revivePool() external;\n\n    function getPolicyData(uint256 _policyId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            bool\n        );\n}\n"
    },
    "contracts/interfaces/ISingleSidedInsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISingleSidedInsurancePool {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external payable;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending(uint256 _amount) external;\n\n    function harvest(address _to) external;\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\n\n    function riskPool() external view returns (address);\n\n    function settlePayout(uint256 _policyId, address _payout, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/ISingleSidedReinsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISingleSidedReinsurancePool {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending(uint256 _amount) external;\n\n    function harvest(address _to) external;\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\n\n    function riskPool() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ISyntheticSSRPFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISyntheticSSRPFactory {\n    function newSyntheticSSRP(address _multiSigWallet, address _lpToken) external returns (address);\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity =0.8.23;\n\n// from Uniswap TransferHelper library\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeApprove: approve failed\");\n    }\n\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeTransfer: transfer failed\");\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::transferFrom: transferFrom failed\");\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/Mocks/OptimisticOracleV3.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\n/**\n * This smart contract\n */\n\ninterface Check {\n    function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully) external;\n}\n\ncontract OptimisticOracleV3 {\n\n    uint a;\n    function set() external {\n        a = 3;\n    }\n\n    function defaultIdentifier() external pure returns(bytes32){\n        return bytes32(\"contract\");\n    }\n\n    function getMinimumBond(address _c) external pure returns(uint256){\n        return 100;\n    }\n\n    function assertTruth(bytes memory _a, address b, address c, address n,uint64 d, address e, uint256 f, bytes32 g, bytes32 h) external pure returns(bytes32) {\n        return bytes32(\"a\");\n    }\n\n    function settle(bytes32 id, address d) external {\n        Check(d).assertionResolvedCallback(id, true);\n    }\n}\n"
    },
    "contracts/RiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./RiskPoolERC20.sol\";\nimport \"./interfaces/ISingleSidedReinsurancePool.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract RiskPool is IRiskPool, RiskPoolERC20 {\n    // ERC20 attributes\n    string public name;\n    string public symbol;\n\n    address public SSRP;\n    address public override currency; // for now we should accept only UNO\n    uint256 public override lpPriceUno;\n    uint256 public MIN_LP_CAPITAL = 1e7;\n\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _amount, uint256 _amountInUno);\n    event LogPolicyClaim(address indexed _user, uint256 _amount);\n    event LogMigrateLP(address indexed _user, address indexed _migrateTo, uint256 _unoAmount);\n    event LogLeaveFromPending(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\n\n    constructor(string memory _name, string memory _symbol, address _SSRP, address _currency) {\n        require(_SSRP != address(0), \"UnoRe: zero pool address\");\n        name = _name;\n        symbol = _symbol;\n        SSRP = _SSRP;\n        currency = _currency;\n        lpPriceUno = 1e18;\n        if (_currency == address(0)) {\n            MIN_LP_CAPITAL = 7 * 1e15;\n        }\n    }\n\n    modifier onlySSRP() {\n        require(msg.sender == SSRP, \"UnoRe: RiskPool Forbidden\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function decimals() external view virtual override returns (uint8) {\n        return IERC20Metadata(currency).decimals();\n    }\n\n    /**\n     * @dev Users can stake only through Cohort\n     */\n    function enter(address _from, uint256 _amount) external override onlySSRP {\n        _mint(_from, (_amount * 1e18) / lpPriceUno);\n    }\n\n    /**\n     * @param _amount UNO amount to withdraw\n     */\n    function leaveFromPoolInPending(address _to, uint256 _amount) external override onlySSRP {\n        require(totalSupply() > 0, \"UnoRe: There's no remaining in the pool\");\n        uint256 requestAmountInLP = (_amount * 1e18) / lpPriceUno;\n        require(\n            (requestAmountInLP + uint256(withdrawRequestPerUser[_to].pendingAmount)) <= balanceOf(_to),\n            \"UnoRe: lp balance overflow\"\n        );\n        _withdrawRequest(_to, requestAmountInLP, _amount);\n    }\n\n    /**\n     * @dev withdraw from pending, only pool contract can call this function\n     */\n    function leaveFromPending(address _to, uint256 _amount) external override onlySSRP returns (uint256, uint256) {\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        uint256 pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\n        require(_amount <= pendingAmount, \"Amount should less than pending amount\");\n        require(cryptoBalance > 0, \"UnoRe: zero uno balance\");\n        require(balanceOf(_to) >= _amount, \"UnoRe: lp balance overflow\");\n        uint256 amountInUno = (_amount * lpPriceUno) / 1e18;\n        if (cryptoBalance - MIN_LP_CAPITAL > amountInUno) {\n            _withdrawImplement(_to);\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, amountInUno);\n            } else {\n                TransferHelper.safeTransferETH(_to, amountInUno);\n            }\n            emit LogLeaveFromPending(_to, pendingAmount, amountInUno);\n            return (pendingAmount, amountInUno);\n        } else {\n            _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n            } else {\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            emit LogLeaveFromPending(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\n            return (((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\n        }\n    }\n\n    /**\n     * @dev cancel pending request, only pool contract can call this function\n     */\n    function cancelWithdrawRequest(address _to) external override onlySSRP returns (uint256, uint256) {\n        uint256 _pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\n        require(_pendingAmount > 0, \"UnoRe: zero amount\");\n        _cancelWithdrawRequest(_to);\n        emit LogCancelWithdrawRequest(_to, _pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\n        return (_pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\n    }\n\n    /**\n     * @dev claim policy to `_to` by `_amount`, only pool contract can call this function\n     */\n    function policyClaim(address _to, uint256 _amount) external override onlySSRP returns (uint256 realClaimAmount) {\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        require(totalSupply() > 0, \"UnoRe: zero lp balance\");\n        require(cryptoBalance > MIN_LP_CAPITAL, \"UnoRe: minimum UNO capital underflow\");\n        if (cryptoBalance - MIN_LP_CAPITAL > _amount) {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, _amount);\n            } else {\n                TransferHelper.safeTransferETH(_to, _amount);\n            }\n            realClaimAmount = _amount;\n            emit LogPolicyClaim(_to, _amount);\n        } else {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n            } else {\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            realClaimAmount = cryptoBalance - MIN_LP_CAPITAL;\n            emit LogPolicyClaim(_to, cryptoBalance - MIN_LP_CAPITAL);\n        }\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        lpPriceUno = (cryptoBalance * 1e18) / totalSupply(); // UNO value per lp\n    }\n\n    /**\n     * @dev emergency withdraw from pool, this will not harvest rewards, only pool contract can call this function\n     */\n    function emergencyWithdraw(address _to, uint256 _amount) external override onlySSRP returns (bool) {\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        require(cryptoBalance > 0, \"UnoRe: zero uno balance\");\n        _emergencyWithdraw(_to);\n        uint256 amount = (_amount * lpPriceUno) / 1e18;\n        if (currency != address(0)) {\n            TransferHelper.safeTransfer(currency, _to, amount);\n        } else {\n            TransferHelper.safeTransferETH(_to, amount);\n        }\n        return true;\n    }\n\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external override onlySSRP returns (uint256) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        uint256 migratedAmount;\n        uint256 cryptoBalance;\n        if (_isUnLocked && withdrawRequestPerUser[_to].pendingAmount > 0) {\n            uint256 pendingAmountInUno = (uint256(withdrawRequestPerUser[_to].pendingAmount) * lpPriceUno) / 1e18;\n            cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n            if (pendingAmountInUno < cryptoBalance - MIN_LP_CAPITAL) {\n                if (currency != address(0)) {\n                    TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\n                } else {\n                    TransferHelper.safeTransferETH(_to, pendingAmountInUno);\n                }\n                _withdrawImplement(_to);\n            } else {\n                if (currency != address(0)) {\n                    TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n                } else {\n                    TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\n                }\n                _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\n            }\n        } else {\n            if (withdrawRequestPerUser[_to].pendingAmount > 0) {\n                _cancelWithdrawRequest(_to);\n            }\n        }\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        uint256 unoBalance = (balanceOf(_to) * lpPriceUno) / 1e18;\n        if (unoBalance < cryptoBalance - MIN_LP_CAPITAL) {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _migrateTo, unoBalance);\n            } else {\n                TransferHelper.safeTransferETH(_migrateTo, unoBalance);\n            }\n            migratedAmount += unoBalance;\n            emit LogMigrateLP(_to, _migrateTo, unoBalance);\n        } else {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\n            } else {\n                TransferHelper.safeTransferETH(_migrateTo, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            migratedAmount += cryptoBalance - MIN_LP_CAPITAL;\n            emit LogMigrateLP(_to, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\n        }\n        _burn(_to, balanceOf(_to));\n        return migratedAmount;\n    }\n\n    /**\n     * @dev update min lp capital, only pool call this function\n     */\n    function setMinLPCapital(uint256 _minLPCapital) external override onlySSRP {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        MIN_LP_CAPITAL = _minLPCapital;\n    }\n\n    /**\n     * @dev return user withdraw request amount, amount in uno and time\n     */\n    function getWithdrawRequest(address _to) external view override onlySSRP returns (uint256, uint256, uint256) {\n        return (\n            uint256(withdrawRequestPerUser[_to].pendingAmount),\n            uint256(withdrawRequestPerUser[_to].requestTime),\n            withdrawRequestPerUser[_to].pendingUno\n        );\n    }\n\n    function getTotalWithdrawRequestAmount() external view override onlySSRP returns (uint256) {\n        return totalWithdrawPending;\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        require(\n            balanceOf(msg.sender) - uint256(withdrawRequestPerUser[msg.sender].pendingAmount) >= amount,\n            \"ERC20: transfer amount exceeds balance or pending WR\"\n        );\n        _transfer(msg.sender, recipient, amount);\n\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        require(\n            balanceOf(sender) - uint256(withdrawRequestPerUser[sender].pendingAmount) >= amount,\n            \"ERC20: transfer amount exceeds balance or pending WR\"\n        );\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][msg.sender];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, msg.sender, currentAllowance - amount);\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(sender, recipient, amount);\n        return true;\n    }\n\n    function setLpPriceUno(uint256 _lpPriceUno) external onlySSRP {\n        lpPriceUno = _lpPriceUno;\n    }\n}\n"
    },
    "contracts/RiskPoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/IRiskPoolERC20.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract RiskPoolERC20 is Context, IRiskPoolERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    struct UserWithdrawRequestInfo {\n        uint256 pendingAmount;\n        uint256 requestTime;\n        uint256 pendingUno;\n    }\n    mapping(address => UserWithdrawRequestInfo) internal withdrawRequestPerUser;\n    uint256 internal totalWithdrawPending;\n\n    uint256 private _totalSupply;\n\n    uint256[30] __gap;\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    function _withdrawRequest(address _user, uint256 _amount, uint256 _amountInUno) internal {\n        require(balanceOf(_user) >= _amount, \"UnoRe: balance overflow\");\n        require(_amount <= type(uint128).max, \"Amount exceeds max uint128\");\n        if (withdrawRequestPerUser[_user].pendingAmount == 0 && withdrawRequestPerUser[_user].requestTime == 0) {\n            withdrawRequestPerUser[_user] = UserWithdrawRequestInfo({\n                pendingAmount: _amount,\n                requestTime: block.timestamp,\n                pendingUno: _amountInUno\n            });\n        } else {\n            withdrawRequestPerUser[_user].pendingAmount += _amount;\n            withdrawRequestPerUser[_user].pendingUno += _amountInUno;\n            withdrawRequestPerUser[_user].requestTime = block.timestamp;\n        }\n        totalWithdrawPending += _amount;\n    }\n\n    function _withdrawImplement(address _user) internal {\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \"UnoRe: zero claim amount\");\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        _burn(_user, _pendingAmount);\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _withdrawImplementIrregular(address _user, uint256 _amount) internal {\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \"UnoRe: zero claim amount\");\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) >= _amount, \"UnoRe: pending amount overflow\");\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        _burn(_user, _amount);\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _emergencyWithdraw(address _user) internal {\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        if (_pendingAmount > 0) {\n            _burn(_user, _pendingAmount);\n        }\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _cancelWithdrawRequest(address _user) internal {\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        delete withdrawRequestPerUser[_user];\n    }\n}\n"
    },
    "contracts/SingleSidedInsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\nimport \"./interfaces/ICapitalAgent.sol\";\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/IRiskPoolFactory.sol\";\nimport \"./interfaces/ISingleSidedInsurancePool.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SingleSidedInsurancePool is\n    ISingleSidedInsurancePool,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable\n{\n    bytes32 public constant CLAIM_PROCESSOR_ROLE = keccak256(\"CLAIM_PROCESSOR_ROLE\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant BOT_ROLE = keccak256(\"BOT_ROLE\");\n\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\n\n    address public migrateTo;\n    address public capitalAgent;\n\n    bool public killed;\n    bool public emergencyWithdrawAllowed;\n    address public rewarder;\n\n    address public override riskPool;\n\n    uint256 public lockTime;\n    uint256 public stakingStartTime;\n\n    struct PoolInfo {\n        uint256 lastRewardBlock;\n        uint256 accUnoPerShare;\n        uint256 unoMultiplierPerBlock;\n    }\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n        bool isNotRollOver;\n    }\n\n    struct Policy {\n        uint256 insuranceAmount;\n        address payoutAddress;\n        bool settled;\n    }\n\n    mapping(bytes32 => mapping(address => uint256)) public roleLockTime;\n\n    mapping(uint256 => Policy) public policies;\n\n    mapping(address => UserInfo) public userInfo;\n\n    PoolInfo public poolInfo;\n\n    event RiskPoolCreated(address indexed _SSIP, address indexed _pool);\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogLeaveFromPendingSSIP(\n        address indexed _user,\n        address indexed _riskPool,\n        uint256 _withdrawLpAmount,\n        uint256 _withdrawUnoAmount\n    );\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\n    event LogLpTransferInSSIP(address indexed _from, address indexed _to, uint256 _amount);\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _cancelAmount, uint256 _cancelAmountInUno);\n    event LogMigrate(address indexed _user, address indexed _migrateTo, uint256 _migratedAmount);\n    event LogSetCapitalAgent(address indexed _SSIP, address indexed _capitalAgent);\n    event LogSetRewardMultiplier(address indexed _SSIP, uint256 _rewardPerBlock);\n    event LogSetRole(address indexed _SSIP, bytes32 _role, address indexed _account);\n    event LogSetMigrateTo(address indexed _SSIP, address indexed _migrateTo);\n    event LogSetMinLPCapital(address indexed _SSIP, uint256 _minLPCapital);\n    event LogSetLockTime(address indexed _SSIP, uint256 _lockTime);\n    event LogSetStakingStartTime(address indexed _SSIP, uint256 _startTime);\n    event PoolAlived(address indexed _owner, bool _alive);\n    event PoolFailed(address indexed _owner, bool _fail);\n    event KillPool(address indexed _owner, bool _killed);\n    event InsurancePayoutSettled(uint256 indexed policyId, address indexed payout, uint256 amount);\n    event RollOverReward(address[] indexed _staker, address indexed _pool, uint256 _amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event EmergencyWithdrawToggled(address indexed user, bool EmergencyWithdraw);\n    event LogUserUpdated(address indexed pool, address indexed user, uint256 amount);\n\n    function initialize(address _capitalAgent, address _multiSigWallet) external initializer {\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \"UnoRe: more than three owners required\");\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \"UnoRe: more than one owners required to verify\");\n        capitalAgent = _capitalAgent;\n        lockTime = 10 days;\n        __ReentrancyGuard_init();\n        __Pausable_init();\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(CLAIM_PROCESSOR_ROLE, ADMIN_ROLE); // TODO\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\n    }\n\n    modifier isStartTime() {\n        require(block.timestamp >= stakingStartTime, \"UnoRe: not available time\");\n        _;\n    }\n\n    modifier roleLockTimePassed(bytes32 _role) {\n        require(block.timestamp >= roleLockTime[_role][msg.sender], \"UnoRe: roll lock time not passed\");\n        _;\n    }\n\n    modifier isAlive() {\n        require(!killed, \"UnoRe: pool is killed\");\n        _;\n    }\n\n    /**\n     * @dev pause pool to restrict pool functionality, can only by called by admin role\n     */\n    function pausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @dev unpause pool, can only by called by admin role\n     */\n    function unpausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * @dev kill pool to restrict pool functionality, can only by called by admin role\n     */\n    function killPool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = true;\n        emit KillPool(msg.sender, true);\n    }\n\n    /**\n     * @dev revive pool, can only by called by admin role\n     */\n    function revivePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = false;\n        emit PoolAlived(msg.sender, false);\n    }\n\n    function setRole(\n        bytes32 _role,\n        address _account\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) whenNotPaused isAlive {\n        require(_account != address(0), \"UnoRe: zero address\");\n        roleLockTime[_role][_account] = block.timestamp + lockTime;\n        _grantRole(_role, _account);\n        emit LogSetRole(address(this), _role, _account);\n    }\n\n    /**\n     * @dev set new capital agent, can only by called by admin role\n     * @param _capitalAgent new capital agent address\n     */\n    function setCapitalAgent(address _capitalAgent) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_capitalAgent != address(0), \"UnoRe: zero address\");\n        capitalAgent = _capitalAgent;\n        emit LogSetCapitalAgent(address(this), _capitalAgent);\n    }\n\n    /**\n     * @dev update reward muiltiplier, can only by called by admin role\n     * @param _rewardMultiplier value to set\n     */\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_rewardMultiplier > 0, \"UnoRe: zero value\");\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        emit LogSetRewardMultiplier(address(this), _rewardMultiplier);\n    }\n\n    /**\n     * @dev set migrate address, can only by called by admin role\n     * @param _migrateTo new migrate address\n     */\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n        emit LogSetMigrateTo(address(this), _migrateTo);\n    }\n\n    /**\n     * @dev update min lp capital, only admin role call this function\n     */\n    function setMinLPCapital(uint256 _minLPCapital) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\n        emit LogSetMinLPCapital(address(this), _minLPCapital);\n    }\n\n    /**\n     * @dev lock time, only admin role call this function\n     */\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        lockTime = _lockTime;\n        emit LogSetLockTime(address(this), _lockTime);\n    }\n\n    /**\n     * @dev set staking start time, only admin role call this function\n     */\n    function setStakingStartTime(uint256 _startTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        stakingStartTime = _startTime + block.timestamp;\n        emit LogSetStakingStartTime(address(this), stakingStartTime);\n    }\n\n    /**\n     * @dev toggle emergency withdraw bool to restrict or use this emergency withdraw,\n     * only admin role call this function\n     */\n    function toggleEmergencyWithdraw() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        emergencyWithdrawAllowed = !emergencyWithdrawAllowed;\n        emit EmergencyWithdrawToggled(address(this), emergencyWithdrawAllowed);\n    }\n\n    /**\n     * @dev create Risk pool with UNO from SSIP owner\n     */\n    function createRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _factory,\n        address _currency,\n        uint256 _rewardMultiplier,\n        uint256 _SCR\n    ) external nonReentrant onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(riskPool == address(0), \"UnoRe: risk pool created already\");\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\n        poolInfo.lastRewardBlock = block.number;\n        poolInfo.accUnoPerShare = 0;\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        ICapitalAgent(capitalAgent).addPool(address(this), _currency, _SCR);\n        emit RiskPoolCreated(address(this), riskPool);\n    }\n\n    /**\n     * @dev create rewarder with UNO token\n     */\n    function createRewarder(\n        address _operator,\n        address _factory,\n        address _currency\n    ) external nonReentrant onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    /**\n     * @dev migrate user to new version\n     */\n    function migrate() external nonReentrant whenNotPaused isAlive {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > lockTime;\n        uint256 migratedAmount = IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim(migratedAmount, 0, false);\n        IMigration(migrateTo).onMigration(msg.sender, migratedAmount, \"\");\n        userInfo[msg.sender].amount = 0;\n        userInfo[msg.sender].rewardDebt = 0;\n        emit LogMigrate(msg.sender, migrateTo, migratedAmount);\n    }\n\n    /**\n     * @dev return pending uno to claim of `_to` address\n     */\n    function pendingUno(address _to) external view returns (uint256 pending) {\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\n        uint256 accUnoPerShare = poolInfo.accUnoPerShare;\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n            accUnoPerShare = accUnoPerShare + (unoReward * ACC_UNO_PRECISION) / tokenSupply;\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    /**\n     * @dev update pool last reward and accumulated uno per share,\n     * update every time when use enter, withdraw from pool\n     */\n    function updatePool() public override {\n        if (block.number > poolInfo.lastRewardBlock) {\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\n            if (tokenSupply > 0) {\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + ((unoReward * ACC_UNO_PRECISION) / tokenSupply);\n            }\n            poolInfo.lastRewardBlock = block.number;\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\n        }\n    }\n\n    /**\n     * @dev stake user collateral, update user reward per block\n     * @param _amount amount to deposit to pool\n     */\n    function enterInPool(uint256 _amount) external payable override whenNotPaused isAlive isStartTime nonReentrant {\n        _depositIn(_amount);\n        _enterInPool(_amount, msg.sender);\n        emit StakedInPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override whenNotPaused isStartTime nonReentrant {\n        _harvest(msg.sender);\n        require(ICapitalAgent(capitalAgent).checkCapitalByMCR(address(this), _amount), \"UnoRe: minimum capital underflow\");\n        // Withdraw desired amount from pool\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\n        require(amount - pendingAmount >= (_amount * 1e18) / lpPriceUno, \"UnoRe: withdraw amount overflow\");\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\n\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n        emit LeftPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending(uint256 _amount) external override isStartTime whenNotPaused nonReentrant {\n        require(_amount > 0, \"Withdraw amount should be greator than zero\");\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender, _amount);\n\n        ICapitalAgent(capitalAgent).SSIPWithdraw(withdrawAmountInUNO);\n\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        userInfo[msg.sender].rewardDebt =\n            accumulatedUno -\n            ((withdrawAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n\n        userInfo[msg.sender].amount = amount - withdrawAmount;\n\n        emit LogLeaveFromPendingSSIP(msg.sender, riskPool, withdrawAmount, withdrawAmountInUNO);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public nonReentrant whenNotPaused {\n        require(emergencyWithdrawAllowed, \"Unore: emergencyWithdraw is not allowed\");\n        UserInfo memory user = userInfo[msg.sender];\n        uint256 amount = user.amount;\n        require(amount > 0, \"Unore: Zero user amount\");\n        delete userInfo[msg.sender];\n        IRiskPool(riskPool).emergencyWithdraw(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, amount);\n    }\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external override nonReentrant whenNotPaused isAlive {\n        require(msg.sender == address(riskPool), \"UnoRe: not allow others transfer\");\n        _harvest(_from);\n        uint256 amount = userInfo[_from].amount;\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\n        require(amount - pendingAmount >= _amount, \"UnoRe: balance overflow\");\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n        userInfo[_from].amount = amount - _amount;\n\n        userInfo[_to].rewardDebt = userInfo[_to].rewardDebt + ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n        userInfo[_to].amount = userInfo[_to].amount + _amount;\n\n        emit LogLpTransferInSSIP(_from, _to, _amount);\n    }\n\n    /**\n     * @dev withdraw user pending uno\n     * @param _to user address\n     */\n    function harvest(address _to) external override whenNotPaused isAlive isStartTime nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n\n        (uint256 _pendingUno, uint256 _amount) = _updateReward(_to);\n\n        if (rewarder != address(0) && _pendingUno != 0) {\n            IRewarder(rewarder).onReward(_to, _pendingUno, _amount);\n        }\n\n        emit Harvest(msg.sender, _to, _pendingUno);\n    }\n\n    /**\n     * @dev user can toggle its roll over bool\n     */\n    function toggleRollOver() external {\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\n    }\n\n    /**\n     * @dev user roll over its pending uno to stake\n     */\n    function rollOverReward(address[] memory _to) external isStartTime whenNotPaused isAlive onlyRole(BOT_ROLE) nonReentrant {\n        require(IRiskPool(riskPool).currency() == IRewarder(rewarder).currency(), \"UnoRe: currency not matched\");\n        updatePool();\n        uint256 _totalPendingUno;\n        uint256 _accumulatedAmount;\n        for (uint256 i; i < _to.length; i++) {\n            require(!userInfo[_to[i]].isNotRollOver, \"UnoRe: rollover is not set\");\n\n            (uint256 _pendingUno, uint256 _amount) = _updateReward(_to[i]);\n            _totalPendingUno += _pendingUno;\n            _accumulatedAmount += _amount;\n            _enterInPool(_pendingUno, _to[i]);\n        }\n\n        if (rewarder != address(0) && _totalPendingUno != 0 && _accumulatedAmount > 0) {\n            IRewarder(rewarder).onReward(riskPool, _totalPendingUno, _accumulatedAmount);\n        }\n        emit RollOverReward(_to, riskPool, _totalPendingUno);\n    }\n\n    /**\n     * @dev user can cancel its pending withdraw request\n     */\n    function cancelWithdrawRequest() external nonReentrant whenNotPaused isAlive {\n        (uint256 cancelAmount, uint256 cancelAmountInUno) = IRiskPool(riskPool).cancelWithdrawRequest(msg.sender);\n        emit LogCancelWithdrawRequest(msg.sender, cancelAmount, cancelAmountInUno);\n    }\n\n    /**\n     * @dev return user staked currency corresponding to current lp price of uno\n     */\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\n        lpAmount = userInfo[_to].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get withdraw request amount in pending per user in UNO\n     */\n    function getWithdrawRequestPerUser(\n        address _user\n    ) external view returns (uint256 pendingAmount, uint256 pendingAmountInUno, uint256 originUnoAmount, uint256 requestTime) {\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\n     */\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\n    }\n\n    /**\n     * @dev claim policy to payout, can only be called by claim processor role\n     */\n    function settlePayout(\n        uint256 _policyId,\n        address _payout,\n        uint256 _amount\n    ) public whenNotPaused isAlive onlyRole(CLAIM_PROCESSOR_ROLE) roleLockTimePassed(CLAIM_PROCESSOR_ROLE) {\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_payout, _amount);\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim(realClaimAmount, uint256(_policyId), true);\n\n        emit InsurancePayoutSettled(_policyId, _payout, _amount);\n    }\n\n    function setUserDetails(\n        address _user,\n        uint256 _amount,\n        uint256 _rewardDebt\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        userInfo[_user].amount = _amount;\n        userInfo[_user].rewardDebt = _rewardDebt;\n        IRiskPool(riskPool).enter(_user, _amount);\n\n        emit LogUserUpdated(address(this), _user, _amount);\n    }\n\n    function setLpPriceInRiskPool(\n        uint256 _lpPriceUno\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n\n        IRiskPool(riskPool).setLpPriceUno(_lpPriceUno);\n    }\n\n    function setAccUnoPerShare(\n        uint256 _accUnoPerShare,\n        uint256 _lastRewardBlock\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        poolInfo.accUnoPerShare = _accUnoPerShare;\n        poolInfo.lastRewardBlock = _lastRewardBlock;\n    }\n\n    function grantRole(\n        bytes32 role,\n        address account\n    ) public override isAlive whenNotPaused onlyRole(getRoleAdmin(role)) roleLockTimePassed(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    function _revokeRole(\n        bytes32 role,\n        address account\n    ) internal override isAlive whenNotPaused roleLockTimePassed(getRoleAdmin(role)) returns (bool) {\n        return super._revokeRole(role, account);\n    }\n\n    function _enterInPool(uint256 _amount, address _to) internal {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        IRiskPool(riskPool).enter(_to, _amount);\n        UserInfo memory _userInfo = userInfo[_to];\n        _userInfo.rewardDebt =\n            _userInfo.rewardDebt +\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\n            ACC_UNO_PRECISION;\n        _userInfo.amount = _userInfo.amount + ((_amount * 1e18) / lpPriceUno);\n        userInfo[_to] = _userInfo;\n        ICapitalAgent(capitalAgent).SSIPStaking(_amount);\n    }\n\n    function _updateReward(address _to) internal returns (uint256, uint256) {\n        uint256 requestTime;\n        (, requestTime, ) = IRiskPool(riskPool).getWithdrawRequest(_to);\n        if (requestTime > 0) {\n            return (0, 0);\n        }\n\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[_to].rewardDebt = accumulatedUno;\n        return (_pendingUno, amount);\n    }\n\n    function _depositIn(uint256 _amount) internal {\n        address token = IRiskPool(riskPool).currency();\n        if (token == address(0)) {\n            require(msg.value >= _amount, \"UnoRe: insufficient paid\");\n            if (msg.value > _amount) {\n                TransferHelper.safeTransferETH(msg.sender, msg.value - _amount);\n            }\n            TransferHelper.safeTransferETH(riskPool, _amount);\n        } else {\n            TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\n        }\n    }\n}\n"
    },
    "contracts/SingleSidedReinsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\n\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRiskPoolFactory.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/ISingleSidedReinsurancePool.sol\";\nimport \"./interfaces/ISyntheticSSRPFactory.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SingleSidedReinsurancePool is\n    ISingleSidedReinsurancePool,\n    ReentrancyGuardUpgradeable,\n    AccessControlUpgradeable,\n    PausableUpgradeable\n{\n    bytes32 public constant CLAIM_ASSESSOR_ROLE = keccak256(\"CLAIM_ASSESSOR_ROLE\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant BOT_ROLE = keccak256(\"BOT_ROLE\");\n\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\n\n    address public migrateTo;\n    address public syntheticSSRP;\n\n    uint256 public lockTime;\n    uint256 public stakingStartTime;\n\n    address public rewarder;\n    address public override riskPool;\n    bool public killed;\n    bool public emergencyWithdrawAllowed;\n\n    struct PoolInfo {\n        uint256 lastRewardBlock;\n        uint256 accUnoPerShare;\n        uint256 unoMultiplierPerBlock;\n    }\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n        bool isNotRollOver;\n    }\n\n    mapping(address => UserInfo) public userInfo;\n    mapping(bytes32 => mapping(address => uint256)) public roleLockTime;\n\n    PoolInfo public poolInfo;\n\n    event RiskPoolCreated(address indexed _SSRP, address indexed _pool);\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogLeaveFromPendingSSRP(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\n    event LogLpTransferInSSRP(address indexed _from, address indexed _to, uint256 _amount);\n    event LogCreateRewarder(address indexed _SSRP, address indexed _rewarder, address _currency);\n    event LogCreateSyntheticSSRP(address indexed _SSRP, address indexed _syntheticSSRP, address indexed _lpToken);\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _cancelAmount, uint256 _cancelAmountInUno);\n    event LogMigrate(address indexed _user, address indexed _migrateTo, uint256 _migratedAmount);\n    event LogSetRewardMultiplier(address indexed _SSIP, uint256 _rewardMultiplier);\n    event LogSetRole(address indexed _SSIP, bytes32 _role, address indexed _account);\n    event LogSetMigrateTo(address indexed _SSIP, address indexed _migrateTo);\n    event LogSetMinLPCapital(address indexed _SSIP, uint256 _minLPCapital);\n    event LogSetLockTime(address indexed _SSIP, uint256 _lockTime);\n    event LogSetStakingStartTime(address indexed _SSIP, uint256 _startTime);\n    event PoolAlived(address indexed _owner, bool _alive);\n    event KillPool(address indexed _owner, bool _killed);\n    event RollOverReward(address[] indexed _staker, address indexed _pool, uint256 _amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event EmergencyWithdrawToggled(address indexed user, bool EmergencyWithdraw);\n\n    function initialize(address _multiSigWallet, address _claimAccessor) external initializer {\n        require(_multiSigWallet != address(0), \"UnoRe: zero multiSigWallet address\");\n        require(IGnosisSafe(_claimAccessor).getOwners().length > 3, \"UnoRe: more than three owners required\");\n        require(IGnosisSafe(_claimAccessor).getThreshold() > 1, \"UnoRe: more than one owners required to verify\");\n        stakingStartTime = block.timestamp + 3 days;\n        lockTime = 10 days;\n        __ReentrancyGuard_init();\n        __Pausable_init();\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _grantRole(CLAIM_ASSESSOR_ROLE, _claimAccessor);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(CLAIM_ASSESSOR_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\n    }\n\n    modifier isStartTime() {\n        require(block.timestamp >= stakingStartTime, \"UnoRe: not available time\");\n        _;\n    }\n\n    modifier roleLockTimePassed(bytes32 _role) {\n        require(block.timestamp >= roleLockTime[_role][msg.sender], \"UnoRe: roll lock time not passed\");\n        _;\n    }\n\n    modifier isAlive() {\n        require(!killed, \"UnoRe: pool is killed\");\n        _;\n    }\n\n    /**\n     * @dev pause pool to restrict pool functionality, can only by called by admin role\n     */\n    function pausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @dev unpause pool, can only by called by admin role\n     */\n    function unpausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * @dev kill pool to restrict pool functionality, can only by called by admin role\n     */\n    function killPool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = true;\n        emit KillPool(msg.sender, true);\n    }\n\n    /**\n     * @dev revive pool, can only by called by admin role\n     */\n    function revivePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = false;\n        emit PoolAlived(msg.sender, false);\n    }\n\n    /**\n     * @dev update reward muiltiplier, can only by called by admin role\n     * @param _rewardMultiplier value to set\n     */\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_rewardMultiplier > 0, \"UnoRe: zero value\");\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        emit LogSetRewardMultiplier(address(this), _rewardMultiplier);\n    }\n\n    function setRole(bytes32 _role, address _account) external isAlive whenNotPaused onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_account != address(0), \"UnoRe: zero address\");\n        _grantRole(_role, _account);\n        roleLockTime[_role][_account] = block.timestamp + lockTime;\n        emit LogSetRole(address(this), _role, _account);\n    }\n\n    /**\n     * @dev set migrate address, can only by called by admin role\n     * @param _migrateTo new migrate address\n     */\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n        emit LogSetMigrateTo(address(this), _migrateTo);\n    }\n\n    /**\n     * @dev update min lp capital, only admin role call this function\n     */\n    function setMinLPCapital(uint256 _minLPCapital) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\n        emit LogSetMinLPCapital(address(this), _minLPCapital);\n    }\n\n    /**\n     * @dev lock time, only admin role call this function\n     */\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        lockTime = _lockTime;\n        emit LogSetLockTime(address(this), _lockTime);\n    }\n\n    /**\n     * @dev set staking start time, only admin role call this function\n     */\n    function setStakingStartTime(uint256 _startTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_startTime > 0, \"UnoRe: not allow zero start time\");\n        stakingStartTime = _startTime;\n        emit LogSetStakingStartTime(address(this), _startTime);\n    }\n\n    /**\n     * @dev toggle emergency withdraw bool to restrict or use this emergency withdraw,\n     * only admin role call this function\n     */\n    function toggleEmergencyWithdraw() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        emergencyWithdrawAllowed = !emergencyWithdrawAllowed;\n        emit EmergencyWithdrawToggled(address(this), emergencyWithdrawAllowed);\n    }\n\n    /**\n     * @dev create Risk pool with UNO from SSRP owner\n     */\n    function createRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _factory,\n        address _currency,\n        uint256 _rewardMultiplier\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) nonReentrant {\n        require(riskPool == address(0), \"UnoRe: risk pool created already\");\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        require(_currency != address(0), \"UnoRe: zero currency address\");\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\n        poolInfo.lastRewardBlock = block.number;\n        poolInfo.accUnoPerShare = 0;\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        emit RiskPoolCreated(address(this), riskPool);\n    }\n\n    /**\n     * @dev create rewarder with UNO token \n     */\n    function createRewarder(\n        address _operator,\n        address _factory,\n        address _currency\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) nonReentrant {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        require(_currency != address(0), \"UnoRe: zero currency address\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    function createSyntheticSSRP(\n        address _owner,\n        address _factory\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) nonReentrant {\n        require(_owner != address(0), \"UnoRe: zero owner address\");\n        require(_factory != address(0), \"UnoRe:zero factory address\");\n        require(riskPool != address(0), \"UnoRe:zero LP token address\");\n        syntheticSSRP = ISyntheticSSRPFactory(_factory).newSyntheticSSRP(_owner, riskPool);\n        emit LogCreateSyntheticSSRP(address(this), syntheticSSRP, riskPool);\n    }\n\n    /**\n     * @dev migrate user to new version \n     */\n    function migrate() external nonReentrant whenNotPaused isAlive {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > lockTime;\n        uint256 migratedAmount = IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\n        IMigration(migrateTo).onMigration(msg.sender, migratedAmount, \"\");\n        userInfo[msg.sender].amount = 0;\n        userInfo[msg.sender].rewardDebt = 0;\n        emit LogMigrate(msg.sender, migrateTo, migratedAmount);\n    }\n\n    /**\n     * @dev return pending uno to claim of `_to` address\n     */\n    function pendingUno(address _to) external view returns (uint256 pending) {\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\n        uint256 accUnoPerShare = poolInfo.accUnoPerShare;\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n            accUnoPerShare = accUnoPerShare + (unoReward * ACC_UNO_PRECISION) / tokenSupply;\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n     /**\n     * @dev update pool last reward and accumulated uno per share,\n     * update every time when use enter, withdraw from pool\n     */\n    function updatePool() public override {\n        if (block.number > poolInfo.lastRewardBlock) {\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\n            if (tokenSupply > 0) {\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + ((unoReward * ACC_UNO_PRECISION) / tokenSupply);\n            }\n            poolInfo.lastRewardBlock = block.number;\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\n        }\n    }\n\n    /**\n     * @dev stake user collateral, update user reward per block\n     * @param _amount amount to deposit to pool\n     */\n    function enterInPool(uint256 _amount) external override isStartTime whenNotPaused isAlive nonReentrant {\n        _depositIn(_amount);\n        _enterInPool(_amount, msg.sender);\n        emit StakedInPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override isStartTime whenNotPaused nonReentrant {\n        _harvest(msg.sender);\n        // Withdraw desired amount from pool\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\n        require(amount - pendingAmount >= (_amount * 1e18) / lpPriceUno, \"UnoRe: withdraw amount overflow\");\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\n\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n        emit LeftPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending(uint256 _amount) external override isStartTime whenNotPaused nonReentrant {\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender, _amount);\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n\n        userInfo[msg.sender].rewardDebt =\n            accumulatedUno -\n            ((withdrawAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n\n        userInfo[msg.sender].amount = amount - withdrawAmount;\n        emit LogLeaveFromPendingSSRP(msg.sender, withdrawAmount, withdrawAmountInUNO);\n    }\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external override isAlive whenNotPaused nonReentrant {\n        require(msg.sender == address(riskPool), \"UnoRe: not allow others transfer\");\n        if (_from != syntheticSSRP && _to != syntheticSSRP) {\n            _harvest(_from);\n            uint256 amount = userInfo[_from].amount;\n            (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\n            require(amount - pendingAmount >= _amount, \"UnoRe: balance overflow\");\n            uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n            userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_from].amount = amount - _amount;\n\n            userInfo[_to].rewardDebt =\n                userInfo[_to].rewardDebt +\n                ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_to].amount = userInfo[_to].amount + _amount;\n\n            emit LogLpTransferInSSRP(_from, _to, _amount);\n        }\n    }\n\n    /**\n     * @dev withdraw user pending uno\n     * @param _to user address\n     */\n    function harvest(address _to) external override isStartTime isAlive whenNotPaused nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n\n        (uint256 _pendingUno, uint256 _amount) = _updateReward(_to);\n\n        if (rewarder != address(0) && _pendingUno != 0) {\n            IRewarder(rewarder).onReward(_to, _pendingUno, _amount);\n        }\n\n        emit Harvest(msg.sender, _to, _pendingUno);\n    }\n\n    /**\n     * @dev user can toggle its roll over bool\n     */\n    function toggleRollOver() external {\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\n    }\n\n    /**\n     * @dev user roll over its pending uno to stake\n     */\n    function rollOverReward(address[] memory _to) external isStartTime isAlive whenNotPaused onlyRole(BOT_ROLE) nonReentrant {\n        require(IRiskPool(riskPool).currency() == IRewarder(rewarder).currency(), \"UnoRe: currency not matched\");\n        updatePool();\n        uint256 _totalPendingUno;\n        uint256 _accumulatedAmount;\n        for (uint256 i; i < _to.length; i++) {\n            require(!userInfo[_to[i]].isNotRollOver, \"UnoRe: rollover is not set\");\n\n            (uint256 _pendingUno, uint256 _amount) = _updateReward(_to[i]);\n            _totalPendingUno += _pendingUno;\n            _accumulatedAmount += _amount;\n            _enterInPool(_pendingUno, _to[i]);\n        }\n        if (rewarder != address(0) && _totalPendingUno != 0 && _accumulatedAmount > 0) {\n            IRewarder(rewarder).onReward(riskPool, _totalPendingUno, _accumulatedAmount);\n        }\n\n        emit RollOverReward(_to, riskPool, _totalPendingUno);\n    }\n\n    /**\n     * @dev user can cancel its pending withdraw request\n     */\n    function cancelWithdrawRequest() external nonReentrant isAlive whenNotPaused {\n        (uint256 cancelAmount, uint256 cancelAmountInUno) = IRiskPool(riskPool).cancelWithdrawRequest(msg.sender);\n        emit LogCancelWithdrawRequest(msg.sender, cancelAmount, cancelAmountInUno);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public whenNotPaused nonReentrant {\n        require(emergencyWithdrawAllowed, \"Unore: emergencyWithdraw is not allowed\");\n        UserInfo memory user = userInfo[msg.sender];\n        uint256 amount = user.amount;\n        require(amount > 0, \"Unore: Zero user amount\");\n        delete userInfo[msg.sender];\n        IRiskPool(riskPool).emergencyWithdraw(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, amount);\n    }\n\n    /**\n     * @dev claim policy to `_to`, can only be called by claim processor role\n     */\n    function policyClaim(\n        address _to,\n        uint256 _amount\n    ) external onlyRole(CLAIM_ASSESSOR_ROLE) roleLockTimePassed(CLAIM_ASSESSOR_ROLE) isStartTime whenNotPaused isAlive nonReentrant {\n        require(_to != address(0), \"UnoRe: zero address\");\n        require(_amount > 0, \"UnoRe: zero amount\");\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_to, _amount);\n        emit PolicyClaim(_to, realClaimAmount);\n    }\n\n    function grantRole(bytes32 role, address account) public override whenNotPaused isAlive onlyRole(getRoleAdmin(role)) roleLockTimePassed(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev return user staked currency corresponding to current lp price of uno\n     */\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\n        lpAmount = userInfo[_to].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get withdraw request amount in pending per user in UNO\n     */\n    function getWithdrawRequestPerUser(\n        address _user\n    ) external view returns (uint256 pendingAmount, uint256 pendingAmountInUno, uint256 originUnoAmount, uint256 requestTime) {\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\n     */\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\n    }\n\n    function _enterInPool(uint256 _amount, address _to) internal {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        IRiskPool(riskPool).enter(_to, _amount);\n        UserInfo memory _userInfo = userInfo[_to];\n        _userInfo.rewardDebt =\n            _userInfo.rewardDebt +\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\n            ACC_UNO_PRECISION;\n        _userInfo.amount = _userInfo.amount + ((_amount * 1e18) / lpPriceUno);\n        userInfo[_to] = _userInfo;\n    }\n\n    function _updateReward(address _to) internal returns (uint256, uint256) {\n        uint256 requestTime;\n        (, requestTime, ) = IRiskPool(riskPool).getWithdrawRequest(_to);\n        if (requestTime > 0) {\n            return (0,0);\n        }\n\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[_to].rewardDebt = accumulatedUno;\n        return (_pendingUno, amount);\n    }\n\n    function _depositIn(uint256 _amount) internal {\n        address token = IRiskPool(riskPool).currency();\n        TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\n    }\n\n    function _revokeRole(bytes32 role, address account) internal override whenNotPaused isAlive roleLockTimePassed(getRoleAdmin(role)) returns (bool) {\n        return super._revokeRole(role, account);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}