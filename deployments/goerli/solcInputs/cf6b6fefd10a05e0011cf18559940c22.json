{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/CapitalAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"./interfaces/ISalesPolicy.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./interfaces/ICapitalAgent.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\n\ncontract CapitalAgent is ICapitalAgent, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    address public exchangeAgent;\n    address public salesPolicyFactory;\n    address public usdcToken;\n    address public operator;\n\n    struct PoolInfo {\n        uint256 totalCapital;\n        uint256 SCR;\n        address currency;\n        bool exist;\n    }\n\n    struct PolicyInfo {\n        address policy;\n        uint256 utilizedAmount;\n        bool exist;\n    }\n\n    mapping(address => PoolInfo) public poolInfo;\n\n    address[] private currencyList;\n    mapping(address => bool) private existedCurrencies;\n    mapping(address => uint256) private totalCapitalStakedByCurrency;\n\n    PolicyInfo public policyInfo;\n\n    uint256 public totalUtilizedAmount;\n\n    uint256 public MCR;\n    uint256 public MLR;\n\n    uint256 public constant CALC_PRECISION = 1e18;\n\n    mapping(address => bool) public poolWhiteList;\n\n    event LogAddPool(address indexed _ssip, address _currency, uint256 _scr);\n    event LogRemovePool(address indexed _ssip);\n    event LogSetPolicy(address indexed _salesPolicy);\n    event LogRemovePolicy(address indexed _salesPolicy);\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\n    event LogUpdatePolicyCoverage(\n        address indexed _policy,\n        uint256 _amount,\n        uint256 _policyUtilized,\n        uint256 _totalUtilizedAmount\n    );\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\n    event LogSetMCR(address indexed _owner, address indexed _capitalAgent, uint256 _MCR);\n    event LogSetMLR(address indexed _owner, address indexed _capitalAgent, uint256 _MLR);\n    event LogSetSCR(address indexed _owner, address indexed _capitalAgent, address indexed _pool, uint256 _SCR);\n    event LogSetExchangeAgent(address indexed _owner, address indexed _capitalAgent, address _exchangeAgent);\n    event LogSetSalesPolicyFactory(address indexed _factory);\n    event LogAddPoolWhiteList(address indexed _pool);\n    event LogRemovePoolWhiteList(address indexed _pool);\n    event LogSetOperator(address indexed _operator);\n\n    function initialize(\n        address _exchangeAgent,\n        address _USDC_TOKEN,\n        address _multiSigWallet,\n        address _operator\n    ) external initializer {\n        require(_exchangeAgent != address(0), \"UnoRe: zero exchangeAgent address\");\n        require(_USDC_TOKEN != address(0), \"UnoRe: zero USDC address\");\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \"UnoRe: more than three owners requied\");\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \"UnoRe: more than one owners requied to verify\");\n        exchangeAgent = _exchangeAgent;\n        usdcToken = _USDC_TOKEN;\n        operator = _operator;\n        __ReentrancyGuard_init();\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    }\n\n    modifier onlyPoolWhiteList() {\n        require(poolWhiteList[msg.sender], \"UnoRe: Capital Agent Forbidden\");\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"UnoRe: Capital Agent Forbidden\");\n        _;\n    }\n\n    function getPolicyInfo() external view returns (address, uint256, bool) {\n        PolicyInfo memory _policy = policyInfo;\n        return (_policy.policy, _policy.utilizedAmount, _policy.exist);\n    }\n\n    function setSalesPolicyFactory(address _factory) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        salesPolicyFactory = _factory;\n        emit LogSetSalesPolicyFactory(_factory);\n    }\n\n    function setOperator(address _operator) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        operator = _operator;\n        emit LogSetOperator(_operator);\n    }\n\n    function addPoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_pool != address(0), \"UnoRe: zero pool address\");\n        require(!poolWhiteList[_pool], \"UnoRe: white list already\");\n        poolWhiteList[_pool] = true;\n        emit LogAddPoolWhiteList(_pool);\n    }\n\n    function removePoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolWhiteList[_pool], \"UnoRe: no white list\");\n        poolWhiteList[_pool] = false;\n        emit LogRemovePoolWhiteList(_pool);\n    }\n\n    function totalCapitalStaked() public view returns(uint256) {\n        return _getTotalCapitalStakedInUSDC();\n    }\n\n    function addPool(address _ssip, address _currency, uint256 _scr) external override onlyPoolWhiteList {\n        require(_ssip != address(0), \"UnoRe: zero address\");\n        require(!poolInfo[_ssip].exist, \"UnoRe: already exist pool\");\n\n        if (existedCurrencies[_currency] == false) {\n            existedCurrencies[_currency] = true;\n            currencyList.push(_currency);\n        }\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\n\n        emit LogAddPool(_ssip, _currency, _scr);\n    }\n\n    function addPoolByAdmin(address _ssip, address _currency, uint256 _scr) external onlyRole(ADMIN_ROLE) {\n        require(_ssip != address(0), \"UnoRe: zero address\");\n        require(!poolInfo[_ssip].exist, \"UnoRe: already exist pool\");\n\n        if (existedCurrencies[_currency] == false) {\n            existedCurrencies[_currency] = true;\n            currencyList.push(_currency);\n        }\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\n\n        emit LogAddPool(_ssip, _currency, _scr);\n    }\n\n    function removePool(address _ssip) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolInfo[_ssip].exist, \"UnoRe: no exit pool\");\n        if (poolInfo[_ssip].totalCapital > 0) {\n            address currency = poolInfo[_ssip].currency;\n            totalCapitalStakedByCurrency[currency] = totalCapitalStakedByCurrency[currency] - poolInfo[_ssip].totalCapital;\n        }\n        delete poolInfo[_ssip];\n        emit LogRemovePool(_ssip);\n    }\n\n    function setPolicy(address _policy) external override nonReentrant {\n        require(!policyInfo.exist, \"UnoRe: Policy exists\");\n        require(salesPolicyFactory == msg.sender, \"UnoRe: only salesPolicyFactory can call\");\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\n\n        emit LogSetPolicy(_policy);\n    }\n\n    function setPolicyByAdmin(address _policy) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_policy != address(0), \"UnoRe: zero address\");\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\n\n        emit LogSetPolicy(_policy);\n    }\n\n    function removePolicy() external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(policyInfo.exist, \"UnoRe: no exit pool\");\n        totalUtilizedAmount = 0;\n        address _policy = policyInfo.policy;\n        policyInfo.policy = address(0);\n        policyInfo.exist = false;\n        policyInfo.utilizedAmount = 0;\n        emit LogRemovePolicy(_policy);\n    }\n\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        require(_checkCapitalByMCRAndSCR(msg.sender, _withdrawAmount), \"UnoRe: minimum capital underflow\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n    }\n\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isFinished) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n        if (_isFinished) {\n            _markToClaimPolicy(_policyId);\n        }\n    }\n\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\n    }\n\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view override returns (bool) {\n        return _checkCapitalByMCRAndSCR(_pool, _withdrawAmount);\n    }\n\n    function checkCoverageByMLR(uint256 _coverageAmount) external view override returns (bool) {\n        return _checkCoverageByMLR(_coverageAmount);\n    }\n\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\n        require(msg.sender == policyInfo.policy, \"UnoRe: only salesPolicy can call\");\n        require(policyInfo.exist, \"UnoRe: no exist policy\");\n        require(_checkCoverageByMLR(_coverageAmount), \"UnoRe: maximum leverage overflow\");\n        _updatePolicyCoverage(_coverageAmount, true);\n    }\n\n    function updatePolicyStatus(uint256 _policyId) external override nonReentrant {\n        require(policyInfo.policy != address(0), \"UnoRe: no exist salesPolicy\");\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt, , ) = ISalesPolicy(policyInfo.policy)\n            .getPolicyData(_policyId);\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\n        if (isExpired) {\n            _updatePolicyCoverage(_coverageAmount, false);\n            ISalesPolicy(policyInfo.policy).updatePolicyExpired(_policyId);\n            emit LogUpdatePolicyExpired(policyInfo.policy, _policyId);\n        }\n    }\n\n    function markToClaimPolicy(uint256 _policyId) external onlyRole(ADMIN_ROLE) nonReentrant {\n        _markToClaimPolicy(_policyId);\n    }\n\n    function _markToClaimPolicy(uint256 _policyId) private {\n        require(policyInfo.policy != address(0), \"UnoRe: no exist salesPolicy\");\n        (uint256 _coverageAmount, , , , ) = ISalesPolicy(policyInfo.policy).getPolicyData(_policyId);\n        _updatePolicyCoverage(_coverageAmount, false);\n        ISalesPolicy(policyInfo.policy).markToClaim(_policyId);\n        emit LogMarkToClaimPolicy(policyInfo.policy, _policyId);\n    }\n\n    function _updatePoolCapital(address _pool, uint256 _amount, bool isAdd) private {\n        if (!isAdd) {\n            require(poolInfo[_pool].totalCapital >= _amount, \"UnoRe: pool capital overflow\");\n        }\n        address currency = poolInfo[_pool].currency;\n        poolInfo[_pool].totalCapital = isAdd ? poolInfo[_pool].totalCapital + _amount : poolInfo[_pool].totalCapital - _amount;\n        totalCapitalStakedByCurrency[currency] = isAdd ? totalCapitalStakedByCurrency[currency] + _amount : totalCapitalStakedByCurrency[currency] - _amount;\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStakedByCurrency[currency]);\n    }\n\n    function _updatePolicyCoverage(uint256 _amount, bool isAdd) private {\n        if (!isAdd) {\n            require(policyInfo.utilizedAmount >= _amount, \"UnoRe: policy coverage overflow\");\n        }\n        policyInfo.utilizedAmount = isAdd ? policyInfo.utilizedAmount + _amount : policyInfo.utilizedAmount - _amount;\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\n        emit LogUpdatePolicyCoverage(policyInfo.policy, _amount, policyInfo.utilizedAmount, totalUtilizedAmount);\n    }\n\n    function _checkCapitalByMCRAndSCR(address _pool, uint256 _withdrawAmount) private view returns (bool) {\n        address currency = poolInfo[_pool].currency;\n        uint256 totalCapitalStakedInUSDC;\n        uint256 mcrInUSDC;\n        uint256 scrInUSDC;\n\n        totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\n        mcrInUSDC = _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency] - _withdrawAmount);\n        scrInUSDC = _convertTokenToUSDC(currency, poolInfo[_pool].totalCapital - _withdrawAmount);\n\n        bool isMCRPass = mcrInUSDC >= (totalCapitalStakedInUSDC * MCR) / CALC_PRECISION;\n        bool isSCRPass = scrInUSDC >= poolInfo[_pool].SCR;\n\n        return isMCRPass && isSCRPass;\n    }\n\n    function _convertTokenToUSDC(address _currency, uint256 _amount) private view returns (uint256) {\n        uint256 tokenInUSDC;\n        if (_currency == usdcToken) {\n            tokenInUSDC = _amount;\n        } else {\n            tokenInUSDC = _currency != address(0)\n                ? IExchangeAgent(exchangeAgent).getNeededTokenAmount(_currency, usdcToken, _amount)\n                : IExchangeAgent(exchangeAgent).getTokenAmountForETH(usdcToken, _amount);\n        }\n\n        return tokenInUSDC;\n    }\n\n    function _getTotalCapitalStakedInUSDC() private view returns (uint256) {\n        uint256 totalCapitalStakedInUSDC;\n        for (uint256 i = 0; i < currencyList.length; i++) {\n            address currency = currencyList[i];\n            totalCapitalStakedInUSDC = totalCapitalStakedInUSDC + _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency]);\n        }\n\n        return totalCapitalStakedInUSDC;\n    }\n\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\n        uint256 totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStakedInUSDC * MLR) / CALC_PRECISION;\n    }\n\n    function setMCR(uint256 _MCR) external onlyOperator nonReentrant {\n        require(_MCR > 0, \"UnoRe: zero mcr\");\n        MCR = _MCR;\n        emit LogSetMCR(msg.sender, address(this), _MCR);\n    }\n\n    function setMLR(uint256 _MLR) external onlyOperator nonReentrant {\n        require(_MLR > 0, \"UnoRe: zero mlr\");\n        MLR = _MLR;\n        emit LogSetMLR(msg.sender, address(this), _MLR);\n    }\n\n    function setSCR(uint256 _SCR, address _pool) external onlyOperator nonReentrant {\n        require(_SCR > 0, \"UnoRe: zero scr\");\n        poolInfo[_pool].SCR = _SCR;\n        emit LogSetSCR(msg.sender, address(this), _pool, _SCR);\n    }\n\n    function setExchangeAgent(address _exchangeAgent) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        exchangeAgent = _exchangeAgent;\n        emit LogSetExchangeAgent(msg.sender, address(this), _exchangeAgent);\n    }\n}\n"
    },
    "contracts/CapitalAgent1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"./interfaces/ISalesPolicy.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./interfaces/ICapitalAgent.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\n\ncontract CapitalAgent1 is ICapitalAgent, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    address public exchangeAgent;\n    address public salesPolicyFactory;\n    address public usdcToken;\n    address public operator;\n\n    struct PoolInfo {\n        uint256 totalCapital;\n        uint256 SCR;\n        address currency;\n        bool exist;\n    }\n\n    struct PolicyInfo {\n        address policy;\n        uint256 utilizedAmount;\n        bool exist;\n    }\n\n    mapping(address => PoolInfo) public poolInfo;\n\n    address[] private currencyList;\n    mapping(address => bool) private existedCurrencies;\n    mapping(address => uint256) private totalCapitalStakedByCurrency;\n\n    PolicyInfo public policyInfo;\n\n    uint256 public totalUtilizedAmount;\n\n    uint256 public MCR;\n    uint256 public MLR;\n\n    uint256 public constant CALC_PRECISION = 1e18;\n\n    mapping(address => bool) public poolWhiteList;\n\n    event LogAddPool(address indexed _ssip, address _currency, uint256 _scr);\n    event LogRemovePool(address indexed _ssip);\n    event LogSetPolicy(address indexed _salesPolicy);\n    event LogRemovePolicy(address indexed _salesPolicy);\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\n    event LogUpdatePolicyCoverage(\n        address indexed _policy,\n        uint256 _amount,\n        uint256 _policyUtilized,\n        uint256 _totalUtilizedAmount\n    );\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\n    event LogSetMCR(address indexed _owner, address indexed _capitalAgent, uint256 _MCR);\n    event LogSetMLR(address indexed _owner, address indexed _capitalAgent, uint256 _MLR);\n    event LogSetSCR(address indexed _owner, address indexed _capitalAgent, address indexed _pool, uint256 _SCR);\n    event LogSetExchangeAgent(address indexed _owner, address indexed _capitalAgent, address _exchangeAgent);\n    event LogSetSalesPolicyFactory(address indexed _factory);\n    event LogAddPoolWhiteList(address indexed _pool);\n    event LogRemovePoolWhiteList(address indexed _pool);\n    event LogSetOperator(address indexed _operator);\n\n    function initialize(\n        address _exchangeAgent,\n        address _USDC_TOKEN,\n        address _multiSigWallet,\n        address _operator\n    ) external initializer {\n        require(_exchangeAgent != address(0), \"UnoRe: zero exchangeAgent address\");\n        require(_USDC_TOKEN != address(0), \"UnoRe: zero USDC address\");\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \"UnoRe: more than three owners requied\");\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \"UnoRe: more than one owners requied to verify\");\n        exchangeAgent = _exchangeAgent;\n        usdcToken = _USDC_TOKEN;\n        operator = _operator;\n        __ReentrancyGuard_init();\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    }\n\n    modifier onlyPoolWhiteList() {\n        require(poolWhiteList[msg.sender], \"UnoRe: Capital Agent Forbidden\");\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"UnoRe: Capital Agent Forbidden\");\n        _;\n    }\n\n    function getPolicyInfo() external view returns (address, uint256, bool) {\n        PolicyInfo memory _policy = policyInfo;\n        return (_policy.policy, _policy.utilizedAmount, _policy.exist);\n    }\n\n    function setSalesPolicyFactory(address _factory) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        salesPolicyFactory = _factory;\n        emit LogSetSalesPolicyFactory(_factory);\n    }\n\n    function setOperator(address _operator) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        operator = _operator;\n        emit LogSetOperator(_operator);\n    }\n\n    function addPoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_pool != address(0), \"UnoRe: zero pool address\");\n        require(!poolWhiteList[_pool], \"UnoRe: white list already\");\n        poolWhiteList[_pool] = true;\n        emit LogAddPoolWhiteList(_pool);\n    }\n\n    function removePoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolWhiteList[_pool], \"UnoRe: no white list\");\n        poolWhiteList[_pool] = false;\n        emit LogRemovePoolWhiteList(_pool);\n    }\n\n    function totalCapitalStaked() public view returns(uint256) {\n        return _getTotalCapitalStakedInUSDC();\n    }\n\n    function addPool(address _ssip, address _currency, uint256 _scr) external override onlyPoolWhiteList {\n        require(_ssip != address(0), \"UnoRe: zero address\");\n        require(!poolInfo[_ssip].exist, \"UnoRe: already exist pool\");\n\n        if (existedCurrencies[_currency] == false) {\n            existedCurrencies[_currency] = true;\n            currencyList.push(_currency);\n        }\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\n\n        emit LogAddPool(_ssip, _currency, _scr);\n    }\n\n    function addPoolByAdmin(address _ssip, address _currency, uint256 _scr) external onlyRole(ADMIN_ROLE) {\n        require(_ssip != address(0), \"UnoRe: zero address\");\n        require(!poolInfo[_ssip].exist, \"UnoRe: already exist pool\");\n\n        if (existedCurrencies[_currency] == false) {\n            existedCurrencies[_currency] = true;\n            currencyList.push(_currency);\n        }\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\n\n        emit LogAddPool(_ssip, _currency, _scr);\n    }\n\n    function removePool(address _ssip) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolInfo[_ssip].exist, \"UnoRe: no exit pool\");\n        if (poolInfo[_ssip].totalCapital > 0) {\n            address currency = poolInfo[_ssip].currency;\n            totalCapitalStakedByCurrency[currency] = totalCapitalStakedByCurrency[currency] - poolInfo[_ssip].totalCapital;\n        }\n        delete poolInfo[_ssip];\n        emit LogRemovePool(_ssip);\n    }\n\n    function setPolicy(address _policy) external override nonReentrant {\n        require(!policyInfo.exist, \"UnoRe: Policy exists\");\n        require(salesPolicyFactory == msg.sender, \"UnoRe: only salesPolicyFactory can call\");\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\n\n        emit LogSetPolicy(_policy);\n    }\n\n    function setPolicyByAdmin(address _policy) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_policy != address(0), \"UnoRe: zero address\");\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\n\n        emit LogSetPolicy(_policy);\n    }\n\n    function removePolicy() external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(policyInfo.exist, \"UnoRe: no exit pool\");\n        totalUtilizedAmount = 0;\n        address _policy = policyInfo.policy;\n        policyInfo.policy = address(0);\n        policyInfo.exist = false;\n        policyInfo.utilizedAmount = 0;\n        emit LogRemovePolicy(_policy);\n    }\n\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        require(_checkCapitalByMCRAndSCR(msg.sender, _withdrawAmount), \"UnoRe: minimum capital underflow\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n    }\n\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isFinished) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n        if (_isFinished) {\n            _markToClaimPolicy(_policyId);\n        }\n    }\n\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\n    }\n\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view override returns (bool) {\n        return _checkCapitalByMCRAndSCR(_pool, _withdrawAmount);\n    }\n\n    function checkCoverageByMLR(uint256 _coverageAmount) external view override returns (bool) {\n        return _checkCoverageByMLR(_coverageAmount);\n    }\n\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\n        require(msg.sender == policyInfo.policy, \"UnoRe: only salesPolicy can call\");\n        require(policyInfo.exist, \"UnoRe: no exist policy\");\n        require(_checkCoverageByMLR(_coverageAmount), \"UnoRe: maximum leverage overflow\");\n        _updatePolicyCoverage(_coverageAmount, true);\n    }\n\n    function updatePolicyStatus(uint256 _policyId) external override nonReentrant {\n        require(policyInfo.policy != address(0), \"UnoRe: no exist salesPolicy\");\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt, , ) = ISalesPolicy(policyInfo.policy)\n            .getPolicyData(_policyId);\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\n        if (isExpired) {\n            _updatePolicyCoverage(_coverageAmount, false);\n            ISalesPolicy(policyInfo.policy).updatePolicyExpired(_policyId);\n            emit LogUpdatePolicyExpired(policyInfo.policy, _policyId);\n        }\n    }\n\n    function markToClaimPolicy(uint256 _policyId) external onlyRole(ADMIN_ROLE) nonReentrant {\n        _markToClaimPolicy(_policyId);\n    }\n\n    function _markToClaimPolicy(uint256 _policyId) private {\n        require(policyInfo.policy != address(0), \"UnoRe: no exist salesPolicy\");\n        (uint256 _coverageAmount, , , , ) = ISalesPolicy(policyInfo.policy).getPolicyData(_policyId);\n        _updatePolicyCoverage(_coverageAmount, false);\n        ISalesPolicy(policyInfo.policy).markToClaim(_policyId);\n        emit LogMarkToClaimPolicy(policyInfo.policy, _policyId);\n    }\n\n    function _updatePoolCapital(address _pool, uint256 _amount, bool isAdd) private {\n        if (!isAdd) {\n            require(poolInfo[_pool].totalCapital >= _amount, \"UnoRe: pool capital overflow\");\n        }\n        address currency = poolInfo[_pool].currency;\n        poolInfo[_pool].totalCapital = isAdd ? poolInfo[_pool].totalCapital + _amount : poolInfo[_pool].totalCapital - _amount;\n        totalCapitalStakedByCurrency[currency] = isAdd ? totalCapitalStakedByCurrency[currency] + _amount : totalCapitalStakedByCurrency[currency] - _amount;\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStakedByCurrency[currency]);\n    }\n\n    function _updatePolicyCoverage(uint256 _amount, bool isAdd) private {\n        if (!isAdd) {\n            require(policyInfo.utilizedAmount >= _amount, \"UnoRe: policy coverage overflow\");\n        }\n        policyInfo.utilizedAmount = isAdd ? policyInfo.utilizedAmount + _amount : policyInfo.utilizedAmount - _amount;\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\n        emit LogUpdatePolicyCoverage(policyInfo.policy, _amount, policyInfo.utilizedAmount, totalUtilizedAmount);\n    }\n\n    function _checkCapitalByMCRAndSCR(address _pool, uint256 _withdrawAmount) private view returns (bool) {\n        address currency = poolInfo[_pool].currency;\n        uint256 totalCapitalStakedInUSDC;\n        uint256 mcrInUSDC;\n        uint256 scrInUSDC;\n\n        totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\n        mcrInUSDC = _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency] - _withdrawAmount);\n        scrInUSDC = _convertTokenToUSDC(currency, poolInfo[_pool].totalCapital - _withdrawAmount);\n\n        bool isMCRPass = mcrInUSDC >= (totalCapitalStakedInUSDC * MCR) / CALC_PRECISION;\n        bool isSCRPass = scrInUSDC >= poolInfo[_pool].SCR;\n\n        return isMCRPass && isSCRPass;\n    }\n\n    function _convertTokenToUSDC(address _currency, uint256 _amount) private view returns (uint256) {\n        uint256 tokenInUSDC;\n        if (_currency == usdcToken) {\n            tokenInUSDC = _amount;\n        } else {\n            tokenInUSDC = _currency != address(0)\n                ? IExchangeAgent(exchangeAgent).getNeededTokenAmount(_currency, usdcToken, _amount)\n                : IExchangeAgent(exchangeAgent).getTokenAmountForETH(usdcToken, _amount);\n        }\n\n        return tokenInUSDC;\n    }\n\n    function _getTotalCapitalStakedInUSDC() private view returns (uint256) {\n        uint256 totalCapitalStakedInUSDC;\n        for (uint256 i = 0; i < currencyList.length; i++) {\n            address currency = currencyList[i];\n            totalCapitalStakedInUSDC = totalCapitalStakedInUSDC + _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency]);\n        }\n\n        return totalCapitalStakedInUSDC;\n    }\n\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\n        uint256 totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStakedInUSDC * MLR) / CALC_PRECISION;\n    }\n\n    function setMCR(uint256 _MCR) external onlyOperator nonReentrant {\n        require(_MCR > 0, \"UnoRe: zero mcr\");\n        MCR = _MCR;\n        emit LogSetMCR(msg.sender, address(this), _MCR);\n    }\n\n    function setMLR(uint256 _MLR) external onlyOperator nonReentrant {\n        require(_MLR > 0, \"UnoRe: zero mlr\");\n        MLR = _MLR;\n        emit LogSetMLR(msg.sender, address(this), _MLR);\n    }\n\n    function setSCR(uint256 _SCR, address _pool) external onlyOperator nonReentrant {\n        require(_SCR > 0, \"UnoRe: zero scr\");\n        poolInfo[_pool].SCR = _SCR;\n        emit LogSetSCR(msg.sender, address(this), _pool, _SCR);\n    }\n\n    function setExchangeAgent(address _exchangeAgent) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        exchangeAgent = _exchangeAgent;\n        emit LogSetExchangeAgent(msg.sender, address(this), _exchangeAgent);\n    }\n}\n"
    },
    "contracts/EIP712MetaTransaction.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./libraries/EIP712Base.sol\";\n\ncontract EIP712MetaTransaction is EIP712Base {\n    using ECDSA for bytes32;\n\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\n        keccak256(bytes(\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"));\n\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\n    mapping(address => uint256) private nonces;\n\n    /*\n     * Meta transaction structure.\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\n     * He should call the desired function directly in that case.\n     */\n    struct MetaTransaction {\n        uint256 nonce;\n        address from;\n        bytes functionSignature;\n    }\n\n    constructor(string memory name, string memory version) EIP712Base(name, version) {}\n\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\n        if (inBytes.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            outBytes4 := mload(add(inBytes, 32))\n        }\n    }\n\n    function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\n        require(destinationFunctionSig != msg.sig, \"functionSignature can not be of executeMetaTransaction method\");\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \"Signer and signature do not match\");\n        nonces[userAddress] = nonces[userAddress] + 1;\n        // Append userAddress at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\n\n        require(success, \"Function call not successful\");\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\n        return returnData;\n    }\n\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\n        return keccak256(abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature)));\n    }\n\n    function getNonce(address user) external view returns (uint256 nonce) {\n        nonce = nonces[user];\n    }\n\n    function verify(\n        address user,\n        MetaTransaction memory metaTx,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) internal view returns (bool) {\n        bytes32 message = toTypedMessageHash(hashMetaTransaction(metaTx));\n        address signer = message.recover(sigV, sigR, sigS);\n        require(signer != address(0), \"Invalid signature\");\n        return signer == user;\n    }\n\n    function msgSender() internal view returns (address sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/ExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IUniswapFactory.sol\";\nimport \"./interfaces/IUniswapRouter02.sol\";\nimport \"./interfaces/IOraclePriceFeed.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\n\ncontract ExchangeAgent is IExchangeAgent, ReentrancyGuard, Ownable, Pausable {\n    address public immutable override usdcToken;\n    address public immutable UNISWAP_FACTORY;\n    address public immutable UNISWAP_ROUTER;\n    address public immutable WETH;\n    address public oraclePriceFeed;\n    uint256 public slippage;\n    uint256 private constant SLIPPAGE_PRECISION = 100;\n    uint256 public swapDeadline;\n\n    mapping(address => bool) public whiteList;\n\n    event ConvertedTokenToToken(\n        address indexed _dexAddress,\n        address indexed _convertToken,\n        address indexed _convertedToken,\n        uint256 _convertAmount,\n        uint256 _desiredAmount,\n        uint256 _convertedAmount\n    );\n\n    event ConvertedTokenToETH(\n        address indexed _dexAddress,\n        address indexed _convertToken,\n        uint256 _convertAmount,\n        uint256 _desiredAmount,\n        uint256 _convertedAmount\n    );\n\n    event LogAddWhiteList(address indexed _exchangeAgent, address indexed _whiteListAddress);\n    event LogRemoveWhiteList(address indexed _exchangeAgent, address indexed _whiteListAddress);\n    event LogSetSlippage(address indexed _exchangeAgent, uint256 _slippage);\n    event LogSetOraclePriceFeed(address indexed _exchangeAgent, address indexed _oraclePriceFeed);\n\n    constructor(\n        address _usdcToken,\n        address _WETH,\n        address _oraclePriceFeed,\n        address _uniswapRouter,\n        address _uniswapFactory,\n        address _multiSigWallet,\n        uint256 _swapDeadline\n    ) Ownable(_multiSigWallet) {\n        require(_usdcToken != address(0), \"UnoRe: zero USDC address\");\n        require(_uniswapRouter != address(0), \"UnoRe: zero uniswapRouter address\");\n        require(_uniswapFactory != address(0), \"UnoRe: zero uniswapFactory address\");\n        require(_WETH != address(0), \"UnoRe: zero WETH address\");\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \"UnoRe: more than three owners requied\");\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \"UnoRe: more than one owners requied to verify\");\n        usdcToken = _usdcToken;\n        UNISWAP_FACTORY = _uniswapFactory;\n        UNISWAP_ROUTER = _uniswapRouter;\n        WETH = _WETH;\n        oraclePriceFeed = _oraclePriceFeed;\n        whiteList[msg.sender] = true;\n        slippage = 5 * SLIPPAGE_PRECISION;\n        swapDeadline = _swapDeadline;\n    }\n\n    modifier onlyWhiteList() {\n        require(whiteList[msg.sender], \"UnoRe: ExchangeAgent Forbidden\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function killPool() external onlyOwner {\n        _pause();\n    }\n\n    function revivePool() external onlyOwner {\n        _unpause();\n    }\n\n    function setSwapDeadline(uint256 _swapDeadline) external onlyOwner {\n        swapDeadline = _swapDeadline;\n    }\n\n    function addWhiteList(address _whiteListAddress) external onlyOwner {\n        require(_whiteListAddress != address(0), \"UnoRe: zero address\");\n        require(!whiteList[_whiteListAddress], \"UnoRe: white list already\");\n        whiteList[_whiteListAddress] = true;\n        emit LogAddWhiteList(address(this), _whiteListAddress);\n    }\n\n    function removeWhiteList(address _whiteListAddress) external onlyOwner {\n        require(_whiteListAddress != address(0), \"UnoRe: zero address\");\n        require(whiteList[_whiteListAddress], \"UnoRe: white list removed or unadded already\");\n        whiteList[_whiteListAddress] = false;\n        emit LogRemoveWhiteList(address(this), _whiteListAddress);\n    }\n\n    function setSlippage(uint256 _slippage) external onlyOwner {\n        require(_slippage > 0, \"UnoRe: zero slippage\");\n        require(_slippage < 100, \"UnoRe: 100% slippage overflow\");\n        slippage = _slippage * SLIPPAGE_PRECISION;\n        emit LogSetSlippage(address(this), _slippage);\n    }\n\n    function setOraclePriceFeed(address _oraclePriceFeed) external onlyOwner {\n        require(_oraclePriceFeed != address(0), \"UnoRe: zero address\");\n        oraclePriceFeed = _oraclePriceFeed;\n        emit LogSetOraclePriceFeed(address(this), oraclePriceFeed);\n    }\n\n    // estimate token amount for amount in USDC\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view override returns (uint256) {\n        return _getNeededTokenAmount(usdcToken, _token, _usdtAmount);\n    }\n\n    // estimate ETH amount for amount in USDC\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view override returns (uint256) {\n        uint256 ethPrice = IOraclePriceFeed(oraclePriceFeed).getAssetEthPrice(usdcToken);\n        uint256 tokenDecimal = IERC20Metadata(usdcToken).decimals();\n        return (_usdtAmount * ethPrice) / (10 ** tokenDecimal);\n    }\n\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) public view override returns (uint256) {\n        uint256 ethPrice = IOraclePriceFeed(oraclePriceFeed).getAssetEthPrice(_token);\n        uint256 tokenDecimal = IERC20Metadata(_token).decimals();\n        return (_tokenAmount * ethPrice) / (10 ** tokenDecimal);\n    }\n\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) public view override returns (uint256) {\n        uint256 ethPrice = IOraclePriceFeed(oraclePriceFeed).getAssetEthPrice(_token);\n        uint256 tokenDecimal = IERC20Metadata(_token).decimals();\n        return (_ethAmount * (10 ** tokenDecimal)) / ethPrice;\n    }\n\n    function getNeededTokenAmount(\n        address _token0,\n        address _token1,\n        uint256 _token0Amount\n    ) external view override returns (uint256) {\n        return _getNeededTokenAmount(_token0, _token1, _token0Amount);\n    }\n\n    function convertForToken(\n        address _token0,\n        address _token1,\n        uint256 _token0Amount\n    ) external override onlyWhiteList whenNotPaused nonReentrant returns (uint256) {\n        uint256 twapPrice = 0;\n        if (_token0 != address(0)) {\n            require(IERC20(_token0).balanceOf(msg.sender) > 0, \"UnoRe: zero balance\");\n            TransferHelper.safeTransferFrom(_token0, msg.sender, address(this), _token0Amount);\n            twapPrice = _getNeededTokenAmount(_token0, _token1, _token0Amount);\n        } else {\n            twapPrice = getTokenAmountForETH(_token1, _token0Amount);\n        }\n        require(twapPrice > 0, \"UnoRe: no pairs\");\n        uint256 desiredAmount = (twapPrice * (100 * SLIPPAGE_PRECISION - slippage)) / 100 / SLIPPAGE_PRECISION;\n\n        uint256 convertedAmount = _convertTokenForToken(UNISWAP_ROUTER, _token0, _token1, _token0Amount, desiredAmount);\n        return convertedAmount;\n    }\n\n    function convertForETH(\n        address _token,\n        uint256 _convertAmount\n    ) external override onlyWhiteList whenNotPaused nonReentrant returns (uint256) {\n        require(IERC20(_token).balanceOf(msg.sender) > 0, \"UnoRe: zero balance\");\n        if (_token != address(0)) {\n            TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _convertAmount);\n        }\n        uint256 twapPriceInUSDC = getETHAmountForToken(_token, _convertAmount);\n        require(twapPriceInUSDC > 0, \"UnoRe: no pairs\");\n        uint256 desiredAmount = (twapPriceInUSDC * (100 * SLIPPAGE_PRECISION - slippage)) / 100 / SLIPPAGE_PRECISION;\n\n        uint256 convertedAmount = _convertTokenForETH(UNISWAP_ROUTER, _token, _convertAmount, desiredAmount);\n        return convertedAmount;\n    }\n\n    function _convertTokenForToken(\n        address _dexAddress,\n        address _token0,\n        address _token1,\n        uint256 _convertAmount,\n        uint256 _desiredAmount\n    ) private returns (uint256) {\n        IUniswapRouter02 _dexRouter = IUniswapRouter02(_dexAddress);\n        address _factory = _dexRouter.factory();\n        uint256 usdtBalanceBeforeSwap = IERC20(_token1).balanceOf(msg.sender);\n        address inpToken = _dexRouter.WETH();\n        if (_token0 != address(0)) {\n            inpToken = _token0;\n            TransferHelper.safeApprove(_token0, address(_dexRouter), _convertAmount);\n        }\n        if (IUniswapFactory(_factory).getPair(inpToken, _token1) != address(0)) {\n            address[] memory path = new address[](2);\n            path[0] = inpToken;\n            path[1] = _token1;\n            if (_token0 == address(0)) {\n                _dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _convertAmount}(\n                    _desiredAmount,\n                    path,\n                    msg.sender,\n                    block.timestamp + swapDeadline\n                );\n            } else {\n                _dexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                    _convertAmount,\n                    _desiredAmount,\n                    path,\n                    msg.sender,\n                    block.timestamp\n                );\n            }\n        }\n        uint256 usdtBalanceAfterSwap = IERC20(_token1).balanceOf(msg.sender);\n        emit ConvertedTokenToToken(\n            _dexAddress,\n            _token0,\n            _token1,\n            _convertAmount,\n            _desiredAmount,\n            usdtBalanceAfterSwap - usdtBalanceBeforeSwap\n        );\n        return usdtBalanceAfterSwap - usdtBalanceBeforeSwap;\n    }\n\n    function _convertTokenForETH(\n        address _dexAddress,\n        address _token,\n        uint256 _convertAmount,\n        uint256 _desiredAmount\n    ) private returns (uint256) {\n        IUniswapRouter02 _dexRouter = IUniswapRouter02(_dexAddress);\n        address _factory = _dexRouter.factory();\n        uint256 ethBalanceBeforeSwap = address(msg.sender).balance;\n        SafeERC20.forceApprove(IERC20(_token), address(_dexRouter), _convertAmount);\n        if (IUniswapFactory(_factory).getPair(_token, WETH) != address(0)) {\n            address[] memory path = new address[](2);\n            path[0] = _token;\n            path[1] = WETH;\n            _dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                _convertAmount,\n                _desiredAmount,\n                path,\n                msg.sender,\n                block.timestamp + swapDeadline\n            );\n        }\n        uint256 ethBalanceAfterSwap = address(msg.sender).balance;\n        emit ConvertedTokenToETH(_dexAddress, _token, _convertAmount, _desiredAmount, ethBalanceAfterSwap - ethBalanceBeforeSwap);\n        return ethBalanceAfterSwap - ethBalanceBeforeSwap;\n    }\n\n    /**\n     * @dev Get expected _token1 amount for _inputAmount of _token0\n     * _desiredAmount should consider decimals based on _token1\n     */\n    function _getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) private view returns (uint256) {\n        uint256 expectedToken1Amount = IOraclePriceFeed(oraclePriceFeed).consult(_token0, _token1, _token0Amount);\n\n        return expectedToken1Amount;\n    }\n}\n"
    },
    "contracts/factories/RewarderFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"../Rewarder.sol\";\nimport \"../interfaces/IRewarderFactory.sol\";\n\ncontract RewarderFactory is IRewarderFactory {\n    constructor() {}\n\n    function newRewarder(address _operator, address _currency, address _pool) external override returns (address) {\n        Rewarder _rewarder = new Rewarder(_operator, _currency, _pool);\n        address _rewarderAddr = address(_rewarder);\n\n        return _rewarderAddr;\n    }\n}\n"
    },
    "contracts/factories/RiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"../RiskPool.sol\";\nimport \"../interfaces/IRiskPoolFactory.sol\";\n\ncontract RiskPoolFactory is IRiskPoolFactory {\n    constructor() {}\n\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _cohort,\n        address _currency\n    ) external override returns (address) {\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency);\n        address _riskPoolAddr = address(_riskPool);\n\n        return _riskPoolAddr;\n    }\n}\n"
    },
    "contracts/factories/SalesPolicyFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../libraries/Counters.sol\";\nimport \"../SalesPolicy.sol\";\nimport \"../interfaces/ISalesPolicy.sol\";\nimport \"../interfaces/ISalesPolicyFactory.sol\";\nimport \"../interfaces/IGnosisSafe.sol\";\n\ncontract SalesPolicyFactory is ISalesPolicyFactory, ReentrancyGuard, Ownable {\n    using Counters for Counters.Counter;\n    // It should be okay if Protocol is struct\n    struct Protocol {\n        address protocolAddress; // Address of that protocol\n        bool isBlackList; // initial true\n    }\n\n    bool public override checkIfProtocolInWhitelistArray;\n\n    address public premiumPool;\n    address public exchangeAgent;\n    address public capitalAgent;\n\n    address public salesPolicy;\n\n    mapping(uint16 => Protocol) public getProtocol;\n    mapping(address => uint16) public override getProtocolId;\n    Counters.Counter private protocolIds;\n\n    address public usdcToken;\n\n    event ProtocolCreated(uint16 _protocolIdx, address _protocol);\n    event LogSetPremiumPool(address indexed _premiumPool);\n    event LogUpdateCheckIfProtocolInWhitelistArray(bool _status);\n    event LogSetBlackListProtocol(uint16 _protocolId, address indexed _protocol);\n    event LogSetExchangeAgentInPolicy(address _exchangeAgent);\n    event LogSetBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline);\n    event LogSetPremiumPoolInPolicy(address _premiumPool);\n    event LogSetSignerInPolicy(address _signer);\n    event LogSetCapitalAgentInPolicy(address _capitalAgent);\n    event LogSetProtocolURIInPolicy(string _uri);\n    event LogApprovePremiumInPolicy(address _premiumCurrency);\n\n    constructor(\n        address _usdcToken,\n        address _exchangeAgent,\n        address _premiumPool,\n        address _capitalAgent,\n        address _multiSigWallet\n    ) Ownable(_multiSigWallet) {\n        require(_usdcToken != address(0), \"UnoRe: zero USDC address\");\n        require(_exchangeAgent != address(0), \"UnoRe: zero exchangeAgent address\");\n        require(_premiumPool != address(0), \"UnoRe: zero premiumPool address\");\n        require(_capitalAgent != address(0), \"UnoRe: zero capitalAgent address\");\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \"UnoRe: more than three owners requied\");\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \"UnoRe: more than one owners requied to verify\");\n        usdcToken = _usdcToken;\n        premiumPool = _premiumPool;\n        exchangeAgent = _exchangeAgent;\n        capitalAgent = _capitalAgent;\n    }\n\n    // This action can be done only by owner\n    // protoco id will be started from no.1 instead of no.0.\n    function addProtocol(address _protocolAddress) external onlyOwner nonReentrant {\n        protocolIds.next();\n        uint16 lastIdx = uint16(protocolIds.current);\n\n        getProtocol[lastIdx] = Protocol({protocolAddress: _protocolAddress, isBlackList: false});\n\n        getProtocolId[_protocolAddress] = lastIdx;\n\n        emit ProtocolCreated(lastIdx, _protocolAddress);\n    }\n\n    function newSalesPolicy(\n        address _exchangeAgent,\n        address _premiumPool,\n        address _capitalAgent\n    ) external onlyOwner nonReentrant returns (address) {\n        SalesPolicy _salesPolicy = new SalesPolicy(address(this), _exchangeAgent, _premiumPool, _capitalAgent, usdcToken);\n        salesPolicy = address(_salesPolicy);\n        ICapitalAgent(capitalAgent).setPolicy(address(_salesPolicy));\n\n        return address(_salesPolicy);\n    }\n\n    function allProtocolsLength() external view returns (uint256) {\n        return protocolIds.current;\n    }\n\n    function updateCheckIfProtocolInWhitelistArray(bool _status) external onlyOwner {\n        checkIfProtocolInWhitelistArray = _status;\n        emit LogUpdateCheckIfProtocolInWhitelistArray(_status);\n    }\n\n    function setBlackListProtocolById(uint16 _protocolId) external onlyOwner {\n        getProtocol[_protocolId].isBlackList = true;\n        emit LogSetBlackListProtocol(_protocolId, getProtocol[_protocolId].protocolAddress);\n    }\n\n    function setBlackListProtocolByAddress(address _protocol) external onlyOwner {\n        // require(_protocol != address(0), \"UnoRe: zero address\");\n        uint16 _protocolId = getProtocolId[_protocol];\n        getProtocol[_protocolId].isBlackList = true;\n        emit LogSetBlackListProtocol(_protocolId, _protocol);\n    }\n\n    function setPremiumPool(address _premiumPool) external onlyOwner {\n        require(_premiumPool != address(0), \"UnoRe: zero address\");\n        premiumPool = _premiumPool;\n        emit LogSetPremiumPool(_premiumPool);\n    }\n\n    function setExchangeAgentInPolicy(address _exchangeAgent) external onlyOwner {\n        ISalesPolicy(salesPolicy).setExchangeAgent(_exchangeAgent);\n        emit LogSetExchangeAgentInPolicy(_exchangeAgent);\n    }\n\n    function setBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline) external onlyOwner {\n        require(_maxDeadline > 0, \"UnoRe: zero max deadline\");\n        ISalesPolicy(salesPolicy).setBuyPolicyMaxDeadline(_maxDeadline);\n        emit LogSetBuyPolicyMaxDeadlineInPolicy(_maxDeadline);\n    }\n\n    function setPremiumPoolInPolicy(address _premiumPool) external onlyOwner {\n        ISalesPolicy(salesPolicy).setPremiumPool(_premiumPool);\n        emit LogSetPremiumPoolInPolicy(_premiumPool);\n    }\n\n    function setSignerInPolicy(address _signer) external onlyOwner {\n        ISalesPolicy(salesPolicy).setSigner(_signer);\n        emit LogSetSignerInPolicy(_signer);\n    }\n\n    function setCapitalAgentInPolicy(address _capitalAgent) external onlyOwner {\n        ISalesPolicy(salesPolicy).setCapitalAgent(_capitalAgent);\n        emit LogSetCapitalAgentInPolicy(_capitalAgent);\n    }\n\n    function setProtocolURIInPolicy(string memory _uri) external onlyOwner {\n        ISalesPolicy(salesPolicy).setProtocolURI(_uri);\n        emit LogSetProtocolURIInPolicy(_uri);\n    }\n\n    function approvePremiumInPolicy(address _premiumCurrency) external onlyOwner {\n        ISalesPolicy(salesPolicy).approvePremium(_premiumCurrency);\n        emit LogApprovePremiumInPolicy(_premiumCurrency);\n    }\n\n    function getProtocolData(uint16 _protocolIdx) external view override returns (address protocolAddress, bool isBlackList) {\n        return (getProtocol[_protocolIdx].protocolAddress, getProtocol[_protocolIdx].isBlackList);\n    }\n\n    function killSalesPolicyPool() external onlyOwner {\n        ISalesPolicy(salesPolicy).killPool();\n    }\n\n    function reviveSalesPolicyPool() external onlyOwner {\n        ISalesPolicy(salesPolicy).revivePool();\n    }\n}\n"
    },
    "contracts/factories/SyntheticSSIPFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"../SyntheticSSIP.sol\";\nimport \"../interfaces/ISyntheticSSIPFactory.sol\";\n\ncontract SyntheticSSIPFactory is ISyntheticSSIPFactory {\n    constructor() {}\n\n    function newSyntheticSSIP(address _multiSigWallet, address _lpToken) external override returns (address) {\n        SyntheticSSIP _ssip = new SyntheticSSIP(_lpToken, _multiSigWallet);\n        address _ssipAddr = address(_ssip);\n        return _ssipAddr;\n    }\n}\n"
    },
    "contracts/factories/SyntheticSSRPFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"../SyntheticSSRP.sol\";\nimport \"../interfaces/ISyntheticSSRPFactory.sol\";\n\ncontract SyntheticSSRPFactory is ISyntheticSSRPFactory {\n    constructor() {}\n\n    function newSyntheticSSRP(address _multiSigWallet, address _lpToken) external override returns (address) {\n        SyntheticSSRP _ssip = new SyntheticSSRP(_lpToken, _multiSigWallet);\n        address _ssipAddr = address(_ssip);\n        return _ssipAddr;\n    }\n}\n"
    },
    "contracts/governance/ClaimProcessor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../interfaces/ISingleSidedInsurancePool.sol\";\n\ncontract ClaimProcessor is AccessControl {\n\n    bytes32 public constant GUARDIAN_COUNCIL_ROLE = keccak256(\"GUARDIAN_COUNCIL_ROLE\");\n    bytes32 public constant PAYOUT_REQUEST_ROLE = keccak256(\"PAYOUT_REQUEST_ROLE\");\n\n    struct Claim {\n        bool approved;\n        bool settled;\n        address ssip;\n        uint256 policyId;\n        address payoutAddress;\n        uint256 insureAmount;\n    }\n\n    uint256 public lastIndex;\n\n    mapping (uint256 => Claim) public assertion;\n\n    event PolicyRequested(address indexed _ssip, uint256 indexed _assertionId, uint256 indexed _policyId);\n    event PolicyApproved(uint256 indexed _assertionId);\n    event PolicyClaimed(address indexed _user, uint256 indexed _assertionId, address indexed _ssip);\n\n    constructor(address _governance) {\n        _grantRole(GUARDIAN_COUNCIL_ROLE, _governance);\n        _setRoleAdmin(PAYOUT_REQUEST_ROLE, GUARDIAN_COUNCIL_ROLE);\n        _setRoleAdmin(GUARDIAN_COUNCIL_ROLE, GUARDIAN_COUNCIL_ROLE);\n    }\n\n    function requestPolicyId(uint256 _policyId, address _ssip, address _to, uint256 _amount) external onlyRole(PAYOUT_REQUEST_ROLE) {\n        uint256 _lastIndex = ++lastIndex;\n        Claim memory _claim = assertion[_lastIndex];\n        _claim.ssip = _ssip;\n        _claim.policyId = _policyId;\n        _claim.payoutAddress = _to;\n        _claim.insureAmount = _amount;\n        assertion[_lastIndex] = _claim;\n        lastIndex++;\n        emit PolicyRequested(_ssip, _lastIndex, _policyId);\n    }\n\n    function approvePolicy(uint256 _assertionId) external onlyRole(GUARDIAN_COUNCIL_ROLE) {\n        require(!assertion[_assertionId].approved, \"UnoRe: policy already approved\");\n        assertion[_assertionId].approved = true;\n        emit PolicyApproved(_assertionId);\n    }\n\n    function claimPolicy(uint256 _assertionId) external {\n        Claim storage _policy = assertion[_assertionId];\n        require(_policy.approved && !_policy.settled, \"UnoRe: not approved or already settled\");\n        _policy.settled = true;\n        ISingleSidedInsurancePool(_policy.ssip).settlePayout(_policy.policyId, _policy.payoutAddress, _policy.insureAmount);\n        \n        emit PolicyClaimed(msg.sender, _assertionId, _policy.ssip);\n    }\n}\n"
    },
    "contracts/interfaces/EscalationManagerInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity =0.8.23;\n\nimport \"./OptimisticOracleV3CallbackRecipientInterface.sol\";\n\n/**\n * @title Escalation Manager Interface\n * @notice Interface for contracts that manage the escalation policy for assertions.\n */\ninterface EscalationManagerInterface is OptimisticOracleV3CallbackRecipientInterface {\n    // Assertion policy parameters as returned by the escalation manager.\n    struct AssertionPolicy {\n        bool blockAssertion; // If true, the the assertion should be blocked.\n        bool arbitrateViaEscalationManager; // If true, the escalation manager will arbitrate the assertion.\n        bool discardOracle; // If true, the Optimistic Oracle V3 should discard the oracle price.\n        bool validateDisputers; // If true, the escalation manager will validate the disputers.\n    }\n\n    /**\n     * @notice Returns the assertion policy for the given assertion.\n     * @param assertionId the assertion identifier to get the assertion policy for.\n     * @return the assertion policy for the given assertion identifier.\n     */\n    function getAssertionPolicy(bytes32 assertionId) external view returns (AssertionPolicy memory);\n\n    /**\n     * @notice Callback function that is called by Optimistic Oracle V3 when an assertion is disputed. Used to validate\n     * if the dispute should be allowed based on the escalation policy.\n     * @param assertionId the assertionId to validate the dispute for.\n     * @param disputeCaller the caller of the dispute function.\n     * @return bool true if the dispute is allowed, false otherwise.\n     */\n    function isDisputeAllowed(bytes32 assertionId, address disputeCaller) external view returns (bool);\n\n    /**\n     * @notice Implements price getting logic. This method is called by Optimistic Oracle V3 settling an assertion that\n     * is configured to use the escalation manager as the oracle. The interface is constructed to mimic the UMA DVM.\n     * @param identifier price identifier being requested.\n     * @param time timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return price from the escalation manager to inform the resolution of the dispute.\n     */\n    function getPrice(bytes32 identifier, uint256 time, bytes memory ancillaryData) external returns (int256);\n\n    /**\n     * @notice Implements price requesting logic for the escalation manager. This function is called by the Optimistic\n     * Oracle V3 on dispute and is constructed to mimic that of the UMA DVM interface.\n     * @param identifier the identifier to fetch the price for.\n     * @param time the time to fetch the price for.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function requestPrice(bytes32 identifier, uint256 time, bytes memory ancillaryData) external;\n}\n"
    },
    "contracts/interfaces/ICapitalAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface ICapitalAgent {\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\n\n    function setPolicy(address _policy) external;\n\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\n\n    function SSIPStaking(uint256 _stakingAmount) external;\n\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isFinished) external;\n\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\n\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\n\n    function policySale(uint256 _coverageAmount) external;\n\n    function updatePolicyStatus(uint256 _policyId) external;\n\n    function getPolicyInfo() external returns(address, uint256, bool);\n}\n"
    },
    "contracts/interfaces/IClaimProcessor.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\ninterface IClaimProcessor {\n    function requestPolicyId(uint256 _policyId, address _ssip, address _to, uint256 _amount) external;\n}"
    },
    "contracts/interfaces/IExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface IExchangeAgent {\n    function usdcToken() external view returns (address);\n\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\n\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\n\n    function getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) external view returns (uint256);\n\n    function convertForToken(address _token0, address _token1, uint256 _token0Amount) external returns (uint256);\n\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGnosisSafe.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\ninterface IGnosisSafe {\n    function getOwners() external view returns (address[] memory);\n\n    function getThreshold() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGovernance.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity =0.8.23;\n\ninterface IGovernance {\n    enum ProposalState {\n        Pending,\n        Canceled,\n        Active,\n        Failed,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /**\n     * @dev Get the current state of a proposal\n     * @param proposalId id of the proposal\n     * @return The current state if the proposal\n     **/\n    function getProposalState(uint256 proposalId) external view returns (ProposalState);\n}\n"
    },
    "contracts/interfaces/IMigration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface IMigration {\n    function onMigration(address who_, uint256 amount_, bytes memory data_) external;\n}\n"
    },
    "contracts/interfaces/IOraclePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IOraclePriceFeed {\n    function getEthUsdPrice() external view returns (uint256);\n\n    function getAssetEthPrice(address _asset) external view returns (uint256);\n\n    function consult(address tokenA, address tokenB, uint256 amountIn) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IPayoutRequest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IPayoutRequest {\n    function assertionResolvedCallback(bytes32 _assertionId, bool _assertedTruthfully) external;\n}\n"
    },
    "contracts/interfaces/IPremiumPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IPremiumPool {\n    function collectPremium(address _premiumCurrency, uint256 _premiumAmount) external;\n\n    function collectPremiumInETH() external payable;\n\n    function withdrawPremium(address _currency, address _to, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\ninterface IRewarder {\n    function currency() external view returns (address);\n\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\n\n    function onRewardForRollOver(address to, uint256 unoAmount, uint256 accumulatedAmount) external payable returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRewarderFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRewarderFactory {\n    function newRewarder(address _operator, address _currency, address _pool) external returns (address);\n}\n"
    },
    "contracts/interfaces/IRiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRiskPool {\n    function enter(address _from, uint256 _amount) external;\n\n    function leaveFromPoolInPending(address _to, uint256 _amount) external;\n\n    function leaveFromPending(address _to, uint256 _amount) external returns (uint256, uint256);\n\n    function cancelWithdrawRequest(address _to) external returns (uint256, uint256);\n\n    function policyClaim(address _to, uint256 _amount) external returns (uint256 realClaimAmount);\n\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external returns (uint256);\n\n    function setMinLPCapital(uint256 _minLPCapital) external;\n\n    function currency() external view returns (address);\n\n    function getTotalWithdrawRequestAmount() external view returns (uint256);\n\n    function getWithdrawRequest(address _to) external view returns (uint256, uint256, uint256);\n\n    function lpPriceUno() external view returns (uint256);\n\n    function emergencyWithdraw(address _to, uint256 _amount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IRiskPoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IRiskPoolERC20 {\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IRiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IRiskPoolFactory {\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _pool,\n        address _currency\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/ISalesPolicy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISalesPolicy {\n    function setPremiumPool(address _premiumPool) external;\n\n    function setExchangeAgent(address _exchangeAgent) external;\n\n    function setCapitalAgent(address _capitalAgent) external;\n\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\n\n    function approvePremium(address _premiumCurrency) external;\n\n    function setProtocolURI(string memory newURI) external;\n\n    function setSigner(address _signer) external;\n\n    function updatePolicyExpired(uint256 _policyId) external;\n\n    function markToClaim(uint256 _policyId) external;\n\n    function allPoliciesLength() external view returns (uint256);\n\n    function killPool() external;\n\n    function revivePool() external;\n\n    function getPolicyData(uint256 _policyId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            bool\n        );\n}\n"
    },
    "contracts/interfaces/ISalesPolicyFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISalesPolicyFactory {\n    function getProtocolId(address _protocolAddress) external view returns (uint16);\n\n    function checkIfProtocolInWhitelistArray() external view returns (bool);\n\n    function getProtocolData(uint16 _protocolIdx) external view returns (address protocolAddress, bool isBlackList);\n}\n"
    },
    "contracts/interfaces/ISingleSidedInsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISingleSidedInsurancePool {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external payable;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending(uint256 _amount) external;\n\n    function harvest(address _to) external;\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\n\n    function riskPool() external view returns (address);\n\n    function settlePayout(uint256 _policyId, address _payout, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/ISingleSidedReinsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISingleSidedReinsurancePool {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending(uint256 _amount) external;\n\n    function harvest(address _to) external;\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\n\n    function riskPool() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ISyntheticSSIP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISyntheticSSIP {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending() external;\n\n    function harvest(address _to) external;\n}\n"
    },
    "contracts/interfaces/ISyntheticSSIPFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISyntheticSSIPFactory {\n    function newSyntheticSSIP(address _multiSigWallet, address _lpToken) external returns (address);\n}\n"
    },
    "contracts/interfaces/ISyntheticSSRP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISyntheticSSRP {\n    function updatePool() external;\n\n    function enterInPool(uint256 _amount) external;\n\n    function leaveFromPoolInPending(uint256 _amount) external;\n\n    function leaveFromPending() external;\n\n    function harvest(address _to) external;\n}\n"
    },
    "contracts/interfaces/ISyntheticSSRPFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISyntheticSSRPFactory {\n    function newSyntheticSSRP(address _multiSigWallet, address _lpToken) external returns (address);\n}\n"
    },
    "contracts/interfaces/ITwapOraclePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ITwapOraclePriceFeed {\n    function update() external;\n\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/ITwapOraclePriceFeedFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ITwapOraclePriceFeedFactory {\n    function twapOraclePriceFeedList(address _pair) external view returns (address);\n\n    function getTwapOraclePriceFeed(address _token0, address _token1) external view returns (address twapOraclePriceFeed);\n}\n"
    },
    "contracts/interfaces/IUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface IUniswapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IUniswapRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface IUniswapRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);\n\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IUniswapRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\nimport \"./IUniswapRouter01.sol\";\n\ninterface IUniswapRouter02 is IUniswapRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/OptimisticOracleV3CallbackRecipientInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity =0.8.23;\n\n/**\n * @title Optimistic Oracle V3 Callback Recipient Interface\n * @notice Interface for contracts implementing callbacks to be received from the Optimistic Oracle V3.\n */\ninterface OptimisticOracleV3CallbackRecipientInterface {\n    /**\n     * @notice Callback function that is called by Optimistic Oracle V3 when an assertion is resolved.\n     * @param assertionId The identifier of the assertion that was resolved.\n     * @param assertedTruthfully Whether the assertion was resolved as truthful or not.\n     */\n    function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully) external;\n\n    /**\n     * @notice Callback function that is called by Optimistic Oracle V3 when an assertion is disputed.\n     * @param assertionId The identifier of the assertion that was disputed.\n     */\n    function assertionDisputedCallback(bytes32 assertionId) external;\n}\n"
    },
    "contracts/interfaces/OptimisticOracleV3Interface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Optimistic Oracle V3 Interface that callers must use to assert truths about the world.\n */\ninterface OptimisticOracleV3Interface {\n    // Struct grouping together the settings related to the escalation manager stored in the assertion.\n    struct EscalationManagerSettings {\n        bool arbitrateViaEscalationManager; // False if the DVM is used as an oracle (EscalationManager on True).\n        bool discardOracle; // False if Oracle result is used for resolving assertion after dispute.\n        bool validateDisputers; // True if the EM isDisputeAllowed should be checked on disputes.\n        address assertingCaller; // Stores msg.sender when assertion was made.\n        address escalationManager; // Address of the escalation manager (zero address if not configured).\n    }\n\n    // Struct for storing properties and lifecycle of an assertion.\n    struct Assertion {\n        EscalationManagerSettings escalationManagerSettings; // Settings related to the escalation manager.\n        address asserter; // Address of the asserter.\n        uint64 assertionTime; // Time of the assertion.\n        bool settled; // True if the request is settled.\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\n        uint64 expirationTime; // Unix timestamp marking threshold when the assertion can no longer be disputed.\n        bool settlementResolution; // Resolution of the assertion (false till resolved).\n        bytes32 domainId; // Optional domain that can be used to relate the assertion to others in the escalationManager.\n        bytes32 identifier; // DVM identifier to use for price requests in the event of a dispute.\n        uint256 bond; // Amount of currency that the asserter has bonded.\n        address callbackRecipient; // Address that receives the callback.\n        address disputer; // Address of the disputer.\n    }\n\n    // Struct for storing cached currency whitelist.\n    struct WhitelistedCurrency {\n        bool isWhitelisted; // True if the currency is whitelisted.\n        uint256 finalFee; // Final fee of the currency.\n    }\n\n    /**\n     * @notice Returns the default identifier used by the Optimistic Oracle V3.\n     * @return The default identifier.\n     */\n    function defaultIdentifier() external view returns (bytes32);\n\n    /**\n     * @notice Fetches information about a specific assertion and returns it.\n     * @param assertionId unique identifier for the assertion to fetch information for.\n     * @return assertion information about the assertion.\n     */\n    function getAssertion(bytes32 assertionId) external view returns (Assertion memory);\n\n    /**\n     * @notice Asserts a truth about the world, using the default currency and liveness. No callback recipient or\n     * escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage\n     * (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\n     * @dev The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\n     * any other account that the caller wants to receive the bond at settlement time.\n     * @return assertionId unique identifier for this assertion.\n     */\n    function assertTruthWithDefaults(bytes memory claim, address asserter) external returns (bytes32);\n\n    /**\n     * @notice Asserts a truth about the world, using a fully custom configuration.\n     * @dev The caller must approve this contract to spend at least bond amount of currency.\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\n     * any other account that the caller wants to receive the bond at settlement time.\n     * @param callbackRecipient if configured, this address will receive a function call assertionResolvedCallback and\n     * assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The\n     * recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\n     * @param escalationManager if configured, this address will control escalation properties of the assertion. This\n     * means a) choosing to arbitrate via the DVM, b) choosing to discard assertions on dispute, or choosing to\n     * validate disputes. Combining these, the asserter can define their own security properties for the assertion.\n     * escalationManager also _must_ implement the same callbacks as callbackRecipient.\n     * @param liveness time to wait before the assertion can be resolved. Assertion can be disputed in this time.\n     * @param currency bond currency pulled from the caller and held in escrow until the assertion is resolved.\n     * @param bond amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This\n     * must be >= getMinimumBond(address(currency)).\n     * @param identifier DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\n     * @param domainId optional domain that can be used to relate this assertion to others in the escalationManager and\n     * can be used by the configured escalationManager to define custom behavior for groups of assertions. This is\n     * typically used for \"escalation games\" by changing bonds or other assertion properties based on the other\n     * assertions that have come before. If not needed this value should be 0 to save gas.\n     * @return assertionId unique identifier for this assertion.\n     */\n    function assertTruth(\n        bytes memory claim,\n        address asserter,\n        address callbackRecipient,\n        address escalationManager,\n        uint64 liveness,\n        IERC20 currency,\n        uint256 bond,\n        bytes32 identifier,\n        bytes32 domainId\n    ) external returns (bytes32);\n\n    /**\n     * @notice Fetches information about a specific identifier & currency from the contracts and stores a local copy\n     * of the information within this contract. This is used to save gas when making assertions as we can avoid an\n     * external call to the contracts to fetch this.\n     * @param identifier identifier to fetch information for and store locally.\n     * @param currency currency to fetch information for and store locally.\n     */\n    function synParams(bytes32 identifier, address currency) external;\n\n    /**\n     * @notice Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the\n     * asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle\n     * result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an\n     * amount of the bond is sent to the Store as an oracle fee based on the burnedBondPercentage. The remainder of\n     * the bond is returned to the asserter or disputer.\n     * @param assertionId unique identifier for the assertion to resolve.\n     */\n    function settleAssertion(bytes32 assertionId) external;\n\n    /**\n     * @notice Settles an assertion and returns the resolution.\n     * @param assertionId unique identifier for the assertion to resolve and return the resolution for.\n     * @return resolution of the assertion.\n     */\n    function settleAndGetAssertionResult(bytes32 assertionId) external returns (bool);\n\n    /**\n     * @notice Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then\n     * this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\n     * @param assertionId unique identifier for the assertion to fetch the resolution for.\n     * @return resolution of the assertion.\n     */\n    function getAssertionResult(bytes32 assertionId) external view returns (bool);\n\n    function disputeAssertion(bytes32 assertionId, address disputer) external;\n\n    /**\n     * @notice Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the\n     * currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\n     * @param currency currency to calculate the minimum bond for.\n     * @return minimum bond amount.\n     */\n    function getMinimumBond(address currency) external view returns (uint256);\n\n    event AssertionMade(\n        bytes32 indexed assertionId,\n        bytes32 domainId,\n        bytes claim,\n        address indexed asserter,\n        address callbackRecipient,\n        address escalationManager,\n        address caller,\n        uint64 expirationTime,\n        IERC20 currency,\n        uint256 bond,\n        bytes32 indexed identifier\n    );\n\n    event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer);\n\n    event AssertionSettled(\n        bytes32 indexed assertionId,\n        address indexed bondRecipient,\n        bool disputed,\n        bool settlementResolution,\n        address settleCaller\n    );\n\n    event AdminPropertiesSet(IERC20 defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage);\n}\n"
    },
    "contracts/libraries/AncillaryData.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity =0.8.23;\n\n/**\n * @title Library for encoding and decoding ancillary data for DVM price requests.\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\n * smart contracts. More details on UMA's ancillary data guidelines below:\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\n */\nlibrary AncillaryData {\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\n        unchecked {\n            uint256 x = uint256(bytesIn);\n\n            // Nibble interleave\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\n            x = (x | (x * 2 ** 64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\n            x = (x | (x * 2 ** 32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\n            x = (x | (x * 2 ** 16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\n            x = (x | (x * 2 ** 8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\n            x = (x | (x * 2 ** 4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\n\n            // Hex encode\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\n\n            // Return the result.\n            return bytes32(x);\n        }\n    }\n\n    /**\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\n     * @param bytesIn bytes32 to encode.\n     * @return utf8 encoded bytes32.\n     */\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\n    }\n\n    /**\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\n     * @dev Will return address in all lower case characters and without the leading 0x.\n     * @param x address to encode.\n     * @return utf8 encoded address bytes.\n     */\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\n    }\n\n    /**\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\n     */\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\n        if (x == 0) {\n            return \"0\";\n        }\n        uint256 j = x;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (x != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            x /= 10;\n        }\n        return bstr;\n    }\n\n    function appendKeyValueBytes32(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        bytes32 value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\n    }\n\n    /**\n     * @notice Adds \"key:value\" to `currentAncillaryData` where `value` is an address that first needs to be converted\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\n     * @return Newly appended ancillary data.\n     */\n    function appendKeyValueAddress(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        address value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\n    }\n\n    /**\n     * @notice Adds \"key:value\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\n     * @return Newly appended ancillary data.\n     */\n    function appendKeyValueUint(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        uint256 value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\n    }\n\n    /**\n     * @notice Helper method that returns the left hand side of a \"key:value\" pair plus the colon \":\" and a leading\n     * comma \",\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\n     */\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\n        if (currentAncillaryData.length > 0) {\n            return abi.encodePacked(\",\", key, \":\");\n        } else {\n            return abi.encodePacked(key, \":\");\n        }\n    }\n}\n"
    },
    "contracts/libraries/Counters.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\n/**\n * @title Counter\n * @author Matt Condon (@shrugs)\n * @dev Provides an incrementing uint256 id acquired by the `Counter#next` getter.\n * Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really.\n *\n * Include with `using Counter for Counter.Counter;`\n * @notice Does not allow an Id of 0, which is popularly used to signify a null state in solidity.\n * Does not protect from overflows, but if you have 2^256 ids, you have other problems.\n * (But actually, it's generally impossible to increment a counter this many times, energy wise\n * so it's not something you have to worry about.)\n */\nlibrary Counters {\n    struct Counter {\n        uint256 current; // default: 0\n    }\n\n    function next(Counter storage index) internal returns (uint256) {\n        index.current += 1;\n        return index.current;\n    }\n}\n"
    },
    "contracts/libraries/EIP712Base.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ncontract EIP712Base {\n    struct EIP712Domain {\n        string name;\n        string version;\n        address verifyingContract;\n        bytes32 salt;\n    }\n\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\n        keccak256(bytes(\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"));\n\n    bytes32 internal domainSeparator;\n\n    constructor(string memory name, string memory version) {\n        domainSeparator = keccak256(\n            abi.encode(\n                EIP712_DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                address(this),\n                bytes32(getChainID())\n            )\n        );\n    }\n\n    function getChainID() internal view returns (uint256 id) {\n        assembly {\n            id := chainid()\n        }\n    }\n\n    function getDomainSeparator() private view returns (bytes32) {\n        return domainSeparator;\n    }\n\n    /**\n     * Accept message hash and returns hash message in EIP712 compatible form\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\n     * https://eips.ethereum.org/EIPS/eip-712\n     * \"\\\\x19\" makes the encoding deterministic\n     * \"\\\\x01\" is the version byte to make it compatible to EIP-191\n     */\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", getDomainSeparator(), messageHash));\n    }\n}\n"
    },
    "contracts/libraries/MultiSigWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract MultiSigWallet is ReentrancyGuard {\n    event Deposit(address indexed sender, uint256 amount, uint256 balance);\n    event SubmitTransaction(address indexed signer, uint256 indexed txIndex, address indexed to, uint256 value, bytes data);\n    event ConfirmTransaction(address indexed signer, uint256 indexed txIndex);\n    event RevokeConfirmation(address indexed signer, uint256 indexed txIndex);\n    event ExecuteTransaction(address indexed signer, uint256 indexed txIndex);\n\n    address[] public signers;\n    mapping(address => bool) public isSigner;\n    uint256 public numConfirmationsRequired;\n\n    struct Transaction {\n        address to;\n        uint256 value;\n        bytes data;\n        bool executed;\n        uint256 numConfirmations;\n    }\n\n    // mapping from tx index => signer => bool\n    mapping(uint256 => mapping(address => bool)) public isConfirmed;\n\n    Transaction[] private transactions;\n\n    modifier onlySigner() {\n        require(isSigner[msg.sender], \"not signer\");\n        _;\n    }\n\n    modifier txExists(uint256 _txIndex) {\n        require(_txIndex < transactions.length, \"tx does not exist\");\n        _;\n    }\n\n    modifier notExecuted(uint256 _txIndex) {\n        require(!transactions[_txIndex].executed, \"tx already executed\");\n        _;\n    }\n\n    modifier notConfirmed(uint256 _txIndex) {\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\n        _;\n    }\n\n    constructor(address[] memory _signers, uint256 _numConfirmationsRequired) {\n        require(_signers.length > 0, \"signers required\");\n        require(\n            _numConfirmationsRequired > 0 && _numConfirmationsRequired <= _signers.length,\n            \"invalid number of required confirmations\"\n        );\n\n        for (uint256 i = 0; i < _signers.length; i++) {\n            address signer = _signers[i];\n\n            require(signer != address(0), \"invalid signer\");\n            require(!isSigner[signer], \"signer not unique\");\n\n            isSigner[signer] = true;\n            signers.push(signer);\n        }\n\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    receive() external payable {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n    function getThreshold() external view returns (uint256) {\n        return numConfirmationsRequired;\n    }\n\n    function getOwners() external view returns (address[] memory) {\n        return signers;\n    }\n\n    /**\n     * @dev when buying is failed, agent should send loan again to TribeOne.\n     */\n    function submitTransaction(address _to, uint256 _value, bytes memory _data) public payable onlySigner nonReentrant {\n        if (_value > 0) {\n            require(msg.value == _value, \"Should send value\");\n        }\n        uint256 txIndex = transactions.length;\n\n        transactions.push(Transaction({to: _to, value: _value, data: _data, executed: false, numConfirmations: 0}));\n\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\n    }\n\n    function confirmTransaction(\n        uint256 _txIndex,\n        bool _execute\n    ) public onlySigner txExists(_txIndex) notExecuted(_txIndex) notConfirmed(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n        isConfirmed[_txIndex][msg.sender] = true;\n        transaction.numConfirmations += 1;\n\n        emit ConfirmTransaction(msg.sender, _txIndex);\n\n        if (transaction.numConfirmations >= numConfirmationsRequired && _execute) {\n            _executeTransaction(_txIndex);\n        }\n    }\n\n    /**\n     * @dev We did not add onlySigner modifier here, because we want to allow any community member to execute transaction\n     * which had got at least minimum number of confirmations\n     */\n    function executeTransaction(uint256 _txIndex) external {\n        _executeTransaction(_txIndex);\n    }\n\n    function _executeTransaction(uint256 _txIndex) private txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(transaction.numConfirmations >= numConfirmationsRequired, \"cannot execute tx\");\n\n        transaction.executed = true;\n\n        (bool success, ) = transaction.to.call{value: transaction.value}(transaction.data);\n        require(success, \"tx failed\");\n\n        emit ExecuteTransaction(msg.sender, _txIndex);\n    }\n\n    function revokeConfirmation(uint256 _txIndex) public onlySigner txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\n\n        transaction.numConfirmations -= 1;\n        isConfirmed[_txIndex][msg.sender] = false;\n\n        emit RevokeConfirmation(msg.sender, _txIndex);\n    }\n\n    function getSigners() public view returns (address[] memory) {\n        return signers;\n    }\n\n    function getTransactionCount() public view returns (uint256) {\n        return transactions.length;\n    }\n\n    function getTransaction(\n        uint256 _txIndex\n    ) public view returns (address to, uint256 value, bytes memory data, bool executed, uint256 numConfirmations) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return (transaction.to, transaction.value, transaction.data, transaction.executed, transaction.numConfirmations);\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity =0.8.23;\n\n// from Uniswap TransferHelper library\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeApprove: approve failed\");\n    }\n\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeTransfer: transfer failed\");\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::transferFrom: transferFrom failed\");\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/Mocks/AirdropMockUNO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../libraries/TransferHelper.sol\";\n\ncontract AirdropMockUNO is Ownable {\n    constructor() Ownable(msg.sender) {}\n\n    receive() external payable {}\n\n    function airdrop(address[] memory _receivers, uint256[] memory _amounts, address _token, address _from) external onlyOwner {\n        require(_receivers.length == _amounts.length, \"Length should be equal\");\n        uint256 len = _receivers.length;\n        for (uint256 ii = 0; ii < len; ii++) {\n            TransferHelper.safeTransferFrom(_token, _from, _receivers[ii], _amounts[ii]);\n        }\n    }\n}\n"
    },
    "contracts/Mocks/MigrationMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"../interfaces/IMigration.sol\";\n\ncontract MigrationMock is IMigration {\n    constructor() {}\n\n    function onMigration(address who_, uint256 amount_, bytes memory data_) external virtual override {}\n}\n"
    },
    "contracts/Mocks/MockSalesPolicy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../libraries/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ICapitalAgent.sol\";\nimport \"../interfaces/ISingleSidedReinsurancePool.sol\";\nimport \"../interfaces/IExchangeAgent.sol\";\nimport \"../interfaces/IPremiumPool.sol\";\nimport \"../interfaces/ISalesPolicyFactory.sol\";\nimport \"../interfaces/ISalesPolicy.sol\";\nimport \"../libraries/TransferHelper.sol\";\nimport \"../EIP712MetaTransaction.sol\";\n\ncontract MockSalesPolicy is\n    EIP712MetaTransaction(\"BuyPolicyMetaTransaction\", \"1\"),\n    ERC721,\n    ISalesPolicy,\n    ReentrancyGuard,\n    Pausable\n{\n    using Counters for Counters.Counter;\n\n    address public immutable factory;\n    struct Policy {\n        uint256 coverStartAt;\n        uint256 coverageDuration;\n        uint256 coverageAmount;\n        address protocolAddress;\n        address premiumCurrency;\n        bool exist;\n        bool expired;\n    }\n\n    uint256 public maxDeadline;\n    address private exchangeAgent;\n    address public premiumPool;\n    address public capitalAgent;\n    address public signer;\n    address public immutable usdcToken; //\n\n    string private protocolURI;\n\n    Counters.Counter private policyIdx;\n\n    mapping(uint256 => Policy) public getPolicy;\n\n    uint256 private maxInteger = type(uint256).max;\n\n    event BuyPolicy(\n        address indexed _owner,\n        address indexed _asset,\n        address _premiumCurrency,\n        address _protocol,\n        uint256 indexed _policyIdx,\n        uint256 _coverageAmount,\n        uint256 _coverageDuration,\n        uint256 _premiumPaid\n    );\n    event LogSetExchangeAgentInPolicy(address indexed _exchangeAgent, address indexed _policyAddress);\n    event LogSetPremiumPoolInPolicy(address indexed _premiumPool, address indexed _policyAddress);\n    event LogSetProtocolURIInPolicy(address indexed _policyAddress, string _uri);\n    event LogSetSignerInPolicy(address indexed _signer, address indexed _policyAddress);\n    event LogSetBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline, address indexed _policyAddress);\n    event LogSetCapitalAgentInPolicy(address indexed _capitalAgent, address indexed _policyAddress);\n    event LogapprovePremiumIInPolicy(address indexed _policyAddress, address indexed _premiumCurrency, address premiumPool);\n    event LogMarkToClaim(uint256 indexed _policyId, uint256 _coverageAmount);\n    event LogUpdatePolicyExpired(uint256 indexed _policyId, uint256 _coverageAmount);\n\n    constructor(\n        address _factory,\n        address _exchangeAgent,\n        address _premiumPool,\n        address _capitalAgent,\n        address _usdcToken\n    ) ERC721(\"Policy insurance\", \"Policy insurance\") {\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        require(_exchangeAgent != address(0), \"UnoRe: zero exchangeAgent address\");\n        require(_premiumPool != address(0), \"UnoRe: zero premiumPool address\");\n        require(_capitalAgent != address(0), \"UnoRe: zero capitalAgent address\");\n        require(_usdcToken != address(0), \"UnoRe: zero USDC address\");\n        factory = _factory;\n        exchangeAgent = _exchangeAgent;\n        capitalAgent = _capitalAgent;\n        usdcToken = _usdcToken;\n        premiumPool = _premiumPool;\n        maxDeadline = 7 days;\n    }\n\n    modifier onlyFactory() {\n        require(msgSender() == factory, \"UnoRe: SalesPolicy Forbidden\");\n        _;\n    }\n\n    modifier onlyCapitalAgent() {\n        require(msgSender() == capitalAgent, \"UnoRe: SalesPolicy Forbidden\");\n        _;\n    }\n\n    function killPool() external onlyFactory {\n        _pause();\n    }\n\n    function revivePool() external onlyFactory {\n        _unpause();\n    }\n\n    receive() external payable {}\n\n    function buyPol(uint256 _lastIndx, address _premiumCurrency, uint256 _coverageAmount) external {\n        getPolicy[_lastIndx] = Policy({\n            protocolAddress: address(0),\n            coverageAmount: _coverageAmount,\n            coverageDuration: 100000,\n            coverStartAt: block.timestamp,\n            premiumCurrency: _premiumCurrency,\n            exist: true,\n            expired: false\n        });\n\n        _mint(msgSender(), _lastIndx);\n        ICapitalAgent(capitalAgent).policySale(getPolicy[_lastIndx].coverageAmount);\n    }\n\n    function buyPolicy(\n        address[] memory _assets,\n        address[] memory _protocols,\n        uint256[] memory _coverageAmount,\n        uint256[] memory _coverageDuration,\n        uint256 _policyPriceInUSDC,\n        uint256 _signedTime,\n        address _premiumCurrency,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) external payable whenNotPaused nonReentrant {\n        uint256 len = _protocols.length;\n        require(len > 0, \"UnoRe: no policy\");\n        require(len == _coverageAmount.length, \"UnoRe: no match protocolIds with coverageAmount\");\n        require(len == _coverageDuration.length, \"UnoRe: no match protocolIds with coverageDuration\");\n        address _signer = getSender(\n            _policyPriceInUSDC,\n            _protocols,\n            _coverageDuration,\n            _coverageAmount,\n            _signedTime,\n            _premiumCurrency,\n            r,\n            s,\n            v\n        );\n        require(_signer != address(0) && _signer == signer, \"UnoRe: invalid signer\");\n        require(_signedTime <= block.timestamp && block.timestamp - _signedTime < maxDeadline, \"UnoRe: signature expired\");\n\n        uint256 premiumPaid;\n        if (_premiumCurrency == address(0)) {\n            premiumPaid = IExchangeAgent(exchangeAgent).getETHAmountForUSDC(_policyPriceInUSDC);\n            require(msg.value >= premiumPaid, \"UnoRe: insufficient paid\");\n            if (msg.value > premiumPaid) {\n                TransferHelper.safeTransferETH(msgSender(), msg.value - premiumPaid);\n            }\n            IPremiumPool(premiumPool).collectPremiumInETH{value: premiumPaid}();\n        } else {\n            premiumPaid = _premiumCurrency != usdcToken\n                ? IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_premiumCurrency, _policyPriceInUSDC)\n                : _policyPriceInUSDC;\n            TransferHelper.safeTransferFrom(_premiumCurrency, msgSender(), address(this), premiumPaid);\n            IPremiumPool(premiumPool).collectPremium(_premiumCurrency, premiumPaid);\n        }\n\n        _buyPolicy(_assets, _protocols, _coverageAmount, _coverageDuration, premiumPaid, _premiumCurrency);\n    }\n\n    function _buyPolicy(\n        address[] memory _assets,\n        address[] memory _protocols,\n        uint256[] memory _coverageAmount,\n        uint256[] memory _coverageDuration,\n        uint256 _premiumPaid,\n        address _premiumCurrency\n    ) private {\n        uint256 _totalCoverage;\n        uint256 lastIdx;\n        uint256 coverAmount;\n        uint256 coverDuration;\n        address _protocol;\n        address _assetLocked;\n\n        bool checkIfProtocolInWhitelistArray = ISalesPolicyFactory(factory).checkIfProtocolInWhitelistArray();\n\n        for (uint256 ii = 0; ii < _protocols.length; ii++) {\n            lastIdx = policyIdx.current;\n            coverAmount = _coverageAmount[ii];\n            coverDuration = _coverageDuration[ii];\n            _protocol = _protocols[ii];\n            _assetLocked = _assets[ii];\n            uint256 premiumPaid = _premiumPaid;\n            bool isAvailableSale = false;\n            if (checkIfProtocolInWhitelistArray) {\n                uint16 _protocolId = ISalesPolicyFactory(factory).getProtocolId(_protocol);\n                if (_protocolId > 0) {\n                    (, bool isBlackList) = ISalesPolicyFactory(factory).getProtocolData(_protocolId);\n                    if (!isBlackList) {\n                        isAvailableSale = true;\n                    }\n                }\n            } else {\n                isAvailableSale = true;\n            }\n            require(isAvailableSale, \"UnoRe: unavailable policy\");\n            getPolicy[lastIdx] = Policy({\n                protocolAddress: _protocol,\n                coverageAmount: coverAmount,\n                coverageDuration: coverDuration,\n                coverStartAt: block.timestamp,\n                premiumCurrency: _premiumCurrency,\n                exist: true,\n                expired: false\n            });\n\n            _mint(msgSender(), lastIdx);\n\n            _totalCoverage += coverAmount;\n\n            emit BuyPolicy(\n                msgSender(),\n                _assetLocked,\n                _premiumCurrency,\n                _protocol,\n                lastIdx,\n                coverAmount,\n                coverDuration,\n                premiumPaid\n            );\n            policyIdx.next();\n        }\n        if (_totalCoverage > 0) {\n            ICapitalAgent(capitalAgent).policySale(_totalCoverage);\n        }\n    }\n\n    function approvePremium(address _premiumCurrency) external override onlyFactory {\n        require(_premiumCurrency != address(0), \"UnoRe: zero address\");\n        require(premiumPool != address(0), \"UnoRe: not defiend premiumPool\");\n        TransferHelper.safeApprove(_premiumCurrency, premiumPool, maxInteger);\n        emit LogapprovePremiumIInPolicy(address(this), _premiumCurrency, premiumPool);\n    }\n\n    function setProtocolURI(string memory newURI) external override onlyFactory {\n        protocolURI = newURI;\n        emit LogSetProtocolURIInPolicy(address(this), newURI);\n    }\n\n    function setPremiumPool(address _premiumPool) external override onlyFactory {\n        require(_premiumPool != address(0), \"UnoRe: zero address\");\n        premiumPool = _premiumPool;\n        emit LogSetPremiumPoolInPolicy(_premiumPool, address(this));\n    }\n\n    function setExchangeAgent(address _exchangeAgent) external override onlyFactory {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        exchangeAgent = _exchangeAgent;\n        emit LogSetExchangeAgentInPolicy(_exchangeAgent, address(this));\n    }\n\n    function setSigner(address _signer) external override onlyFactory {\n        require(_signer != address(0), \"UnoRe: zero address\");\n        signer = _signer;\n        emit LogSetSignerInPolicy(_signer, address(this));\n    }\n\n    function setCapitalAgent(address _capitalAgent) external override onlyFactory {\n        require(_capitalAgent != address(0), \"UnoRe: zero address\");\n        capitalAgent = _capitalAgent;\n        emit LogSetCapitalAgentInPolicy(_capitalAgent, address(this));\n    }\n\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external override onlyFactory {\n        require(_maxDeadline > 0, \"UnoRe: zero max signedTime\");\n        maxDeadline = _maxDeadline;\n        emit LogSetBuyPolicyMaxDeadlineInPolicy(_maxDeadline, address(this));\n    }\n\n    function markToClaim(uint256 _policyId) external override nonReentrant onlyCapitalAgent {\n        require(getPolicy[_policyId].exist, \"UnoRe: marked to claim already\");\n        require(!getPolicy[_policyId].expired, \"UnoRe: policy expired\");\n        getPolicy[_policyId].exist = false;\n        _burn(_policyId);\n        emit LogMarkToClaim(_policyId, getPolicy[_policyId].coverageAmount);\n    }\n\n    function updatePolicyExpired(uint256 _policyId) external override nonReentrant onlyCapitalAgent {\n        require(getPolicy[_policyId].exist, \"UnoRe: marked to claim already\");\n        getPolicy[_policyId].expired = true;\n        _burn(_policyId);\n        emit LogUpdatePolicyExpired(_policyId, getPolicy[_policyId].coverageAmount);\n    }\n\n    function allPoliciesLength() external view override returns (uint256) {\n        return policyIdx.current;\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return protocolURI;\n    }\n\n    function getPolicyData(uint256 _policyId) external view override returns (uint256, uint256, uint256, bool, bool) {\n        bool exist = getPolicy[_policyId].exist;\n        bool expired = getPolicy[_policyId].expired;\n        uint256 coverageAmount = getPolicy[_policyId].coverageAmount;\n        uint256 coverageDuration = getPolicy[_policyId].coverageDuration;\n        uint256 coverStartAt = uint256(getPolicy[_policyId].coverStartAt);\n        return (coverageAmount, coverageDuration, coverStartAt, exist, expired);\n    }\n\n    function getSender(\n        uint256 _policyPrice,\n        address[] memory _protocols,\n        uint256[] memory _coverageDuration,\n        uint256[] memory _coverageAmount,\n        uint256 _signedTime,\n        address _premiumCurrency,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) private pure returns (address) {\n        // bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\n        bytes32 msgHash = keccak256(\n            abi.encodePacked(_policyPrice, _protocols, _coverageDuration, _coverageAmount, _signedTime, _premiumCurrency)\n        );\n\n        // bytes32 msgHash = keccak256(abi.encodePacked(productName));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", msgHash));\n        // (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        return recoveredAddress;\n    }\n}\n"
    },
    "contracts/Mocks/MockSalesPolicyFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"../libraries/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./MockSalesPolicy.sol\";\nimport \"../interfaces/ISalesPolicy.sol\";\nimport \"../interfaces/ISalesPolicyFactory.sol\";\n\ncontract MockSalesPolicyFactory is ISalesPolicyFactory, ReentrancyGuard, Ownable {\n    using Counters for Counters.Counter;\n    // It should be okay if Protocol is struct\n    struct Protocol {\n        address protocolAddress; // Address of that protocol\n        bool isBlackList; // initial true\n    }\n\n    bool public override checkIfProtocolInWhitelistArray;\n\n    address public premiumPool;\n    address public exchangeAgent;\n    address public capitalAgent;\n\n    address public salesPolicy;\n\n    mapping(uint16 => Protocol) public getProtocol;\n    mapping(address => uint16) public override getProtocolId;\n    Counters.Counter private protocolIds;\n\n    address public usdcToken;\n\n    event ProtocolCreated(uint16 _protocolIdx, address _protocol);\n    event LogSetPremiumPool(address indexed _premiumPool);\n    event LogUpdateCheckIfProtocolInWhitelistArray(bool _status);\n    event LogSetBlackListProtocol(uint16 _protocolId, address indexed _protocol);\n    event LogSetExchangeAgentInPolicy(address _exchangeAgent);\n    event LogSetBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline);\n    event LogSetPremiumPoolInPolicy(address _premiumPool);\n    event LogSetSignerInPolicy(address _signer);\n    event LogSetCapitalAgentInPolicy(address _capitalAgent);\n    event LogSetProtocolURIInPolicy(string _uri);\n    event LogApprovePremiumInPolicy(address _premiumCurrency);\n\n    constructor(\n        address _usdcToken,\n        address _exchangeAgent,\n        address _premiumPool,\n        address _capitalAgent,\n        address _multiSigWallet\n    ) Ownable(_multiSigWallet) {\n        require(_usdcToken != address(0), \"UnoRe: zero USDC address\");\n        require(_exchangeAgent != address(0), \"UnoRe: zero exchangeAgent address\");\n        require(_premiumPool != address(0), \"UnoRe: zero premiumPool address\");\n        require(_capitalAgent != address(0), \"UnoRe: zero capitalAgent address\");\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        usdcToken = _usdcToken;\n        premiumPool = _premiumPool;\n        exchangeAgent = _exchangeAgent;\n        capitalAgent = _capitalAgent;\n        // transferOwnership(_multiSigWallet);\n    }\n\n    // This action can be done only by owner\n    // protoco id will be started from no.1 instead of no.0.\n    function addProtocol(address _protocolAddress) external onlyOwner nonReentrant {\n        protocolIds.next();\n        uint16 lastIdx = uint16(protocolIds.current);\n\n        getProtocol[lastIdx] = Protocol({protocolAddress: _protocolAddress, isBlackList: false});\n\n        getProtocolId[_protocolAddress] = lastIdx;\n\n        emit ProtocolCreated(lastIdx, _protocolAddress);\n    }\n\n    function newSalesPolicy(\n        address _exchangeAgent,\n        address _premiumPool,\n        address _capitalAgent\n    ) external onlyOwner nonReentrant returns (address) {\n        MockSalesPolicy _salesPolicy = new MockSalesPolicy(address(this), _exchangeAgent, _premiumPool, _capitalAgent, usdcToken);\n        salesPolicy = address(_salesPolicy);\n        ICapitalAgent(capitalAgent).setPolicy(address(_salesPolicy));\n\n        return address(_salesPolicy);\n    }\n\n    function allProtocolsLength() external view returns (uint256) {\n        return protocolIds.current;\n    }\n\n    function updateCheckIfProtocolInWhitelistArray(bool _status) external onlyOwner {\n        checkIfProtocolInWhitelistArray = _status;\n        emit LogUpdateCheckIfProtocolInWhitelistArray(_status);\n    }\n\n    function setBlackListProtocolById(uint16 _protocolId) external onlyOwner {\n        getProtocol[_protocolId].isBlackList = true;\n        emit LogSetBlackListProtocol(_protocolId, getProtocol[_protocolId].protocolAddress);\n    }\n\n    function setBlackListProtocolByAddress(address _protocol) external onlyOwner {\n        // require(_protocol != address(0), \"UnoRe: zero address\");\n        uint16 _protocolId = getProtocolId[_protocol];\n        getProtocol[_protocolId].isBlackList = true;\n        emit LogSetBlackListProtocol(_protocolId, _protocol);\n    }\n\n    function setPremiumPool(address _premiumPool) external onlyOwner {\n        require(_premiumPool != address(0), \"UnoRe: zero address\");\n        premiumPool = _premiumPool;\n        emit LogSetPremiumPool(_premiumPool);\n    }\n\n    function setExchangeAgentInPolicy(address _exchangeAgent) external onlyOwner {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        ISalesPolicy(salesPolicy).setExchangeAgent(_exchangeAgent);\n        emit LogSetExchangeAgentInPolicy(_exchangeAgent);\n    }\n\n    function setBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline) external onlyOwner {\n        require(_maxDeadline > 0, \"UnoRe: zero max deadline\");\n        ISalesPolicy(salesPolicy).setBuyPolicyMaxDeadline(_maxDeadline);\n        emit LogSetBuyPolicyMaxDeadlineInPolicy(_maxDeadline);\n    }\n\n    function setPremiumPoolInPolicy(address _premiumPool) external onlyOwner {\n        require(_premiumPool != address(0), \"UnoRe: zero address\");\n        ISalesPolicy(salesPolicy).setPremiumPool(_premiumPool);\n        emit LogSetPremiumPoolInPolicy(_premiumPool);\n    }\n\n    function setSignerInPolicy(address _signer) external onlyOwner {\n        require(_signer != address(0), \"UnoRe: zero address\");\n        ISalesPolicy(salesPolicy).setSigner(_signer);\n        emit LogSetSignerInPolicy(_signer);\n    }\n\n    function setCapitalAgentInPolicy(address _capitalAgent) external onlyOwner {\n        require(_capitalAgent != address(0), \"UnoRe: zero address\");\n        ISalesPolicy(salesPolicy).setCapitalAgent(_capitalAgent);\n        emit LogSetCapitalAgentInPolicy(_capitalAgent);\n    }\n\n    function setProtocolURIInPolicy(string memory _uri) external onlyOwner {\n        ISalesPolicy(salesPolicy).setProtocolURI(_uri);\n        emit LogSetProtocolURIInPolicy(_uri);\n    }\n\n    function approvePremiumInPolicy(address _premiumCurrency) external onlyOwner {\n        ISalesPolicy(salesPolicy).approvePremium(_premiumCurrency);\n        emit LogApprovePremiumInPolicy(_premiumCurrency);\n    }\n\n    function getProtocolData(uint16 _protocolIdx) external view override returns (address protocolAddress, bool isBlackList) {\n        return (getProtocol[_protocolIdx].protocolAddress, getProtocol[_protocolIdx].isBlackList);\n    }\n}\n"
    },
    "contracts/Mocks/MockUNO.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * This smart contract\n */\n\ncontract MockUNO is ERC20 {\n    uint256 INITIAL_SUPPLY = 10000000000 * 10 ** 18;\n\n    // mapping(address => uint256) private _faucets;\n    uint256 public constant faucetLimit = 500000000 * 10 ** 18;\n\n    constructor() ERC20(\"UNORE\", \"UNO\") {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function faucetToken(uint256 _amount) external {\n        // require(_faucets[msg.sender] + _amount <= faucetLimit, \"Uno: Faucet amount limitation\");\n        _mint(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/Mocks/MockUSDC.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * This smart contract\n */\n\ncontract MockUSDC is ERC20 {\n\n    constructor() ERC20(\"USDC\", \"USDC\") {\n        _mint(msg.sender, 10000000000 * 10 ** 18);\n    }\n\n    function faucetToken(uint256 _amount) external {\n        _mint(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/Mocks/MockUSDT.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * This smart contract\n */\n\ncontract MockUSDT is ERC20 {\n    uint256 INITIAL_SUPPLY = 10000000000 * 10 ** 18;\n\n    mapping(address => uint256) private _faucets;\n    uint256 public constant faucetLimit = 500000 * 10 ** 18;\n\n    constructor() ERC20(\"USDT\", \"USDT\") {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function faucetToken(uint256 _amount) external {\n        // require(_faucets[msg.sender] + _amount <= faucetLimit, \"Uno: Faucet amount limitation\");\n        _mint(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/Mocks/OptimisticOracleV3.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\n/**\n * This smart contract\n */\n\ninterface Check {\n    function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully) external;\n}\n\ncontract OptimisticOracleV3 {\n\n    uint a;\n    function set() external {\n        a = 3;\n    }\n\n    function defaultIdentifier() external pure returns(bytes32){\n        return bytes32(\"contract\");\n    }\n\n    function getMinimumBond(address _c) external pure returns(uint256){\n        return 100;\n    }\n\n    function assertTruth(bytes memory _a, address b, address c, address n,uint64 d, address e, uint256 f, bytes32 g, bytes32 h) external pure returns(bytes32) {\n        return bytes32(\"a\");\n    }\n\n    function settle(bytes32 id, address d) external {\n        Check(d).assertionResolvedCallback(id, true);\n    }\n}\n"
    },
    "contracts/Mocks/OraclePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"../interfaces/IOraclePriceFeed.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * This smart contract\n */\n\ncontract MockOraclePriceFeed is IOraclePriceFeed, Ownable {\n\n    uint256 public ethUsdtPrice;\n    address public usdt;\n\n    mapping (address => uint256) public assetEthPrice;\n\n    constructor(address uno, address _usdt) Ownable(msg.sender) {\n        usdt = _usdt;\n        ethUsdtPrice = 459347726228755;\n        assetEthPrice[uno] = 18934772622875;\n        assetEthPrice[usdt] = 459347726228755;\n    }\n\n    function getEthUsdPrice() external view returns (uint256) {\n        return ethUsdtPrice;\n    }\n\n    function getAssetEthPrice(address _currency) external view returns (uint256) {\n        return assetEthPrice[_currency];\n    }\n\n    function consult(address token0, address token1, uint256 amount1) external view returns (uint256) {\n        uint256 ethprice1 = assetEthPrice[token0];\n        uint256 ethprice2 = assetEthPrice[token1];\n\n        return (ethprice1 * amount1) / (ethprice2);\n        // return \n    }\n\n    function setEthUsdPrice(uint256 _amount) external onlyOwner {\n        ethUsdtPrice = _amount;\n    }\n\n    function setAssetEthPrice(address _asset, uint256 _amount) external onlyOwner {\n        assetEthPrice[_asset] = _amount;\n    }\n}\n"
    },
    "contracts/Mocks/RewardAttack.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\nimport \"../interfaces/ISingleSidedInsurancePool.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract RewardAttack {\n    constructor() {}\n\n    function attackHarvest(address _pool, address _to) external {\n        ISingleSidedInsurancePool ssip = ISingleSidedInsurancePool(_pool);\n        // for (uint256 ii = 0; ii < 5; ii++) {\n        ssip.harvest(_to);\n        // }\n    }\n\n    function enterInPool(address _pool, uint256 _amount, address _currency) external {\n        IERC20(_currency).approve(_pool, _amount);\n        ISingleSidedInsurancePool ssip = ISingleSidedInsurancePool(_pool);\n        ssip.enterInPool(_amount);\n    }\n}\n"
    },
    "contracts/PremiumPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./interfaces/IPremiumPool.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\n\ncontract PremiumPool is IPremiumPool, ReentrancyGuard, AccessControl, Pausable {\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\"GOVERNANCE_ROLE\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    // using Address for address;\n    address public exchangeAgent;\n    address public unoToken;\n    address public usdcToken;\n    mapping(address => bool) public availableCurrencies;\n    address[] public availableCurrencyList;\n    mapping(address => bool) public whiteList;\n\n    bool public killed;\n    address public constant BURNADDRESS = 0x000000000000000000000000000000000000dEaD;\n    mapping(address => uint256) public ssrpPremium;\n    mapping(address => uint256) public ssipPremium;\n    mapping(address => uint256) public backBurnUnoPremium;\n    uint256 public ssrpPremiumEth;\n    uint256 public ssipPremiumEth;\n    uint256 public backBurnPremiumEth;\n\n    uint256 private maxInteger = type(uint256).max;\n\n    event PremiumWithdraw(address indexed _currency, address indexed _to, uint256 _amount);\n    event LogBuyBackAndBurn(address indexed _operator, address indexed _premiumPool, uint256 _unoAmount);\n    event LogCollectPremium(address indexed _from, address _premiumCurrency, uint256 _premiumAmount);\n    event LogDepositToSyntheticSSRPRewarder(address indexed _rewarder, uint256 _amountDeposited);\n    event LogDepositToSyntheticSSIPRewarder(address indexed _rewarder, address indexed _currency, uint256 _amountDeposited);\n    event LogAddCurrency(address indexed _premiumPool, address indexed _currency);\n    event LogRemoveCurrency(address indexed _premiumPool, address indexed _currency);\n    event LogMaxApproveCurrency(address indexed _premiumPool, address indexed _currency, address indexed _to);\n    event LogMaxDestroyCurrencyAllowance(address indexed _premiumPool, address indexed _currency, address indexed _to);\n    event LogAddWhiteList(address indexed _premiumPool, address indexed _whiteListAddress);\n    event LogRemoveWhiteList(address indexed _premiumPool, address indexed _whiteListAddress);\n    event PoolAlived(address indexed _owner, bool _alive);\n    event KillPool(address indexed _owner, bool _killed);\n\n    constructor(address _exchangeAgent, address _unoToken, address _usdcToken, address _multiSigWallet, address _governance) {\n        require(_exchangeAgent != address(0), \"UnoRe: zero exchangeAgent address\");\n        require(_unoToken != address(0), \"UnoRe: zero UNO address\");\n        require(_usdcToken != address(0), \"UnoRe: zero USDC address\");\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \"UnoRe: more than three owners requied\");\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \"UnoRe: more than one owners requied to verify\");\n        require(_governance != address(0), \"UnoRe: zero governance address\");\n        exchangeAgent = _exchangeAgent;\n        unoToken = _unoToken;\n        usdcToken = _usdcToken;\n        whiteList[msg.sender] = true;\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _grantRole(GOVERNANCE_ROLE, _governance);\n        _setRoleAdmin(GOVERNANCE_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    }\n\n    modifier onlyAvailableCurrency(address _currency) {\n        require(availableCurrencies[_currency], \"UnoRe: not allowed currency\");\n        _;\n    }\n\n    modifier onlyWhiteList() {\n        require(whiteList[msg.sender], \"UnoRe: not white list address\");\n        _;\n    }\n\n    modifier isAlive() {\n        require(!killed, \"UnoRe: pool is killed\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function pausePool() external onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpausePool() external onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    function killPool() external onlyRole(ADMIN_ROLE) {\n        killed = true;\n        emit KillPool(msg.sender, true);\n    }\n\n    function revivePool() external onlyRole(ADMIN_ROLE) {\n        killed = false;\n        emit PoolAlived(msg.sender, false);\n    }\n\n    function collectPremiumInETH() external payable override isAlive nonReentrant onlyWhiteList {\n        uint256 _premiumAmount = msg.value;\n        uint256 _premium_SSRP = (_premiumAmount * 1000) / 10000;\n        uint256 _premium_SSIP = (_premiumAmount * 7000) / 10000;\n        ssrpPremiumEth = ssrpPremiumEth + _premium_SSRP;\n        ssipPremiumEth = ssipPremiumEth + _premium_SSIP;\n        backBurnPremiumEth = backBurnPremiumEth + (_premiumAmount - _premium_SSRP - _premium_SSIP);\n        emit LogCollectPremium(msg.sender, address(0), _premiumAmount);\n    }\n\n    function collectPremium(\n        address _premiumCurrency,\n        uint256 _premiumAmount\n    ) external override isAlive nonReentrant onlyAvailableCurrency(_premiumCurrency) onlyWhiteList {\n        require(IERC20(_premiumCurrency).balanceOf(msg.sender) >= _premiumAmount, \"UnoRe: premium balance overflow\");\n        TransferHelper.safeTransferFrom(_premiumCurrency, msg.sender, address(this), _premiumAmount);\n        uint256 _premium_SSRP = (_premiumAmount * 1000) / 10000;\n        uint256 _premium_SSIP = (_premiumAmount * 7000) / 10000;\n        ssrpPremium[_premiumCurrency] = ssrpPremium[_premiumCurrency] + _premium_SSRP;\n        ssipPremium[_premiumCurrency] = ssipPremium[_premiumCurrency] + _premium_SSIP;\n        backBurnUnoPremium[_premiumCurrency] =\n            backBurnUnoPremium[_premiumCurrency] +\n            (_premiumAmount - _premium_SSRP - _premium_SSIP);\n        emit LogCollectPremium(msg.sender, _premiumCurrency, _premiumAmount);\n    }\n\n    function depositToSyntheticSSRPRewarder(address _rewarder) external onlyRole(ADMIN_ROLE) isAlive nonReentrant {\n        require(_rewarder != address(0), \"UnoRe: zero address\");\n        enforceHasContractCode(_rewarder, \"UnoRe: no contract address\");\n        uint256 usdcAmountToDeposit = 0;\n        if (ssrpPremiumEth > 0) {\n            TransferHelper.safeTransferETH(exchangeAgent, ssrpPremiumEth);\n            uint256 convertedAmount = IExchangeAgent(exchangeAgent).convertForToken(address(0), usdcToken, ssrpPremiumEth);\n            usdcAmountToDeposit += convertedAmount;\n            ssrpPremiumEth = 0;\n        }\n        for (uint256 ii = 0; ii < availableCurrencyList.length; ii++) {\n            if (ssrpPremium[availableCurrencyList[ii]] > 0) {\n                if (availableCurrencyList[ii] == usdcToken) {\n                    usdcAmountToDeposit += ssrpPremium[availableCurrencyList[ii]];\n                } else {\n                    uint256 convertedUSDCAmount = IExchangeAgent(exchangeAgent).convertForToken(\n                        availableCurrencyList[ii],\n                        usdcToken,\n                        ssrpPremium[availableCurrencyList[ii]]\n                    );\n                    usdcAmountToDeposit += convertedUSDCAmount;\n                }\n                ssrpPremium[availableCurrencyList[ii]] = 0;\n            }\n        }\n        if (usdcAmountToDeposit > 0) {\n            TransferHelper.safeTransfer(usdcToken, _rewarder, usdcAmountToDeposit);\n            emit LogDepositToSyntheticSSRPRewarder(_rewarder, usdcAmountToDeposit);\n        }\n    }\n\n    function depositToSyntheticSSIPRewarder(\n        address _currency,\n        address _rewarder,\n        uint256 _amount\n    ) external onlyRole(ADMIN_ROLE) isAlive nonReentrant {\n        require(_rewarder != address(0), \"UnoRe: zero address\");\n        enforceHasContractCode(_rewarder, \"UnoRe: no contract address\");\n        if (_currency == address(0) && ssipPremiumEth > 0) {\n            require(_amount <= ssipPremiumEth, \"UnoRe: premium balance overflow\");\n            TransferHelper.safeTransferETH(_rewarder, _amount);\n            ssipPremiumEth -= _amount;\n            emit LogDepositToSyntheticSSIPRewarder(_rewarder, _currency, _amount);\n        } else {\n            if (availableCurrencies[_currency] && ssipPremium[_currency] > 0) {\n                require(_amount <= ssipPremium[_currency], \"UnoRe: premium balance overflow\");\n                TransferHelper.safeTransfer(_currency, _rewarder, _amount);\n                ssipPremium[_currency] -= _amount;\n                emit LogDepositToSyntheticSSIPRewarder(_rewarder, _currency, _amount);\n            }\n        }\n    }\n\n    function buyBackAndBurn() external onlyRole(ADMIN_ROLE) isAlive {\n        uint256 unoAmount = 0;\n        if (backBurnPremiumEth > 0) {\n            TransferHelper.safeTransferETH(exchangeAgent, backBurnPremiumEth);\n            unoAmount += IExchangeAgent(exchangeAgent).convertForToken(address(0), unoToken, backBurnPremiumEth);\n            backBurnPremiumEth = 0;\n        }\n        for (uint256 ii = 0; ii < availableCurrencyList.length; ii++) {\n            if (backBurnUnoPremium[availableCurrencyList[ii]] > 0) {\n                uint256 convertedAmount = IExchangeAgent(exchangeAgent).convertForToken(\n                    availableCurrencyList[ii],\n                    unoToken,\n                    backBurnUnoPremium[availableCurrencyList[ii]]\n                );\n                unoAmount += convertedAmount;\n                backBurnUnoPremium[availableCurrencyList[ii]] = 0;\n            }\n        }\n        if (unoAmount > 0) {\n            TransferHelper.safeTransfer(unoToken, BURNADDRESS, unoAmount);\n        }\n        emit LogBuyBackAndBurn(msg.sender, address(this), unoAmount);\n    }\n\n    function withdrawPremium(\n        address _currency,\n        address _to,\n        uint256 _amount\n    ) external override onlyRole(GOVERNANCE_ROLE) whenNotPaused {\n        require(_to != address(0), \"UnoRe: zero address\");\n        require(_amount > 0, \"UnoRe: zero amount\");\n        if (_currency == address(0)) {\n            require(address(this).balance >= _amount, \"UnoRe: Insufficient Premium\");\n            TransferHelper.safeTransferETH(_to, _amount);\n        } else {\n            require(IERC20(_currency).balanceOf(address(this)) >= _amount, \"UnoRe: Insufficient Premium\");\n            TransferHelper.safeTransfer(_currency, _to, _amount);\n        }\n        emit PremiumWithdraw(_currency, _to, _amount);\n    }\n\n    function addCurrency(address _currency) external onlyRole(ADMIN_ROLE) {\n        require(!availableCurrencies[_currency], \"Already available\");\n        availableCurrencies[_currency] = true;\n        availableCurrencyList.push(_currency);\n        maxApproveCurrency(_currency, exchangeAgent);\n        emit LogAddCurrency(address(this), _currency);\n    }\n\n    function removeCurrency(address _currency) external onlyRole(ADMIN_ROLE) {\n        require(availableCurrencies[_currency], \"Not available yet\");\n        availableCurrencies[_currency] = false;\n        uint256 len = availableCurrencyList.length;\n        address lastCurrency = availableCurrencyList[len - 1];\n        for (uint256 ii = 0; ii < len; ii++) {\n            if (_currency == availableCurrencyList[ii]) {\n                availableCurrencyList[ii] = lastCurrency;\n                availableCurrencyList.pop();\n                destroyCurrencyAllowance(_currency, exchangeAgent);\n                emit LogRemoveCurrency(address(this), _currency);\n                return;\n            }\n        }\n    }\n\n    function maxApproveCurrency(address _currency, address _to) public onlyRole(ADMIN_ROLE) nonReentrant {\n        if (IERC20(_currency).allowance(address(this), _to) < maxInteger) {\n            TransferHelper.safeApprove(_currency, _to, maxInteger);\n            emit LogMaxApproveCurrency(address(this), _currency, _to);\n        }\n    }\n\n    function destroyCurrencyAllowance(address _currency, address _to) public onlyRole(ADMIN_ROLE) nonReentrant {\n        if (IERC20(_currency).allowance(address(this), _to) > 0) {\n            TransferHelper.safeApprove(_currency, _to, 0);\n            emit LogMaxDestroyCurrencyAllowance(address(this), _currency, _to);\n        }\n    }\n\n    function addWhiteList(address _whiteListAddress) external onlyRole(ADMIN_ROLE) {\n        require(_whiteListAddress != address(0), \"UnoRe: zero address\");\n        require(!whiteList[_whiteListAddress], \"UnoRe: white list already\");\n        whiteList[_whiteListAddress] = true;\n        emit LogAddWhiteList(address(this), _whiteListAddress);\n    }\n\n    function removeWhiteList(address _whiteListAddress) external onlyRole(ADMIN_ROLE) {\n        require(_whiteListAddress != address(0), \"UnoRe: zero address\");\n        require(whiteList[_whiteListAddress], \"UnoRe: white list removed or unadded already\");\n        whiteList[_whiteListAddress] = false;\n        emit LogRemoveWhiteList(address(this), _whiteListAddress);\n    }\n\n    /**\n     * @dev Ensure that the given address has contract code deployed\n     * @param _contract The address to check for contract code\n     * @param _errorMessage The error message to display if the contract code is not deployed\n     */\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize != 0, _errorMessage);\n    }\n}\n"
    },
    "contracts/Rewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ninterface ISSIP {\n    struct PoolInfo {\n        uint256 lastRewardBlock;\n        uint256 accUnoPerShare;\n        uint256 unoMultiplierPerBlock;\n    }\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n    }\n\n    function poolInfo() external view returns (PoolInfo memory);\n\n    function userInfo(address _user) external view returns (UserInfo memory);\n\n    function riskPool() external view returns (address);\n}\n\ncontract Rewarder is IRewarder, ReentrancyGuard, Pausable {\n    using Address for address;\n\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\n\n    address public immutable override currency;\n    address public immutable pool;\n    address public operator;\n\n    event LogRewarderWithdraw(address indexed _rewarder, address _currency, address indexed _to, uint256 _amount);\n    event LogTransferOwnerShip(address indexed _rewarder, address indexed _oldOperator, address indexed _newOperator);\n\n    constructor(address _operator, address _currency, address _pool) {\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        require(_pool != address(0), \"UnoRe: zero pool address\");\n        currency = _currency;\n        pool = _pool;\n        operator = _operator;\n    }\n\n    receive() external payable {}\n\n    function pausePool() external onlyOperator {\n        _pause();\n    }\n\n    function unpausePool() external onlyOperator {\n        _unpause();\n    }\n\n    function onReward(address _to, uint256 _amount) external payable override onlyPOOL whenNotPaused returns (uint256) {\n        ISSIP ssip = ISSIP(pool);\n        ISSIP.UserInfo memory userInfos = ssip.userInfo(_to);\n        ISSIP.PoolInfo memory poolInfos = ssip.poolInfo();\n        uint256 accumulatedUno = (userInfos.amount * uint256(poolInfos.accUnoPerShare)) / ACC_UNO_PRECISION;\n\n        require(accumulatedUno > _amount, \"UnoRe: invalid reward amount\");\n\n        if (currency == address(0)) {\n            require(address(this).balance >= _amount, \"UnoRe: insufficient reward balance\");\n            TransferHelper.safeTransferETH(_to, _amount);\n            return _amount;\n        } else {\n            require(IERC20(currency).balanceOf(address(this)) >= _amount, \"UnoRe: insufficient reward balance\");\n            TransferHelper.safeTransfer(currency, _to, _amount);\n            return _amount;\n        }\n    }\n\n    function onRewardForRollOver(\n        address _to,\n        uint256 _amount,\n        uint256 _accumulatedAmount\n    ) external payable onlyPOOL whenNotPaused returns (uint256) {\n        ISSIP ssip = ISSIP(pool);\n        ISSIP.PoolInfo memory poolInfos = ssip.poolInfo();\n        uint256 accumulatedUno = (_accumulatedAmount * uint256(poolInfos.accUnoPerShare)) / ACC_UNO_PRECISION;\n\n        require(accumulatedUno > _amount, \"UnoRe: invalid reward amount\");\n\n        if (currency == address(0)) {\n            require(address(this).balance >= _amount, \"UnoRe: insufficient reward balance\");\n            TransferHelper.safeTransferETH(_to, _amount);\n            return _amount;\n        } else {\n            require(IERC20(currency).balanceOf(address(this)) >= _amount, \"UnoRe: insufficient reward balance\");\n            TransferHelper.safeTransfer(currency, _to, _amount);\n            return _amount;\n        }\n    }\n\n    function withdraw(address _to, uint256 _amount) external onlyOperator whenNotPaused {\n        require(_to != address(0), \"UnoRe: zero address reward\");\n        if (currency == address(0)) {\n            if (address(this).balance >= _amount) {\n                TransferHelper.safeTransferETH(_to, _amount);\n                emit LogRewarderWithdraw(address(this), currency, _to, _amount);\n            } else {\n                if (address(this).balance > 0) {\n                    uint256 rewardAmount = address(this).balance;\n                    TransferHelper.safeTransferETH(_to, address(this).balance);\n                    emit LogRewarderWithdraw(address(this), currency, _to, rewardAmount);\n                }\n            }\n        } else {\n            if (IERC20(currency).balanceOf(address(this)) >= _amount) {\n                TransferHelper.safeTransfer(currency, _to, _amount);\n                emit LogRewarderWithdraw(address(this), currency, _to, _amount);\n            } else {\n                if (IERC20(currency).balanceOf(address(this)) > 0) {\n                    uint256 rewardAmount = IERC20(currency).balanceOf(address(this));\n                    TransferHelper.safeTransfer(currency, _to, IERC20(currency).balanceOf(address(this)));\n                    emit LogRewarderWithdraw(address(this), currency, _to, rewardAmount);\n                }\n            }\n        }\n    }\n\n    function transferOwnership(address _to) external onlyOperator {\n        require(_to != address(0), \"UnoRe: zero address reward\");\n        address oldOperator = operator;\n        operator = _to;\n        emit LogTransferOwnerShip(address(this), oldOperator, _to);\n    }\n\n    modifier onlyPOOL() {\n        require(msg.sender == pool, \"Only SSRP or SSIP contract can call this function.\");\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(msg.sender == operator, \"Only operator call this function.\");\n        _;\n    }\n}\n"
    },
    "contracts/RiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./RiskPoolERC20.sol\";\nimport \"./interfaces/ISingleSidedReinsurancePool.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract RiskPool is IRiskPool, RiskPoolERC20 {\n    // ERC20 attributes\n    string public name;\n    string public symbol;\n\n    address public SSRP;\n    address public override currency; // for now we should accept only UNO\n    uint256 public override lpPriceUno;\n    uint256 public MIN_LP_CAPITAL = 1e7;\n\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _amount, uint256 _amountInUno);\n    event LogPolicyClaim(address indexed _user, uint256 _amount);\n    event LogMigrateLP(address indexed _user, address indexed _migrateTo, uint256 _unoAmount);\n    event LogLeaveFromPending(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\n\n    constructor(string memory _name, string memory _symbol, address _SSRP, address _currency) {\n        require(_SSRP != address(0), \"UnoRe: zero pool address\");\n        name = _name;\n        symbol = _symbol;\n        SSRP = _SSRP;\n        currency = _currency;\n        lpPriceUno = 1e18;\n        if (_currency == address(0)) {\n            MIN_LP_CAPITAL = 7 * 1e15;\n        }\n    }\n\n    modifier onlySSRP() {\n        require(msg.sender == SSRP, \"UnoRe: RiskPool Forbidden\");\n        _;\n    }\n\n    receive() external payable {}\n\n    function decimals() external view virtual override returns (uint8) {\n        return IERC20Metadata(currency).decimals();\n    }\n\n    /**\n     * @dev Users can stake only through Cohort\n     */\n    function enter(address _from, uint256 _amount) external override onlySSRP {\n        _mint(_from, (_amount * 1e18) / lpPriceUno);\n    }\n\n    /**\n     * @param _amount UNO amount to withdraw\n     */\n    function leaveFromPoolInPending(address _to, uint256 _amount) external override onlySSRP {\n        require(totalSupply() > 0, \"UnoRe: There's no remaining in the pool\");\n        uint256 requestAmountInLP = (_amount * 1e18) / lpPriceUno;\n        require(\n            (requestAmountInLP + uint256(withdrawRequestPerUser[_to].pendingAmount)) <= balanceOf(_to),\n            \"UnoRe: lp balance overflow\"\n        );\n        _withdrawRequest(_to, requestAmountInLP, _amount);\n    }\n\n    function leaveFromPending(address _to, uint256 _amount) external override onlySSRP returns (uint256, uint256) {\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        uint256 pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\n        require(_amount <= pendingAmount, \"Amount should less than pending amount\");\n        require(cryptoBalance > 0, \"UnoRe: zero uno balance\");\n        require(balanceOf(_to) >= _amount, \"UnoRe: lp balance overflow\");\n        uint256 amountInUno = (_amount * lpPriceUno) / 1e18;\n        if (cryptoBalance - MIN_LP_CAPITAL > amountInUno) {\n            _withdrawImplement(_to);\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, amountInUno);\n            } else {\n                TransferHelper.safeTransferETH(_to, amountInUno);\n            }\n            emit LogLeaveFromPending(_to, pendingAmount, amountInUno);\n            return (pendingAmount, amountInUno);\n        } else {\n            _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n            } else {\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            emit LogLeaveFromPending(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\n            return (((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno, cryptoBalance - MIN_LP_CAPITAL);\n        }\n    }\n\n    function cancelWithdrawRequest(address _to) external override onlySSRP returns (uint256, uint256) {\n        uint256 _pendingAmount = uint256(withdrawRequestPerUser[_to].pendingAmount);\n        require(_pendingAmount > 0, \"UnoRe: zero amount\");\n        _cancelWithdrawRequest(_to);\n        emit LogCancelWithdrawRequest(_to, _pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\n        return (_pendingAmount, (_pendingAmount * lpPriceUno) / 1e18);\n    }\n\n    function policyClaim(address _to, uint256 _amount) external override onlySSRP returns (uint256 realClaimAmount) {\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        require(totalSupply() > 0, \"UnoRe: zero lp balance\");\n        require(cryptoBalance > MIN_LP_CAPITAL, \"UnoRe: minimum UNO capital underflow\");\n        if (cryptoBalance - MIN_LP_CAPITAL > _amount) {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, _amount);\n            } else {\n                TransferHelper.safeTransferETH(_to, _amount);\n            }\n            realClaimAmount = _amount;\n            emit LogPolicyClaim(_to, _amount);\n        } else {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n            } else {\n                TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            realClaimAmount = cryptoBalance - MIN_LP_CAPITAL;\n            emit LogPolicyClaim(_to, cryptoBalance - MIN_LP_CAPITAL);\n        }\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        lpPriceUno = (cryptoBalance * 1e18) / totalSupply(); // UNO value per lp\n    }\n\n    function emergencyWithdraw(address _to, uint256 _amount) external override onlySSRP returns (bool) {\n        uint256 cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        require(cryptoBalance > 0, \"UnoRe: zero uno balance\");\n        _emergencyWithdraw(_to);\n        if (currency != address(0)) {\n            TransferHelper.safeTransfer(currency, _to, _amount);\n        } else {\n            TransferHelper.safeTransferETH(_to, _amount);\n        }\n        return true;\n    }\n\n    function migrateLP(address _to, address _migrateTo, bool _isUnLocked) external override onlySSRP returns (uint256) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        uint256 migratedAmount;\n        uint256 cryptoBalance;\n        if (_isUnLocked && withdrawRequestPerUser[_to].pendingAmount > 0) {\n            uint256 pendingAmountInUno = (uint256(withdrawRequestPerUser[_to].pendingAmount) * lpPriceUno) / 1e18;\n            cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n            if (pendingAmountInUno < cryptoBalance - MIN_LP_CAPITAL) {\n                if (currency != address(0)) {\n                    TransferHelper.safeTransfer(currency, _to, pendingAmountInUno);\n                } else {\n                    TransferHelper.safeTransferETH(_to, pendingAmountInUno);\n                }\n                _withdrawImplement(_to);\n            } else {\n                if (currency != address(0)) {\n                    TransferHelper.safeTransfer(currency, _to, cryptoBalance - MIN_LP_CAPITAL);\n                } else {\n                    TransferHelper.safeTransferETH(_to, cryptoBalance - MIN_LP_CAPITAL);\n                }\n                _withdrawImplementIrregular(_to, ((cryptoBalance - MIN_LP_CAPITAL) * 1e18) / lpPriceUno);\n            }\n        } else {\n            if (withdrawRequestPerUser[_to].pendingAmount > 0) {\n                _cancelWithdrawRequest(_to);\n            }\n        }\n        cryptoBalance = currency != address(0) ? IERC20(currency).balanceOf(address(this)) : address(this).balance;\n        uint256 unoBalance = (balanceOf(_to) * lpPriceUno) / 1e18;\n        if (unoBalance < cryptoBalance - MIN_LP_CAPITAL) {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _migrateTo, unoBalance);\n            } else {\n                TransferHelper.safeTransferETH(_migrateTo, unoBalance);\n            }\n            migratedAmount += unoBalance;\n            emit LogMigrateLP(_to, _migrateTo, unoBalance);\n        } else {\n            if (currency != address(0)) {\n                TransferHelper.safeTransfer(currency, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\n            } else {\n                TransferHelper.safeTransferETH(_migrateTo, cryptoBalance - MIN_LP_CAPITAL);\n            }\n            migratedAmount += cryptoBalance - MIN_LP_CAPITAL;\n            emit LogMigrateLP(_to, _migrateTo, cryptoBalance - MIN_LP_CAPITAL);\n        }\n        _burn(_to, balanceOf(_to));\n        return migratedAmount;\n    }\n\n    function setMinLPCapital(uint256 _minLPCapital) external override onlySSRP {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        MIN_LP_CAPITAL = _minLPCapital;\n    }\n\n    function getWithdrawRequest(address _to) external view override onlySSRP returns (uint256, uint256, uint256) {\n        return (\n            uint256(withdrawRequestPerUser[_to].pendingAmount),\n            uint256(withdrawRequestPerUser[_to].requestTime),\n            withdrawRequestPerUser[_to].pendingUno\n        );\n    }\n\n    function getTotalWithdrawRequestAmount() external view override onlySSRP returns (uint256) {\n        return totalWithdrawPending;\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        require(\n            balanceOf(msg.sender) - uint256(withdrawRequestPerUser[msg.sender].pendingAmount) >= amount,\n            \"ERC20: transfer amount exceeds balance or pending WR\"\n        );\n        _transfer(msg.sender, recipient, amount);\n\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        require(\n            balanceOf(sender) - uint256(withdrawRequestPerUser[sender].pendingAmount) >= amount,\n            \"ERC20: transfer amount exceeds balance or pending WR\"\n        );\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][msg.sender];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, msg.sender, currentAllowance - amount);\n        ISingleSidedReinsurancePool(SSRP).lpTransfer(sender, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/RiskPoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/IRiskPoolERC20.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract RiskPoolERC20 is Context, IRiskPoolERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    struct UserWithdrawRequestInfo {\n        uint256 pendingAmount;\n        uint256 requestTime;\n        uint256 pendingUno;\n    }\n    mapping(address => UserWithdrawRequestInfo) internal withdrawRequestPerUser;\n    uint256 internal totalWithdrawPending;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    function _withdrawRequest(address _user, uint256 _amount, uint256 _amountInUno) internal {\n        require(balanceOf(_user) >= _amount, \"UnoRe: balance overflow\");\n        require(_amount <= type(uint128).max, \"Amount exceeds max uint128\");\n        if (withdrawRequestPerUser[_user].pendingAmount == 0 && withdrawRequestPerUser[_user].requestTime == 0) {\n            withdrawRequestPerUser[_user] = UserWithdrawRequestInfo({\n                pendingAmount: _amount,\n                requestTime: block.timestamp,\n                pendingUno: _amountInUno\n            });\n        } else {\n            withdrawRequestPerUser[_user].pendingAmount += _amount;\n            withdrawRequestPerUser[_user].pendingUno += _amountInUno;\n            withdrawRequestPerUser[_user].requestTime = block.timestamp;\n        }\n        totalWithdrawPending += _amount;\n    }\n\n    function _withdrawImplement(address _user) internal {\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \"UnoRe: zero claim amount\");\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        _burn(_user, _pendingAmount);\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _withdrawImplementIrregular(address _user, uint256 _amount) internal {\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) > 0, \"UnoRe: zero claim amount\");\n        require(uint256(withdrawRequestPerUser[_user].pendingAmount) >= _amount, \"UnoRe: pending amount overflow\");\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        _burn(_user, _amount);\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _emergencyWithdraw(address _user) internal {\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        if (_pendingAmount > 0) {\n            _burn(_user, _pendingAmount);\n        }\n        delete withdrawRequestPerUser[_user];\n    }\n\n    function _cancelWithdrawRequest(address _user) internal {\n        uint256 _pendingAmount = withdrawRequestPerUser[_user].pendingAmount;\n        totalWithdrawPending -= _pendingAmount;\n        delete withdrawRequestPerUser[_user];\n    }\n}\n"
    },
    "contracts/SalesPolicy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"./libraries/Counters.sol\";\nimport \"./interfaces/ICapitalAgent.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./interfaces/IPremiumPool.sol\";\nimport \"./interfaces/ISalesPolicyFactory.sol\";\nimport \"./interfaces/ISalesPolicy.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./EIP712MetaTransaction.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract SalesPolicy is EIP712MetaTransaction(\"BuyPolicyMetaTransaction\", \"1\"), ERC721, ISalesPolicy, ReentrancyGuard, Pausable {\n    using Counters for Counters.Counter;\n    using ECDSA for bytes32;\n\n    address public immutable factory;\n    struct Policy {\n        uint256 coverStartAt;\n        uint256 coverageDuration;\n        uint256 coverageAmount;\n        address protocolAddress;\n        address premiumCurrency;\n        bool exist;\n        bool expired;\n    }\n\n    uint256 public maxDeadline;\n    address private exchangeAgent;\n    address public premiumPool;\n    address public capitalAgent;\n    address public signer;\n    address public immutable usdcToken; //\n\n    string private protocolURI;\n\n    Counters.Counter private policyIdx;\n\n    mapping(uint256 => Policy) public getPolicy;\n    mapping(bytes32 => address) public usedHash;\n\n    uint256 private maxInteger = type(uint256).max;\n\n    event BuyPolicy(\n        address indexed _owner,\n        address indexed _asset,\n        address _premiumCurrency,\n        address _protocol,\n        uint256 indexed _policyIdx,\n        uint256 _coverageAmount,\n        uint256 _coverageDuration,\n        uint256 _premiumPaid\n    );\n    event LogSetExchangeAgentInPolicy(address indexed _exchangeAgent, address indexed _policyAddress);\n    event LogSetPremiumPoolInPolicy(address indexed _premiumPool, address indexed _policyAddress);\n    event LogSetProtocolURIInPolicy(address indexed _policyAddress, string _uri);\n    event LogSetSignerInPolicy(address indexed _signer, address indexed _policyAddress);\n    event LogSetBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline, address indexed _policyAddress);\n    event LogSetCapitalAgentInPolicy(address indexed _capitalAgent, address indexed _policyAddress);\n    event LogapprovePremiumIInPolicy(address indexed _policyAddress, address indexed _premiumCurrency, address premiumPool);\n    event LogMarkToClaim(uint256 indexed _policyId, uint256 _coverageAmount);\n    event LogUpdatePolicyExpired(uint256 indexed _policyId, uint256 _coverageAmount);\n\n    constructor(\n        address _factory,\n        address _exchangeAgent,\n        address _premiumPool,\n        address _capitalAgent,\n        address _usdcToken\n    ) ERC721(\"Policy insurance\", \"Policy insurance\") {\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        require(_exchangeAgent != address(0), \"UnoRe: zero exchangeAgent address\");\n        require(_premiumPool != address(0), \"UnoRe: zero premiumPool address\");\n        require(_capitalAgent != address(0), \"UnoRe: zero capitalAgent address\");\n        require(_usdcToken != address(0), \"UnoRe: zero USDC address\");\n        factory = _factory;\n        exchangeAgent = _exchangeAgent;\n        capitalAgent = _capitalAgent;\n        usdcToken = _usdcToken;\n        premiumPool = _premiumPool;\n        maxDeadline = 7 days;\n    }\n\n    modifier onlyFactory() {\n        require(msgSender() == factory, \"UnoRe: SalesPolicy Forbidden\");\n        _;\n    }\n\n    modifier onlyCapitalAgent() {\n        require(msgSender() == capitalAgent, \"UnoRe: SalesPolicy Forbidden\");\n        _;\n    }\n\n    function killPool() external onlyFactory {\n        _pause();\n    }\n\n    function revivePool() external onlyFactory {\n        _unpause();\n    }\n\n    receive() external payable {}\n\n    function buyPolicy(\n        address[] memory _assets,\n        address[] memory _protocols,\n        uint256[] memory _coverageAmount,\n        uint256[] memory _coverageDuration,\n        uint256 _policyPriceInUSDC,\n        uint256 _signedTime,\n        address _premiumCurrency,\n        bytes32 r,\n        bytes32 s,\n        uint8 v,\n        uint256 nonce\n    ) external payable whenNotPaused nonReentrant {\n        uint256 len = _protocols.length;\n        require(len > 0, \"UnoRe: no policy\");\n        require(len == _assets.length, \"UnoRe: no match protocolIds with assets\");\n        require(len == _coverageAmount.length, \"UnoRe: no match protocolIds with coverageAmount\");\n        require(len == _coverageDuration.length, \"UnoRe: no match protocolIds with coverageDuration\");\n\n        address _signer = getSender(\n            _policyPriceInUSDC,\n            _protocols,\n            _coverageDuration,\n            _coverageAmount,\n            _signedTime,\n            _premiumCurrency,\n            r,\n            s,\n            v,\n            nonce,\n            msg.sender\n        );\n        require(_signer != address(0) && _signer == signer, \"UnoRe: invalid signer\");\n        require(_signedTime <= block.timestamp && block.timestamp - _signedTime < maxDeadline, \"UnoRe: signature expired\");\n\n        uint256 premiumPaid;\n        if (_premiumCurrency == address(0)) {\n            premiumPaid = IExchangeAgent(exchangeAgent).getETHAmountForUSDC(_policyPriceInUSDC);\n            require(msg.value >= premiumPaid, \"UnoRe: insufficient paid\");\n            if (msg.value > premiumPaid) {\n                TransferHelper.safeTransferETH(msgSender(), msg.value - premiumPaid);\n            }\n            IPremiumPool(premiumPool).collectPremiumInETH{value: premiumPaid}();\n        } else {\n            premiumPaid = _premiumCurrency != usdcToken\n                ? IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_premiumCurrency, _policyPriceInUSDC)\n                : _policyPriceInUSDC;\n            TransferHelper.safeTransferFrom(_premiumCurrency, msgSender(), address(this), premiumPaid);\n            IPremiumPool(premiumPool).collectPremium(_premiumCurrency, premiumPaid);\n        }\n\n        _buyPolicy(_assets, _protocols, _coverageAmount, _coverageDuration, premiumPaid, _premiumCurrency);\n    }\n\n    function _buyPolicy(\n        address[] memory _assets,\n        address[] memory _protocols,\n        uint256[] memory _coverageAmount,\n        uint256[] memory _coverageDuration,\n        uint256 _premiumPaid,\n        address _premiumCurrency\n    ) private {\n        uint256 _totalCoverage;\n        uint256 lastIdx;\n        uint256 coverAmount;\n        uint256 coverDuration;\n        address _protocol;\n        address _assetLocked;\n\n        bool checkIfProtocolInWhitelistArray = ISalesPolicyFactory(factory).checkIfProtocolInWhitelistArray();\n\n        for (uint256 ii = 0; ii < _protocols.length; ii++) {\n            lastIdx = policyIdx.current;\n            coverAmount = _coverageAmount[ii];\n            coverDuration = _coverageDuration[ii];\n            _protocol = _protocols[ii];\n            _assetLocked = _assets[ii];\n            uint256 premiumPaid = _premiumPaid;\n            bool isAvailableSale = false;\n            if (checkIfProtocolInWhitelistArray) {\n                uint16 _protocolId = ISalesPolicyFactory(factory).getProtocolId(_protocol);\n                if (_protocolId > 0) {\n                    (, bool isBlackList) = ISalesPolicyFactory(factory).getProtocolData(_protocolId);\n                    if (!isBlackList) {\n                        isAvailableSale = true;\n                    }\n                }\n            } else {\n                isAvailableSale = true;\n            }\n            require(isAvailableSale, \"UnoRe: unavailable policy\");\n            getPolicy[lastIdx] = Policy({\n                protocolAddress: _protocol,\n                coverageAmount: coverAmount,\n                coverageDuration: coverDuration,\n                coverStartAt: block.timestamp,\n                premiumCurrency: _premiumCurrency,\n                exist: true,\n                expired: false\n            });\n\n            _mint(msgSender(), lastIdx);\n\n            _totalCoverage += coverAmount;\n\n            emit BuyPolicy(\n                msgSender(),\n                _assetLocked,\n                _premiumCurrency,\n                _protocol,\n                lastIdx,\n                coverAmount,\n                coverDuration,\n                premiumPaid\n            );\n            policyIdx.next();\n        }\n        if (_totalCoverage > 0) {\n            ICapitalAgent(capitalAgent).policySale(_totalCoverage);\n        }\n    }\n\n    function approvePremium(address _premiumCurrency) external override onlyFactory {\n        require(_premiumCurrency != address(0), \"UnoRe: zero address\");\n        require(premiumPool != address(0), \"UnoRe: not defiend premiumPool\");\n        TransferHelper.safeApprove(_premiumCurrency, premiumPool, maxInteger);\n        emit LogapprovePremiumIInPolicy(address(this), _premiumCurrency, premiumPool);\n    }\n\n    function setProtocolURI(string memory newURI) external override onlyFactory {\n        protocolURI = newURI;\n        emit LogSetProtocolURIInPolicy(address(this), newURI);\n    }\n\n    function setPremiumPool(address _premiumPool) external override onlyFactory {\n        require(_premiumPool != address(0), \"UnoRe: zero address\");\n        premiumPool = _premiumPool;\n        emit LogSetPremiumPoolInPolicy(_premiumPool, address(this));\n    }\n\n    function setExchangeAgent(address _exchangeAgent) external override onlyFactory {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        exchangeAgent = _exchangeAgent;\n        emit LogSetExchangeAgentInPolicy(_exchangeAgent, address(this));\n    }\n\n    function setSigner(address _signer) external override onlyFactory {\n        require(_signer != address(0), \"UnoRe: zero address\");\n        signer = _signer;\n        emit LogSetSignerInPolicy(_signer, address(this));\n    }\n\n    function setCapitalAgent(address _capitalAgent) external override onlyFactory {\n        require(_capitalAgent != address(0), \"UnoRe: zero address\");\n        capitalAgent = _capitalAgent;\n        emit LogSetCapitalAgentInPolicy(_capitalAgent, address(this));\n    }\n\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external override onlyFactory {\n        require(_maxDeadline > 0, \"UnoRe: zero max signedTime\");\n        maxDeadline = _maxDeadline;\n        emit LogSetBuyPolicyMaxDeadlineInPolicy(_maxDeadline, address(this));\n    }\n\n    function markToClaim(uint256 _policyId) external override nonReentrant onlyCapitalAgent {\n        require(getPolicy[_policyId].exist, \"UnoRe: marked to claim already\");\n        require(!getPolicy[_policyId].expired, \"UnoRe: policy expired\");\n        getPolicy[_policyId].exist = false;\n        _burn(_policyId);\n        emit LogMarkToClaim(_policyId, getPolicy[_policyId].coverageAmount);\n    }\n\n    function updatePolicyExpired(uint256 _policyId) external override nonReentrant onlyCapitalAgent {\n        require(getPolicy[_policyId].exist, \"UnoRe: marked to claim already\");\n        getPolicy[_policyId].expired = true;\n        _burn(_policyId);\n        emit LogUpdatePolicyExpired(_policyId, getPolicy[_policyId].coverageAmount);\n    }\n\n    function allPoliciesLength() external view override returns (uint256) {\n        return policyIdx.current;\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return protocolURI;\n    }\n\n    function getPolicyData(uint256 _policyId) external view override returns (uint256, uint256, uint256, bool, bool) {\n        bool exist = getPolicy[_policyId].exist;\n        bool expired = getPolicy[_policyId].expired;\n        uint256 coverageAmount = getPolicy[_policyId].coverageAmount;\n        uint256 coverageDuration = getPolicy[_policyId].coverageDuration;\n        uint256 coverStartAt = uint256(getPolicy[_policyId].coverStartAt);\n        return (coverageAmount, coverageDuration, coverStartAt, exist, expired);\n    }\n\n    function getSender(\n        uint256 _policyPrice,\n        address[] memory _protocols,\n        uint256[] memory _coverageDuration,\n        uint256[] memory _coverageAmount,\n        uint256 _signedTime,\n        address _premiumCurrency,\n        bytes32 r,\n        bytes32 s,\n        uint8 v,\n        uint256 nonce,\n        address sender\n    ) private returns (address) {\n        // bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\n        bytes32 msgHash = keccak256(\n            abi.encodePacked(\n                _policyPrice,\n                _protocols,\n                _coverageDuration,\n                _coverageAmount,\n                _signedTime,\n                _premiumCurrency,\n                nonce,\n                sender,\n                block.chainid\n            )\n        );\n\n        require(usedHash[msgHash] == address(0), \"Already used hash\");\n\n        usedHash[msgHash] = sender;\n\n        // bytes32 msgHash = keccak256(abi.encodePacked(productName));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", msgHash));\n        // (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\n        address recoveredAddress = digest.recover(v, r, s);\n        return recoveredAddress;\n    }\n}\n"
    },
    "contracts/SingleSidedInsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\nimport \"./interfaces/ICapitalAgent.sol\";\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/IRiskPoolFactory.sol\";\nimport \"./interfaces/ISingleSidedInsurancePool.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./interfaces/ISyntheticSSIPFactory.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SingleSidedInsurancePool is\n    ISingleSidedInsurancePool,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable\n{\n    bytes32 public constant CLAIM_PROCESSOR_ROLE = keccak256(\"CLAIM_PROCESSOR_ROLE\");\n    bytes32 public constant GUARDIAN_COUNCIL_ROLE = keccak256(\"GUARDIAN_COUNCIL_ROLE\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant BOT_ROLE = keccak256(\"BOT_ROLE\");\n\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\n\n    address public migrateTo;\n    address public capitalAgent;\n    address public syntheticSSIP;\n\n    bool public killed;\n    address public rewarder;\n\n    address public override riskPool;\n\n    uint256 public lockTime;\n    uint256 public stakingStartTime;\n\n    struct PoolInfo {\n        uint256 lastRewardBlock;\n        uint256 accUnoPerShare;\n        uint256 unoMultiplierPerBlock;\n    }\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n        bool isNotRollOver;\n    }\n\n    struct Policy {\n        uint256 insuranceAmount;\n        address payoutAddress;\n        bool settled;\n    }\n\n    mapping(bytes32 => mapping(address => uint256)) public roleLockTime;\n\n    mapping(uint256 => Policy) public policies; // TODO\n\n    mapping(address => UserInfo) public userInfo;\n\n    PoolInfo public poolInfo;\n\n    event RiskPoolCreated(address indexed _SSIP, address indexed _pool);\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogLeaveFromPendingSSIP(\n        address indexed _user,\n        address indexed _riskPool,\n        uint256 _withdrawLpAmount,\n        uint256 _withdrawUnoAmount\n    );\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\n    event LogLpTransferInSSIP(address indexed _from, address indexed _to, uint256 _amount);\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\n    event LogCreateSyntheticSSIP(address indexed _SSIP, address indexed _syntheticSSIP, address indexed _lpToken);\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _cancelAmount, uint256 _cancelAmountInUno);\n    event LogMigrate(address indexed _user, address indexed _migrateTo, uint256 _migratedAmount);\n    event LogSetCapitalAgent(address indexed _SSIP, address indexed _capitalAgent);\n    event LogSetRewardMultiplier(address indexed _SSIP, uint256 _rewardPerBlock);\n    event LogSetRole(address indexed _SSIP, bytes32 _role, address indexed _account);\n    event LogSetMigrateTo(address indexed _SSIP, address indexed _migrateTo);\n    event LogSetMinLPCapital(address indexed _SSIP, uint256 _minLPCapital);\n    event LogSetLockTime(address indexed _SSIP, uint256 _lockTime);\n    event LogSetStakingStartTime(address indexed _SSIP, uint256 _startTime);\n    event PoolAlived(address indexed _owner, bool _alive);\n    event PoolFailed(address indexed _owner, bool _fail);\n    event KillPool(address indexed _owner, bool _killed);\n    event InsurancePayoutSettled(uint256 indexed policyId, address indexed payout, uint256 amount);\n    event RollOverReward(address[] indexed _staker, address indexed _pool, uint256 _amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n\n    function initialize(\n        address _capitalAgent,\n        address _multiSigWallet,\n        address _governance,\n        address _claimProcessor\n    ) external initializer {\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \"UnoRe: more than three owners required\");\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \"UnoRe: more than one owners required to verify\");\n        capitalAgent = _capitalAgent;\n        lockTime = 10 days;\n        __ReentrancyGuard_init();\n        __Pausable_init();\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _grantRole(GUARDIAN_COUNCIL_ROLE, _governance);\n        _grantRole(CLAIM_PROCESSOR_ROLE, _claimProcessor);\n        _setRoleAdmin(GUARDIAN_COUNCIL_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(CLAIM_PROCESSOR_ROLE, ADMIN_ROLE); // TODO\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\n    }\n\n    modifier isStartTime() {\n        require(block.timestamp >= stakingStartTime, \"UnoRe: not available time\");\n        _;\n    }\n\n    modifier roleLockTimePassed(bytes32 _role) {\n        require(block.timestamp >= roleLockTime[_role][msg.sender], \"UnoRe: roll lock time not passed\");\n        _;\n    }\n\n    modifier isAlive() {\n        require(!killed, \"UnoRe: pool is killed\");\n        _;\n    }\n\n    function pausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    function killPool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = true;\n        emit KillPool(msg.sender, true);\n    }\n\n    function revivePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = false;\n        emit PoolAlived(msg.sender, false);\n    }\n\n    function setRole(\n        bytes32 _role,\n        address _account\n    ) external onlyRole(GUARDIAN_COUNCIL_ROLE) roleLockTimePassed(GUARDIAN_COUNCIL_ROLE) {\n        require(_account != address(0), \"UnoRe: zero address\");\n        roleLockTime[_role][_account] = block.timestamp + lockTime;\n        _grantRole(_role, _account);\n        emit LogSetRole(address(this), _role, _account);\n    }\n\n    function setCapitalAgent(address _capitalAgent) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_capitalAgent != address(0), \"UnoRe: zero address\");\n        capitalAgent = _capitalAgent;\n        emit LogSetCapitalAgent(address(this), _capitalAgent);\n    }\n\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_rewardMultiplier > 0, \"UnoRe: zero value\");\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        emit LogSetRewardMultiplier(address(this), _rewardMultiplier);\n    }\n\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n        emit LogSetMigrateTo(address(this), _migrateTo);\n    }\n\n    function setMinLPCapital(uint256 _minLPCapital) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\n        emit LogSetMinLPCapital(address(this), _minLPCapital);\n    }\n\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        lockTime = _lockTime;\n        emit LogSetLockTime(address(this), _lockTime);\n    }\n\n    function setStakingStartTime(uint256 _startTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        stakingStartTime = _startTime + block.timestamp;\n        emit LogSetStakingStartTime(address(this), stakingStartTime);\n    }\n\n    /**\n     * @dev create Risk pool with UNO from SSIP owner\n     */\n    function createRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _factory,\n        address _currency,\n        uint256 _rewardMultiplier,\n        uint256 _SCR\n    ) external nonReentrant onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(riskPool == address(0), \"UnoRe: risk pool created already\");\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\n        poolInfo.lastRewardBlock = block.number;\n        poolInfo.accUnoPerShare = 0;\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        ICapitalAgent(capitalAgent).addPool(address(this), _currency, _SCR);\n        emit RiskPoolCreated(address(this), riskPool);\n    }\n\n    function createRewarder(\n        address _operator,\n        address _factory,\n        address _currency\n    ) external nonReentrant onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    function createSyntheticSSIP(\n        address _multiSigWallet,\n        address _factory\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) nonReentrant {\n        require(_multiSigWallet != address(0), \"UnoRe: zero owner address\");\n        require(_factory != address(0), \"UnoRe:zero factory address\");\n        require(riskPool != address(0), \"UnoRe:zero LP token address\");\n        syntheticSSIP = ISyntheticSSIPFactory(_factory).newSyntheticSSIP(_multiSigWallet, riskPool);\n        emit LogCreateSyntheticSSIP(address(this), syntheticSSIP, riskPool);\n    }\n\n    function migrate() external nonReentrant isAlive {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        uint256 lpPrice = IRiskPool(riskPool).lpPriceUno();\n        uint256 amount = userInfo[msg.sender].amount;\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > lockTime;\n        IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\n        uint256 migratedAmount = (amount * lpPrice) / 1e18;\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim(migratedAmount, 0, false);\n        IMigration(migrateTo).onMigration(msg.sender, migratedAmount, \"\");\n        userInfo[msg.sender].amount = 0;\n        userInfo[msg.sender].rewardDebt = 0;\n        emit LogMigrate(msg.sender, migrateTo, migratedAmount);\n    }\n\n    function pendingUno(address _to) external view returns (uint256 pending) {\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\n        uint256 accUnoPerShare = poolInfo.accUnoPerShare;\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n            accUnoPerShare = accUnoPerShare + (unoReward * ACC_UNO_PRECISION) / tokenSupply;\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    function updatePool() public override {\n        if (block.number > poolInfo.lastRewardBlock) {\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\n            if (tokenSupply > 0) {\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + ((unoReward * ACC_UNO_PRECISION) / tokenSupply);\n            }\n            poolInfo.lastRewardBlock = block.number;\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\n        }\n    }\n\n    function enterInPool(uint256 _amount) external payable override isStartTime isAlive nonReentrant {\n        _depositIn(_amount);\n        _enterInPool(_amount, msg.sender);\n        emit StakedInPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override isStartTime nonReentrant {\n        _harvest(msg.sender);\n        require(ICapitalAgent(capitalAgent).checkCapitalByMCR(address(this), _amount), \"UnoRe: minimum capital underflow\");\n        // Withdraw desired amount from pool\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\n        require(amount - pendingAmount >= (_amount * 1e18) / lpPriceUno, \"UnoRe: withdraw amount overflow\");\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\n\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n        emit LeftPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending(uint256 _amount) external override isStartTime whenNotPaused nonReentrant {\n        require(_amount > 0, \"Withdraw amount should be greator than zero\");\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender, _amount);\n\n        ICapitalAgent(capitalAgent).SSIPWithdraw(withdrawAmountInUNO);\n\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        userInfo[msg.sender].rewardDebt =\n            accumulatedUno -\n            ((withdrawAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n\n        userInfo[msg.sender].amount = amount - withdrawAmount;\n\n        emit LogLeaveFromPendingSSIP(msg.sender, riskPool, withdrawAmount, withdrawAmountInUNO);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public nonReentrant {\n        UserInfo memory user = userInfo[msg.sender];\n        uint256 amount = user.amount;\n        require(amount > 0, \"Unore: Zero user amount\");\n        delete userInfo[msg.sender];\n        IRiskPool(riskPool).emergencyWithdraw(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, amount);\n    }\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external override nonReentrant whenNotPaused {\n        require(msg.sender == address(riskPool), \"UnoRe: not allow others transfer\");\n        if (_from != syntheticSSIP && _to != syntheticSSIP) {\n            _harvest(_from);\n            uint256 amount = userInfo[_from].amount;\n            (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\n            require(amount - pendingAmount >= _amount, \"UnoRe: balance overflow\");\n            uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n            userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_from].amount = amount - _amount;\n\n            userInfo[_to].rewardDebt =\n                userInfo[_to].rewardDebt +\n                ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_to].amount = userInfo[_to].amount + _amount;\n\n            emit LogLpTransferInSSIP(_from, _to, _amount);\n        }\n    }\n\n    function harvest(address _to) external override whenNotPaused isAlive isStartTime nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n\n        uint256 _pendingUno = _updateReward(_to);\n\n        if (rewarder != address(0) && _pendingUno != 0) {\n            IRewarder(rewarder).onReward(_to, _pendingUno);\n        }\n\n        emit Harvest(msg.sender, _to, _pendingUno);\n    }\n\n    function toggleRollOver() external {\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\n    }\n\n    function rollOverReward(address[] memory _to) external isStartTime isAlive onlyRole(BOT_ROLE) nonReentrant {\n        require(IRiskPool(riskPool).currency() == IRewarder(rewarder).currency(), \"UnoRe: currency not matched\");\n        updatePool();\n        uint256 _totalPendingUno;\n        uint256 _accumulatedAmount;\n        for (uint256 i; i < _to.length; i++) {\n            require(!userInfo[_to[i]].isNotRollOver, \"UnoRe: rollover is not set\");\n\n            uint256 _pendingUno = _updateReward(_to[i]);\n            _totalPendingUno += _pendingUno;\n            _accumulatedAmount += userInfo[_to[i]].amount;\n            _enterInPool(_pendingUno, _to[i]);\n        }\n\n        if (rewarder != address(0) && _totalPendingUno != 0) {\n            IRewarder(rewarder).onRewardForRollOver(riskPool, _totalPendingUno, _accumulatedAmount);\n        }\n        emit RollOverReward(_to, riskPool, _totalPendingUno);\n    }\n\n    function cancelWithdrawRequest() external nonReentrant {\n        (uint256 cancelAmount, uint256 cancelAmountInUno) = IRiskPool(riskPool).cancelWithdrawRequest(msg.sender);\n        emit LogCancelWithdrawRequest(msg.sender, cancelAmount, cancelAmountInUno);\n    }\n\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\n        lpAmount = userInfo[_to].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get withdraw request amount in pending per user in UNO\n     */\n    function getWithdrawRequestPerUser(\n        address _user\n    ) external view returns (uint256 pendingAmount, uint256 pendingAmountInUno, uint256 originUnoAmount, uint256 requestTime) {\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\n     */\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\n    }\n\n    function settlePayout(\n        uint256 _policyId,\n        address _payout,\n        uint256 _amount\n    ) public isAlive onlyRole(CLAIM_PROCESSOR_ROLE) roleLockTimePassed(CLAIM_PROCESSOR_ROLE) {\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_payout, _amount);\n        ICapitalAgent(capitalAgent).SSIPPolicyCaim(realClaimAmount, uint256(_policyId), true);\n\n        emit InsurancePayoutSettled(_policyId, _payout, _amount);\n    }\n\n    function _enterInPool(uint256 _amount, address _to) internal {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        IRiskPool(riskPool).enter(_to, _amount);\n        UserInfo memory _userInfo = userInfo[_to];\n        _userInfo.rewardDebt =\n            _userInfo.rewardDebt +\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\n            ACC_UNO_PRECISION;\n        _userInfo.amount = _userInfo.amount + ((_amount * 1e18) / lpPriceUno);\n        userInfo[_to] = _userInfo;\n        ICapitalAgent(capitalAgent).SSIPStaking(_amount);\n    }\n\n    function _updateReward(address _to) internal returns (uint256) {\n        uint256 requestTime;\n        (, requestTime, ) = IRiskPool(riskPool).getWithdrawRequest(_to);\n        if (requestTime > 0) {\n            return 0;\n        }\n\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[_to].rewardDebt = accumulatedUno;\n        return _pendingUno;\n    }\n\n    function _depositIn(uint256 _amount) internal {\n        address token = IRiskPool(riskPool).currency();\n        if (token == address(0)) {\n            require(msg.value >= _amount, \"UnoRe: insufficient paid\");\n            if (msg.value > _amount) {\n                TransferHelper.safeTransferETH(msg.sender, msg.value - _amount);\n            }\n            TransferHelper.safeTransferETH(riskPool, _amount);\n        } else {\n            TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\n        }\n    }\n}\n"
    },
    "contracts/SingleSidedReinsurancePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\n\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRiskPoolFactory.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/ISingleSidedReinsurancePool.sol\";\nimport \"./interfaces/ISyntheticSSRPFactory.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SingleSidedReinsurancePool is\n    ISingleSidedReinsurancePool,\n    ReentrancyGuardUpgradeable,\n    AccessControlUpgradeable,\n    PausableUpgradeable\n{\n    bytes32 public constant CLAIM_ASSESSOR_ROLE = keccak256(\"CLAIM_ASSESSOR_ROLE\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant BOT_ROLE = keccak256(\"BOT_ROLE\");\n\n    uint256 public constant ACC_UNO_PRECISION = 1e18;\n\n    address public migrateTo;\n    address public syntheticSSRP;\n\n    uint256 public lockTime;\n    uint256 public stakingStartTime;\n\n    address public rewarder;\n    address public override riskPool;\n    bool public killed;\n\n    struct PoolInfo {\n        uint256 lastRewardBlock;\n        uint256 accUnoPerShare;\n        uint256 unoMultiplierPerBlock;\n    }\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n        bool isNotRollOver;\n    }\n\n    mapping(address => UserInfo) public userInfo;\n    mapping(bytes32 => mapping(address => uint256)) public roleLockTime;\n\n    PoolInfo public poolInfo;\n\n    event RiskPoolCreated(address indexed _SSRP, address indexed _pool);\n    event StakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accUnoPerShare);\n    event Harvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogLeaveFromPendingSSRP(address indexed _user, uint256 _withdrawLpAmount, uint256 _withdrawUnoAmount);\n    event PolicyClaim(address indexed _user, uint256 _claimAmount);\n    event LogLpTransferInSSRP(address indexed _from, address indexed _to, uint256 _amount);\n    event LogCreateRewarder(address indexed _SSRP, address indexed _rewarder, address _currency);\n    event LogCreateSyntheticSSRP(address indexed _SSRP, address indexed _syntheticSSRP, address indexed _lpToken);\n    event LogCancelWithdrawRequest(address indexed _user, uint256 _cancelAmount, uint256 _cancelAmountInUno);\n    event LogMigrate(address indexed _user, address indexed _migrateTo, uint256 _migratedAmount);\n    event LogSetRewardMultiplier(address indexed _SSIP, uint256 _rewardMultiplier);\n    event LogSetRole(address indexed _SSIP, bytes32 _role, address indexed _account);\n    event LogSetMigrateTo(address indexed _SSIP, address indexed _migrateTo);\n    event LogSetMinLPCapital(address indexed _SSIP, uint256 _minLPCapital);\n    event LogSetLockTime(address indexed _SSIP, uint256 _lockTime);\n    event LogSetStakingStartTime(address indexed _SSIP, uint256 _startTime);\n    event PoolAlived(address indexed _owner, bool _alive);\n    event KillPool(address indexed _owner, bool _killed);\n    event RollOverReward(address[] indexed _staker, address indexed _pool, uint256 _amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n\n    function initialize(address _multiSigWallet, address _claimAccessor) external initializer {\n        require(_multiSigWallet != address(0), \"UnoRe: zero multiSigWallet address\");\n        require(IGnosisSafe(_claimAccessor).getOwners().length > 3, \"UnoRe: more than three owners required\");\n        require(IGnosisSafe(_claimAccessor).getThreshold() > 1, \"UnoRe: more than one owners required to verify\");\n        stakingStartTime = block.timestamp + 3 days;\n        lockTime = 10 days;\n        __ReentrancyGuard_init();\n        __Pausable_init();\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _grantRole(CLAIM_ASSESSOR_ROLE, _claimAccessor);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(CLAIM_ASSESSOR_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\n    }\n\n    modifier isStartTime() {\n        require(block.timestamp >= stakingStartTime, \"UnoRe: not available time\");\n        _;\n    }\n\n    modifier roleLockTimePassed(bytes32 _role) {\n        require(block.timestamp >= roleLockTime[_role][msg.sender], \"UnoRe: roll lock time not passed\");\n        _;\n    }\n\n    modifier isAlive() {\n        require(!killed, \"UnoRe: pool is killed\");\n        _;\n    }\n\n    function pausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpausePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    function killPool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = true;\n        emit KillPool(msg.sender, true);\n    }\n\n    function revivePool() external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        killed = false;\n        emit PoolAlived(msg.sender, false);\n    }\n\n    function setRewardMultiplier(uint256 _rewardMultiplier) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_rewardMultiplier > 0, \"UnoRe: zero value\");\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        emit LogSetRewardMultiplier(address(this), _rewardMultiplier);\n    }\n\n    function setRole(bytes32 _role, address _account) external onlyRole(ADMIN_ROLE) {\n        require(_account != address(0), \"UnoRe: zero address\");\n        _grantRole(_role, _account);\n        roleLockTime[_role][_account] = block.timestamp + lockTime;\n        emit LogSetRole(address(this), _role, _account);\n    }\n\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n        emit LogSetMigrateTo(address(this), _migrateTo);\n    }\n\n    function setMinLPCapital(uint256 _minLPCapital) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_minLPCapital > 0, \"UnoRe: not allow zero value\");\n        IRiskPool(riskPool).setMinLPCapital(_minLPCapital);\n        emit LogSetMinLPCapital(address(this), _minLPCapital);\n    }\n\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        lockTime = _lockTime;\n        emit LogSetLockTime(address(this), _lockTime);\n    }\n\n    function setStakingStartTime(uint256 _startTime) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) {\n        require(_startTime > 0, \"UnoRe: not allow zero start time\");\n        stakingStartTime = _startTime;\n        emit LogSetStakingStartTime(address(this), _startTime);\n    }\n\n    /**\n     * @dev create Risk pool with UNO from SSRP owner\n     */\n    function createRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _factory,\n        address _currency,\n        uint256 _rewardMultiplier\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) nonReentrant {\n        require(riskPool == address(0), \"UnoRe: risk pool created already\");\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        require(_currency != address(0), \"UnoRe: zero currency address\");\n        riskPool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency);\n        poolInfo.lastRewardBlock = block.number;\n        poolInfo.accUnoPerShare = 0;\n        poolInfo.unoMultiplierPerBlock = _rewardMultiplier;\n        emit RiskPoolCreated(address(this), riskPool);\n    }\n\n    function createRewarder(\n        address _operator,\n        address _factory,\n        address _currency\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) nonReentrant {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        require(_currency != address(0), \"UnoRe: zero currency address\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    function createSyntheticSSRP(\n        address _owner,\n        address _factory\n    ) external onlyRole(ADMIN_ROLE) roleLockTimePassed(ADMIN_ROLE) nonReentrant {\n        require(_owner != address(0), \"UnoRe: zero owner address\");\n        require(_factory != address(0), \"UnoRe:zero factory address\");\n        require(riskPool != address(0), \"UnoRe:zero LP token address\");\n        syntheticSSRP = ISyntheticSSRPFactory(_factory).newSyntheticSSRP(_owner, riskPool);\n        emit LogCreateSyntheticSSRP(address(this), syntheticSSRP, riskPool);\n    }\n\n    function migrate() external isAlive nonReentrant {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        bool isUnLocked = block.timestamp - userInfo[msg.sender].lastWithdrawTime > lockTime;\n        uint256 migratedAmount = IRiskPool(riskPool).migrateLP(msg.sender, migrateTo, isUnLocked);\n        IMigration(migrateTo).onMigration(msg.sender, migratedAmount, \"\");\n        userInfo[msg.sender].amount = 0;\n        userInfo[msg.sender].rewardDebt = 0;\n        emit LogMigrate(msg.sender, migrateTo, migratedAmount);\n    }\n\n    function pendingUno(address _to) external view returns (uint256 pending) {\n        uint256 tokenSupply = IERC20(riskPool).totalSupply();\n        uint256 accUnoPerShare = poolInfo.accUnoPerShare;\n        if (block.number > poolInfo.lastRewardBlock && tokenSupply != 0) {\n            uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n            uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n            accUnoPerShare = accUnoPerShare + (unoReward * ACC_UNO_PRECISION) / tokenSupply;\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * uint256(accUnoPerShare)) / ACC_UNO_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    function updatePool() public override {\n        if (block.number > poolInfo.lastRewardBlock) {\n            uint256 tokenSupply = IERC20(riskPool).totalSupply();\n            if (tokenSupply > 0) {\n                uint256 blocks = block.number - uint256(poolInfo.lastRewardBlock);\n                uint256 unoReward = blocks * poolInfo.unoMultiplierPerBlock;\n                poolInfo.accUnoPerShare = poolInfo.accUnoPerShare + ((unoReward * ACC_UNO_PRECISION) / tokenSupply);\n            }\n            poolInfo.lastRewardBlock = block.number;\n            emit LogUpdatePool(poolInfo.lastRewardBlock, tokenSupply, poolInfo.accUnoPerShare);\n        }\n    }\n\n    function enterInPool(uint256 _amount) external override isStartTime isAlive nonReentrant {\n        _depositIn(_amount);\n        _enterInPool(_amount, msg.sender);\n        emit StakedInPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override isStartTime nonReentrant {\n        _harvest(msg.sender);\n        // Withdraw desired amount from pool\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(msg.sender);\n        require(amount - pendingAmount >= (_amount * 1e18) / lpPriceUno, \"UnoRe: withdraw amount overflow\");\n        IRiskPool(riskPool).leaveFromPoolInPending(msg.sender, _amount);\n\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n        emit LeftPool(msg.sender, riskPool, _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending(uint256 _amount) external override isStartTime whenNotPaused nonReentrant {\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n\n        (uint256 withdrawAmount, uint256 withdrawAmountInUNO) = IRiskPool(riskPool).leaveFromPending(msg.sender, _amount);\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n\n        userInfo[msg.sender].rewardDebt =\n            accumulatedUno -\n            ((withdrawAmount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n\n        userInfo[msg.sender].amount = amount - withdrawAmount;\n        emit LogLeaveFromPendingSSRP(msg.sender, withdrawAmount, withdrawAmountInUNO);\n    }\n\n    function lpTransfer(address _from, address _to, uint256 _amount) external override whenNotPaused nonReentrant {\n        require(msg.sender == address(riskPool), \"UnoRe: not allow others transfer\");\n        if (_from != syntheticSSRP && _to != syntheticSSRP) {\n            _harvest(_from);\n            uint256 amount = userInfo[_from].amount;\n            (uint256 pendingAmount, , ) = IRiskPool(riskPool).getWithdrawRequest(_from);\n            require(amount - pendingAmount >= _amount, \"UnoRe: balance overflow\");\n            uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n            userInfo[_from].rewardDebt = accumulatedUno - ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_from].amount = amount - _amount;\n\n            userInfo[_to].rewardDebt =\n                userInfo[_to].rewardDebt +\n                ((_amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION);\n            userInfo[_to].amount = userInfo[_to].amount + _amount;\n\n            emit LogLpTransferInSSRP(_from, _to, _amount);\n        }\n    }\n\n    function harvest(address _to) external override isStartTime whenNotPaused isAlive nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n\n        uint256 _pendingUno = _updateReward(_to);\n\n        if (rewarder != address(0) && _pendingUno != 0) {\n            IRewarder(rewarder).onReward(_to, _pendingUno);\n        }\n\n        emit Harvest(msg.sender, _to, _pendingUno);\n    }\n\n    function toggleRollOver() external {\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\n    }\n\n    function rollOverReward(address[] memory _to) external isStartTime isAlive onlyRole(BOT_ROLE) nonReentrant {\n        require(IRiskPool(riskPool).currency() == IRewarder(rewarder).currency(), \"UnoRe: currency not matched\");\n        updatePool();\n        uint256 _totalPendingUno;\n        uint256 _accumulatedAmount;\n        for (uint256 i; i < _to.length; i++) {\n            require(!userInfo[_to[i]].isNotRollOver, \"UnoRe: rollover is not set\");\n\n            uint256 _pendingUno = _updateReward(_to[i]);\n            _totalPendingUno += _pendingUno;\n            _accumulatedAmount += userInfo[_to[i]].amount;\n            _enterInPool(_pendingUno, _to[i]);\n        }\n        if (rewarder != address(0) && _totalPendingUno != 0) {\n            IRewarder(rewarder).onRewardForRollOver(riskPool, _totalPendingUno, _accumulatedAmount);\n        }\n\n        emit RollOverReward(_to, riskPool, _totalPendingUno);\n    }\n\n    function cancelWithdrawRequest() external nonReentrant {\n        (uint256 cancelAmount, uint256 cancelAmountInUno) = IRiskPool(riskPool).cancelWithdrawRequest(msg.sender);\n        emit LogCancelWithdrawRequest(msg.sender, cancelAmount, cancelAmountInUno);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public nonReentrant {\n        UserInfo memory user = userInfo[msg.sender];\n        uint256 amount = user.amount;\n        require(amount > 0, \"Unore: Zero user amount\");\n        delete userInfo[msg.sender];\n        IRiskPool(riskPool).emergencyWithdraw(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, amount);\n    }\n\n    function policyClaim(\n        address _to,\n        uint256 _amount\n    ) external onlyRole(CLAIM_ASSESSOR_ROLE) roleLockTimePassed(CLAIM_ASSESSOR_ROLE) isStartTime isAlive nonReentrant {\n        require(_to != address(0), \"UnoRe: zero address\");\n        require(_amount > 0, \"UnoRe: zero amount\");\n        uint256 realClaimAmount = IRiskPool(riskPool).policyClaim(_to, _amount);\n        emit PolicyClaim(_to, realClaimAmount);\n    }\n\n    function getStakedAmountPerUser(address _to) external view returns (uint256 unoAmount, uint256 lpAmount) {\n        lpAmount = userInfo[_to].amount;\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        unoAmount = (lpAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get withdraw request amount in pending per user in UNO\n     */\n    function getWithdrawRequestPerUser(\n        address _user\n    ) external view returns (uint256 pendingAmount, uint256 pendingAmountInUno, uint256 originUnoAmount, uint256 requestTime) {\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        (pendingAmount, requestTime, originUnoAmount) = IRiskPool(riskPool).getWithdrawRequest(_user);\n        pendingAmountInUno = (pendingAmount * lpPriceUno) / 1e18;\n    }\n\n    /**\n     * @dev get total withdraw request amount in pending for the risk pool in UNO\n     */\n    function getTotalWithdrawPendingAmount() external view returns (uint256) {\n        return IRiskPool(riskPool).getTotalWithdrawRequestAmount();\n    }\n\n    function _enterInPool(uint256 _amount, address _to) internal {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        uint256 lpPriceUno = IRiskPool(riskPool).lpPriceUno();\n        IRiskPool(riskPool).enter(_to, _amount);\n        UserInfo memory _userInfo = userInfo[_to];\n        _userInfo.rewardDebt =\n            _userInfo.rewardDebt +\n            ((_amount * 1e18 * uint256(poolInfo.accUnoPerShare)) / lpPriceUno) /\n            ACC_UNO_PRECISION;\n        _userInfo.amount = _userInfo.amount + ((_amount * 1e18) / lpPriceUno);\n        userInfo[_to] = _userInfo;\n    }\n\n    function _updateReward(address _to) internal returns (uint256) {\n        uint256 requestTime;\n        (, requestTime, ) = IRiskPool(riskPool).getWithdrawRequest(_to);\n        if (requestTime > 0) {\n            return 0;\n        }\n\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedUno = (amount * uint256(poolInfo.accUnoPerShare)) / ACC_UNO_PRECISION;\n        uint256 _pendingUno = accumulatedUno - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[_to].rewardDebt = accumulatedUno;\n        return _pendingUno;\n    }\n\n    function _depositIn(uint256 _amount) internal {\n        address token = IRiskPool(riskPool).currency();\n        TransferHelper.safeTransferFrom(token, msg.sender, riskPool, _amount);\n    }\n}\n"
    },
    "contracts/SyntheticSSIP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/ISyntheticSSIP.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SyntheticSSIP is ISyntheticSSIP, ReentrancyGuard, AccessControl, Pausable {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant BOT_ROLE = keccak256(\"BOT_ROLE\");\n\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\n\n    uint256 public lockTime = 10 days;\n\n    address public migrateTo;\n    address public rewarder;\n    address public lpToken;\n    bool public killed;\n\n    uint256 lastRewardBlock;\n    uint256 accRewardPerShare;\n    uint256 public rewardPerBlock;\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n        uint256 pendingWithdrawAmount;\n        bool isNotRollOver;\n    }\n\n    mapping(address => UserInfo) public userInfo;\n\n    uint256 public totalStakedLPAmount;\n    uint256 public totalWithdrawPending;\n\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accRewardPerShare);\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\n    event LogSetRewardPerBlock(address indexed _pool, uint256 _rewardPerBlock);\n    event LogSetMigrateTo(address indexed _pool, address indexed _migrateTo);\n    event LogSetLockTime(address indexed _pool, uint256 _lockTime);\n    event LogMigrate(address indexed _user, address indexed _pool, address indexed _migrateTo, uint256 amount);\n    event PoolAlived(address indexed _owner, bool _alive);\n    event KillPool(address indexed _owner, bool _killed);\n    event RollOverReward(address indexed _pool, address[] _staker, uint256 _amount);\n\n    constructor(address _lpToken, address _multiSigWallet) {\n        require(_multiSigWallet != address(0), \"UnoRe: zero multiSigWallet address\");\n        require(_lpToken != address(0), \"UnoRe: zero lp token address\");\n        lpToken = _lpToken;\n        rewardPerBlock = 1e18;\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    }\n\n    modifier isAlive() {\n        require(!killed, \"UnoRe: pool is killed\");\n        _;\n    }\n\n    function pausePool() external onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpausePool() external onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    function killPool() external onlyRole(ADMIN_ROLE) {\n        killed = true;\n        emit KillPool(msg.sender, true);\n    }\n\n    function revivePool() external onlyRole(ADMIN_ROLE) {\n        killed = false;\n        emit PoolAlived(msg.sender, false);\n    }\n\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyRole(ADMIN_ROLE) {\n        require(_rewardPerBlock > 0 && _rewardPerBlock <= 1000 * 1e18, \"UnoRe: invalid value, should be between 0 and 1000 * 1e18\");\n        rewardPerBlock = _rewardPerBlock;\n        emit LogSetRewardPerBlock(address(this), _rewardPerBlock);\n    }\n\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n        emit LogSetMigrateTo(address(this), _migrateTo);\n    }\n\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        lockTime = _lockTime;\n        emit LogSetLockTime(address(this), _lockTime);\n    }\n\n    function createRewarder(address _operator, address _factory, address _currency) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        require(_currency != address(0), \"UnoRe: zero currency address\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    function migrate() external isAlive nonReentrant {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        if (\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime\n        ) {\n            _leaveFromPending();\n        } else {\n            _cancelWithdrawRequest();\n        }\n        uint256 amount = userInfo[msg.sender].amount;\n        TransferHelper.safeTransfer(lpToken, migrateTo, amount);\n        IMigration(migrateTo).onMigration(msg.sender, amount, \"\");\n        userInfo[msg.sender].amount = 0;\n        emit LogMigrate(msg.sender, address(this), migrateTo, amount);\n    }\n\n    function pendingReward(address _to) external view returns (uint256 pending) {\n        uint256 currentAccRewardPerShare = accRewardPerShare;\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\n            uint256 blocks = block.number - lastRewardBlock;\n            uint256 rewards = blocks * rewardPerBlock;\n            currentAccRewardPerShare = accRewardPerShare + (rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount;\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * currentAccRewardPerShare) / ACC_REWARD_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    function updatePool() public override {\n        if (block.number > lastRewardBlock) {\n            if (totalStakedLPAmount > 0) {\n                uint256 blocks = block.number - lastRewardBlock;\n                uint256 rewards = blocks * rewardPerBlock;\n                accRewardPerShare = accRewardPerShare + ((rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount);\n            }\n            lastRewardBlock = block.number;\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accRewardPerShare);\n        }\n    }\n\n    function enterInPool(uint256 _amount) external override isAlive nonReentrant {\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\n        _enterInPool(_amount, msg.sender);\n        emit LogStakedInPool(msg.sender, address(this), _amount);\n    }\n\n    function toggleRollOver() external {\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\n    }\n\n    function rollOverReward(address[] memory _to) external isAlive onlyRole(BOT_ROLE) nonReentrant {\n        require(lpToken == IRewarder(rewarder).currency(), \"UnoRe: currency not matched\");\n\n        updatePool();\n        uint256 _totalPendingUno;\n        uint256 _accumulatedAmount;\n        for (uint256 i; i < _to.length; i++) {\n            require(!userInfo[_to[i]].isNotRollOver, \"UnoRe: rollover is not set\");\n\n            uint256 _pendingReward = _updateReward(_to[i]);\n            _totalPendingUno += _pendingReward;\n            _accumulatedAmount += userInfo[_to[i]].amount;\n            _enterInPool(_pendingReward, _to[i]);\n        }\n\n        if (rewarder != address(0) && _totalPendingUno > 0) {\n            IRewarder(rewarder).onRewardForRollOver(address(this), _totalPendingUno, _accumulatedAmount);\n        }\n        emit RollOverReward(address(this), _to, _totalPendingUno);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\n        // Withdraw desired amount from pool\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        require(amount - pendingWR >= _amount, \"UnoRe: withdraw amount overflow\");\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n\n        totalWithdrawPending = totalWithdrawPending + _amount;\n\n        emit LogLeftPool(msg.sender, address(this), _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending() external override whenNotPaused nonReentrant {\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        _leaveFromPending();\n    }\n\n    function _leaveFromPending() private {\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\n\n        userInfo[msg.sender].rewardDebt = accumulatedReward - ((pendingWR * accRewardPerShare) / ACC_REWARD_PRECISION);\n        userInfo[msg.sender].amount = amount - pendingWR;\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\n    }\n\n    function harvest(address _to) external override whenNotPaused isAlive nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n\n        uint256 _pendingReward = _updateReward(_to);\n\n        if (rewarder != address(0) && _pendingReward > 0) {\n            IRewarder(rewarder).onReward(_to, _pendingReward);\n        }\n\n        emit LogHarvest(msg.sender, _to, _pendingReward);\n    }\n\n    function _updateReward(address _to) internal returns (uint256) {\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n        uint256 _pendingReward = accumulatedReward - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[_to].rewardDebt = accumulatedReward;\n        return _pendingReward;\n    }\n\n    function _enterInPool(uint256 _amount, address _to) internal {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        userInfo[_to].rewardDebt = userInfo[_to].rewardDebt + (_amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n        userInfo[_to].amount = userInfo[_to].amount + _amount;\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\n    }\n\n    function cancelWithdrawRequest() external nonReentrant {\n        _cancelWithdrawRequest();\n    }\n\n    function _cancelWithdrawRequest() private {\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\n    }\n}\n"
    },
    "contracts/SyntheticSSRP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"./interfaces/IMigration.sol\";\nimport \"./interfaces/IRewarderFactory.sol\";\nimport \"./interfaces/ISyntheticSSRP.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract SyntheticSSRP is ISyntheticSSRP, ReentrancyGuard, AccessControl, Pausable {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant BOT_ROLE = keccak256(\"BOT_ROLE\");\n\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\n\n    uint256 public lockTime = 10 days;\n\n    address public migrateTo;\n    address public rewarder;\n    address public lpToken;\n    bool public killed;\n\n    uint256 lastRewardBlock;\n    uint256 accRewardPerShare;\n    uint256 public rewardPerBlock;\n\n    struct UserInfo {\n        uint256 lastWithdrawTime;\n        uint256 rewardDebt;\n        uint256 amount;\n        uint256 pendingWithdrawAmount;\n        bool isNotRollOver;\n    }\n\n    mapping(address => UserInfo) public userInfo;\n\n    uint256 public totalStakedLPAmount;\n    uint256 public totalWithdrawPending;\n\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accRewardPerShare);\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\n    event LogCreateRewarder(address indexed _SSRP, address indexed _rewarder, address _currency);\n    event LogSetRewardPerBlock(address indexed _pool, uint256 _rewardPerBlock);\n    event LogSetMigrateTo(address indexed _pool, address indexed _migrateTo);\n    event LogSetLockTime(address indexed _pool, uint256 _lockTime);\n    event LogMigrate(address indexed _user, address indexed _pool, address indexed _migrateTo, uint256 amount);\n    event PoolAlived(address indexed _owner, bool _alive);\n    event KillPool(address indexed _owner, bool _killed);\n    event RollOverReward(address indexed _pool, address[] indexed _staker, uint256 _amount);\n\n    constructor(address _lpToken, address _multiSigWallet) {\n        require(_multiSigWallet != address(0), \"UnoRe: zero multiSigWallet address\");\n        require(_lpToken != address(0), \"UnoRe: zero lp token address\");\n        lpToken = _lpToken;\n        rewardPerBlock = 1e18;\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    }\n\n    modifier isAlive() {\n        require(!killed, \"UnoRe: pool is killed\");\n        _;\n    }\n\n    function pause() external onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unPause() external onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    function killPool() external onlyRole(ADMIN_ROLE) {\n        killed = true;\n        emit KillPool(msg.sender, true);\n    }\n\n    function revivePool() external onlyRole(ADMIN_ROLE) {\n        killed = false;\n        emit PoolAlived(msg.sender, false);\n    }\n\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyRole(ADMIN_ROLE) {\n        require(_rewardPerBlock > 0, \"UnoRe: zero value\");\n        rewardPerBlock = _rewardPerBlock;\n        emit LogSetRewardPerBlock(address(this), _rewardPerBlock);\n    }\n\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) {\n        require(_migrateTo != address(0), \"UnoRe: zero address\");\n        migrateTo = _migrateTo;\n        emit LogSetMigrateTo(address(this), _migrateTo);\n    }\n\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) {\n        require(_lockTime > 0, \"UnoRe: not allow zero lock time\");\n        lockTime = _lockTime;\n        emit LogSetLockTime(address(this), _lockTime);\n    }\n\n    function createRewarder(address _operator, address _factory, address _currency) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_factory != address(0), \"UnoRe: rewarder factory no exist\");\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        require(_currency != address(0), \"UnoRe: zero currency address\");\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\n        emit LogCreateRewarder(address(this), rewarder, _currency);\n    }\n\n    function migrate() external isAlive nonReentrant {\n        require(migrateTo != address(0), \"UnoRe: zero address\");\n        _harvest(msg.sender);\n        if (\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime\n        ) {\n            _leaveFromPending();\n        } else {\n            _cancelWithdrawRequest();\n        }\n        uint256 amount = userInfo[msg.sender].amount;\n        TransferHelper.safeTransfer(lpToken, migrateTo, amount);\n        IMigration(migrateTo).onMigration(msg.sender, amount, \"\");\n        userInfo[msg.sender].amount = 0;\n        emit LogMigrate(msg.sender, address(this), migrateTo, amount);\n    }\n\n    function pendingReward(address _to) external view returns (uint256 pending) {\n        uint256 currentAccRewardPerShare = accRewardPerShare;\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\n            uint256 blocks = block.number - lastRewardBlock;\n            uint256 rewardAmount = blocks * rewardPerBlock;\n            currentAccRewardPerShare = accRewardPerShare + (rewardAmount * ACC_REWARD_PRECISION) / totalStakedLPAmount;\n        }\n        uint256 userBalance = userInfo[_to].amount;\n        pending = (userBalance * currentAccRewardPerShare) / ACC_REWARD_PRECISION - userInfo[_to].rewardDebt;\n    }\n\n    function updatePool() public override {\n        if (block.number > lastRewardBlock) {\n            if (totalStakedLPAmount > 0) {\n                uint256 blocks = block.number - lastRewardBlock;\n                uint256 rewardAmount = blocks * rewardPerBlock;\n                accRewardPerShare = accRewardPerShare + ((rewardAmount * ACC_REWARD_PRECISION) / totalStakedLPAmount);\n            }\n            lastRewardBlock = block.number;\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accRewardPerShare);\n        }\n    }\n\n    function toggleRollOver() external {\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\n    }\n\n    function enterInPool(uint256 _amount) external override isAlive nonReentrant {\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\n        _enterInPool(_amount, msg.sender);\n        emit LogStakedInPool(msg.sender, address(this), _amount);\n    }\n\n    function rollOverReward(address[] memory _to) external isAlive onlyRole(BOT_ROLE) nonReentrant {\n        require(lpToken == IRewarder(rewarder).currency(), \"UnoRe: currency not matched\");\n        updatePool();\n\n        uint256 _totalPendingReward;\n        uint256 _accumulatedAmount;\n        for (uint256 i; i < _to.length; i++) {\n            require(!userInfo[_to[i]].isNotRollOver, \"UnoRe: rollover is not set\");\n\n            uint256 _pendingReward = _updateReward(_to[i]);\n            _totalPendingReward += _pendingReward;\n            _accumulatedAmount += userInfo[_to[i]].amount;\n            _enterInPool(_pendingReward, _to[i]);\n        }\n\n        if (rewarder != address(0) && _totalPendingReward > 0) {\n            IRewarder(rewarder).onRewardForRollOver(address(this), _totalPendingReward, _accumulatedAmount);\n        }\n\n        emit RollOverReward(address(this), _to, _totalPendingReward);\n    }\n\n    /**\n     * @dev WR will be in pending for 10 days at least\n     */\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\n        // Withdraw desired amount from pool\n        _harvest(msg.sender);\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        require(amount - pendingWR >= _amount, \"UnoRe: withdraw amount overflow\");\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\n\n        totalWithdrawPending = totalWithdrawPending + _amount;\n\n        emit LogLeftPool(msg.sender, address(this), _amount);\n    }\n\n    /**\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\n     */\n    function leaveFromPending() external override whenNotPaused nonReentrant {\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \"UnoRe: Locked time\");\n        _harvest(msg.sender);\n        _leaveFromPending();\n    }\n\n    function _leaveFromPending() private {\n        uint256 amount = userInfo[msg.sender].amount;\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\n\n        userInfo[msg.sender].rewardDebt = accumulatedReward - ((pendingWR * accRewardPerShare) / ACC_REWARD_PRECISION);\n        userInfo[msg.sender].amount = amount - pendingWR;\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\n    }\n\n    function harvest(address _to) external override whenNotPaused isAlive nonReentrant {\n        _harvest(_to);\n    }\n\n    function _harvest(address _to) private {\n        updatePool();\n\n        uint256 _pendingReward = _updateReward(_to);\n\n        if (rewarder != address(0) && _pendingReward > 0) {\n            IRewarder(rewarder).onReward(_to, _pendingReward);\n        }\n\n        emit LogHarvest(msg.sender, _to, _pendingReward);\n    }\n\n    function _updateReward(address _to) internal returns (uint256) {\n        uint256 amount = userInfo[_to].amount;\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n        uint256 _pendingReward = accumulatedReward - userInfo[_to].rewardDebt;\n\n        // Effects\n        userInfo[_to].rewardDebt = accumulatedReward;\n        return _pendingReward;\n    }\n\n    function _enterInPool(uint256 _amount, address _to) internal {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        updatePool();\n        userInfo[_to].rewardDebt = userInfo[_to].rewardDebt + (_amount * accRewardPerShare) / ACC_REWARD_PRECISION;\n        userInfo[_to].amount = userInfo[_to].amount + _amount;\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\n    }\n\n    function cancelWithdrawRequest() external nonReentrant {\n        _cancelWithdrawRequest();\n    }\n\n    function _cancelWithdrawRequest() private {\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\n    }\n}\n"
    },
    "contracts/uma/ClaimData.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity =0.8.23;\n\nimport { AncillaryData as ClaimData } from \"../libraries/AncillaryData.sol\";\n"
    },
    "contracts/uma/EscalationManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../interfaces/EscalationManagerInterface.sol\";\nimport \"../interfaces/OptimisticOracleV3Interface.sol\";\n\ncontract EscalationManager is EscalationManagerInterface, AccessControl{\n\n    bytes32 public constant OPTMISTIC_ORACLE_V3_ROLE = keccak256(\"OPTMISTIC_ORACLE_V3_ROLE\");\n    bytes32 public constant CLAIM_ASSESSOR_ROLE = keccak256(\"CLAIM_ASSESSOR_ROLE\");\n\n    OptimisticOracleV3Interface public immutable optimisticOracleV3;\n\n    mapping (address => bool) checkDisputers;\n    mapping (address => bool) checkAssertingCaller;\n\n    modifier onlyOptimisticOracleV3() {\n        require(msg.sender == address(optimisticOracleV3), \"Not the Optimistic Oracle V3\");\n        _;\n    }\n\n    event PriceRequestAdded(bytes32 indexed identifier, uint256 time, bytes ancillaryData);\n\n    /**\n     * @notice Constructs the escalation manager.\n     * @param _optimisticOracleV3 the Optimistic Oracle V3 to use.\n     */\n    constructor(address _optimisticOracleV3, address _governance) {\n        optimisticOracleV3 = OptimisticOracleV3Interface(_optimisticOracleV3);\n        _grantRole(CLAIM_ASSESSOR_ROLE, _governance);\n        _setRoleAdmin(CLAIM_ASSESSOR_ROLE, CLAIM_ASSESSOR_ROLE);\n        _grantRole(OPTMISTIC_ORACLE_V3_ROLE, _optimisticOracleV3);\n        _setRoleAdmin(OPTMISTIC_ORACLE_V3_ROLE, CLAIM_ASSESSOR_ROLE);\n    }\n    \n    function getAssertionPolicy(bytes32) external override pure returns (AssertionPolicy memory) {\n        return AssertionPolicy({\n            blockAssertion: false,\n            arbitrateViaEscalationManager: true,\n            discardOracle: true,\n            validateDisputers: true\n        });\n    }\n\n    function isDisputeAllowed(bytes32 assertionId, address disputeCaller) external override view returns (bool) {\n        return checkDisputers[disputeCaller];\n    }\n\n    function toggleDisputer(address _disputer) external onlyRole(CLAIM_ASSESSOR_ROLE) {\n        checkDisputers[_disputer] = !checkDisputers[_disputer];\n    }\n\n    function toggleAssertionCaller(address _caller) external onlyRole(CLAIM_ASSESSOR_ROLE) {\n        checkAssertingCaller[_caller] = !checkAssertingCaller[_caller];\n    }\n\n    function getPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) external override returns (int256) {}\n\n    function requestPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) external override onlyRole(OPTMISTIC_ORACLE_V3_ROLE) {\n        emit PriceRequestAdded(identifier, time, ancillaryData);\n    }\n\n    function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully) external override onlyRole(OPTMISTIC_ORACLE_V3_ROLE) {}\n\n    function assertionDisputedCallback(bytes32 assertionId) external override onlyRole(OPTMISTIC_ORACLE_V3_ROLE) {}\n\n}"
    },
    "contracts/uma/PayoutRequest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"./ClaimData.sol\";\nimport \"../libraries/TransferHelper.sol\";\nimport \"../interfaces/OptimisticOracleV3Interface.sol\";\nimport \"../interfaces/ICapitalAgent.sol\";\nimport \"../interfaces/ISalesPolicy.sol\";\nimport \"../interfaces/IClaimProcessor.sol\";\nimport \"../interfaces/ISingleSidedInsurancePool.sol\";\n\ncontract PayoutRequest is PausableUpgradeable {\n    struct Policy {\n        uint256 insuranceAmount;\n        address payoutAddress;\n        bool settled;\n    }\n\n    address private _guardianCouncil;\n\n    OptimisticOracleV3Interface public optimisticOracle;\n    ISingleSidedInsurancePool public ssip;\n    ICapitalAgent public capitalAgent;\n    IClaimProcessor public claimProcessor;\n    IERC20 public defaultCurrency;\n    bytes32 public defaultIdentifier;\n    uint256 public assertionliveTime;\n    address public escalationManager;\n    mapping(uint256 => Policy) public policies;\n    mapping(bytes32 => uint256) public assertedPolicies;\n    mapping(uint256 => bytes32) public policiesAssertionId;\n    mapping(uint256 => bool) public isRequestInit;\n    bool public isUMAFailed;\n\n    event InsurancePayoutRequested(uint256 indexed policyId, bytes32 indexed assertionId);\n    event LogSetEscalationManager(address indexed payout, address indexed escalatingManager);\n    event LogSetAssertionAliveTime(address indexed payout, uint256 assertionAliveTime);\n    event LogSetClaimProccessor(address indexed payout, address indexed claimProccessor);\n    event LogSetCapitalAgent(address indexed payout, address indexed capitalAgent);\n    event PoolFailed(address indexed owner, bool fail);\n\n    function initialize(\n        ISingleSidedInsurancePool _ssip,\n        OptimisticOracleV3Interface _optimisticOracleV3,\n        IERC20 _defaultCurrency,\n        IClaimProcessor _claimProcessor,\n        address _escalationManager,\n        address __guardianCouncil\n    ) external initializer {\n        ssip = _ssip;\n        optimisticOracle = _optimisticOracleV3;\n        defaultCurrency = _defaultCurrency;\n        claimProcessor = _claimProcessor;\n        escalationManager = _escalationManager;\n        _guardianCouncil = __guardianCouncil;\n        defaultIdentifier = optimisticOracle.defaultIdentifier();\n        assertionliveTime = 10 days;\n    }\n\n    function initRequest(uint256 _policyId, uint256 _amount, address _to) public whenNotPaused returns (bytes32 assertionId) {\n        (address salesPolicy, , ) = ICapitalAgent(capitalAgent).getPolicyInfo();\n        require(IERC721(salesPolicy).ownerOf(_policyId) == msg.sender, \"UnoRe: not owner of policy id\");\n        (uint256 _coverageAmount, , , bool _exist, bool _expired) = ISalesPolicy(salesPolicy).getPolicyData(_policyId);\n        require(_amount <= _coverageAmount, \"UnoRe: amount exceeds coverage amount\");\n        require(_exist && !_expired, \"UnoRe: policy expired or not exist\");\n        Policy memory _policyData = policies[_policyId];\n        _policyData.insuranceAmount = _amount;\n        _policyData.payoutAddress = _to;\n        policies[_policyId] = _policyData;\n        if (!isUMAFailed) {\n            uint256 bond = optimisticOracle.getMinimumBond(address(defaultCurrency));\n            TransferHelper.safeTransferFrom(address(defaultCurrency), msg.sender, address(this), bond);\n            defaultCurrency.approve(address(optimisticOracle), bond);\n            assertionId = optimisticOracle.assertTruth(\n                abi.encodePacked(\n                    \"Insurance contract is claiming that insurance event \",\n                    \" had occurred as of \",\n                    ClaimData.toUtf8BytesUint(block.timestamp),\n                    \".\"\n                ),\n                _to,\n                address(ssip),\n                escalationManager,\n                uint64(assertionliveTime),\n                defaultCurrency,\n                bond,\n                defaultIdentifier,\n                bytes32(0) // No domain.\n            );\n            assertedPolicies[assertionId] = _policyId;\n            policiesAssertionId[_policyId] = assertionId;\n            emit InsurancePayoutRequested(_policyId, assertionId);\n        } else {\n            IClaimProcessor(claimProcessor).requestPolicyId(_policyId, address(ssip), _to, _amount);\n        }\n        isRequestInit[_policyId] = true;\n    }\n\n    function assertionResolvedCallback(bytes32 _assertionId, bool _assertedTruthfully) external whenNotPaused {\n        require(!isUMAFailed, \"RPayout: pool failed\");\n        require(msg.sender == address(optimisticOracle), \"RPayout: !optimistic oracle\");\n        // If the assertion was true, then the policy is settled.\n        uint256 _policyId = assertedPolicies[_assertionId];\n        if (_assertedTruthfully) {\n            // If already settled, do nothing. We don't revert because this function is called by the\n            // OptimisticOracleV3, which may block the assertion resolution.\n            Policy storage policy = policies[_policyId];\n            if (policy.settled) return;\n            policy.settled = true;\n            ssip.settlePayout(_policyId, policy.payoutAddress, policy.insuranceAmount);\n        } else {\n            isRequestInit[_policyId] = false;\n        }\n    }\n\n    function assertionDisputedCallback(bytes32 assertionId) external {}\n\n    function setEscalatingManager(address _escalatingManager) external {\n        _requireGuardianCouncil();\n        escalationManager = _escalatingManager;\n        emit LogSetEscalationManager(address(this), _escalatingManager);\n    }\n\n    function setFailed(bool _failed) external {\n        _requireGuardianCouncil();\n        isUMAFailed = _failed;\n        emit PoolFailed(msg.sender, _failed);\n    }\n\n    function setAliveness(uint256 _assertionliveTime) external {\n        _requireGuardianCouncil();\n        require(_assertionliveTime > 0, \"RPayout: zero assertion live time\");\n        assertionliveTime = _assertionliveTime;\n        emit LogSetAssertionAliveTime(address(this), _assertionliveTime);\n    }\n\n    function setClaimProcessor(IClaimProcessor _claimProcessor) external {\n        _requireGuardianCouncil();\n        claimProcessor = _claimProcessor;\n        emit LogSetClaimProccessor(address(this), address(_claimProcessor));\n    }\n\n    function setCapitalAgent(ICapitalAgent _capitalAgent) external {\n        _requireGuardianCouncil();\n        capitalAgent = _capitalAgent;\n        emit LogSetCapitalAgent(address(this), address(_capitalAgent));\n    }\n\n    function togglePause() external {\n        _requireGuardianCouncil();\n        paused() ? _unpause() : _pause();\n    }\n\n    function _requireGuardianCouncil() internal view {\n        require(msg.sender == _guardianCouncil, \"RPayout: unauthorised\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}