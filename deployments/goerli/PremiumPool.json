{
  "address": "0x7ff90C1C5e7cB2535e7e7992491dd1Be6c5325A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unoToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_killed",
          "type": "bool"
        }
      ],
      "name": "KillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "LogAddCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_whiteListAddress",
          "type": "address"
        }
      ],
      "name": "LogAddWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_unoAmount",
          "type": "uint256"
        }
      ],
      "name": "LogBuyBackAndBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_premiumAmount",
          "type": "uint256"
        }
      ],
      "name": "LogCollectPremium",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountDeposited",
          "type": "uint256"
        }
      ],
      "name": "LogDepositToSyntheticSSIPRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountDeposited",
          "type": "uint256"
        }
      ],
      "name": "LogDepositToSyntheticSSRPRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "LogMaxApproveCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "LogMaxDestroyCurrencyAllowance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "LogRemoveCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_whiteListAddress",
          "type": "address"
        }
      ],
      "name": "LogRemoveWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_alive",
          "type": "bool"
        }
      ],
      "name": "PoolAlived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "PremiumWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURNADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNANCE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whiteListAddress",
          "type": "address"
        }
      ],
      "name": "addWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availableCurrencyList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "backBurnPremiumEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "backBurnUnoPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackAndBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_premiumAmount",
          "type": "uint256"
        }
      ],
      "name": "collectPremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectPremiumInETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToSyntheticSSIPRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "depositToSyntheticSSRPRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "destroyCurrencyAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "maxApproveCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whiteListAddress",
          "type": "address"
        }
      ],
      "name": "removeWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revivePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ssipPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssipPremiumEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ssrpPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssrpPremiumEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unoToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpausePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa23d62093c9dd1d061085319b6d46a913e93ff0313c6c110d96424df41490fd1",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0x7ff90C1C5e7cB2535e7e7992491dd1Be6c5325A3",
    "transactionIndex": 9,
    "gasUsed": "2642294",
    "logsBloom": "0x
    "blockHash": "0x2930f10611ca9985aee18599ec37af320ec14323e006f3b7a4d1a07a4968237e",
    "transactionHash": "0xa23d62093c9dd1d061085319b6d46a913e93ff0313c6c110d96424df41490fd1",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 10608760,
        "transactionHash": "0xa23d62093c9dd1d061085319b6d46a913e93ff0313c6c110d96424df41490fd1",
        "address": "0x7ff90C1C5e7cB2535e7e7992491dd1Be6c5325A3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000edffe0a06914c9d6083b4b099e5b935e9e84c9a5",
          "0x000000000000000000000000edffe0a06914c9d6083b4b099e5b935e9e84c9a5"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x2930f10611ca9985aee18599ec37af320ec14323e006f3b7a4d1a07a4968237e"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10608760,
        "transactionHash": "0xa23d62093c9dd1d061085319b6d46a913e93ff0313c6c110d96424df41490fd1",
        "address": "0x7ff90C1C5e7cB2535e7e7992491dd1Be6c5325A3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb1",
          "0x000000000000000000000000edffe0a06914c9d6083b4b099e5b935e9e84c9a5",
          "0x000000000000000000000000edffe0a06914c9d6083b4b099e5b935e9e84c9a5"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x2930f10611ca9985aee18599ec37af320ec14323e006f3b7a4d1a07a4968237e"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10608760,
        "transactionHash": "0xa23d62093c9dd1d061085319b6d46a913e93ff0313c6c110d96424df41490fd1",
        "address": "0x7ff90C1C5e7cB2535e7e7992491dd1Be6c5325A3",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb1",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x2930f10611ca9985aee18599ec37af320ec14323e006f3b7a4d1a07a4968237e"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 10608760,
        "transactionHash": "0xa23d62093c9dd1d061085319b6d46a913e93ff0313c6c110d96424df41490fd1",
        "address": "0x7ff90C1C5e7cB2535e7e7992491dd1Be6c5325A3",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x2930f10611ca9985aee18599ec37af320ec14323e006f3b7a4d1a07a4968237e"
      }
    ],
    "blockNumber": 10608760,
    "cumulativeGasUsed": "3400698",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x97a70De3D00C9D377eaa539d54A3598bEB623A1F",
    "0xf0E7F2c4DF6285878822F4F08B2f4c720835d2b6",
    "0xB6b67A0b6B3e627d9e9aD6232c1CEf3cBb719620",
    "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5"
  ],
  "numDeployments": 1,
  "solcInputHash": "773dff1273a5bf4e713bac58bddad671",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_killed\",\"type\":\"bool\"}],\"name\":\"KillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"LogAddCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"LogAddWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unoAmount\",\"type\":\"uint256\"}],\"name\":\"LogBuyBackAndBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_premiumAmount\",\"type\":\"uint256\"}],\"name\":\"LogCollectPremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountDeposited\",\"type\":\"uint256\"}],\"name\":\"LogDepositToSyntheticSSIPRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountDeposited\",\"type\":\"uint256\"}],\"name\":\"LogDepositToSyntheticSSRPRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"LogMaxApproveCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"LogMaxDestroyCurrencyAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"LogRemoveCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"LogRemoveWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_alive\",\"type\":\"bool\"}],\"name\":\"PoolAlived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PremiumWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURNADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNANCE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableCurrencyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backBurnPremiumEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"backBurnUnoPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_premiumAmount\",\"type\":\"uint256\"}],\"name\":\"collectPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPremiumInETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToSyntheticSSIPRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"depositToSyntheticSSRPRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"destroyCurrencyAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"maxApproveCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ssipPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssipPremiumEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ssrpPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssrpPremiumEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addCurrency(address)\":{\"details\":\"add `_currency` to available, can only be call by admin role\",\"params\":{\"_currency\":\"address of the currency to add\"}},\"addWhiteList(address)\":{\"details\":\"white list address to collect premium, can only be call by admin role\",\"params\":{\"_whiteListAddress\":\"address to white list\"}},\"collectPremium(address,uint256)\":{\"details\":\"collect premium of `_premiumCurrency` from caller into premiumPool address, when user buy policy from sales policy it call this function to collect premium from user only whitelisted address can call this function\"},\"collectPremiumInETH()\":{\"details\":\"collect eth premium from caller into premiumPool address, when user buy policy from sales policy it call this function to collect premium from user only whitelisted address can call this function\"},\"destroyCurrencyAllowance(address,address)\":{\"details\":\"remove `_currency` allowanve from premiumPool to `_to` address, can only be call by admin role\",\"params\":{\"_currency\":\"address of the currency to remove\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"maxApproveCurrency(address,address)\":{\"details\":\"approve `_currency` to `_to` address from premiumPool, can only be call by admin role\",\"params\":{\"_currency\":\"address of the currency to remove\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeCurrency(address)\":{\"details\":\"remove `_currency` from available, can only be call by admin role\",\"params\":{\"_currency\":\"address of the currency to remove\"}},\"removeWhiteList(address)\":{\"details\":\"remove address from white list, can only be call by admin role\",\"params\":{\"_whiteListAddress\":\"address to remove from white list\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawPremium(address,address,uint256)\":{\"details\":\"withdraw premium of `_currency` from premiumPool to `_to` address only governance can call this function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PremiumPool.sol\":\"PremiumPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/PremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IPremiumPool.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\n\\ncontract PremiumPool is IPremiumPool, ReentrancyGuard, AccessControl, Pausable {\\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // using Address for address;\\n    address public exchangeAgent;\\n    address public unoToken;\\n    address public usdcToken;\\n    mapping(address => bool) public availableCurrencies;\\n    address[] public availableCurrencyList;\\n    mapping(address => bool) public whiteList;\\n\\n    bool public killed;\\n    address public constant BURNADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    mapping(address => uint256) public ssrpPremium;\\n    mapping(address => uint256) public ssipPremium;\\n    mapping(address => uint256) public backBurnUnoPremium;\\n    uint256 public ssrpPremiumEth;\\n    uint256 public ssipPremiumEth;\\n    uint256 public backBurnPremiumEth;\\n\\n    uint256 private maxInteger = type(uint256).max;\\n\\n    event PremiumWithdraw(address indexed _currency, address indexed _to, uint256 _amount);\\n    event LogBuyBackAndBurn(address indexed _operator, address indexed _premiumPool, uint256 _unoAmount);\\n    event LogCollectPremium(address indexed _from, address _premiumCurrency, uint256 _premiumAmount);\\n    event LogDepositToSyntheticSSRPRewarder(address indexed _rewarder, uint256 _amountDeposited);\\n    event LogDepositToSyntheticSSIPRewarder(address indexed _rewarder, address indexed _currency, uint256 _amountDeposited);\\n    event LogAddCurrency(address indexed _premiumPool, address indexed _currency);\\n    event LogRemoveCurrency(address indexed _premiumPool, address indexed _currency);\\n    event LogMaxApproveCurrency(address indexed _premiumPool, address indexed _currency, address indexed _to);\\n    event LogMaxDestroyCurrencyAllowance(address indexed _premiumPool, address indexed _currency, address indexed _to);\\n    event LogAddWhiteList(address indexed _premiumPool, address indexed _whiteListAddress);\\n    event LogRemoveWhiteList(address indexed _premiumPool, address indexed _whiteListAddress);\\n    event PoolAlived(address indexed _owner, bool _alive);\\n    event KillPool(address indexed _owner, bool _killed);\\n\\n    constructor(address _exchangeAgent, address _unoToken, address _usdcToken, address _multiSigWallet, address _governance) {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero exchangeAgent address\\\");\\n        require(_unoToken != address(0), \\\"UnoRe: zero UNO address\\\");\\n        require(_usdcToken != address(0), \\\"UnoRe: zero USDC address\\\");\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multisigwallet address\\\");\\n        require(_governance != address(0), \\\"UnoRe: zero governance address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        unoToken = _unoToken;\\n        usdcToken = _usdcToken;\\n        whiteList[msg.sender] = true;\\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\\n        _grantRole(GOVERNANCE_ROLE, _governance);\\n        _setRoleAdmin(GOVERNANCE_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n    }\\n\\n    modifier onlyAvailableCurrency(address _currency) {\\n        require(availableCurrencies[_currency], \\\"UnoRe: not allowed currency\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhiteList() {\\n        require(whiteList[msg.sender], \\\"UnoRe: not white list address\\\");\\n        _;\\n    }\\n\\n    modifier isAlive() {\\n        require(!killed, \\\"UnoRe: pool is killed\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function pausePool() external onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpausePool() external onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    function killPool() external onlyRole(ADMIN_ROLE) {\\n        killed = true;\\n        emit KillPool(msg.sender, true);\\n    }\\n\\n    function revivePool() external onlyRole(ADMIN_ROLE) {\\n        killed = false;\\n        emit PoolAlived(msg.sender, false);\\n    }\\n\\n    /**\\n     * @dev collect eth premium from caller into premiumPool address,\\n     * when user buy policy from sales policy it call this function to collect premium from user\\n     * only whitelisted address can call this function\\n     */\\n    function collectPremiumInETH() external payable override whenNotPaused nonReentrant onlyWhiteList {\\n        uint256 _premiumAmount = msg.value;\\n        uint256 _premium_SSRP = (_premiumAmount * 1000) / 10000;\\n        uint256 _premium_SSIP = (_premiumAmount * 7000) / 10000;\\n        ssrpPremiumEth = ssrpPremiumEth + _premium_SSRP;\\n        ssipPremiumEth = ssipPremiumEth + _premium_SSIP;\\n        backBurnPremiumEth = backBurnPremiumEth + (_premiumAmount - _premium_SSRP - _premium_SSIP);\\n        emit LogCollectPremium(msg.sender, address(0), _premiumAmount);\\n    }\\n\\n    /**\\n     * @dev collect premium of `_premiumCurrency` from caller into premiumPool address,\\n     * when user buy policy from sales policy it call this function to collect premium from user\\n     * only whitelisted address can call this function\\n     */\\n    function collectPremium(\\n        address _premiumCurrency,\\n        uint256 _premiumAmount\\n    ) external override whenNotPaused nonReentrant onlyAvailableCurrency(_premiumCurrency) onlyWhiteList {\\n        require(IERC20(_premiumCurrency).balanceOf(msg.sender) >= _premiumAmount, \\\"UnoRe: premium balance overflow\\\");\\n        TransferHelper.safeTransferFrom(_premiumCurrency, msg.sender, address(this), _premiumAmount);\\n        uint256 _premium_SSRP = (_premiumAmount * 1000) / 10000;\\n        uint256 _premium_SSIP = (_premiumAmount * 7000) / 10000;\\n        ssrpPremium[_premiumCurrency] = ssrpPremium[_premiumCurrency] + _premium_SSRP;\\n        ssipPremium[_premiumCurrency] = ssipPremium[_premiumCurrency] + _premium_SSIP;\\n        backBurnUnoPremium[_premiumCurrency] =\\n            backBurnUnoPremium[_premiumCurrency] +\\n            (_premiumAmount - _premium_SSRP - _premium_SSIP);\\n        emit LogCollectPremium(msg.sender, _premiumCurrency, _premiumAmount);\\n    }\\n\\n    function depositToSyntheticSSRPRewarder(address _rewarder) external onlyRole(ADMIN_ROLE) whenNotPaused nonReentrant {\\n        require(_rewarder != address(0), \\\"UnoRe: zero address\\\");\\n        enforceHasContractCode(_rewarder, \\\"UnoRe: no contract address\\\");\\n        uint256 usdcAmountToDeposit = 0;\\n        if (ssrpPremiumEth > 0) {\\n            TransferHelper.safeTransferETH(exchangeAgent, ssrpPremiumEth);\\n            uint256 convertedAmount = IExchangeAgent(exchangeAgent).convertForToken(address(0), usdcToken, ssrpPremiumEth);\\n            usdcAmountToDeposit += convertedAmount;\\n            ssrpPremiumEth = 0;\\n        }\\n        for (uint256 ii = 0; ii < availableCurrencyList.length; ii++) {\\n            if (ssrpPremium[availableCurrencyList[ii]] > 0) {\\n                if (availableCurrencyList[ii] == usdcToken) {\\n                    usdcAmountToDeposit += ssrpPremium[availableCurrencyList[ii]];\\n                } else {\\n                    uint256 convertedUSDCAmount = IExchangeAgent(exchangeAgent).convertForToken(\\n                        availableCurrencyList[ii],\\n                        usdcToken,\\n                        ssrpPremium[availableCurrencyList[ii]]\\n                    );\\n                    usdcAmountToDeposit += convertedUSDCAmount;\\n                }\\n                ssrpPremium[availableCurrencyList[ii]] = 0;\\n            }\\n        }\\n        if (usdcAmountToDeposit > 0) {\\n            TransferHelper.safeTransfer(usdcToken, _rewarder, usdcAmountToDeposit);\\n            emit LogDepositToSyntheticSSRPRewarder(_rewarder, usdcAmountToDeposit);\\n        }\\n    }\\n\\n    function depositToSyntheticSSIPRewarder(\\n        address _currency,\\n        address _rewarder,\\n        uint256 _amount\\n    ) external onlyRole(ADMIN_ROLE) whenNotPaused nonReentrant {\\n        require(_rewarder != address(0), \\\"UnoRe: zero address\\\");\\n        enforceHasContractCode(_rewarder, \\\"UnoRe: no contract address\\\");\\n        if (_currency == address(0) && ssipPremiumEth > 0) {\\n            require(_amount <= ssipPremiumEth, \\\"UnoRe: premium balance overflow\\\");\\n            TransferHelper.safeTransferETH(_rewarder, _amount);\\n            ssipPremiumEth -= _amount;\\n            emit LogDepositToSyntheticSSIPRewarder(_rewarder, _currency, _amount);\\n        } else {\\n            if (availableCurrencies[_currency] && ssipPremium[_currency] > 0) {\\n                require(_amount <= ssipPremium[_currency], \\\"UnoRe: premium balance overflow\\\");\\n                TransferHelper.safeTransfer(_currency, _rewarder, _amount);\\n                ssipPremium[_currency] -= _amount;\\n                emit LogDepositToSyntheticSSIPRewarder(_rewarder, _currency, _amount);\\n            }\\n        }\\n    }\\n\\n    function buyBackAndBurn() external onlyRole(ADMIN_ROLE) isAlive whenNotPaused {\\n        uint256 unoAmount = 0;\\n        if (backBurnPremiumEth > 0) {\\n            TransferHelper.safeTransferETH(exchangeAgent, backBurnPremiumEth);\\n            unoAmount += IExchangeAgent(exchangeAgent).convertForToken(address(0), unoToken, backBurnPremiumEth);\\n            backBurnPremiumEth = 0;\\n        }\\n        for (uint256 ii = 0; ii < availableCurrencyList.length; ii++) {\\n            if (backBurnUnoPremium[availableCurrencyList[ii]] > 0) {\\n                uint256 convertedAmount = IExchangeAgent(exchangeAgent).convertForToken(\\n                    availableCurrencyList[ii],\\n                    unoToken,\\n                    backBurnUnoPremium[availableCurrencyList[ii]]\\n                );\\n                unoAmount += convertedAmount;\\n                backBurnUnoPremium[availableCurrencyList[ii]] = 0;\\n            }\\n        }\\n        if (unoAmount > 0) {\\n            TransferHelper.safeTransfer(unoToken, BURNADDRESS, unoAmount);\\n        }\\n        emit LogBuyBackAndBurn(msg.sender, address(this), unoAmount);\\n    }\\n\\n    /**\\n     * @dev withdraw premium of `_currency` from premiumPool to `_to` address\\n     * only governance can call this function\\n     */\\n    function withdrawPremium(\\n        address _currency,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyRole(GOVERNANCE_ROLE) isAlive whenNotPaused {\\n        require(_to != address(0), \\\"UnoRe: zero address\\\");\\n        require(_amount > 0, \\\"UnoRe: zero amount\\\");\\n        if (_currency == address(0)) {\\n            require(address(this).balance >= _amount, \\\"UnoRe: Insufficient Premium\\\");\\n            TransferHelper.safeTransferETH(_to, _amount);\\n        } else {\\n            require(IERC20(_currency).balanceOf(address(this)) >= _amount, \\\"UnoRe: Insufficient Premium\\\");\\n            TransferHelper.safeTransfer(_currency, _to, _amount);\\n        }\\n        emit PremiumWithdraw(_currency, _to, _amount);\\n    }\\n\\n    /**\\n     * @dev add `_currency` to available, can only be call by admin role\\n     * @param _currency address of the currency to add\\n     */\\n    function addCurrency(address _currency) external onlyRole(ADMIN_ROLE) {\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\n        availableCurrencies[_currency] = true;\\n        availableCurrencyList.push(_currency);\\n        maxApproveCurrency(_currency, exchangeAgent);\\n        emit LogAddCurrency(address(this), _currency);\\n    }\\n\\n    /**\\n     * @dev remove `_currency` from available, can only be call by admin role\\n     * @param _currency address of the currency to remove\\n     */\\n    function removeCurrency(address _currency) external onlyRole(ADMIN_ROLE) {\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\n        availableCurrencies[_currency] = false;\\n        uint256 len = availableCurrencyList.length;\\n        address lastCurrency = availableCurrencyList[len - 1];\\n        for (uint256 ii = 0; ii < len; ii++) {\\n            if (_currency == availableCurrencyList[ii]) {\\n                availableCurrencyList[ii] = lastCurrency;\\n                availableCurrencyList.pop();\\n                destroyCurrencyAllowance(_currency, exchangeAgent);\\n                emit LogRemoveCurrency(address(this), _currency);\\n                return;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev approve `_currency` to `_to` address from premiumPool, can only be call by admin role\\n     * @param _currency address of the currency to remove\\n     */\\n    function maxApproveCurrency(address _currency, address _to) public onlyRole(ADMIN_ROLE) nonReentrant {\\n        if (IERC20(_currency).allowance(address(this), _to) < maxInteger) {\\n            TransferHelper.safeApprove(_currency, _to, maxInteger);\\n            emit LogMaxApproveCurrency(address(this), _currency, _to);\\n        }\\n    }\\n\\n    /**\\n     * @dev remove `_currency` allowanve from premiumPool to `_to` address, can only be call by admin role\\n     * @param _currency address of the currency to remove\\n     */\\n    function destroyCurrencyAllowance(address _currency, address _to) public onlyRole(ADMIN_ROLE) nonReentrant {\\n        if (IERC20(_currency).allowance(address(this), _to) > 0) {\\n            TransferHelper.safeApprove(_currency, _to, 0);\\n            emit LogMaxDestroyCurrencyAllowance(address(this), _currency, _to);\\n        }\\n    }\\n\\n    /**\\n     * @dev white list address to collect premium, can only be call by admin role\\n     * @param _whiteListAddress address to white list\\n     */\\n    function addWhiteList(address _whiteListAddress) external onlyRole(ADMIN_ROLE) {\\n        require(_whiteListAddress != address(0), \\\"UnoRe: zero address\\\");\\n        require(!whiteList[_whiteListAddress], \\\"UnoRe: white list already\\\");\\n        whiteList[_whiteListAddress] = true;\\n        emit LogAddWhiteList(address(this), _whiteListAddress);\\n    }\\n\\n    /**\\n     * @dev remove address from white list, can only be call by admin role\\n     * @param _whiteListAddress address to remove from white list\\n     */\\n    function removeWhiteList(address _whiteListAddress) external onlyRole(ADMIN_ROLE) {\\n        require(_whiteListAddress != address(0), \\\"UnoRe: zero address\\\");\\n        require(whiteList[_whiteListAddress], \\\"UnoRe: white list removed or unadded already\\\");\\n        whiteList[_whiteListAddress] = false;\\n        emit LogRemoveWhiteList(address(this), _whiteListAddress);\\n    }\\n\\n    function grantRole(bytes32 role, address account) public override whenNotPaused onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal override whenNotPaused returns (bool) {\\n        return super._revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Ensure that the given address has contract code deployed\\n     * @param _contract The address to check for contract code\\n     * @param _errorMessage The error message to display if the contract code is not deployed\\n     */\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize != 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xbdac0fd00ffa81870299c96a36a5e2b2bcfb1a2d94c16d0c6d06da05d6a6e559\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface IExchangeAgent {\\n    function usdcToken() external view returns (address);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) external view returns (uint256);\\n\\n    function convertForToken(address _token0, address _token1, uint256 _token0Amount) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3a0b6e72d0cac4ea4a6044538673f2cac3568a1bd9f2b3359979065b8486472\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface IGnosisSafe {\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getThreshold() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa958d03be51c456e26205695b66fd76ea243c91c24ca549360074b4782575e4d\",\"license\":\"MIT\"},\"contracts/interfaces/IPremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IPremiumPool {\\n    function collectPremium(address _premiumCurrency, uint256 _premiumAmount) external;\\n\\n    function collectPremiumInETH() external payable;\\n\\n    function withdrawPremium(address _currency, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x384950f5ec28f0f5b3ebafc5c68f8bd146c6ceec3a58d8e21287351c329bb0a4\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052600019600f553480156200001757600080fd5b5060405162002f1438038062002f148339810160408190526200003a916200040c565b60016000556002805460ff191690556001600160a01b038516620000af5760405162461bcd60e51b815260206004820152602160248201527f556e6f52653a207a65726f2065786368616e67654167656e74206164647265736044820152607360f81b60648201526084015b60405180910390fd5b6001600160a01b038416620001075760405162461bcd60e51b815260206004820152601760248201527f556e6f52653a207a65726f20554e4f20616464726573730000000000000000006044820152606401620000a6565b6001600160a01b0383166200015f5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f2055534443206164647265737300000000000000006044820152606401620000a6565b6001600160a01b038216620001c25760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a207a65726f206d756c746973696777616c6c6574206164647265604482015261737360f01b6064820152608401620000a6565b6001600160a01b0381166200021a5760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a207a65726f20676f7665726e616e6365206164647265737300006044820152606401620000a6565b600280546001600160a01b0380881661010002610100600160a81b031990921691909117909155600380548683166001600160a01b0319918216179091556004805492861692909116919091179055336000908152600760205260409020805460ff191660011790556200029e60008051602062002ef4833981519152836200030b565b50620002ba60008051602062002ed4833981519152826200030b565b50620002e560008051602062002ed483398151915260008051602062002ef4833981519152620003a2565b6200030060008051602062002ef483398151915280620003a2565b50505050506200047c565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16620003985760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016200039c565b5060005b92915050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b80516001600160a01b03811681146200040757600080fd5b919050565b600080600080600060a086880312156200042557600080fd5b6200043086620003ef565b94506200044060208701620003ef565b93506200045060408701620003ef565b92506200046060608701620003ef565b91506200047060808701620003ef565b90509295509295909350565b612a48806200048c6000396000f3fe60806040526004361061023f5760003560e01c80638ab234b61161012e578063c970e99f116100ab578063e1df99d51161006f578063e1df99d5146106b4578063e7cd4a04146106e1578063ed7c5f0a14610701578063f36c8f5c14610717578063f88822c41461074b57600080fd5b8063c970e99f1461061a578063d20535941461062f578063d547741f1461064f578063d84e305a1461066f578063d9203b911461068f57600080fd5b80639e382612116100f25780639e3826121461059b578063a217fddf146105c8578063aa09d5b7146105dd578063bc181416146105f2578063c5d3a107146105fa57600080fd5b80638ab234b6146104ee5780638c8ac76d1461050e5780638d9eb5271461052e57806391d148541461055b57806397274e6e1461057b57600080fd5b806336568abe116101bc5780635c975abb116101805780635c975abb1461046a578063677554151461048257806375837a7f1461049757806375b238fc146104b75780637a39b8d8146104d957600080fd5b806336568abe146103c457806337013d8a146103e4578063372c12b1146103fa57806354ea1d7d1461042a5780635bb48a001461044a57600080fd5b80631f3a0e41116102035780631f3a0e41146103235780632042e5c21461033d578063248a9ca31461035d5780632f2ff15d1461038e57806330fed930146103ae57600080fd5b806301ffc9a71461024b578063033ab8f014610280578063068cc514146102a457806311eac855146102bb5780631af42c0f146102f357600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5061026b6102663660046126e5565b61076b565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b50610296600e5481565b604051908152602001610277565b3480156102b057600080fd5b506102b96107a2565b005b3480156102c757600080fd5b506004546102db906001600160a01b031681565b6040516001600160a01b039091168152602001610277565b3480156102ff57600080fd5b5061026b61030e36600461272b565b60056020526000908152604090205460ff1681565b34801561032f57600080fd5b5060085461026b9060ff1681565b34801561034957600080fd5b506102b961035836600461272b565b6107c5565b34801561036957600080fd5b50610296610378366004612746565b6000908152600160208190526040909120015490565b34801561039a57600080fd5b506102b96103a936600461275f565b6108d4565b3480156103ba57600080fd5b50610296600d5481565b3480156103d057600080fd5b506102b96103df36600461275f565b610908565b3480156103f057600080fd5b50610296600c5481565b34801561040657600080fd5b5061026b61041536600461272b565b60076020526000908152604090205460ff1681565b34801561043657600080fd5b506102b961044536600461278b565b610940565b34801561045657600080fd5b506102db610465366004612746565b610a2c565b34801561047657600080fd5b5060025460ff1661026b565b34801561048e57600080fd5b506102b9610a56565b3480156104a357600080fd5b506003546102db906001600160a01b031681565b3480156104c357600080fd5b506102966000805160206129f383398151915281565b3480156104e557600080fd5b506102b9610ab2565b3480156104fa57600080fd5b506102b961050936600461272b565b610b0c565b34801561051a57600080fd5b506102b96105293660046127b5565b610c35565b34801561053a57600080fd5b5061029661054936600461272b565b600b6020526000908152604090205481565b34801561056757600080fd5b5061026b61057636600461275f565b610eeb565b34801561058757600080fd5b506102b961059636600461278b565b610f16565b3480156105a757600080fd5b506102966105b636600461272b565b600a6020526000908152604090205481565b3480156105d457600080fd5b50610296600081565b3480156105e957600080fd5b506102b9611001565b6102b9611021565b34801561060657600080fd5b506102b961061536600461272b565b61115d565b34801561062657600080fd5b506102b9611340565b34801561063b57600080fd5b506102b961064a3660046127df565b611660565b34801561065b57600080fd5b506102b961066a36600461275f565b6118b0565b34801561067b57600080fd5b506102b961068a3660046127df565b6118d6565b34801561069b57600080fd5b506002546102db9061010090046001600160a01b031681565b3480156106c057600080fd5b506102966106cf36600461272b565b60096020526000908152604090205481565b3480156106ed57600080fd5b506102b96106fc36600461272b565b611b41565b34801561070d57600080fd5b506102db61dead81565b34801561072357600080fd5b506102967f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb181565b34801561075757600080fd5b506102b961076636600461272b565b611c36565b60006001600160e01b03198216637965db0b60e01b148061079c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206129f38339815191526107ba8161201a565b6107c2612024565b50565b6000805160206129f38339815191526107dd8161201a565b6001600160a01b03821661080c5760405162461bcd60e51b81526004016108039061281b565b60405180910390fd5b6001600160a01b03821660009081526007602052604090205460ff166108895760405162461bcd60e51b815260206004820152602c60248201527f556e6f52653a207768697465206c6973742072656d6f766564206f7220756e6160448201526b6464656420616c726561647960a01b6064820152608401610803565b6001600160a01b038216600081815260076020526040808220805460ff191690555130917f2f467772ef0a5478314f3bc2b37d4b2ad29b65f052b2cedc8e2972dda033529291a35050565b6108dc612076565b600082815260016020819052604090912001546108f88161201a565b610902838361209a565b50505050565b6001600160a01b03811633146109315760405163334bd91960e11b815260040160405180910390fd5b61093b8282612113565b505050565b6000805160206129f38339815191526109588161201a565b61096061212e565b600f54604051636eb1769f60e11b81523060048201526001600160a01b03848116602483015285169063dd62ed3e90604401602060405180830381865afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d39190612848565b1015610a22576109e68383600f54612158565b6040516001600160a01b03808416919085169030907f43121c61393a372aa50e4d3b0ec4003cce2d54e92ae7799836389597d5ead98d90600090a45b61093b6001600055565b60068181548110610a3c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805160206129f3833981519152610a6e8161201a565b6008805460ff191690556040516000815233907f77337fcf1b48e6e024b256962b66c49de98c9f606b2cd9937cc0edbc7a0fb709906020015b60405180910390a250565b6000805160206129f3833981519152610aca8161201a565b6008805460ff1916600190811790915560405190815233907f7c952f2e528aa25b4eaf8b6c07af29184b27ce591295e543ced0a27b167dc79490602001610aa7565b6000805160206129f3833981519152610b248161201a565b6001600160a01b03821660009081526005602052604090205460ff1615610b815760405162461bcd60e51b8152602060048201526011602482015270416c726561647920617661696c61626c6560781b6044820152606401610803565b6001600160a01b038083166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055600254610bfb918491610100900416610940565b6040516001600160a01b0383169030907fc2def0bb3cfcff0462d9a69faa99e2ddeb1bf6b642d12a1fe3ed6653944fecd590600090a35050565b610c3d612076565b610c4561212e565b6001600160a01b038216600090815260056020526040902054829060ff16610caf5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f7420616c6c6f7765642063757272656e637900000000006044820152606401610803565b3360009081526007602052604090205460ff16610d0e5760405162461bcd60e51b815260206004820152601d60248201527f556e6f52653a206e6f74207768697465206c69737420616464726573730000006044820152606401610803565b6040516370a0823160e01b815233600482015282906001600160a01b038516906370a0823190602401602060405180830381865afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190612848565b1015610d965760405162461bcd60e51b815260040161080390612861565b610da283333085612280565b6000612710610db3846103e86128ae565b610dbd91906128c5565b90506000612710610dd085611b586128ae565b610dda91906128c5565b6001600160a01b038616600090815260096020526040902054909150610e019083906128e7565b6001600160a01b038616600090815260096020908152604080832093909355600a90522054610e319082906128e7565b6001600160a01b0386166000908152600a602052604090205580610e5583866128fa565b610e5f91906128fa565b6001600160a01b0386166000908152600b6020526040902054610e8291906128e7565b6001600160a01b0386166000818152600b602090815260409182902093909355805191825291810186905233917f411101aad886ab4351e7c392d06f013b37a7c6c00b7f964bca364da03df0e7d5910160405180910390a2505050610ee76001600055565b5050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206129f3833981519152610f2e8161201a565b610f3661212e565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa9190612848565b1115610a2257610fbc83836000612158565b6040516001600160a01b03808416919085169030907fefc983aa790fe837a31d17855afa75e3d276afef0959edcd4edd1a5e09905ee590600090a461093b6001600055565b6000805160206129f38339815191526110198161201a565b6107c26123ba565b611029612076565b61103161212e565b3360009081526007602052604090205460ff166110905760405162461bcd60e51b815260206004820152601d60248201527f556e6f52653a206e6f74207768697465206c69737420616464726573730000006044820152606401610803565b3460006127106110a2836103e86128ae565b6110ac91906128c5565b905060006127106110bf84611b586128ae565b6110c991906128c5565b905081600c546110d991906128e7565b600c55600d546110ea9082906128e7565b600d55806110f883856128fa565b61110291906128fa565b600e5461110f91906128e7565b600e5560408051600081526020810185905233917f411101aad886ab4351e7c392d06f013b37a7c6c00b7f964bca364da03df0e7d5910160405180910390a250505061115b6001600055565b565b6000805160206129f38339815191526111758161201a565b6001600160a01b03821660009081526005602052604090205460ff166111d15760405162461bcd60e51b8152602060048201526011602482015270139bdd08185d985a5b18589b19481e595d607a1b6044820152606401610803565b6001600160a01b0382166000908152600560205260408120805460ff191690556006805491906112026001846128fa565b815481106112125761121261290d565b60009182526020822001546001600160a01b031691505b8281101561133957600681815481106112445761124461290d565b6000918252602090912001546001600160a01b03908116908616036113315781600682815481106112775761127761290d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060068054806112b6576112b6612923565b600082815260209020810160001990810180546001600160a01b03191690550190556002546112f490869061010090046001600160a01b0316610f16565b6040516001600160a01b0386169030907f39198a02f988846be034bb915c4f3e43a226a15d6f29cf21918e838b1a5f878490600090a35050505050565b600101611229565b5050505050565b6000805160206129f38339815191526113588161201a565b60085460ff16156113a35760405162461bcd60e51b8152602060048201526015602482015274155b9bd4994e881c1bdbdb081a5cc81ada5b1b1959605a1b6044820152606401610803565b6113ab612076565b600e546000901561146a57600254600e546113d49161010090046001600160a01b0316906123f7565b600254600354600e546040516393badc4160e01b81526101009093046001600160a01b03908116936393badc41936114159360009390911691600401612939565b6020604051808303816000875af1158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190612848565b61146290826128e7565b6000600e5590505b60005b600654811015611605576000600b6000600684815481106114905761149061290d565b60009182526020808320909101546001600160a01b0316835282019290925260400190205411156115fd576002546006805460009261010090046001600160a01b0316916393badc4191859081106114ea576114ea61290d565b6000918252602082200154600354600680546001600160a01b03938416949290931692600b929190899081106115225761152261290d565b60009182526020808320909101546001600160a01b0316835282019290925260409081019091205490516001600160e01b031960e086901b16815261156c93929190600401612939565b6020604051808303816000875af115801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115af9190612848565b90506115bb81846128e7565b92506000600b6000600685815481106115d6576115d661290d565b60009182526020808320909101546001600160a01b03168352820192909252604001902055505b60010161146d565b50801561162557600354611625906001600160a01b031661dead836124d1565b604051818152309033907f94032d93ea01eeeccc1b1f03a7eddaf352c7cd85e246c6fc01afed0ddf6b5c1d9060200160405180910390a35050565b6000805160206129f38339815191526116788161201a565b611680612076565b61168861212e565b6001600160a01b0383166116ae5760405162461bcd60e51b81526004016108039061281b565b6116ed836040518060400160405280601a81526020017f556e6f52653a206e6f20636f6e747261637420616464726573730000000000008152506125fb565b6001600160a01b03841615801561170657506000600d54115b156117a257600d5482111561172d5760405162461bcd60e51b815260040161080390612861565b61173783836123f7565b81600d600082825461174991906128fa565b92505081905550836001600160a01b0316836001600160a01b03167f370cbb08cddf346c35e924a503aa223dcc1b75a993d7c23a602d2e4bc0802c108460405161179591815260200190565b60405180910390a36118a6565b6001600160a01b03841660009081526005602052604090205460ff1680156117e157506001600160a01b0384166000908152600a602052604090205415155b156118a6576001600160a01b0384166000908152600a602052604090205482111561181e5760405162461bcd60e51b815260040161080390612861565b6118298484846124d1565b6001600160a01b0384166000908152600a6020526040812080548492906118519084906128fa565b92505081905550836001600160a01b0316836001600160a01b03167f370cbb08cddf346c35e924a503aa223dcc1b75a993d7c23a602d2e4bc0802c108460405161189d91815260200190565b60405180910390a35b6109026001600055565b600082815260016020819052604090912001546118cc8161201a565b6109028383612113565b7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb16119008161201a565b60085460ff161561194b5760405162461bcd60e51b8152602060048201526015602482015274155b9bd4994e881c1bdbdb081a5cc81ada5b1b1959605a1b6044820152606401610803565b611953612076565b6001600160a01b0383166119795760405162461bcd60e51b81526004016108039061281b565b600082116119be5760405162461bcd60e51b8152602060048201526012602482015271155b9bd4994e881e995c9bc8185b5bdd5b9d60721b6044820152606401610803565b6001600160a01b038416611a2b5781471015611a1c5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a20496e73756666696369656e74205072656d69756d00000000006044820152606401610803565b611a2683836123f7565b611aee565b6040516370a0823160e01b815230600482015282906001600160a01b038616906370a0823190602401602060405180830381865afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a959190612848565b1015611ae35760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a20496e73756666696369656e74205072656d69756d00000000006044820152606401610803565b611aee8484846124d1565b826001600160a01b0316846001600160a01b03167f8d18a25569e967883ac0402e6991b4ac87616370a1c2ce59726abce4ef45bdb884604051611b3391815260200190565b60405180910390a350505050565b6000805160206129f3833981519152611b598161201a565b6001600160a01b038216611b7f5760405162461bcd60e51b81526004016108039061281b565b6001600160a01b03821660009081526007602052604090205460ff1615611be85760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a207768697465206c69737420616c7265616479000000000000006044820152606401610803565b6001600160a01b038216600081815260076020526040808220805460ff191660011790555130917f8cd7b0b1a7316eb3e5d781d629cb8bf4e2fd9a8903bdd0f6b894c087d61b21f291a35050565b6000805160206129f3833981519152611c4e8161201a565b611c56612076565b611c5e61212e565b6001600160a01b038216611c845760405162461bcd60e51b81526004016108039061281b565b611cc3826040518060400160405280601a81526020017f556e6f52653a206e6f20636f6e747261637420616464726573730000000000008152506125fb565b600c5460009015611d8757600254600c54611cec9161010090046001600160a01b0316906123f7565b60025460048054600c546040516393badc4160e01b81526000946001600160a01b036101009091048116946393badc4194611d2f94889491909316929101612939565b6020604051808303816000875af1158015611d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d729190612848565b9050611d7e81836128e7565b6000600c559150505b60005b600654811015611fad5760006009600060068481548110611dad57611dad61290d565b60009182526020808320909101546001600160a01b031683528201929092526040019020541115611fa557600454600680546001600160a01b039092169183908110611dfb57611dfb61290d565b6000918252602090912001546001600160a01b031603611e62576009600060068381548110611e2c57611e2c61290d565b60009182526020808320909101546001600160a01b03168352820192909252604001902054611e5b90836128e7565b9150611f66565b6002546006805460009261010090046001600160a01b0316916393badc419185908110611e9157611e9161290d565b6000918252602082200154600454600680546001600160a01b03938416949290931692600992919089908110611ec957611ec961290d565b60009182526020808320909101546001600160a01b0316835282019290925260409081019091205490516001600160e01b031960e086901b168152611f1393929190600401612939565b6020604051808303816000875af1158015611f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f569190612848565b9050611f6281846128e7565b9250505b60006009600060068481548110611f7f57611f7f61290d565b60009182526020808320909101546001600160a01b031683528201929092526040019020555b600101611d8a565b50801561200f57600454611fcb906001600160a01b031684836124d1565b826001600160a01b03167f9a380c5d696c8e394928ff8981a11ee388a14e2f7e16d373d73486cf3c4862548260405161200691815260200190565b60405180910390a25b50610ee76001600055565b6107c2813361261c565b61202c612655565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60025460ff161561115b5760405163d93c066560e01b815260040160405180910390fd5b60006120a68383610eeb565b61210b5760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a450600161079c565b50600061079c565b600061211d612076565b6121278383612678565b9392505050565b60026000540361215157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916121b49190612981565b6000604051808303816000865af19150503d80600081146121f1576040519150601f19603f3d011682016040523d82523d6000602084013e6121f6565b606091505b5091509150818015612220575080511580612220575080806020019051810190612220919061299d565b6113395760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b6064820152608401610803565b600080856001600160a01b03166323b872dd8686866040516024016122a793929190612939565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516122e09190612981565b6000604051808303816000865af19150503d806000811461231d576040519150601f19603f3d011682016040523d82523d6000602084013e612322565b606091505b509150915081801561234c57508051158061234c57508080602001905181019061234c919061299d565b6123b25760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610803565b505050505050565b6123c2612076565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120593390565b604080516000808252602082019092526001600160a01b0384169083906040516124219190612981565b60006040518083038185875af1925050503d806000811461245e576040519150601f19603f3d011682016040523d82523d6000602084013e612463565b606091505b505090508061093b5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610803565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161252d9190612981565b6000604051808303816000865af19150503d806000811461256a576040519150601f19603f3d011682016040523d82523d6000602084013e61256f565b606091505b5091509150818015612599575080511580612599575080806020019051810190612599919061299d565b6113395760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610803565b813b81816109025760405162461bcd60e51b815260040161080391906129bf565b6126268282610eeb565b610ee75760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610803565b60025460ff1661115b57604051638dfc202b60e01b815260040160405180910390fd5b60006126848383610eeb565b1561210b5760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161079c565b6000602082840312156126f757600080fd5b81356001600160e01b03198116811461212757600080fd5b80356001600160a01b038116811461272657600080fd5b919050565b60006020828403121561273d57600080fd5b6121278261270f565b60006020828403121561275857600080fd5b5035919050565b6000806040838503121561277257600080fd5b823591506127826020840161270f565b90509250929050565b6000806040838503121561279e57600080fd5b6127a78361270f565b91506127826020840161270f565b600080604083850312156127c857600080fd5b6127d18361270f565b946020939093013593505050565b6000806000606084860312156127f457600080fd5b6127fd8461270f565b925061280b6020850161270f565b9150604084013590509250925092565b602080825260139082015272556e6f52653a207a65726f206164647265737360681b604082015260600190565b60006020828403121561285a57600080fd5b5051919050565b6020808252601f908201527f556e6f52653a207072656d69756d2062616c616e6365206f766572666c6f7700604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761079c5761079c612898565b6000826128e257634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561079c5761079c612898565b8181038181111561079c5761079c612898565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b60005b83811015612978578181015183820152602001612960565b50506000910152565b6000825161299381846020870161295d565b9190910192915050565b6000602082840312156129af57600080fd5b8151801515811461212757600080fd5b60208152600082518060208401526129de81604085016020870161295d565b601f01601f1916919091016040019291505056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220017824160f920ae4b25966aed1f46efca1be6d284bbe8fe62f2975b7c2ac0b1b64736f6c6343000817003371840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb1a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x60806040526004361061023f5760003560e01c80638ab234b61161012e578063c970e99f116100ab578063e1df99d51161006f578063e1df99d5146106b4578063e7cd4a04146106e1578063ed7c5f0a14610701578063f36c8f5c14610717578063f88822c41461074b57600080fd5b8063c970e99f1461061a578063d20535941461062f578063d547741f1461064f578063d84e305a1461066f578063d9203b911461068f57600080fd5b80639e382612116100f25780639e3826121461059b578063a217fddf146105c8578063aa09d5b7146105dd578063bc181416146105f2578063c5d3a107146105fa57600080fd5b80638ab234b6146104ee5780638c8ac76d1461050e5780638d9eb5271461052e57806391d148541461055b57806397274e6e1461057b57600080fd5b806336568abe116101bc5780635c975abb116101805780635c975abb1461046a578063677554151461048257806375837a7f1461049757806375b238fc146104b75780637a39b8d8146104d957600080fd5b806336568abe146103c457806337013d8a146103e4578063372c12b1146103fa57806354ea1d7d1461042a5780635bb48a001461044a57600080fd5b80631f3a0e41116102035780631f3a0e41146103235780632042e5c21461033d578063248a9ca31461035d5780632f2ff15d1461038e57806330fed930146103ae57600080fd5b806301ffc9a71461024b578063033ab8f014610280578063068cc514146102a457806311eac855146102bb5780631af42c0f146102f357600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5061026b6102663660046126e5565b61076b565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b50610296600e5481565b604051908152602001610277565b3480156102b057600080fd5b506102b96107a2565b005b3480156102c757600080fd5b506004546102db906001600160a01b031681565b6040516001600160a01b039091168152602001610277565b3480156102ff57600080fd5b5061026b61030e36600461272b565b60056020526000908152604090205460ff1681565b34801561032f57600080fd5b5060085461026b9060ff1681565b34801561034957600080fd5b506102b961035836600461272b565b6107c5565b34801561036957600080fd5b50610296610378366004612746565b6000908152600160208190526040909120015490565b34801561039a57600080fd5b506102b96103a936600461275f565b6108d4565b3480156103ba57600080fd5b50610296600d5481565b3480156103d057600080fd5b506102b96103df36600461275f565b610908565b3480156103f057600080fd5b50610296600c5481565b34801561040657600080fd5b5061026b61041536600461272b565b60076020526000908152604090205460ff1681565b34801561043657600080fd5b506102b961044536600461278b565b610940565b34801561045657600080fd5b506102db610465366004612746565b610a2c565b34801561047657600080fd5b5060025460ff1661026b565b34801561048e57600080fd5b506102b9610a56565b3480156104a357600080fd5b506003546102db906001600160a01b031681565b3480156104c357600080fd5b506102966000805160206129f383398151915281565b3480156104e557600080fd5b506102b9610ab2565b3480156104fa57600080fd5b506102b961050936600461272b565b610b0c565b34801561051a57600080fd5b506102b96105293660046127b5565b610c35565b34801561053a57600080fd5b5061029661054936600461272b565b600b6020526000908152604090205481565b34801561056757600080fd5b5061026b61057636600461275f565b610eeb565b34801561058757600080fd5b506102b961059636600461278b565b610f16565b3480156105a757600080fd5b506102966105b636600461272b565b600a6020526000908152604090205481565b3480156105d457600080fd5b50610296600081565b3480156105e957600080fd5b506102b9611001565b6102b9611021565b34801561060657600080fd5b506102b961061536600461272b565b61115d565b34801561062657600080fd5b506102b9611340565b34801561063b57600080fd5b506102b961064a3660046127df565b611660565b34801561065b57600080fd5b506102b961066a36600461275f565b6118b0565b34801561067b57600080fd5b506102b961068a3660046127df565b6118d6565b34801561069b57600080fd5b506002546102db9061010090046001600160a01b031681565b3480156106c057600080fd5b506102966106cf36600461272b565b60096020526000908152604090205481565b3480156106ed57600080fd5b506102b96106fc36600461272b565b611b41565b34801561070d57600080fd5b506102db61dead81565b34801561072357600080fd5b506102967f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb181565b34801561075757600080fd5b506102b961076636600461272b565b611c36565b60006001600160e01b03198216637965db0b60e01b148061079c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206129f38339815191526107ba8161201a565b6107c2612024565b50565b6000805160206129f38339815191526107dd8161201a565b6001600160a01b03821661080c5760405162461bcd60e51b81526004016108039061281b565b60405180910390fd5b6001600160a01b03821660009081526007602052604090205460ff166108895760405162461bcd60e51b815260206004820152602c60248201527f556e6f52653a207768697465206c6973742072656d6f766564206f7220756e6160448201526b6464656420616c726561647960a01b6064820152608401610803565b6001600160a01b038216600081815260076020526040808220805460ff191690555130917f2f467772ef0a5478314f3bc2b37d4b2ad29b65f052b2cedc8e2972dda033529291a35050565b6108dc612076565b600082815260016020819052604090912001546108f88161201a565b610902838361209a565b50505050565b6001600160a01b03811633146109315760405163334bd91960e11b815260040160405180910390fd5b61093b8282612113565b505050565b6000805160206129f38339815191526109588161201a565b61096061212e565b600f54604051636eb1769f60e11b81523060048201526001600160a01b03848116602483015285169063dd62ed3e90604401602060405180830381865afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d39190612848565b1015610a22576109e68383600f54612158565b6040516001600160a01b03808416919085169030907f43121c61393a372aa50e4d3b0ec4003cce2d54e92ae7799836389597d5ead98d90600090a45b61093b6001600055565b60068181548110610a3c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805160206129f3833981519152610a6e8161201a565b6008805460ff191690556040516000815233907f77337fcf1b48e6e024b256962b66c49de98c9f606b2cd9937cc0edbc7a0fb709906020015b60405180910390a250565b6000805160206129f3833981519152610aca8161201a565b6008805460ff1916600190811790915560405190815233907f7c952f2e528aa25b4eaf8b6c07af29184b27ce591295e543ced0a27b167dc79490602001610aa7565b6000805160206129f3833981519152610b248161201a565b6001600160a01b03821660009081526005602052604090205460ff1615610b815760405162461bcd60e51b8152602060048201526011602482015270416c726561647920617661696c61626c6560781b6044820152606401610803565b6001600160a01b038083166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055600254610bfb918491610100900416610940565b6040516001600160a01b0383169030907fc2def0bb3cfcff0462d9a69faa99e2ddeb1bf6b642d12a1fe3ed6653944fecd590600090a35050565b610c3d612076565b610c4561212e565b6001600160a01b038216600090815260056020526040902054829060ff16610caf5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f7420616c6c6f7765642063757272656e637900000000006044820152606401610803565b3360009081526007602052604090205460ff16610d0e5760405162461bcd60e51b815260206004820152601d60248201527f556e6f52653a206e6f74207768697465206c69737420616464726573730000006044820152606401610803565b6040516370a0823160e01b815233600482015282906001600160a01b038516906370a0823190602401602060405180830381865afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190612848565b1015610d965760405162461bcd60e51b815260040161080390612861565b610da283333085612280565b6000612710610db3846103e86128ae565b610dbd91906128c5565b90506000612710610dd085611b586128ae565b610dda91906128c5565b6001600160a01b038616600090815260096020526040902054909150610e019083906128e7565b6001600160a01b038616600090815260096020908152604080832093909355600a90522054610e319082906128e7565b6001600160a01b0386166000908152600a602052604090205580610e5583866128fa565b610e5f91906128fa565b6001600160a01b0386166000908152600b6020526040902054610e8291906128e7565b6001600160a01b0386166000818152600b602090815260409182902093909355805191825291810186905233917f411101aad886ab4351e7c392d06f013b37a7c6c00b7f964bca364da03df0e7d5910160405180910390a2505050610ee76001600055565b5050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206129f3833981519152610f2e8161201a565b610f3661212e565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa9190612848565b1115610a2257610fbc83836000612158565b6040516001600160a01b03808416919085169030907fefc983aa790fe837a31d17855afa75e3d276afef0959edcd4edd1a5e09905ee590600090a461093b6001600055565b6000805160206129f38339815191526110198161201a565b6107c26123ba565b611029612076565b61103161212e565b3360009081526007602052604090205460ff166110905760405162461bcd60e51b815260206004820152601d60248201527f556e6f52653a206e6f74207768697465206c69737420616464726573730000006044820152606401610803565b3460006127106110a2836103e86128ae565b6110ac91906128c5565b905060006127106110bf84611b586128ae565b6110c991906128c5565b905081600c546110d991906128e7565b600c55600d546110ea9082906128e7565b600d55806110f883856128fa565b61110291906128fa565b600e5461110f91906128e7565b600e5560408051600081526020810185905233917f411101aad886ab4351e7c392d06f013b37a7c6c00b7f964bca364da03df0e7d5910160405180910390a250505061115b6001600055565b565b6000805160206129f38339815191526111758161201a565b6001600160a01b03821660009081526005602052604090205460ff166111d15760405162461bcd60e51b8152602060048201526011602482015270139bdd08185d985a5b18589b19481e595d607a1b6044820152606401610803565b6001600160a01b0382166000908152600560205260408120805460ff191690556006805491906112026001846128fa565b815481106112125761121261290d565b60009182526020822001546001600160a01b031691505b8281101561133957600681815481106112445761124461290d565b6000918252602090912001546001600160a01b03908116908616036113315781600682815481106112775761127761290d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060068054806112b6576112b6612923565b600082815260209020810160001990810180546001600160a01b03191690550190556002546112f490869061010090046001600160a01b0316610f16565b6040516001600160a01b0386169030907f39198a02f988846be034bb915c4f3e43a226a15d6f29cf21918e838b1a5f878490600090a35050505050565b600101611229565b5050505050565b6000805160206129f38339815191526113588161201a565b60085460ff16156113a35760405162461bcd60e51b8152602060048201526015602482015274155b9bd4994e881c1bdbdb081a5cc81ada5b1b1959605a1b6044820152606401610803565b6113ab612076565b600e546000901561146a57600254600e546113d49161010090046001600160a01b0316906123f7565b600254600354600e546040516393badc4160e01b81526101009093046001600160a01b03908116936393badc41936114159360009390911691600401612939565b6020604051808303816000875af1158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190612848565b61146290826128e7565b6000600e5590505b60005b600654811015611605576000600b6000600684815481106114905761149061290d565b60009182526020808320909101546001600160a01b0316835282019290925260400190205411156115fd576002546006805460009261010090046001600160a01b0316916393badc4191859081106114ea576114ea61290d565b6000918252602082200154600354600680546001600160a01b03938416949290931692600b929190899081106115225761152261290d565b60009182526020808320909101546001600160a01b0316835282019290925260409081019091205490516001600160e01b031960e086901b16815261156c93929190600401612939565b6020604051808303816000875af115801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115af9190612848565b90506115bb81846128e7565b92506000600b6000600685815481106115d6576115d661290d565b60009182526020808320909101546001600160a01b03168352820192909252604001902055505b60010161146d565b50801561162557600354611625906001600160a01b031661dead836124d1565b604051818152309033907f94032d93ea01eeeccc1b1f03a7eddaf352c7cd85e246c6fc01afed0ddf6b5c1d9060200160405180910390a35050565b6000805160206129f38339815191526116788161201a565b611680612076565b61168861212e565b6001600160a01b0383166116ae5760405162461bcd60e51b81526004016108039061281b565b6116ed836040518060400160405280601a81526020017f556e6f52653a206e6f20636f6e747261637420616464726573730000000000008152506125fb565b6001600160a01b03841615801561170657506000600d54115b156117a257600d5482111561172d5760405162461bcd60e51b815260040161080390612861565b61173783836123f7565b81600d600082825461174991906128fa565b92505081905550836001600160a01b0316836001600160a01b03167f370cbb08cddf346c35e924a503aa223dcc1b75a993d7c23a602d2e4bc0802c108460405161179591815260200190565b60405180910390a36118a6565b6001600160a01b03841660009081526005602052604090205460ff1680156117e157506001600160a01b0384166000908152600a602052604090205415155b156118a6576001600160a01b0384166000908152600a602052604090205482111561181e5760405162461bcd60e51b815260040161080390612861565b6118298484846124d1565b6001600160a01b0384166000908152600a6020526040812080548492906118519084906128fa565b92505081905550836001600160a01b0316836001600160a01b03167f370cbb08cddf346c35e924a503aa223dcc1b75a993d7c23a602d2e4bc0802c108460405161189d91815260200190565b60405180910390a35b6109026001600055565b600082815260016020819052604090912001546118cc8161201a565b6109028383612113565b7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb16119008161201a565b60085460ff161561194b5760405162461bcd60e51b8152602060048201526015602482015274155b9bd4994e881c1bdbdb081a5cc81ada5b1b1959605a1b6044820152606401610803565b611953612076565b6001600160a01b0383166119795760405162461bcd60e51b81526004016108039061281b565b600082116119be5760405162461bcd60e51b8152602060048201526012602482015271155b9bd4994e881e995c9bc8185b5bdd5b9d60721b6044820152606401610803565b6001600160a01b038416611a2b5781471015611a1c5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a20496e73756666696369656e74205072656d69756d00000000006044820152606401610803565b611a2683836123f7565b611aee565b6040516370a0823160e01b815230600482015282906001600160a01b038616906370a0823190602401602060405180830381865afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a959190612848565b1015611ae35760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a20496e73756666696369656e74205072656d69756d00000000006044820152606401610803565b611aee8484846124d1565b826001600160a01b0316846001600160a01b03167f8d18a25569e967883ac0402e6991b4ac87616370a1c2ce59726abce4ef45bdb884604051611b3391815260200190565b60405180910390a350505050565b6000805160206129f3833981519152611b598161201a565b6001600160a01b038216611b7f5760405162461bcd60e51b81526004016108039061281b565b6001600160a01b03821660009081526007602052604090205460ff1615611be85760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a207768697465206c69737420616c7265616479000000000000006044820152606401610803565b6001600160a01b038216600081815260076020526040808220805460ff191660011790555130917f8cd7b0b1a7316eb3e5d781d629cb8bf4e2fd9a8903bdd0f6b894c087d61b21f291a35050565b6000805160206129f3833981519152611c4e8161201a565b611c56612076565b611c5e61212e565b6001600160a01b038216611c845760405162461bcd60e51b81526004016108039061281b565b611cc3826040518060400160405280601a81526020017f556e6f52653a206e6f20636f6e747261637420616464726573730000000000008152506125fb565b600c5460009015611d8757600254600c54611cec9161010090046001600160a01b0316906123f7565b60025460048054600c546040516393badc4160e01b81526000946001600160a01b036101009091048116946393badc4194611d2f94889491909316929101612939565b6020604051808303816000875af1158015611d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d729190612848565b9050611d7e81836128e7565b6000600c559150505b60005b600654811015611fad5760006009600060068481548110611dad57611dad61290d565b60009182526020808320909101546001600160a01b031683528201929092526040019020541115611fa557600454600680546001600160a01b039092169183908110611dfb57611dfb61290d565b6000918252602090912001546001600160a01b031603611e62576009600060068381548110611e2c57611e2c61290d565b60009182526020808320909101546001600160a01b03168352820192909252604001902054611e5b90836128e7565b9150611f66565b6002546006805460009261010090046001600160a01b0316916393badc419185908110611e9157611e9161290d565b6000918252602082200154600454600680546001600160a01b03938416949290931692600992919089908110611ec957611ec961290d565b60009182526020808320909101546001600160a01b0316835282019290925260409081019091205490516001600160e01b031960e086901b168152611f1393929190600401612939565b6020604051808303816000875af1158015611f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f569190612848565b9050611f6281846128e7565b9250505b60006009600060068481548110611f7f57611f7f61290d565b60009182526020808320909101546001600160a01b031683528201929092526040019020555b600101611d8a565b50801561200f57600454611fcb906001600160a01b031684836124d1565b826001600160a01b03167f9a380c5d696c8e394928ff8981a11ee388a14e2f7e16d373d73486cf3c4862548260405161200691815260200190565b60405180910390a25b50610ee76001600055565b6107c2813361261c565b61202c612655565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60025460ff161561115b5760405163d93c066560e01b815260040160405180910390fd5b60006120a68383610eeb565b61210b5760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a450600161079c565b50600061079c565b600061211d612076565b6121278383612678565b9392505050565b60026000540361215157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916121b49190612981565b6000604051808303816000865af19150503d80600081146121f1576040519150601f19603f3d011682016040523d82523d6000602084013e6121f6565b606091505b5091509150818015612220575080511580612220575080806020019051810190612220919061299d565b6113395760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b6064820152608401610803565b600080856001600160a01b03166323b872dd8686866040516024016122a793929190612939565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516122e09190612981565b6000604051808303816000865af19150503d806000811461231d576040519150601f19603f3d011682016040523d82523d6000602084013e612322565b606091505b509150915081801561234c57508051158061234c57508080602001905181019061234c919061299d565b6123b25760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610803565b505050505050565b6123c2612076565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120593390565b604080516000808252602082019092526001600160a01b0384169083906040516124219190612981565b60006040518083038185875af1925050503d806000811461245e576040519150601f19603f3d011682016040523d82523d6000602084013e612463565b606091505b505090508061093b5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610803565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161252d9190612981565b6000604051808303816000865af19150503d806000811461256a576040519150601f19603f3d011682016040523d82523d6000602084013e61256f565b606091505b5091509150818015612599575080511580612599575080806020019051810190612599919061299d565b6113395760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610803565b813b81816109025760405162461bcd60e51b815260040161080391906129bf565b6126268282610eeb565b610ee75760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610803565b60025460ff1661115b57604051638dfc202b60e01b815260040160405180910390fd5b60006126848383610eeb565b1561210b5760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161079c565b6000602082840312156126f757600080fd5b81356001600160e01b03198116811461212757600080fd5b80356001600160a01b038116811461272657600080fd5b919050565b60006020828403121561273d57600080fd5b6121278261270f565b60006020828403121561275857600080fd5b5035919050565b6000806040838503121561277257600080fd5b823591506127826020840161270f565b90509250929050565b6000806040838503121561279e57600080fd5b6127a78361270f565b91506127826020840161270f565b600080604083850312156127c857600080fd5b6127d18361270f565b946020939093013593505050565b6000806000606084860312156127f457600080fd5b6127fd8461270f565b925061280b6020850161270f565b9150604084013590509250925092565b602080825260139082015272556e6f52653a207a65726f206164647265737360681b604082015260600190565b60006020828403121561285a57600080fd5b5051919050565b6020808252601f908201527f556e6f52653a207072656d69756d2062616c616e6365206f766572666c6f7700604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761079c5761079c612898565b6000826128e257634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561079c5761079c612898565b8181038181111561079c5761079c612898565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b60005b83811015612978578181015183820152602001612960565b50506000910152565b6000825161299381846020870161295d565b9190910192915050565b6000602082840312156129af57600080fd5b8151801515811461212757600080fd5b60208152600082518060208401526129de81604085016020870161295d565b601f01601f1916919091016040019291505056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220017824160f920ae4b25966aed1f46efca1be6d284bbe8fe62f2975b7c2ac0b1b64736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addCurrency(address)": {
        "details": "add `_currency` to available, can only be call by admin role",
        "params": {
          "_currency": "address of the currency to add"
        }
      },
      "addWhiteList(address)": {
        "details": "white list address to collect premium, can only be call by admin role",
        "params": {
          "_whiteListAddress": "address to white list"
        }
      },
      "collectPremium(address,uint256)": {
        "details": "collect premium of `_premiumCurrency` from caller into premiumPool address, when user buy policy from sales policy it call this function to collect premium from user only whitelisted address can call this function"
      },
      "collectPremiumInETH()": {
        "details": "collect eth premium from caller into premiumPool address, when user buy policy from sales policy it call this function to collect premium from user only whitelisted address can call this function"
      },
      "destroyCurrencyAllowance(address,address)": {
        "details": "remove `_currency` allowanve from premiumPool to `_to` address, can only be call by admin role",
        "params": {
          "_currency": "address of the currency to remove"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "maxApproveCurrency(address,address)": {
        "details": "approve `_currency` to `_to` address from premiumPool, can only be call by admin role",
        "params": {
          "_currency": "address of the currency to remove"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeCurrency(address)": {
        "details": "remove `_currency` from available, can only be call by admin role",
        "params": {
          "_currency": "address of the currency to remove"
        }
      },
      "removeWhiteList(address)": {
        "details": "remove address from white list, can only be call by admin role",
        "params": {
          "_whiteListAddress": "address to remove from white list"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawPremium(address,address,uint256)": {
        "details": "withdraw premium of `_currency` from premiumPool to `_to` address only governance can call this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3770,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1034,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1029_storage)"
      },
      {
        "astId": 3651,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 8663,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "exchangeAgent",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8665,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "unoToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8667,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "usdcToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8671,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8674,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "availableCurrencyList",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8678,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "whiteList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8680,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "killed",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 8687,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "ssrpPremium",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8691,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "ssipPremium",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8695,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "backBurnUnoPremium",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8697,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "ssrpPremiumEth",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8699,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "ssipPremiumEth",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 8701,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "backBurnPremiumEth",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8708,
        "contract": "contracts/PremiumPool.sol:PremiumPool",
        "label": "maxInteger",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1029_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1029_storage"
      },
      "t_struct(RoleData)1029_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1026,
            "contract": "contracts/PremiumPool.sol:PremiumPool",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1028,
            "contract": "contracts/PremiumPool.sol:PremiumPool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}