{
  "address": "0x7641A3b7A3Ae26a162e53f69dAb99a656B46362d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_protocolId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "LogSetBlackListProtocol",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "LogSetPremiumPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "LogUpdateCheckIfProtocolInWhitelistArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "ProtocolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDC_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolAddress",
          "type": "address"
        }
      ],
      "name": "addProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allProtocolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        }
      ],
      "name": "approvePremiumInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkIfProtocolInWhitelistArray",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "getProtocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBlackList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolIdx",
          "type": "uint16"
        }
      ],
      "name": "getProtocolData",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBlackList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getProtocolId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "name": "newSalesPolicy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salesPolicy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "setBlackListProtocolByAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolId",
          "type": "uint16"
        }
      ],
      "name": "setBlackListProtocolById",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDeadline",
          "type": "uint256"
        }
      ],
      "name": "setBuyPolicyMaxDeadlineInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        }
      ],
      "name": "setCapitalAgentInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgentInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "setPremiumPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumPool",
          "type": "address"
        }
      ],
      "name": "setPremiumPoolInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setProtocolURIInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSignerInPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateCheckIfProtocolInWhitelistArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d25b9043cfb8f057fd3ff7768eb8b268b41c49cdfcebe5e5bf4fde42c190fa4",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0x7641A3b7A3Ae26a162e53f69dAb99a656B46362d",
    "transactionIndex": 10,
    "gasUsed": "4631991",
    "logsBloom": "0x
    "blockHash": "0xba6d4f0ee27edb3e9ae67fbc204ffc8a91d64d346f9cefb1bada08232ac4e56d",
    "transactionHash": "0x1d25b9043cfb8f057fd3ff7768eb8b268b41c49cdfcebe5e5bf4fde42c190fa4",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 10211057,
        "transactionHash": "0x1d25b9043cfb8f057fd3ff7768eb8b268b41c49cdfcebe5e5bf4fde42c190fa4",
        "address": "0x7641A3b7A3Ae26a162e53f69dAb99a656B46362d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000edffe0a06914c9d6083b4b099e5b935e9e84c9a5"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xba6d4f0ee27edb3e9ae67fbc204ffc8a91d64d346f9cefb1bada08232ac4e56d"
      }
    ],
    "blockNumber": 10211057,
    "cumulativeGasUsed": "5115239",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb1Ce55d27FaF8D4499b840A3EDf509E4df43f9E1",
    "0x045Fb0d025c982D633191017381ea772eCfAea81",
    "0xf18bBfF301c8602DeA7EC739fECDDE9690fF9f3B",
    "0xa50F3fD32d7Ead49a5C34091744bE516b67417cA",
    "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5"
  ],
  "numDeployments": 1,
  "solcInputHash": "043e6f9291d730ca425769ce9470ab90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_protocolId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"LogSetBlackListProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"LogSetPremiumPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"LogUpdateCheckIfProtocolInWhitelistArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"ProtocolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolAddress\",\"type\":\"address\"}],\"name\":\"addProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allProtocolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"}],\"name\":\"approvePremiumInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfProtocolInWhitelistArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"getProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlackList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"}],\"name\":\"getProtocolData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlackList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getProtocolId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"name\":\"newSalesPolicy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesPolicy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setBlackListProtocolByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolId\",\"type\":\"uint16\"}],\"name\":\"setBlackListProtocolById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeadline\",\"type\":\"uint256\"}],\"name\":\"setBuyPolicyMaxDeadlineInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"}],\"name\":\"setCapitalAgentInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgentInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"setPremiumPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumPool\",\"type\":\"address\"}],\"name\":\"setPremiumPoolInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setProtocolURIInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSignerInPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateCheckIfProtocolInWhitelistArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mocks/MockSalesPolicyFactory.sol\":\"MockSalesPolicyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/EIP712MetaTransaction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\nimport \\\"./libraries/EIP712Base.sol\\\";\\n\\ncontract EIP712MetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\n        keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n    mapping(address => uint256) private nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    constructor(string memory name, string memory version) EIP712Base(name, version) {}\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 32))\\n        }\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\\n        require(destinationFunctionSig != msg.sig, \\\"functionSignature can not be of executeMetaTransaction method\\\");\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n        // Append userAddress at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n\\n        require(success, \\\"Function call not successful\\\");\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature)));\\n    }\\n\\n    function getNonce(address user) external view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address user,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        address signer = ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n        require(signer != address(0), \\\"Invalid signature\\\");\\n        return signer == user;\\n    }\\n\\n    function msgSender() internal view returns (address sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\",\"keccak256\":\"0x1a60db6edb20a0f1563901f21a55f56c2341f1f9d94aa1319e75c26cae9cbb34\",\"license\":\"MIT\"},\"contracts/Mocks/MockSalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../libraries/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ICapitalAgent.sol\\\";\\nimport \\\"../interfaces/ISingleSidedReinsurancePool.sol\\\";\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\nimport \\\"../interfaces/IPremiumPool.sol\\\";\\nimport \\\"../interfaces/ISalesPolicyFactory.sol\\\";\\nimport \\\"../interfaces/ISalesPolicy.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\nimport \\\"../EIP712MetaTransaction.sol\\\";\\n\\ncontract MockSalesPolicy is EIP712MetaTransaction(\\\"BuyPolicyMetaTransaction\\\", \\\"1\\\"), ERC721, ISalesPolicy, ReentrancyGuard, Pausable {\\n    using Counters for Counters.Counter;\\n\\n    address public immutable factory;\\n    struct Policy {\\n        uint256 coverStartAt;\\n        uint256 coverageDuration;\\n        uint256 coverageAmount;\\n        address protocolAddress;\\n        address premiumCurrency;\\n        bool exist;\\n        bool expired;\\n    }\\n\\n    uint256 public maxDeadline;\\n    address private exchangeAgent;\\n    address public premiumPool;\\n    address public capitalAgent;\\n    address public signer;\\n    address public immutable USDC_TOKEN; //\\n\\n    string private protocolURI;\\n\\n    Counters.Counter private policyIdx;\\n\\n    mapping(uint256 => Policy) public getPolicy;\\n\\n    uint256 private MAX_INTEGER = type(uint256).max;\\n\\n    event BuyPolicy(\\n        address indexed _owner,\\n        address indexed _asset,\\n        address _premiumCurrency,\\n        address _protocol,\\n        uint256 indexed _policyIdx,\\n        uint256 _coverageAmount,\\n        uint256 _coverageDuration,\\n        uint256 _premiumPaid\\n    );\\n    event LogSetExchangeAgentInPolicy(address indexed _exchangeAgent, address indexed _policyAddress);\\n    event LogSetPremiumPoolInPolicy(address indexed _premiumPool, address indexed _policyAddress);\\n    event LogSetProtocolURIInPolicy(address indexed _policyAddress, string _uri);\\n    event LogSetSignerInPolicy(address indexed _signer, address indexed _policyAddress);\\n    event LogSetBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline, address indexed _policyAddress);\\n    event LogSetCapitalAgentInPolicy(address indexed _capitalAgent, address indexed _policyAddress);\\n    event LogapprovePremiumIInPolicy(address indexed _policyAddress, address indexed _premiumCurrency, address premiumPool);\\n    event LogMarkToClaim(uint256 indexed _policyId, uint256 _coverageAmount);\\n    event LogUpdatePolicyExpired(uint256 indexed _policyId, uint256 _coverageAmount);\\n\\n    constructor(\\n        address _factory,\\n        address _exchangeAgent,\\n        address _premiumPool,\\n        address _capitalAgent,\\n        address _usdcToken\\n    ) ERC721(\\\"Policy insurance\\\", \\\"Policy insurance\\\") {\\n        require(_factory != address(0), \\\"UnoRe: zero factory address\\\");\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero exchangeAgent address\\\");\\n        require(_premiumPool != address(0), \\\"UnoRe: zero premiumPool address\\\");\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero capitalAgent address\\\");\\n        require(_usdcToken != address(0), \\\"UnoRe: zero USDC address\\\");\\n        factory = _factory;\\n        exchangeAgent = _exchangeAgent;\\n        capitalAgent = _capitalAgent;\\n        USDC_TOKEN = _usdcToken;\\n        premiumPool = _premiumPool;\\n        maxDeadline = 7 days;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msgSender() == factory, \\\"UnoRe: SalesPolicy Forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyCapitalAgent() {\\n        require(msgSender() == capitalAgent, \\\"UnoRe: SalesPolicy Forbidden\\\");\\n        _;\\n    }\\n\\n    function killPool() external onlyFactory {\\n        _pause();\\n    }\\n\\n    function revivePool() external onlyFactory {\\n        _unpause();\\n    }\\n\\n    receive() external payable {}\\n\\n    function buyPol(uint256 _lastIndx, address _premiumCurrency, uint256 _coverageAmount) external {\\n        getPolicy[_lastIndx] = Policy({\\n                protocolAddress: address(0),\\n                coverageAmount: _coverageAmount,\\n                coverageDuration: 100000,\\n                coverStartAt: block.timestamp,\\n                premiumCurrency: _premiumCurrency,\\n                exist: true,\\n                expired: false\\n            });\\n\\n        _mint(msgSender(), _lastIndx);\\n        ICapitalAgent(capitalAgent).policySale(getPolicy[_lastIndx].coverageAmount);\\n    }\\n\\n    function buyPolicy(\\n        address[] memory _assets,\\n        address[] memory _protocols,\\n        uint256[] memory _coverageAmount,\\n        uint256[] memory _coverageDuration,\\n        uint256 _policyPriceInUSDC,\\n        uint256 _signedTime,\\n        address _premiumCurrency,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external payable whenNotPaused nonReentrant {\\n        uint256 len = _protocols.length;\\n        require(len > 0, \\\"UnoRe: no policy\\\");\\n        require(len == _coverageAmount.length, \\\"UnoRe: no match protocolIds with coverageAmount\\\");\\n        require(len == _coverageDuration.length, \\\"UnoRe: no match protocolIds with coverageDuration\\\");\\n        address _signer = getSender(\\n            _policyPriceInUSDC,\\n            _protocols,\\n            _coverageDuration,\\n            _coverageAmount,\\n            _signedTime,\\n            _premiumCurrency,\\n            r,\\n            s,\\n            v\\n        );\\n        require(_signer != address(0) && _signer == signer, \\\"UnoRe: invalid signer\\\");\\n        require(_signedTime <= block.timestamp && block.timestamp - _signedTime < maxDeadline, \\\"UnoRe: signature expired\\\");\\n\\n        uint256 premiumPaid;\\n        if (_premiumCurrency == address(0)) {\\n            premiumPaid = IExchangeAgent(exchangeAgent).getETHAmountForUSDC(_policyPriceInUSDC);\\n            require(msg.value >= premiumPaid, \\\"UnoRe: insufficient paid\\\");\\n            if (msg.value > premiumPaid) {\\n                TransferHelper.safeTransferETH(msgSender(), msg.value - premiumPaid);\\n            }\\n            IPremiumPool(premiumPool).collectPremiumInETH{value: premiumPaid}();\\n        } else {\\n            premiumPaid = _premiumCurrency != USDC_TOKEN\\n                ? IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_premiumCurrency, _policyPriceInUSDC)\\n                : _policyPriceInUSDC;\\n            TransferHelper.safeTransferFrom(_premiumCurrency, msgSender(), address(this), premiumPaid);\\n            IPremiumPool(premiumPool).collectPremium(_premiumCurrency, premiumPaid);\\n        }\\n\\n        _buyPolicy(_assets, _protocols, _coverageAmount, _coverageDuration, premiumPaid, _premiumCurrency);\\n    }\\n\\n    function _buyPolicy(\\n        address[] memory _assets,\\n        address[] memory _protocols,\\n        uint256[] memory _coverageAmount,\\n        uint256[] memory _coverageDuration,\\n        uint256 _premiumPaid,\\n        address _premiumCurrency\\n    ) private {\\n        uint256 _totalCoverage;\\n        uint256 lastIdx;\\n        uint256 coverAmount;\\n        uint256 coverDuration;\\n        address _protocol;\\n        address _assetLocked;\\n\\n        bool checkIfProtocolInWhitelistArray = ISalesPolicyFactory(factory).checkIfProtocolInWhitelistArray();\\n\\n        for (uint256 ii = 0; ii < _protocols.length; ii++) {\\n            lastIdx = policyIdx.current;\\n            coverAmount = _coverageAmount[ii];\\n            coverDuration = _coverageDuration[ii];\\n            _protocol = _protocols[ii];\\n            _assetLocked = _assets[ii];\\n            uint256 premiumPaid = _premiumPaid;\\n            bool isAvailableSale = false;\\n            if (checkIfProtocolInWhitelistArray) {\\n                uint16 _protocolId = ISalesPolicyFactory(factory).getProtocolId(_protocol);\\n                if (_protocolId > 0) {\\n                    (, bool isBlackList) = ISalesPolicyFactory(factory).getProtocolData(_protocolId);\\n                    if (!isBlackList) {\\n                        isAvailableSale = true;\\n                    }\\n                }\\n            } else {\\n                isAvailableSale = true;\\n            }\\n            require(isAvailableSale, \\\"UnoRe: unavailable policy\\\");\\n            getPolicy[lastIdx] = Policy({\\n                protocolAddress: _protocol,\\n                coverageAmount: coverAmount,\\n                coverageDuration: coverDuration,\\n                coverStartAt: block.timestamp,\\n                premiumCurrency: _premiumCurrency,\\n                exist: true,\\n                expired: false\\n            });\\n\\n            _mint(msgSender(), lastIdx);\\n\\n            _totalCoverage += coverAmount;\\n\\n            emit BuyPolicy(\\n                msgSender(),\\n                _assetLocked,\\n                _premiumCurrency,\\n                _protocol,\\n                lastIdx,\\n                coverAmount,\\n                coverDuration,\\n                premiumPaid\\n            );\\n            policyIdx.next();\\n        }\\n        if (_totalCoverage > 0) {\\n            ICapitalAgent(capitalAgent).policySale(_totalCoverage);\\n        }\\n    }\\n\\n    function approvePremium(address _premiumCurrency) external override onlyFactory {\\n        require(_premiumCurrency != address(0), \\\"UnoRe: zero address\\\");\\n        require(premiumPool != address(0), \\\"UnoRe: not defiend premiumPool\\\");\\n        TransferHelper.safeApprove(_premiumCurrency, premiumPool, MAX_INTEGER);\\n        emit LogapprovePremiumIInPolicy(address(this), _premiumCurrency, premiumPool);\\n    }\\n\\n    function setProtocolURI(string memory newURI) external override onlyFactory {\\n        protocolURI = newURI;\\n        emit LogSetProtocolURIInPolicy(address(this), newURI);\\n    }\\n\\n    function setPremiumPool(address _premiumPool) external override onlyFactory {\\n        require(_premiumPool != address(0), \\\"UnoRe: zero address\\\");\\n        premiumPool = _premiumPool;\\n        emit LogSetPremiumPoolInPolicy(_premiumPool, address(this));\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external override onlyFactory {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit LogSetExchangeAgentInPolicy(_exchangeAgent, address(this));\\n    }\\n\\n    function setSigner(address _signer) external override onlyFactory {\\n        require(_signer != address(0), \\\"UnoRe: zero address\\\");\\n        signer = _signer;\\n        emit LogSetSignerInPolicy(_signer, address(this));\\n    }\\n\\n    function setCapitalAgent(address _capitalAgent) external override onlyFactory {\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero address\\\");\\n        capitalAgent = _capitalAgent;\\n        emit LogSetCapitalAgentInPolicy(_capitalAgent, address(this));\\n    }\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external override onlyFactory {\\n        require(_maxDeadline > 0, \\\"UnoRe: zero max signedTime\\\");\\n        maxDeadline = _maxDeadline;\\n        emit LogSetBuyPolicyMaxDeadlineInPolicy(_maxDeadline, address(this));\\n    }\\n\\n    function markToClaim(uint256 _policyId) external override nonReentrant onlyCapitalAgent {\\n        require(getPolicy[_policyId].exist, \\\"UnoRe: marked to claim already\\\");\\n        require(!getPolicy[_policyId].expired, \\\"UnoRe: policy expired\\\");\\n        getPolicy[_policyId].exist = false;\\n        _burn(_policyId);\\n        emit LogMarkToClaim(_policyId, getPolicy[_policyId].coverageAmount);\\n    }\\n\\n    function updatePolicyExpired(uint256 _policyId) external override nonReentrant onlyCapitalAgent {\\n        require(getPolicy[_policyId].exist, \\\"UnoRe: marked to claim already\\\");\\n        getPolicy[_policyId].expired = true;\\n        _burn(_policyId);\\n        emit LogUpdatePolicyExpired(_policyId, getPolicy[_policyId].coverageAmount);\\n    }\\n\\n    function allPoliciesLength() external view override returns (uint256) {\\n        return policyIdx.current;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return protocolURI;\\n    }\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        )\\n    {\\n        bool exist =  getPolicy[_policyId].exist;\\n        bool expired =  getPolicy[_policyId].expired;\\n        uint256 coverageAmount = getPolicy[_policyId].coverageAmount;\\n        uint256 coverageDuration = getPolicy[_policyId].coverageDuration;\\n        uint256 coverStartAt = uint256(getPolicy[_policyId].coverStartAt);\\n        return (coverageAmount, coverageDuration, coverStartAt, exist, expired);\\n    }\\n\\n    function getSender(\\n        uint256 _policyPrice,\\n        address[] memory _protocols,\\n        uint256[] memory _coverageDuration,\\n        uint256[] memory _coverageAmount,\\n        uint256 _signedTime,\\n        address _premiumCurrency,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) private pure returns (address) {\\n        // bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\\n        bytes32 msgHash = keccak256(\\n            abi.encodePacked(_policyPrice, _protocols, _coverageDuration, _coverageAmount, _signedTime, _premiumCurrency)\\n        );\\n\\n        // bytes32 msgHash = keccak256(abi.encodePacked(productName));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", msgHash));\\n        // (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        return recoveredAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xb631a2de23193c2deee54754fdc703a108e035f90dfef003ffc80ac2a1976ea4\",\"license\":\"GPL-3.0\"},\"contracts/Mocks/MockSalesPolicyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./MockSalesPolicy.sol\\\";\\nimport \\\"../interfaces/ISalesPolicy.sol\\\";\\nimport \\\"../interfaces/ISalesPolicyFactory.sol\\\";\\n\\ncontract MockSalesPolicyFactory is ISalesPolicyFactory, ReentrancyGuard, Ownable {\\n    using Counters for Counters.Counter;\\n    // It should be okay if Protocol is struct\\n    struct Protocol {\\n        address protocolAddress; // Address of that protocol\\n        bool isBlackList; // initial true\\n    }\\n\\n    bool public override checkIfProtocolInWhitelistArray;\\n\\n    address public premiumPool;\\n    address public exchangeAgent;\\n    address public capitalAgent;\\n\\n    address public salesPolicy;\\n\\n    mapping(uint16 => Protocol) public getProtocol;\\n    mapping(address => uint16) public override getProtocolId;\\n    Counters.Counter private protocolIds;\\n\\n    address public USDC_TOKEN;\\n\\n    event ProtocolCreated(uint16 _protocolIdx, address _protocol);\\n    event LogSetPremiumPool(address indexed _premiumPool);\\n    event LogUpdateCheckIfProtocolInWhitelistArray(bool _status);\\n    event LogSetBlackListProtocol(uint16 _protocolId, address indexed _protocol);\\n\\n    constructor(\\n        address _usdcToken,\\n        address _exchangeAgent,\\n        address _premiumPool,\\n        address _capitalAgent,\\n        address _multiSigWallet\\n    ) Ownable(_multiSigWallet) { \\n        require(_usdcToken != address(0), \\\"UnoRe: zero USDC address\\\");\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero exchangeAgent address\\\");\\n        require(_premiumPool != address(0), \\\"UnoRe: zero premiumPool address\\\");\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero capitalAgent address\\\");\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multisigwallet address\\\");\\n        USDC_TOKEN = _usdcToken;\\n        premiumPool = _premiumPool;\\n        exchangeAgent = _exchangeAgent;\\n        capitalAgent = _capitalAgent;\\n        // transferOwnership(_multiSigWallet);\\n    }\\n\\n    // This action can be done only by owner\\n    // protoco id will be started from no.1 instead of no.0.\\n    function addProtocol(address _protocolAddress) external onlyOwner nonReentrant {\\n        protocolIds.next();\\n        uint16 lastIdx = uint16(protocolIds.current);\\n\\n        getProtocol[lastIdx] = Protocol({protocolAddress: _protocolAddress, isBlackList: false});\\n\\n        getProtocolId[_protocolAddress] = lastIdx;\\n\\n        emit ProtocolCreated(lastIdx, _protocolAddress);\\n    }\\n\\n    function newSalesPolicy(\\n        address _exchangeAgent,\\n        address _premiumPool,\\n        address _capitalAgent\\n    ) external onlyOwner nonReentrant returns (address) {\\n        MockSalesPolicy _salesPolicy = new MockSalesPolicy(address(this), _exchangeAgent, _premiumPool, _capitalAgent, USDC_TOKEN);\\n        salesPolicy = address(_salesPolicy);\\n        ICapitalAgent(capitalAgent).setPolicy(address(_salesPolicy));\\n\\n        return address(_salesPolicy);\\n    }\\n\\n    function allProtocolsLength() external view returns (uint256) {\\n        return protocolIds.current;\\n    }\\n\\n    function updateCheckIfProtocolInWhitelistArray(bool _status) external onlyOwner {\\n        checkIfProtocolInWhitelistArray = _status;\\n        emit LogUpdateCheckIfProtocolInWhitelistArray(_status);\\n    }\\n\\n    function setBlackListProtocolById(uint16 _protocolId) external onlyOwner {\\n        getProtocol[_protocolId].isBlackList = true;\\n        emit LogSetBlackListProtocol(_protocolId, getProtocol[_protocolId].protocolAddress);\\n    }\\n\\n    function setBlackListProtocolByAddress(address _protocol) external onlyOwner {\\n        // require(_protocol != address(0), \\\"UnoRe: zero address\\\");\\n        uint16 _protocolId = getProtocolId[_protocol];\\n        getProtocol[_protocolId].isBlackList = true;\\n        emit LogSetBlackListProtocol(_protocolId, _protocol);\\n    }\\n\\n    function setPremiumPool(address _premiumPool) external onlyOwner {\\n        require(_premiumPool != address(0), \\\"UnoRe: zero address\\\");\\n        premiumPool = _premiumPool;\\n        emit LogSetPremiumPool(_premiumPool);\\n    }\\n\\n    function setExchangeAgentInPolicy(address _exchangeAgent) external onlyOwner {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        ISalesPolicy(salesPolicy).setExchangeAgent(_exchangeAgent);\\n    }\\n\\n    function setBuyPolicyMaxDeadlineInPolicy(uint256 _maxDeadline) external onlyOwner {\\n        require(_maxDeadline > 0, \\\"UnoRe: zero max deadline\\\");\\n        ISalesPolicy(salesPolicy).setBuyPolicyMaxDeadline(_maxDeadline);\\n    }\\n\\n    function setPremiumPoolInPolicy(address _premiumPool) external onlyOwner {\\n        require(_premiumPool != address(0), \\\"UnoRe: zero address\\\");\\n        ISalesPolicy(salesPolicy).setPremiumPool(_premiumPool);\\n    }\\n\\n    function setSignerInPolicy(address _signer) external onlyOwner {\\n        require(_signer != address(0), \\\"UnoRe: zero address\\\");\\n        ISalesPolicy(salesPolicy).setSigner(_signer);\\n    }\\n\\n    function setCapitalAgentInPolicy(address _capitalAgent) external onlyOwner {\\n        require(_capitalAgent != address(0), \\\"UnoRe: zero address\\\");\\n        ISalesPolicy(salesPolicy).setCapitalAgent(_capitalAgent);\\n    }\\n\\n    function setProtocolURIInPolicy(string memory _uri) external onlyOwner {\\n        ISalesPolicy(salesPolicy).setProtocolURI(_uri);\\n    }\\n\\n    function approvePremiumInPolicy(address _premiumCurrency) external onlyOwner {\\n        ISalesPolicy(salesPolicy).approvePremium(_premiumCurrency);\\n    }\\n\\n    function getProtocolData(uint16 _protocolIdx) external view override returns (address protocolAddress, bool isBlackList) {\\n        return (getProtocol[_protocolIdx].protocolAddress, getProtocol[_protocolIdx].isBlackList);\\n    }\\n}\\n\",\"keccak256\":\"0x0a9d03a22e62eea9a9238fbef042a541a606c6d9fc8ac1506a931693fbd11e4f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\\n\\n    function setPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isFinished) external;\\n\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\\n\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(uint256 _policyId) external;\\n\\n    function getPolicyInfo() external returns(address, uint256, bool);\\n}\\n\",\"keccak256\":\"0xc9eeaa12b53a52a3e23ff3bb09a308b0e428345e033bb47b417b903f4183eb4f\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface IExchangeAgent {\\n    function USDC_TOKEN() external view returns (address);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) external view returns (uint256);\\n\\n    function convertForToken(address _token0, address _token1, uint256 _token0Amount) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5beeb3daf08b87dbf8f999875f36b093810898a4832e0bc9f716b8a2f89fb237\",\"license\":\"MIT\"},\"contracts/interfaces/IPremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IPremiumPool {\\n    function collectPremium(address _premiumCurrency, uint256 _premiumAmount) external;\\n\\n    function collectPremiumInETH() external payable;\\n\\n    function withdrawPremium(address _currency, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x384950f5ec28f0f5b3ebafc5c68f8bd146c6ceec3a58d8e21287351c329bb0a4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISalesPolicy {\\n    function setPremiumPool(address _premiumPool) external;\\n\\n    function setExchangeAgent(address _exchangeAgent) external;\\n\\n    function setCapitalAgent(address _capitalAgent) external;\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\\n\\n    function approvePremium(address _premiumCurrency) external;\\n\\n    function setProtocolURI(string memory newURI) external;\\n\\n    function setSigner(address _signer) external;\\n\\n    function updatePolicyExpired(uint256 _policyId) external;\\n\\n    function markToClaim(uint256 _policyId) external;\\n\\n    function allPoliciesLength() external view returns (uint256);\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x274c8049205a47f45abbaff500a8ea4e5bc3cd0eed0b2aff5e825b75108e065a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISalesPolicyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISalesPolicyFactory {\\n    function getProtocolId(address _protocolAddress) external view returns (uint16);\\n\\n    function checkIfProtocolInWhitelistArray() external view returns (bool);\\n\\n    function getProtocolData(uint16 _protocolIdx) external view returns (address protocolAddress, bool isBlackList);\\n}\\n\",\"keccak256\":\"0x03a3794164f783a822b1373eebafea2906d2164e60f2bba8f2bc964416fc8d50\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleSidedReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISingleSidedReinsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\\n\\n    function riskPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe0e828844dd3b4430c669b1fd5c55fc419df338a33e2139d120b86542d2018a1\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Counters.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\n/**\\n * @title Counter\\n * @author Matt Condon (@shrugs)\\n * @dev Provides an incrementing uint256 id acquired by the `Counter#next` getter.\\n * Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really.\\n *\\n * Include with `using Counter for Counter.Counter;`\\n * @notice Does not allow an Id of 0, which is popularly used to signify a null state in solidity.\\n * Does not protect from overflows, but if you have 2^256 ids, you have other problems.\\n * (But actually, it's generally impossible to increment a counter this many times, energy wise\\n * so it's not something you have to worry about.)\\n */\\nlibrary Counters {\\n    struct Counter {\\n        uint256 current; // default: 0\\n    }\\n\\n    function next(Counter storage index) internal returns (uint256) {\\n        index.current += 1;\\n        return index.current;\\n    }\\n}\\n\",\"keccak256\":\"0xd19f3acb656f1f9fe7dc9f8cd42f10da844b8293fb5c8c1d21b337f7413b513d\",\"license\":\"MIT\"},\"contracts/libraries/EIP712Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ncontract EIP712Base {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"));\\n\\n    bytes32 internal domainSeparator;\\n\\n    constructor(string memory name, string memory version) {\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                bytes32(getChainID())\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function getDomainSeparator() private view returns (bytes32) {\\n        return domainSeparator;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), messageHash));\\n    }\\n}\\n\",\"keccak256\":\"0x95e2d2d3828688940657ee16c772eb324df90510739b70d15307f86436a22767\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001af5760003560e01c8063b381ff8211620000f0578063d191097e11620000a3578063dc962e45116200007a578063dc962e451462000444578063dfca9781146200045b578063f2fde38b1462000472578063fa569274146200048957600080fd5b8063d191097e14620003e1578063d2c7c2a414620003f8578063d9203b91146200043057600080fd5b8063b381ff821462000319578063b64a775e146200032b578063bbd9d8e11462000342578063bcd54f0c146200039f578063c3c3b55b14620003b6578063c5870a4b14620003ca57600080fd5b8063715018a611620001665780638da5cb5b116200013d5780638da5cb5b14620002c2578063924589c514620002d4578063aeba91d014620002eb578063b31b9fee146200030257600080fd5b8063715018a6146200028a578063771d4c2814620002945780638bc798dc14620002ab57600080fd5b806302f3318d14620001b45780631bcc247214620001cd578063222a5df614620001e457806342198160146200020e5780634ba69faa146200023b5780636c18443d146200024f575b600080fd5b620001cb620001c536600462000c85565b6200049d565b005b620001cb620001de36600462000c85565b6200053e565b600154620001f990600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b60045462000222906001600160a01b031681565b6040516001600160a01b03909116815260200162000205565b60025462000222906001600160a01b031681565b620002766200026036600462000c85565b60076020526000908152604090205461ffff1681565b60405161ffff909116815260200162000205565b620001cb620005bb565b620001cb620002a536600462000c85565b620005d3565b620001cb620002bc36600462000c85565b620006a6565b6001546001600160a01b031662000222565b620001cb620002e536600462000ca3565b6200070c565b620001cb620002fc36600462000c85565b6200077f565b620002226200031336600462000cc9565b620007fb565b60085460405190815260200162000205565b620001cb6200033c36600462000c85565b62000912565b6200037f6200035336600462000ca3565b61ffff166000908152600660205260409020546001600160a01b03811691600160a01b90910460ff1690565b604080516001600160a01b03909316835290151560208301520162000205565b620001cb620003b036600462000d29565b62000978565b60055462000222906001600160a01b031681565b620001cb620003db36600462000c85565b620009b4565b620001cb620003f236600462000de4565b62000a1a565b6200037f6200040936600462000ca3565b6006602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b60035462000222906001600160a01b031681565b620001cb6200045536600462000dfe565b62000aa8565b620001cb6200046c36600462000c85565b62000b0b565b620001cb6200048336600462000c85565b62000b48565b60095462000222906001600160a01b031681565b620004a762000b89565b6001600160a01b038116620004d95760405162461bcd60e51b8152600401620004d09062000e22565b60405180910390fd5b600554604051630de6123960e11b81526001600160a01b03838116600483015290911690631bcc2472906024015b600060405180830381600087803b1580156200052257600080fd5b505af115801562000537573d6000803e3d6000fd5b5050505050565b6200054862000b89565b6001600160a01b038116620005715760405162461bcd60e51b8152600401620004d09062000e22565b600280546001600160a01b0319166001600160a01b0383169081179091556040517faa0150507cbcab99f33127173fcbdd580e5710d253406b99952e1feda3cdcc0e90600090a250565b620005c562000b89565b620005d1600062000bb8565b565b620005dd62000b89565b620005e762000c0a565b620005f3600862000c35565b506008546040805180820182526001600160a01b038481168083526000602080850182815261ffff8816808452600683528784209651875492511515600160a01b026001600160a81b03199093169616959095171790945581815260078452849020805461ffff1916831790558351918252918101919091527fc3971223019c1361f0a91605997c54932599b5f815f2f7d49e183fbc21014029910160405180910390a150620006a36001600055565b50565b620006b062000b89565b6001600160a01b038116620006d95760405162461bcd60e51b8152600401620004d09062000e22565b600554604051636c19e78360e01b81526001600160a01b03838116600483015290911690636c19e7839060240162000507565b6200071662000b89565b61ffff81166000818152600660209081526040918290208054600160a01b60ff60a01b1982161790915591519283526001600160a01b03909116917f599cca7c0d636819ca3833dcdbcd266536199c19522d35eb59e13d07f1041770910160405180910390a250565b6200078962000b89565b6001600160a01b03811660008181526007602090815260408083205461ffff168084526006835292819020805460ff60a01b1916600160a01b179055518281529192917f599cca7c0d636819ca3833dcdbcd266536199c19522d35eb59e13d07f1041770910160405180910390a25050565b60006200080762000b89565b6200081162000c0a565b60095460405160009130918791879187916001600160a01b031690620008379062000c5a565b6001600160a01b0395861681529385166020850152918416604084015283166060830152909116608082015260a001604051809103906000f08015801562000883573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0383811691821790925560048054604051637d4163d360e01b8152918201929092529293501690637d4163d390602401600060405180830381600087803b158015620008e457600080fd5b505af1158015620008f9573d6000803e3d6000fd5b509293505050506200090b6001600055565b9392505050565b6200091c62000b89565b6001600160a01b038116620009455760405162461bcd60e51b8152600401620004d09062000e22565b600554604051630c5006c760e11b81526001600160a01b038381166004830152909116906318a00d8e9060240162000507565b6200098262000b89565b6005546040516313b41ce760e31b81526001600160a01b0390911690639da0e738906200050790849060040162000e4f565b620009be62000b89565b6001600160a01b038116620009e75760405162461bcd60e51b8152600401620004d09062000e22565b60055460405163c2eb8eb960e01b81526001600160a01b0383811660048301529091169063c2eb8eb99060240162000507565b62000a2462000b89565b6000811162000a765760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f206d617820646561646c696e6500000000000000006044820152606401620004d0565b60055460405163fda2071d60e01b8152600481018390526001600160a01b039091169063fda2071d9060240162000507565b62000ab262000b89565b60018054821515600160a01b0260ff60a01b199091161790556040517f8488d1fbbfabc3e41bea48b6d06c5139182eccbd9942a27a1142748120d028589062000b0090831515815260200190565b60405180910390a150565b62000b1562000b89565b6005546040516321ecf70160e01b81526001600160a01b038381166004830152909116906321ecf7019060240162000507565b62000b5262000b89565b6001600160a01b03811662000b7e57604051631e4fbdf760e01b815260006004820152602401620004d0565b620006a38162000bb8565b6001546001600160a01b03163314620005d15760405163118cdaa760e01b8152336004820152602401620004d0565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026000540362000c2e57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000600182600001600082825462000c4e919062000ea0565b90915550509054919050565b6141428062000ec983390190565b80356001600160a01b038116811462000c8057600080fd5b919050565b60006020828403121562000c9857600080fd5b6200090b8262000c68565b60006020828403121562000cb657600080fd5b813561ffff811681146200090b57600080fd5b60008060006060848603121562000cdf57600080fd5b62000cea8462000c68565b925062000cfa6020850162000c68565b915062000d0a6040850162000c68565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000d3c57600080fd5b813567ffffffffffffffff8082111562000d5557600080fd5b818401915084601f83011262000d6a57600080fd5b81358181111562000d7f5762000d7f62000d13565b604051601f8201601f19908116603f0116810190838211818310171562000daa5762000daa62000d13565b8160405282815287602084870101111562000dc457600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121562000df757600080fd5b5035919050565b60006020828403121562000e1157600080fd5b813580151581146200090b57600080fd5b602080825260139082015272556e6f52653a207a65726f206164647265737360681b604082015260600190565b60006020808352835180602085015260005b8181101562000e7f5785810183015185820160400152820162000e61565b506000604082860101526040601f19601f8301168501019250505092915050565b8082018082111562000ec257634e487b7160e01b600052601160045260246000fd5b9291505056fe60c06040526000196012553480156200001757600080fd5b5060405162004142380380620041428339810160408190526200003a91620003dc565b6040518060400160405280601081526020016f506f6c69637920696e737572616e636560801b8152506040518060400160405280601081526020016f506f6c69637920696e737572616e636560801b8152506040518060400160405280601881526020017f427579506f6c6963794d6574615472616e73616374696f6e0000000000000000815250604051806040016040528060018152602001603160f81b81525081816040518060800160405280604f8152602001620040f3604f913980519060200120828051906020012082805190602001203062000120620003bb60201b60201c565b60408051602081019690965285019390935260608401919091526001600160a01b0316608083015260a082015260c00160408051601f198184030181529190528051602090910120600055506002925062000180915084905082620004f3565b5060036200018f8282620004f3565b50506001600855506009805460ff191690556001600160a01b038516620001fd5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a207a65726f20666163746f72792061646472657373000000000060448201526064015b60405180910390fd5b6001600160a01b0384166200025f5760405162461bcd60e51b815260206004820152602160248201527f556e6f52653a207a65726f2065786368616e67654167656e74206164647265736044820152607360f81b6064820152608401620001f4565b6001600160a01b038316620002b75760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a207a65726f207072656d69756d506f6f6c2061646472657373006044820152606401620001f4565b6001600160a01b0382166200030f5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a207a65726f206361706974616c4167656e7420616464726573736044820152606401620001f4565b6001600160a01b038116620003675760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f2055534443206164647265737300000000000000006044820152606401620001f4565b6001600160a01b03948516608052600b80549486166001600160a01b0319958616179055600d805492861692851692909217909155831660a052600c805491909316911617905562093a80600a55620005bf565b4690565b80516001600160a01b0381168114620003d757600080fd5b919050565b600080600080600060a08688031215620003f557600080fd5b6200040086620003bf565b94506200041060208701620003bf565b93506200042060408701620003bf565b92506200043060608701620003bf565b91506200044060808701620003bf565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200047757607f821691505b6020821081036200049857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004ee576000816000526020600020601f850160051c81016020861015620004c95750805b601f850160051c820191505b81811015620004ea57828155600101620004d5565b5050505b505050565b81516001600160401b038111156200050f576200050f6200044c565b620005278162000520845462000462565b846200049e565b602080601f8311600181146200055f5760008415620005465750858301515b600019600386901b1c1916600185901b178555620004ea565b600085815260208120601f198616915b8281101562000590578886015182559484019460019091019084016200056f565b5085821015620005af5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051613ab362000640600039600081816107c9015261154e01526000818161072a01528181610ba401528181610c6f01528181610e93015281816116d00152818161173201528181611845015281816118b401528181611a9c01528181611bfd015281816124aa015281816125df01526126740152613ab36000f3fe6080604052600436106102295760003560e01c80636352211e11610123578063a5d5e142116100ab578063d341960b1161006f578063d341960b1461076c578063de4e420114610781578063e985e9c514610797578063fa569274146107b7578063fda2071d146107eb57600080fd5b8063a5d5e142146106b8578063b88d4fde146106d8578063c2eb8eb9146106f8578063c45a015514610718578063c87b56dd1461074c57600080fd5b80637a39b8d8116100f25780637a39b8d8146105cc5780637a5402e9146105e157806395d89b41146106635780639da0e73814610678578063a22cb4651461069857600080fd5b80636352211e1461055757806367755415146105775780636c19e7831461058c57806370a08231146105ac57600080fd5b8063238ac933116101b157806335f336f31161017557806335f336f3146104cc57806342198160146104df57806342842e0e146104ff5780634ba69faa1461051f5780635c975abb1461053f57600080fd5b8063238ac9331461037957806323b872dd146103995780632b07fce3146103b95780632d0335ab1461046857806333b3691e146104ac57600080fd5b80630c53c51c116101f85780630c53c51c146102e657806318a00d8e146102f95780631bcc24721461031957806321c61b881461033957806321ecf7011461035957600080fd5b806301ffc9a71461023557806306fdde031461026a578063081812fc1461028c578063095ea7b3146102c457600080fd5b3661023057005b600080fd5b34801561024157600080fd5b5061025561025036600461302f565b61080b565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061027f61085d565b604051610261919061309c565b34801561029857600080fd5b506102ac6102a73660046130af565b6108ef565b6040516001600160a01b039091168152602001610261565b3480156102d057600080fd5b506102e46102df3660046130ed565b610918565b005b61027f6102f43660046131e9565b610927565b34801561030557600080fd5b506102e461031436600461325d565b610ba2565b34801561032557600080fd5b506102e461033436600461325d565b610c6d565b34801561034557600080fd5b506102e461035436600461327a565b610d38565b34801561036557600080fd5b506102e461037436600461325d565b610e91565b34801561038557600080fd5b50600e546102ac906001600160a01b031681565b3480156103a557600080fd5b506102e46103b43660046132b2565b610fcd565b3480156103c557600080fd5b506104266103d43660046130af565b601160205260009081526040902080546001820154600283015460038401546004909401549293919290916001600160a01b03908116919081169060ff600160a01b8204811691600160a81b90041687565b604080519788526020880196909652948601939093526001600160a01b039182166060860152166080840152151560a0830152151560c082015260e001610261565b34801561047457600080fd5b5061049e61048336600461325d565b6001600160a01b031660009081526001602052604090205490565b604051908152602001610261565b3480156104b857600080fd5b506102e46104c73660046130af565b611058565b6102e46104da3660046133dd565b6111e5565b3480156104eb57600080fd5b50600d546102ac906001600160a01b031681565b34801561050b57600080fd5b506102e461051a3660046132b2565b6116a3565b34801561052b57600080fd5b50600c546102ac906001600160a01b031681565b34801561054b57600080fd5b5060095460ff16610255565b34801561056357600080fd5b506102ac6105723660046130af565b6116c3565b34801561058357600080fd5b506102e46116ce565b34801561059857600080fd5b506102e46105a736600461325d565b611730565b3480156105b857600080fd5b5061049e6105c736600461325d565b6117fb565b3480156105d857600080fd5b506102e4611843565b3480156105ed57600080fd5b506106376105fc3660046130af565b600090815260116020526040902060048101546002820154600183015492549093909160ff600160a01b8204811692600160a81b9092041690565b60408051958652602086019490945292840191909152151560608301521515608082015260a001610261565b34801561066f57600080fd5b5061027f6118a3565b34801561068457600080fd5b506102e46106933660046134d4565b6118b2565b3480156106a457600080fd5b506102e46106b336600461352b565b61195b565b3480156106c457600080fd5b506102e46106d33660046130af565b611966565b3480156106e457600080fd5b506102e46106f3366004613564565b611a83565b34801561070457600080fd5b506102e461071336600461325d565b611a9a565b34801561072457600080fd5b506102ac7f000000000000000000000000000000000000000000000000000000000000000081565b34801561075857600080fd5b5061027f6107673660046130af565b611b65565b34801561077857600080fd5b5060105461049e565b34801561078d57600080fd5b5061049e600a5481565b3480156107a357600080fd5b506102556107b23660046135d0565b611bcd565b3480156107c357600080fd5b506102ac7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107f757600080fd5b506102e46108063660046130af565b611bfb565b60006001600160e01b031982166380ac58cd60e01b148061083c57506001600160e01b03198216635b5e139f60e01b145b8061085757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461086c906135fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610898906135fe565b80156108e55780601f106108ba576101008083540402835291602001916108e5565b820191906000526020600020905b8154815290600101906020018083116108c857829003601f168201915b5050505050905090565b60006108fa82611cda565b506000828152600660205260409020546001600160a01b0316610857565b610923828233611d13565b5050565b6060600061093486611d20565b90506001600160e01b03196000358116908216036109bf5760405162461bcd60e51b815260206004820152603d60248201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060448201527f657865637574654d6574615472616e73616374696f6e206d6574686f6400000060648201526084015b60405180910390fd5b604080516060810182526001600160a01b038916600081815260016020908152908490205483528201529081018790526109fc8882888888611d3b565b610a525760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016109b6565b6001600160a01b038816600090815260016020819052604090912054610a779161364e565b6001600160a01b0389166000908152600160209081526040808320939093559151909182913091610aac918c918e9101613661565b60408051601f1981840301815290829052610ac691613698565b6000604051808303816000865af19150503d8060008114610b03576040519150601f19603f3d011682016040523d82523d6000602084013e610b08565b606091505b509150915081610b5a5760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016109b6565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b604051610b8d939291906136b4565b60405180910390a19998505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bd4611e17565b6001600160a01b031614610bfa5760405162461bcd60e51b81526004016109b6906136e9565b6001600160a01b038116610c205760405162461bcd60e51b81526004016109b690613720565b600b80546001600160a01b0319166001600160a01b0383169081179091556040513091907f5ca4aeaf5ab178bf08d3e1eb491b9a13a2de5b100038437cf5ed0e361fff8f3790600090a350565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c9f611e17565b6001600160a01b031614610cc55760405162461bcd60e51b81526004016109b6906136e9565b6001600160a01b038116610ceb5760405162461bcd60e51b81526004016109b690613720565b600c80546001600160a01b0319166001600160a01b0383169081179091556040513091907fb6f78fe449cc310adeef201f18b6afe9569041a997be6b619607692854999c8190600090a350565b6040805160e081018252428152620186a060208083019182528284018581526000606085018181526001600160a01b0389811660808801908152600160a0890181815260c08a018681528e8752601190985299909420975188559551928701929092559151600286015590516003850180546001600160a01b03191691831691909117905591516004909301805494519151939092166001600160a81b031990941693909317600160a01b931515939093029290921760ff60a81b1916600160a81b91151591909102179055610e15610e0f611e17565b84611e73565b600d54600084815260116020526040908190206002015490516350498d7960e11b81526001600160a01b039092169163a0931af291610e5a9160040190815260200190565b600060405180830381600087803b158015610e7457600080fd5b505af1158015610e88573d6000803e3d6000fd5b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ec3611e17565b6001600160a01b031614610ee95760405162461bcd60e51b81526004016109b6906136e9565b6001600160a01b038116610f0f5760405162461bcd60e51b81526004016109b690613720565b600c546001600160a01b0316610f675760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a206e6f742064656669656e64207072656d69756d506f6f6c000060448201526064016109b6565b600c54601254610f849183916001600160a01b0390911690611ed8565b600c546040516001600160a01b0391821681529082169030907fc571353a8852cd132c515d367a4fa7c21e9c38baf9c7e9818f59d40b2b156b7c9060200160405180910390a350565b6001600160a01b038216610ff757604051633250574960e11b8152600060048201526024016109b6565b6000611004838333612007565b9050836001600160a01b0316816001600160a01b031614611052576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016109b6565b50505050565b611060612100565b600d546001600160a01b0316611074611e17565b6001600160a01b03161461109a5760405162461bcd60e51b81526004016109b6906136e9565b600081815260116020526040902060040154600160a01b900460ff166111025760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a206d61726b656420746f20636c61696d20616c7265616479000060448201526064016109b6565b600081815260116020526040902060040154600160a81b900460ff16156111635760405162461bcd60e51b8152602060048201526015602482015274155b9bd4994e881c1bdb1a58de48195e1c1a5c9959605a1b60448201526064016109b6565b6000818152601160205260409020600401805460ff60a01b191690556111888161212a565b807f048ce8e17c5255ee6428918540ffd64ab271d402ec9f5cdc6976d66043b174ab60116000848152602001908152602001600020600201546040516111d091815260200190565b60405180910390a26111e26001600855565b50565b6111ed612165565b6111f5612100565b8851806112375760405162461bcd60e51b815260206004820152601060248201526f556e6f52653a206e6f20706f6c69637960801b60448201526064016109b6565b8851811461129f5760405162461bcd60e51b815260206004820152602f60248201527f556e6f52653a206e6f206d617463682070726f746f636f6c496473207769746860448201526e0818dbdd995c9859d9505b5bdd5b9d608a1b60648201526084016109b6565b875181146113095760405162461bcd60e51b815260206004820152603160248201527f556e6f52653a206e6f206d617463682070726f746f636f6c49647320776974686044820152701031b7bb32b930b3b2a23ab930ba34b7b760791b60648201526084016109b6565b600061131c888c8b8d8b8b8b8b8b612189565b90506001600160a01b038116158015906113435750600e546001600160a01b038281169116145b6113875760405162461bcd60e51b81526020600482015260156024820152742ab737a9329d1034b73b30b634b21039b4b3b732b960591b60448201526064016109b6565b4287111580156113a15750600a5461139f884261374d565b105b6113ed5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207369676e61747572652065787069726564000000000000000060448201526064016109b6565b60006001600160a01b03871661154c57600b5460405163531a221160e01b8152600481018b90526001600160a01b039091169063531a221190602401602060405180830381865afa158015611446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146a9190613760565b9050803410156114bc5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a20696e73756666696369656e742070616964000000000000000060448201526064016109b6565b803411156114de576114de6114cf611e17565b6114d9833461374d565b612285565b600c60009054906101000a90046001600160a01b03166001600160a01b031663bc181416826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561152e57600080fd5b505af1158015611542573d6000803e3d6000fd5b505050505061167c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b03160361158b5788611600565b600b5460405163a9a12d4360e01b81526001600160a01b038981166004830152602482018c90529091169063a9a12d4390604401602060405180830381865afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116009190613760565b90506116158761160e611e17565b308461235f565b600c54604051638c8ac76d60e01b81526001600160a01b0389811660048301526024820184905290911690638c8ac76d90604401600060405180830381600087803b15801561166357600080fd5b505af1158015611677573d6000803e3d6000fd5b505050505b61168a8d8d8d8d858c61249d565b5050506116976001600855565b50505050505050505050565b6116be83838360405180602001604052806000815250611a83565b505050565b600061085782611cda565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611700611e17565b6001600160a01b0316146117265760405162461bcd60e51b81526004016109b6906136e9565b61172e612993565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611762611e17565b6001600160a01b0316146117885760405162461bcd60e51b81526004016109b6906136e9565b6001600160a01b0381166117ae5760405162461bcd60e51b81526004016109b690613720565b600e80546001600160a01b0319166001600160a01b0383169081179091556040513091907f8e2c76c578fb1494886741ea1b707ab0b9b0f8001354273d5b491bd68299720e90600090a350565b60006001600160a01b038216611827576040516322718ad960e21b8152600060048201526024016109b6565b506001600160a01b031660009081526005602052604090205490565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611875611e17565b6001600160a01b03161461189b5760405162461bcd60e51b81526004016109b6906136e9565b61172e6129e5565b60606003805461086c906135fe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118e4611e17565b6001600160a01b03161461190a5760405162461bcd60e51b81526004016109b6906136e9565b600f61191682826137c1565b50306001600160a01b03167f970aa99b4d9e40ecd777dc926534019dbf26bef2c6021c90c036984b5a9e0fde82604051611950919061309c565b60405180910390a250565b610923338383612a22565b61196e612100565b600d546001600160a01b0316611982611e17565b6001600160a01b0316146119a85760405162461bcd60e51b81526004016109b6906136e9565b600081815260116020526040902060040154600160a01b900460ff16611a105760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a206d61726b656420746f20636c61696d20616c7265616479000060448201526064016109b6565b6000818152601160205260409020600401805460ff60a81b1916600160a81b179055611a3b8161212a565b807f184fb82e16552a73263d53d4dcb23c8300d042a0578b8633d30680ac2f09f07660116000848152602001908152602001600020600201546040516111d091815260200190565b611a8e848484610fcd565b61105284848484612ac1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611acc611e17565b6001600160a01b031614611af25760405162461bcd60e51b81526004016109b6906136e9565b6001600160a01b038116611b185760405162461bcd60e51b81526004016109b690613720565b600d80546001600160a01b0319166001600160a01b0383169081179091556040513091907f8dadc789ed91201272dd8c71737c6f84bb2d72bca3f5ec01601694cda82868c090600090a350565b6060611b7082611cda565b506000611b7b612be3565b90506000815111611b9b5760405180602001604052806000815250611bc6565b80611ba584612bf2565b604051602001611bb6929190613881565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c2d611e17565b6001600160a01b031614611c535760405162461bcd60e51b81526004016109b6906136e9565b60008111611ca35760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a207a65726f206d6178207369676e656454696d6500000000000060448201526064016109b6565b600a81905560405181815230907fef0e0784016a6db87327a652697e3f4ff408f7e7951378b26c113979017f7f0290602001611950565b6000818152600460205260408120546001600160a01b03168061085757604051637e27328960e01b8152600481018490526024016109b6565b6116be8383836001612c85565b60008151600003611d3357506000919050565b506020015190565b6000806001611d51611d4c88612d8b565b612e08565b6040805160008152602081018083529290925260ff861690820152606081018790526080810186905260a0016020604051602081039080840390855afa158015611d9f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611df65760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016109b6565b866001600160a01b0316816001600160a01b03161491505095945050505050565b6000303303611e6d57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150611e709050565b50335b90565b6001600160a01b038216611e9d57604051633250574960e11b8152600060048201526024016109b6565b6000611eab83836000612007565b90506001600160a01b038116156116be576040516339e3563760e11b8152600060048201526024016109b6565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691611f349190613698565b6000604051808303816000865af19150503d8060008114611f71576040519150601f19603f3d011682016040523d82523d6000602084013e611f76565b606091505b5091509150818015611fa0575080511580611fa0575080806020019051810190611fa091906138b0565b6120005760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b60648201526084016109b6565b5050505050565b6000828152600460205260408120546001600160a01b039081169083161561203457612034818486612e31565b6001600160a01b0381161561207257612051600085600080612c85565b6001600160a01b038116600090815260056020526040902080546000190190555b6001600160a01b038516156120a1576001600160a01b0385166000908152600560205260409020805460010190555b60008481526004602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b60026008540361212357604051633ee5aeb560e01b815260040160405180910390fd5b6002600855565b60006121396000836000612007565b90506001600160a01b03811661092357604051637e27328960e01b8152600481018390526024016109b6565b60095460ff161561172e5760405163d93c066560e01b815260040160405180910390fd5b6000808a8a8a8a8a8a6040516020016121a796959493929190613900565b6040516020818303038152906040528051906020012090506000816040516020016121fe91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa158015612269573d6000803e3d6000fd5b5050604051601f1901519e9d5050505050505050505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516122af9190613698565b60006040518083038185875af1925050503d80600081146122ec576040519150601f19603f3d011682016040523d82523d6000602084013e6122f1565b606091505b50509050806116be5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b60648201526084016109b6565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916123c39190613698565b6000604051808303816000865af19150503d8060008114612400576040519150601f19603f3d011682016040523d82523d6000602084013e612405565b606091505b509150915081801561242f57508051158061242f57508080602001905181019061242f91906138b0565b6124955760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b60648201526084016109b6565b505050505050565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663222a5df66040518163ffffffff1660e01b8152600401602060405180830381865afa158015612506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252a91906138b0565b905060005b8c5181101561291e5760106000015496508b818151811061255257612552613977565b602002602001015195508a818151811061256e5761256e613977565b602002602001015194508c818151811061258a5761258a613977565b602002602001015193508d81815181106125a6576125a6613977565b6020026020010151925060008a9050600083156126fb57604051636c18443d60e01b81526001600160a01b0387811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636c18443d90602401602060405180830381865afa158015612628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264c919061398d565b905061ffff8116156126f55760405163bbd9d8e160e01b815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bbd9d8e1906024016040805180830381865afa1580156126c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e691906139b1565b915050806126f357600192505b505b506126ff565b5060015b8061274c5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a20756e617661696c61626c6520706f6c6963790000000000000060448201526064016109b6565b6040518060e00160405280428152602001888152602001898152602001876001600160a01b031681526020018c6001600160a01b0316815260200160011515815260200160001515815250601160008b815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c08201518160040160156101000a81548160ff021916908315150217905550905050612876612870611e17565b8a611e73565b612880888b61364e565b995088856001600160a01b0316612895611e17565b6001600160a01b03167f15c2b464a5dd92b73eb56515f6c99c04fbeec68d56dda66903c8a136d53e27f18e8a8d8d896040516129019594939291906001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60405180910390a46129136010612e95565b50505060010161252f565b50861561298457600d546040516350498d7960e11b8152600481018990526001600160a01b039091169063a0931af290602401600060405180830381600087803b15801561296b57600080fd5b505af115801561297f573d6000803e3d6000fd5b505050505b50505050505050505050505050565b61299b612eb8565b6009805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6129ed612165565b6009805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129c83390565b6001600160a01b038216612a5457604051630b61174360e31b81526001600160a01b03831660048201526024016109b6565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561105257604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290612b039033908890879087906004016139e0565b6020604051808303816000875af1925050508015612b3e575060408051601f3d908101601f19168201909252612b3b91810190613a1d565b60015b612ba7573d808015612b6c576040519150601f19603f3d011682016040523d82523d6000602084013e612b71565b606091505b508051600003612b9f57604051633250574960e11b81526001600160a01b03851660048201526024016109b6565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461200057604051633250574960e11b81526001600160a01b03851660048201526024016109b6565b6060600f805461086c906135fe565b60606000612bff83612edb565b600101905060008167ffffffffffffffff811115612c1f57612c1f613119565b6040519080825280601f01601f191660200182016040528015612c49576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612c5357509392505050565b8080612c9957506001600160a01b03821615155b15612d5b576000612ca984611cda565b90506001600160a01b03831615801590612cd55750826001600160a01b0316816001600160a01b031614155b8015612ce85750612ce68184611bcd565b155b15612d115760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016109b6565b8115612d595783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260066020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6000604051806080016040528060438152602001613a3b6043913980516020918201208351848301516040808701518051908601209051612deb950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b6000805460405161190160f01b6020820152602281019190915260428101839052606201612deb565b612e3c838383612fb3565b6116be576001600160a01b038316612e6a57604051637e27328960e01b8152600481018290526024016109b6565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016109b6565b60006001826000016000828254612eac919061364e565b90915550509054919050565b60095460ff1661172e57604051638dfc202b60e01b815260040160405180910390fd5b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612f1a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612f46576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612f6457662386f26fc10000830492506010015b6305f5e1008310612f7c576305f5e100830492506008015b6127108310612f9057612710830492506004015b60648310612fa2576064830492506002015b600a83106108575760010192915050565b60006001600160a01b038316158015906130115750826001600160a01b0316846001600160a01b03161480612fed5750612fed8484611bcd565b8061301157506000828152600660205260409020546001600160a01b038481169116145b949350505050565b6001600160e01b0319811681146111e257600080fd5b60006020828403121561304157600080fd5b8135611bc681613019565b60005b8381101561306757818101518382015260200161304f565b50506000910152565b6000815180845261308881602086016020860161304c565b601f01601f19169290920160200192915050565b602081526000611bc66020830184613070565b6000602082840312156130c157600080fd5b5035919050565b6001600160a01b03811681146111e257600080fd5b80356130e8816130c8565b919050565b6000806040838503121561310057600080fd5b823561310b816130c8565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561315857613158613119565b604052919050565b600067ffffffffffffffff83111561317a5761317a613119565b61318d601f8401601f191660200161312f565b90508281528383830111156131a157600080fd5b828260208301376000602084830101529392505050565b600082601f8301126131c957600080fd5b611bc683833560208501613160565b803560ff811681146130e857600080fd5b600080600080600060a0868803121561320157600080fd5b853561320c816130c8565b9450602086013567ffffffffffffffff81111561322857600080fd5b613234888289016131b8565b9450506040860135925060608601359150613251608087016131d8565b90509295509295909350565b60006020828403121561326f57600080fd5b8135611bc6816130c8565b60008060006060848603121561328f57600080fd5b8335925060208401356132a1816130c8565b929592945050506040919091013590565b6000806000606084860312156132c757600080fd5b83356132d2816130c8565b925060208401356132a1816130c8565b600067ffffffffffffffff8211156132fc576132fc613119565b5060051b60200190565b600082601f83011261331757600080fd5b8135602061332c613327836132e2565b61312f565b8083825260208201915060208460051b87010193508684111561334e57600080fd5b602086015b84811015613373578035613366816130c8565b8352918301918301613353565b509695505050505050565b600082601f83011261338f57600080fd5b8135602061339f613327836132e2565b8083825260208201915060208460051b8701019350868411156133c157600080fd5b602086015b8481101561337357803583529183019183016133c6565b6000806000806000806000806000806101408b8d0312156133fd57600080fd5b8a3567ffffffffffffffff8082111561341557600080fd5b6134218e838f01613306565b9b5060208d013591508082111561343757600080fd5b6134438e838f01613306565b9a5060408d013591508082111561345957600080fd5b6134658e838f0161337e565b995060608d013591508082111561347b57600080fd5b506134888d828e0161337e565b97505060808b0135955060a08b013594506134a560c08c016130dd565b935060e08b013592506101008b013591506134c36101208c016131d8565b90509295989b9194979a5092959850565b6000602082840312156134e657600080fd5b813567ffffffffffffffff8111156134fd57600080fd5b8201601f8101841361350e57600080fd5b61301184823560208401613160565b80151581146111e257600080fd5b6000806040838503121561353e57600080fd5b8235613549816130c8565b915060208301356135598161351d565b809150509250929050565b6000806000806080858703121561357a57600080fd5b8435613585816130c8565b93506020850135613595816130c8565b925060408501359150606085013567ffffffffffffffff8111156135b857600080fd5b6135c4878288016131b8565b91505092959194509250565b600080604083850312156135e357600080fd5b82356135ee816130c8565b91506020830135613559816130c8565b600181811c9082168061361257607f821691505b60208210810361363257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561085757610857613638565b6000835161367381846020880161304c565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b600082516136aa81846020870161304c565b9190910192915050565b6001600160a01b038481168252831660208201526060604082018190526000906136e090830184613070565b95945050505050565b6020808252601c908201527f556e6f52653a2053616c6573506f6c69637920466f7262696464656e00000000604082015260600190565b602080825260139082015272556e6f52653a207a65726f206164647265737360681b604082015260600190565b8181038181111561085757610857613638565b60006020828403121561377257600080fd5b5051919050565b601f8211156116be576000816000526020600020601f850160051c810160208610156137a25750805b601f850160051c820191505b81811015612495578281556001016137ae565b815167ffffffffffffffff8111156137db576137db613119565b6137ef816137e984546135fe565b84613779565b602080601f831160018114613824576000841561380c5750858301515b600019600386901b1c1916600185901b178555612495565b600085815260208120601f198616915b8281101561385357888601518255948401946001909101908401613834565b50858210156138715787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000835161389381846020880161304c565b8351908301906138a781836020880161304c565b01949350505050565b6000602082840312156138c257600080fd5b8151611bc68161351d565b60008151602080840160005b838110156138f5578151875295820195908201906001016138d9565b509495945050505050565b86815260006020808301885160208a0160005b828110156139385781516001600160a01b031684529284019290840190600101613913565b50505061394e613948828a6138cd565b886138cd565b9586525050505060601b6bffffffffffffffffffffffff19166020820152603401949350505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561399f57600080fd5b815161ffff81168114611bc657600080fd5b600080604083850312156139c457600080fd5b82516139cf816130c8565b60208401519092506135598161351d565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a1390830184613070565b9695505050505050565b600060208284031215613a2f57600080fd5b8151611bc68161301956fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220e744472d21b783e5dfb6f52df89d76fe14ad1226ea5734682051c30a3b3fe91f64736f6c63430008170033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429a26469706673582212207d1806669706417c6bbe75ba00992ce5de4dbc57aaa8c97b7d51916fde53bb9364736f6c63430008170033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3857,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1387,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9367,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "checkIfProtocolInWhitelistArray",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 9369,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "premiumPool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9371,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9373,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "capitalAgent",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9375,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "salesPolicy",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9380,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "getProtocol",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_struct(Protocol)9364_storage)"
      },
      {
        "astId": 9385,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "getProtocolId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 9388,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "protocolIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)24735_storage"
      },
      {
        "astId": 9390,
        "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
        "label": "USDC_TOKEN",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_struct(Protocol)9364_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct MockSalesPolicyFactory.Protocol)",
        "numberOfBytes": "32",
        "value": "t_struct(Protocol)9364_storage"
      },
      "t_struct(Counter)24735_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 24734,
            "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
            "label": "current",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Protocol)9364_storage": {
        "encoding": "inplace",
        "label": "struct MockSalesPolicyFactory.Protocol",
        "members": [
          {
            "astId": 9361,
            "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
            "label": "protocolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9363,
            "contract": "contracts/Mocks/MockSalesPolicyFactory.sol:MockSalesPolicyFactory",
            "label": "isBlackList",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}