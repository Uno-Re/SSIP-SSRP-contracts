{
  "address": "0x53D20c192F0c675d301bc485061b094ED6765cDd",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "newSyntheticSSIP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8dcd87d87fd1d2f078650019ee8ae3cbcf34ead1bf9606f628bf298d0192aa7e",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0x53D20c192F0c675d301bc485061b094ED6765cDd",
    "transactionIndex": 21,
    "gasUsed": "2358904",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x93020d2bfa11e6094e595ce46fb55725eecb148ad988cc69d957839893544999",
    "transactionHash": "0x8dcd87d87fd1d2f078650019ee8ae3cbcf34ead1bf9606f628bf298d0192aa7e",
    "logs": [],
    "blockNumber": 10399734,
    "cumulativeGasUsed": "3806912",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d2fc875e3afcbd9499ae3f5e7a33f9ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"newSyntheticSSIP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/SyntheticSSIPFactory.sol\":\"SyntheticSSIPFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/SyntheticSSIP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interfaces/IMigration.sol\\\";\\nimport \\\"./interfaces/IRewarderFactory.sol\\\";\\nimport \\\"./interfaces/ISyntheticSSIP.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract SyntheticSSIP is ISyntheticSSIP, ReentrancyGuard, AccessControl, Pausable {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant BOT_ROLE = keccak256(\\\"BOT_ROLE\\\");\\n\\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\\n\\n    uint256 public lockTime = 10 days;\\n\\n    address public migrateTo;\\n    address public rewarder;\\n    address public lpToken;\\n    bool public killed;\\n\\n    uint256 lastRewardBlock;\\n    uint256 accRewardPerShare;\\n    uint256 public rewardPerBlock;\\n\\n    struct UserInfo {\\n        uint256 lastWithdrawTime;\\n        uint256 rewardDebt;\\n        uint256 amount;\\n        uint256 pendingWithdrawAmount;\\n        bool isNotRollOver;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public totalStakedLPAmount;\\n    uint256 public totalWithdrawPending;\\n\\n    event LogStakedInPool(address indexed _staker, address indexed _pool, uint256 _amount);\\n    event LogLeftPool(address indexed _staker, address indexed _pool, uint256 _requestAmount);\\n    event LogLeaveFromPending(address indexed _user, address indexed _pool, uint256 _withdrawAmount);\\n    event LogUpdatePool(uint256 _lastRewardBlock, uint256 _lpSupply, uint256 _accRewardPerShare);\\n    event LogHarvest(address indexed _user, address indexed _receiver, uint256 _amount);\\n    event LogCancelWithdrawRequest(address indexed _user, address indexed _pool, uint256 _cancelAmount);\\n    event LogCreateRewarder(address indexed _SSIP, address indexed _rewarder, address _currency);\\n    event LogSetRewardPerBlock(address indexed _pool, uint256 _rewardPerBlock);\\n    event LogSetMigrateTo(address indexed _pool, address indexed _migrateTo);\\n    event LogSetLockTime(address indexed _pool, uint256 _lockTime);\\n    event LogMigrate(address indexed _user, address indexed _pool, address indexed _migrateTo, uint256 amount);\\n    event PoolAlived(address indexed _owner, bool _alive);\\n    event KillPool(address indexed _owner, bool _killed);\\n    event RollOverReward(address indexed _pool, address[] _staker, uint256 _amount);\\n\\n    constructor(address _lpToken, address _multiSigWallet) {\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multiSigWallet address\\\");\\n        require(_lpToken != address(0), \\\"UnoRe: zero lp token address\\\");\\n        lpToken = _lpToken;\\n        rewardPerBlock = 1e18;\\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\\n        _setRoleAdmin(BOT_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n    }\\n\\n    modifier isAlive() {\\n        require(!killed, \\\"UnoRe: pool is killed\\\");\\n        _;\\n    }\\n\\n    function pausePool() external onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpausePool() external onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    function killPool() external onlyRole(ADMIN_ROLE) {\\n        killed = true;\\n        emit KillPool(msg.sender, true);\\n    }\\n\\n    function revivePool() external onlyRole(ADMIN_ROLE) {\\n        killed = false;\\n        emit PoolAlived(msg.sender, false);\\n    }\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyRole(ADMIN_ROLE) {\\n        require(_rewardPerBlock > 0 && _rewardPerBlock <= 1000 * 1e18, \\\"UnoRe: invalid value, should be between 0 and 1000 * 1e18\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n        emit LogSetRewardPerBlock(address(this), _rewardPerBlock);\\n    }\\n\\n    function setMigrateTo(address _migrateTo) external onlyRole(ADMIN_ROLE) {\\n        require(_migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        migrateTo = _migrateTo;\\n        emit LogSetMigrateTo(address(this), _migrateTo);\\n    }\\n\\n    function setLockTime(uint256 _lockTime) external onlyRole(ADMIN_ROLE) {\\n        require(_lockTime > 0, \\\"UnoRe: not allow zero lock time\\\");\\n        lockTime = _lockTime;\\n        emit LogSetLockTime(address(this), _lockTime);\\n    }\\n\\n    function createRewarder(address _operator, address _factory, address _currency) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: rewarder factory no exist\\\");\\n        require(_operator != address(0), \\\"UnoRe: zero operator address\\\");\\n        require(_currency != address(0), \\\"UnoRe: zero currency address\\\");\\n        rewarder = IRewarderFactory(_factory).newRewarder(_operator, _currency, address(this));\\n        emit LogCreateRewarder(address(this), rewarder, _currency);\\n    }\\n\\n    function migrate() external isAlive nonReentrant {\\n        require(migrateTo != address(0), \\\"UnoRe: zero address\\\");\\n        _harvest(msg.sender);\\n        if (\\n            userInfo[msg.sender].pendingWithdrawAmount > 0 && block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime\\n        ) {\\n            _leaveFromPending();\\n        } else {\\n            _cancelWithdrawRequest();\\n        }\\n        uint256 amount = userInfo[msg.sender].amount;\\n        TransferHelper.safeTransfer(lpToken, migrateTo, amount);\\n        IMigration(migrateTo).onMigration(msg.sender, amount, \\\"\\\");\\n        userInfo[msg.sender].amount = 0;\\n        emit LogMigrate(msg.sender, address(this), migrateTo, amount);\\n    }\\n\\n    function pendingReward(address _to) external view returns (uint256 pending) {\\n        uint256 currentAccRewardPerShare = accRewardPerShare;\\n        if (block.number > lastRewardBlock && totalStakedLPAmount != 0) {\\n            uint256 blocks = block.number - lastRewardBlock;\\n            uint256 rewards = blocks * rewardPerBlock;\\n            currentAccRewardPerShare = accRewardPerShare + (rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount;\\n        }\\n        uint256 userBalance = userInfo[_to].amount;\\n        pending = (userBalance * currentAccRewardPerShare) / ACC_REWARD_PRECISION - userInfo[_to].rewardDebt;\\n    }\\n\\n    function updatePool() public override {\\n        if (block.number > lastRewardBlock) {\\n            if (totalStakedLPAmount > 0) {\\n                uint256 blocks = block.number - lastRewardBlock;\\n                uint256 rewards = blocks * rewardPerBlock;\\n                accRewardPerShare = accRewardPerShare + ((rewards * ACC_REWARD_PRECISION) / totalStakedLPAmount);\\n            }\\n            lastRewardBlock = block.number;\\n            emit LogUpdatePool(lastRewardBlock, totalStakedLPAmount, accRewardPerShare);\\n        }\\n    }\\n\\n    function enterInPool(uint256 _amount) external override isAlive nonReentrant {\\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\\n        _enterInPool(_amount, msg.sender);\\n        emit LogStakedInPool(msg.sender, address(this), _amount);\\n    }\\n\\n    function toggleRollOver() external {\\n        userInfo[msg.sender].isNotRollOver = !userInfo[msg.sender].isNotRollOver;\\n    }\\n\\n    function rollOverReward(address[] memory _to) external isAlive onlyRole(BOT_ROLE) nonReentrant {\\n        require(lpToken == IRewarder(rewarder).currency(), \\\"UnoRe: currency not matched\\\");\\n\\n        updatePool();\\n        uint256 _totalPendingUno;\\n        uint256 _accumulatedAmount;\\n        for (uint256 i; i < _to.length; i++) {\\n            require(!userInfo[_to[i]].isNotRollOver, \\\"UnoRe: rollover is not set\\\");\\n\\n            uint256 _pendingReward = _updateReward(_to[i]);\\n            _totalPendingUno += _pendingReward;\\n            _accumulatedAmount += userInfo[_to[i]].amount;\\n            _enterInPool(_pendingReward, _to[i]);\\n        }\\n\\n        if (rewarder != address(0) && _totalPendingUno > 0) {\\n            IRewarder(rewarder).onRewardForRollOver(address(this), _totalPendingUno, _accumulatedAmount);\\n        }\\n        emit RollOverReward(address(this), _to, _totalPendingUno);\\n    }\\n\\n    /**\\n     * @dev WR will be in pending for 10 days at least\\n     */\\n    function leaveFromPoolInPending(uint256 _amount) external override nonReentrant {\\n        // Withdraw desired amount from pool\\n        _harvest(msg.sender);\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        require(amount - pendingWR >= _amount, \\\"UnoRe: withdraw amount overflow\\\");\\n        userInfo[msg.sender].pendingWithdrawAmount = userInfo[msg.sender].pendingWithdrawAmount + _amount;\\n        userInfo[msg.sender].lastWithdrawTime = block.timestamp;\\n\\n        totalWithdrawPending = totalWithdrawPending + _amount;\\n\\n        emit LogLeftPool(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev user can submit claim again and receive his funds into his wallet after 10 days since last WR.\\n     */\\n    function leaveFromPending() external override whenNotPaused nonReentrant {\\n        require(block.timestamp - userInfo[msg.sender].lastWithdrawTime >= lockTime, \\\"UnoRe: Locked time\\\");\\n        _harvest(msg.sender);\\n        _leaveFromPending();\\n    }\\n\\n    function _leaveFromPending() private {\\n        uint256 amount = userInfo[msg.sender].amount;\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n\\n        TransferHelper.safeTransfer(lpToken, msg.sender, pendingWR);\\n\\n        userInfo[msg.sender].rewardDebt = accumulatedReward - ((pendingWR * accRewardPerShare) / ACC_REWARD_PRECISION);\\n        userInfo[msg.sender].amount = amount - pendingWR;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        totalStakedLPAmount = totalStakedLPAmount - pendingWR;\\n        emit LogLeaveFromPending(msg.sender, address(this), pendingWR);\\n    }\\n\\n    function harvest(address _to) external override whenNotPaused isAlive nonReentrant {\\n        _harvest(_to);\\n    }\\n\\n    function _harvest(address _to) private {\\n        updatePool();\\n\\n        uint256 _pendingReward = _updateReward(_to);\\n\\n        if (rewarder != address(0) && _pendingReward > 0) {\\n            IRewarder(rewarder).onReward(_to, _pendingReward);\\n        }\\n\\n        emit LogHarvest(msg.sender, _to, _pendingReward);\\n    }\\n\\n    function _updateReward(address _to) internal returns (uint256) {\\n        uint256 amount = userInfo[_to].amount;\\n        uint256 accumulatedReward = (amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        uint256 _pendingReward = accumulatedReward - userInfo[_to].rewardDebt;\\n\\n        // Effects\\n        userInfo[_to].rewardDebt = accumulatedReward;\\n        return _pendingReward;\\n    }\\n\\n    function _enterInPool(uint256 _amount, address _to) internal {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        updatePool();\\n        userInfo[_to].rewardDebt = userInfo[_to].rewardDebt + (_amount * accRewardPerShare) / ACC_REWARD_PRECISION;\\n        userInfo[_to].amount = userInfo[_to].amount + _amount;\\n        totalStakedLPAmount = totalStakedLPAmount + _amount;\\n    }\\n\\n    function cancelWithdrawRequest() external nonReentrant {\\n        _cancelWithdrawRequest();\\n    }\\n\\n    function _cancelWithdrawRequest() private {\\n        uint256 pendingWR = userInfo[msg.sender].pendingWithdrawAmount;\\n        userInfo[msg.sender].pendingWithdrawAmount = 0;\\n        totalWithdrawPending = totalWithdrawPending - pendingWR;\\n        emit LogCancelWithdrawRequest(msg.sender, address(this), pendingWR);\\n    }\\n}\\n\",\"keccak256\":\"0xa8287c4b4d5f801e768a095a7964ba32e151c1346bb41b9763700ab48473086c\",\"license\":\"GPL-3.0\"},\"contracts/factories/SyntheticSSIPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\nimport \\\"../SyntheticSSIP.sol\\\";\\nimport \\\"../interfaces/ISyntheticSSIPFactory.sol\\\";\\n\\ncontract SyntheticSSIPFactory is ISyntheticSSIPFactory {\\n    constructor() {}\\n\\n    function newSyntheticSSIP(address _multiSigWallet, address _lpToken) external override returns (address) {\\n        SyntheticSSIP _ssip = new SyntheticSSIP(_lpToken, _multiSigWallet);\\n        address _ssipAddr = address(_ssip);\\n        return _ssipAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x2a92358331f88d51ec9ebf75489a5bcfcc3a09f829a720150c96d6a5e4ec5e3d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface IMigration {\\n    function onMigration(address who_, uint256 amount_, bytes memory data_) external;\\n}\\n\",\"keccak256\":\"0x188d20aa6fe4544987fe651e4cd7c7068c1d42b5d5b9630f7385d1abe931ed0a\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface IRewarder {\\n    function currency() external view returns (address);\\n\\n    function onReward(address to, uint256 unoAmount) external payable returns (uint256);\\n\\n    function onRewardForRollOver(address to, uint256 unoAmount, uint256 accumulatedAmount) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x28b10a4d8660aaa04cea9c4295f513d0db7a21b60f125dd7af3952e072734aca\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface IRewarderFactory {\\n    function newRewarder(address _operator, address _currency, address _pool) external returns (address);\\n}\\n\",\"keccak256\":\"0xb2169c5d0bf598726c67dfdc8bceab45390d7514afd6463b52efccd1b6bbd78e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSIP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISyntheticSSIP {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending() external;\\n\\n    function harvest(address _to) external;\\n}\\n\",\"keccak256\":\"0x2466b2bd6cb7c7ce62efa2cf315138de37e79dd7eb369b9b9f4d1afa6f3528ac\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISyntheticSSIPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISyntheticSSIPFactory {\\n    function newSyntheticSSIP(address _multiSigWallet, address _lpToken) external returns (address);\\n}\\n\",\"keccak256\":\"0xa8a9a5ee5e1e48d8e8380f88e16260cd386bd22b98779d022b00b4d2b7a4efb9\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.23;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4082117a71b75d3953bcccdd159aad939678458f80b500ce48717a4e8813c0fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80633515167614610030575b600080fd5b61004361003e3660046100fc565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600080828460405161007d906100c6565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604001604051809103906000f0801580156100bd573d6000803e3d6000fd5b50949350505050565b6128718061013083390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146100f757600080fd5b919050565b6000806040838503121561010f57600080fd5b610118836100d3565b9150610126602084016100d3565b9050925092905056fe6080604052620d2f006003553480156200001857600080fd5b5060405162002871380380620028718339810160408190526200003b91620002ab565b60016000556002805460ff191690556001600160a01b038116620000b15760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a207a65726f206d756c746953696757616c6c6574206164647265604482015261737360f01b60648201526084015b60405180910390fd5b6001600160a01b038216620001095760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206c7020746f6b656e2061646472657373000000006044820152606401620000a8565b600680546001600160a01b0319166001600160a01b038416179055670de0b6b3a76400006009556200014b6000805160206200285183398151915282620001aa565b50620001877f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b6000805160206200285183398151915262000241565b620001a2600080516020620028518339815191528062000241565b5050620002e3565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16620002375760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016200023b565b5060005b92915050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b80516001600160a01b0381168114620002a657600080fd5b919050565b60008060408385031215620002bf57600080fd5b620002ca836200028e565b9150620002da602084016200028e565b90509250929050565b61255e80620002f36000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80638ae39cac11610160578063bb872b4a116100d8578063e19e71681161008c578063e3824a3811610071578063e3824a38146105a1578063f40f0f52146105b4578063fd91db96146105c757600080fd5b8063e19e716814610591578063e3161ddd1461059957600080fd5b8063d1c6a231116100bd578063d1c6a2311461055c578063d547741f1461056b578063dcc3e06e1461057e57600080fd5b8063bb872b4a14610541578063bc8f88281461055457600080fd5b8063a217fddf1161012f578063ae04d45d11610114578063ae04d45d146104f4578063af16d6e014610507578063b15037741461051a57600080fd5b8063a217fddf146104e4578063aa09d5b7146104ec57600080fd5b80638ae39cac146104875780638fd3ab801461049057806391d148541461049857806398c6e760146104d157600080fd5b806336568abe1161020e578063736ec05c116101c25780637a39b8d8116101a75780637a39b8d8146104455780637da2a4a71461044d5780638395206c1461047457600080fd5b8063736ec05c1461040b57806375b238fc1461041e57600080fd5b80635c975abb116101f35780635c975abb146103cd5780635fcbd285146103d8578063677554151461040357600080fd5b806336568abe146103b157806336642c21146103c457600080fd5b806313a10036116102655780631f3a0e411161024a5780631f3a0e4114610366578063248a9ca31461037a5780632f2ff15d1461039e57600080fd5b806313a10036146102f35780631959a002146102fc57600080fd5b806301ffc9a714610297578063068cc514146102bf5780630d668087146102c95780630e5c011e146102e0575b600080fd5b6102aa6102a53660046121a8565b6105da565b60405190151581526020015b60405180910390f35b6102c7610673565b005b6102d260035481565b6040519081526020016102b6565b6102c76102ee366004612216565b6106a8565b6102d2600b5481565b61033c61030a366004612216565b600a60205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a0016102b6565b6006546102aa90600160a01b900460ff1681565b6102d2610388366004612233565b6000908152600160208190526040909120015490565b6102c76103ac36600461224c565b61072a565b6102c76103bf36600461224c565b610756565b6102d2600c5481565b60025460ff166102aa565b6006546103eb906001600160a01b031681565b6040516001600160a01b0390911681526020016102b6565b6102c76107a7565b6102c7610419366004612216565b610833565b6102d27fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6102c7610918565b6102c7336000908152600a60205260409020600401805460ff19811660ff90911615179055565b6102c7610482366004612233565b6109a3565b6102d260095481565b6102c7610ab3565b6102aa6104a636600461224c565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6004546103eb906001600160a01b031681565b6102d2600081565b6102c7610cef565b6102c7610502366004612233565b610d21565b6102c761051536600461227c565b610dda565b6102d27f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b81565b6102c761054f366004612233565b61101a565b6102c7611106565b6102d2670de0b6b3a764000081565b6102c761057936600461224c565b61119c565b6005546103eb906001600160a01b031681565b6102c76111c2565b6102c76111d2565b6102c76105af366004612233565b61128a565b6102d26105c2366004612216565b61134f565b6102c76105d53660046122dd565b611415565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061066d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561069d816117d0565b6106a56117da565b50565b6106b0611827565b600654600160a01b900460ff161561070f5760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20706f6f6c206973206b696c6c6564000000000000000000000060448201526064015b60405180910390fd5b610717611864565b610720816118a7565b6106a56001600055565b60008281526001602081905260409091200154610746816117d0565b61075083836119b2565b50505050565b6001600160a01b0381163314610798576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107a28282611a45565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756107d1816117d0565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040516000815233907f77337fcf1b48e6e024b256962b66c49de98c9f606b2cd9937cc0edbc7a0fb709906020015b60405180910390a250565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561085d816117d0565b6001600160a01b0382166108b35760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610706565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915560405130907f877238238dbd7134e89b00809ea73fabb50da117ace807a6b31c733bbf55d36990600090a35050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610942816117d0565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790556040516001815233907f7c952f2e528aa25b4eaf8b6c07af29184b27ce591295e543ced0a27b167dc79490602001610828565b6109ab611864565b6109b4336118a7565b336000908152600a602052604090206002810154600390910154826109d982846123d6565b1015610a275760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a20776974686472617720616d6f756e74206f766572666c6f77006044820152606401610706565b336000908152600a6020526040902060030154610a459084906123e9565b336000908152600a602052604090206003810191909155429055600c54610a6d9084906123e9565b600c55604051838152309033907fd60ea263bba686471127787b82c1f8b19bddbd87f52b83498879e720d839d51f9060200160405180910390a350506106a56001600055565b600654600160a01b900460ff1615610b0d5760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20706f6f6c206973206b696c6c656400000000000000000000006044820152606401610706565b610b15611864565b6004546001600160a01b0316610b6d5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610706565b610b76336118a7565b336000908152600a602052604090206003015415801590610bb25750600354336000908152600a6020526040902054610baf90426123d6565b10155b15610bc457610bbf611acc565b610bcc565b610bcc611be8565b336000908152600a6020526040902060020154600654600454610bfc916001600160a01b03908116911683611c4a565b600480546040517fed59344b00000000000000000000000000000000000000000000000000000000815233928101929092526024820183905260606044830152600060648301526001600160a01b03169063ed59344b90608401600060405180830381600087803b158015610c7057600080fd5b505af1158015610c84573d6000803e3d6000fd5b5050336000818152600a602090815260408083206002019290925560045491518681526001600160a01b0390921694503093507f49208a4dfe6cade3e0d45c2c52e5e68917971aeb5714c4b3151c74337e9e860f910160405180910390a450610ced6001600055565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d19816117d0565b6106a5611db9565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d4b816117d0565b60008211610d9b5760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a206e6f7420616c6c6f77207a65726f206c6f636b2074696d65006044820152606401610706565b600382905560405182815230907f2c2c43c64e937ae35257af782c222986dc5adb4f56dc0881594e79bf83658d8c906020015b60405180910390a25050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610e04816117d0565b610e0c611864565b6001600160a01b038316610e625760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a20726577617264657220666163746f7279206e6f2065786973746044820152606401610706565b6001600160a01b038416610eb85760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206f70657261746f722061646472657373000000006044820152606401610706565b6001600160a01b038216610f0e5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f2063757272656e63792061646472657373000000006044820152606401610706565b6040517f69ee74510000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015283811660248301523060448301528416906369ee7451906064016020604051808303816000875af1158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa191906123fc565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392831690811790915560405191841682529030907f6c409a36847a0a3870deae25f656f4300d45957d2643fc27faab145e19cfcf1b9060200160405180910390a36107506001600055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611044816117d0565b60008211801561105d5750683635c9adc5dea000008211155b6110cf5760405162461bcd60e51b815260206004820152603960248201527f556e6f52653a20696e76616c69642076616c75652c2073686f756c642062652060448201527f6265747765656e203020616e642031303030202a2031653138000000000000006064820152608401610706565b600982905560405182815230907f5cd67ede94fe3507535f0408ae70afe426103c9d5d51a909bd9dbd931e09875c90602001610dce565b61110e611827565b611116611864565b600354336000908152600a602052604090205461113390426123d6565b10156111815760405162461bcd60e51b815260206004820152601260248201527f556e6f52653a204c6f636b65642074696d6500000000000000000000000000006044820152606401610706565b61118a336118a7565b611192611acc565b610ced6001600055565b600082815260016020819052604090912001546111b8816117d0565b6107508383611a45565b6111ca611864565b611192611be8565b600754431115610ced57600b541561123b576000600754436111f491906123d6565b90506000600954826112069190612419565b600b5490915061121e670de0b6b3a764000083612419565b6112289190612430565b60085461123591906123e9565b60085550505b436007819055600b54600854604080519384526020840192909252908201527f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f7853906060015b60405180910390a1565b600654600160a01b900460ff16156112e45760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20706f6f6c206973206b696c6c656400000000000000000000006044820152606401610706565b6112ec611864565b600654611304906001600160a01b0316333084611df6565b61130e8133611f6e565b604051818152309033907f19db7bd0d4b3b497594ec1221d3c790b31e985baeb3c80851231d930db53578b9060200160405180910390a36106a56001600055565b60085460075460009190431180156113685750600b5415155b156113c35760006007544361137d91906123d6565b905060006009548261138f9190612419565b600b549091506113a7670de0b6b3a764000083612419565b6113b19190612430565b6008546113be91906123e9565b925050505b6001600160a01b0383166000908152600a602052604090206002810154600190910154670de0b6b3a76400006113f98484612419565b6114039190612430565b61140d91906123d6565b949350505050565b600654600160a01b900460ff161561146f5760405162461bcd60e51b815260206004820152601560248201527f556e6f52653a20706f6f6c206973206b696c6c656400000000000000000000006044820152606401610706565b7f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b611499816117d0565b6114a1611864565b600560009054906101000a90046001600160a01b03166001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151891906123fc565b6006546001600160a01b039081169116146115755760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a2063757272656e6379206e6f74206d61746368656400000000006044820152606401610706565b61157d6111d2565b60008060005b84518110156116c657600a60008683815181106115a2576115a2612452565b6020908102919091018101516001600160a01b031682528101919091526040016000206004015460ff16156116195760405162461bcd60e51b815260206004820152601a60248201527f556e6f52653a20726f6c6c6f766572206973206e6f74207365740000000000006044820152606401610706565b600061163d86838151811061163057611630612452565b602002602001015161206d565b905061164981856123e9565b9350600a600087848151811061166157611661612452565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600201548361169891906123e9565b92506116bd818784815181106116b0576116b0612452565b6020026020010151611f6e565b50600101611583565b506005546001600160a01b0316158015906116e15750600082115b1561177d576005546040517f0d97f74b00000000000000000000000000000000000000000000000000000000815230600482015260248101849052604481018390526001600160a01b0390911690630d97f74b906064016020604051808303816000875af1158015611757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177b9190612468565b505b306001600160a01b03167ff1ed90dcc96085d1d901cce2d0746c5c4f60aefb033128edea1426a6013f2a9585846040516117b8929190612481565b60405180910390a250506117cc6001600055565b5050565b6106a581336120fe565b6117e261216c565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001611280565b60025460ff1615610ced576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600054036118a0576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b6118af6111d2565b60006118ba8261206d565b6005549091506001600160a01b0316158015906118d75750600081115b1561196e576005546040517fc37232880000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529091169063c3723288906044016020604051808303816000875af1158015611948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196c9190612468565b505b6040518181526001600160a01b0383169033907f1501dd260e02a8825a24ab4e4875600b0093dd977e06b49bba75faaebe2836479060200160405180910390a35050565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16611a3d5760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a450600161066d565b50600061066d565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff1615611a3d5760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161066d565b336000908152600a60205260408120600281015460039091015460085491929091670de0b6b3a764000090611b019085612419565b611b0b9190612430565b600654909150611b25906001600160a01b03163384611c4a565b670de0b6b3a764000060085483611b3c9190612419565b611b469190612430565b611b5090826123d6565b336000908152600a6020526040902060010155611b6d82846123d6565b336000908152600a602052604081206002810192909255600390910155600c54611b989083906123d6565b600c55600b54611ba99083906123d6565b600b55604051828152309033907f082897d5a3548ef5742607ecedf0f1b9e4c355dcc81c81d5bfda47f2b49084a79060200160405180910390a3505050565b336000908152600a602052604081206003018054919055600c54611c0d9082906123d6565b600c55604051818152309033907faa15bd4bbb83b4c5e5bf28548326ffc2e718d46db45779599cf4d87b42fbd1049060200160405180910390a350565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691611cd491906124d7565b6000604051808303816000865af19150503d8060008114611d11576040519150601f19603f3d011682016040523d82523d6000602084013e611d16565b606091505b5091509150818015611d40575080511580611d40575080806020019051810190611d409190612506565b611db25760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610706565b5050505050565b611dc1611827565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861180f3390565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691611e8891906124d7565b6000604051808303816000865af19150503d8060008114611ec5576040519150601f19603f3d011682016040523d82523d6000602084013e611eca565b606091505b5091509150818015611ef4575080511580611ef4575080806020019051810190611ef49190612506565b611f665760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610706565b505050505050565b81600003611fbe5760405162461bcd60e51b815260206004820152601160248201527f556e6f52653a205a45524f2056616c75650000000000000000000000000000006044820152606401610706565b611fc66111d2565b670de0b6b3a764000060085483611fdd9190612419565b611fe79190612430565b6001600160a01b0382166000908152600a602052604090206001015461200d91906123e9565b6001600160a01b0382166000908152600a6020526040902060018101919091556002015461203c9083906123e9565b6001600160a01b0382166000908152600a6020526040902060020155600b546120669083906123e9565b600b555050565b6001600160a01b0381166000908152600a60205260408120600201546008548290670de0b6b3a7640000906120a29084612419565b6120ac9190612430565b6001600160a01b0385166000908152600a6020526040812060010154919250906120d690836123d6565b6001600160a01b039095166000908152600a6020526040902060010191909155509192915050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166117cc576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610706565b60025460ff16610ced576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000602082840312156121ba57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146121ea57600080fd5b9392505050565b6001600160a01b03811681146106a557600080fd5b8035612211816121f1565b919050565b60006020828403121561222857600080fd5b81356121ea816121f1565b60006020828403121561224557600080fd5b5035919050565b6000806040838503121561225f57600080fd5b823591506020830135612271816121f1565b809150509250929050565b60008060006060848603121561229157600080fd5b833561229c816121f1565b925060208401356122ac816121f1565b915060408401356122bc816121f1565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156122f057600080fd5b823567ffffffffffffffff8082111561230857600080fd5b818501915085601f83011261231c57600080fd5b81358181111561232e5761232e6122c7565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715612371576123716122c7565b60405291825284820192508381018501918883111561238f57600080fd5b938501935b828510156123b4576123a585612206565b84529385019392850192612394565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561066d5761066d6123c0565b8082018082111561066d5761066d6123c0565b60006020828403121561240e57600080fd5b81516121ea816121f1565b808202811582820484141761066d5761066d6123c0565b60008261244d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561247a57600080fd5b5051919050565b604080825283519082018190526000906020906060840190828701845b828110156124c35781516001600160a01b03168452928401929084019060010161249e565b505050602093909301939093525092915050565b6000825160005b818110156124f857602081860181015185830152016124de565b506000920191825250919050565b60006020828403121561251857600080fd5b815180151581146121ea57600080fdfea26469706673582212205014c8900cbae0f589b8d0d1a6019fbc5274b02fc4ec7abfbcaaa8224f6c86bd64736f6c63430008170033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220083bac0c25e6ddfa72d223540163aaec09d50d5e93bd670228cfd7795ffa224864736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}