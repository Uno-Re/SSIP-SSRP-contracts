{
  "address": "0xF3e1DfA1b3781eC6e25dFCC3B16A75835A95827c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_assertionId",
          "type": "uint256"
        }
      ],
      "name": "PolicyApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_assertionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "PolicyClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_assertionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "PolicyRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_COUNCIL_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAYOUT_REQUEST_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assertionId",
          "type": "uint256"
        }
      ],
      "name": "approvePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assertion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "ssip",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "payoutAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "insureAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assertionId",
          "type": "uint256"
        }
      ],
      "name": "claimPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "requestPolicyId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x117cf66366995793266b9806a671c2e9c0f0e26afb2ab9f8c5e7dbb171661028",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0xF3e1DfA1b3781eC6e25dFCC3B16A75835A95827c",
    "transactionIndex": 52,
    "gasUsed": "817755",
    "logsBloom": "0x
    "blockHash": "0x76de259d47d6ada82888398d287b1b236549e6066d2463604ad4ab8ccbb0402f",
    "transactionHash": "0x117cf66366995793266b9806a671c2e9c0f0e26afb2ab9f8c5e7dbb171661028",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 10399728,
        "transactionHash": "0x117cf66366995793266b9806a671c2e9c0f0e26afb2ab9f8c5e7dbb171661028",
        "address": "0xF3e1DfA1b3781eC6e25dFCC3B16A75835A95827c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x525f00f39e65e1c0c967e855509bb98a6cd037ce8b8a5f910c034f8ef97baa3b",
          "0x000000000000000000000000edffe0a06914c9d6083b4b099e5b935e9e84c9a5",
          "0x000000000000000000000000edffe0a06914c9d6083b4b099e5b935e9e84c9a5"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0x76de259d47d6ada82888398d287b1b236549e6066d2463604ad4ab8ccbb0402f"
      },
      {
        "transactionIndex": 52,
        "blockNumber": 10399728,
        "transactionHash": "0x117cf66366995793266b9806a671c2e9c0f0e26afb2ab9f8c5e7dbb171661028",
        "address": "0xF3e1DfA1b3781eC6e25dFCC3B16A75835A95827c",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xcf9f1810ef810bbcc840ce0a6f6dc13392aee445bf3c072ad1e452aae75474f2",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x525f00f39e65e1c0c967e855509bb98a6cd037ce8b8a5f910c034f8ef97baa3b"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0x76de259d47d6ada82888398d287b1b236549e6066d2463604ad4ab8ccbb0402f"
      },
      {
        "transactionIndex": 52,
        "blockNumber": 10399728,
        "transactionHash": "0x117cf66366995793266b9806a671c2e9c0f0e26afb2ab9f8c5e7dbb171661028",
        "address": "0xF3e1DfA1b3781eC6e25dFCC3B16A75835A95827c",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x525f00f39e65e1c0c967e855509bb98a6cd037ce8b8a5f910c034f8ef97baa3b",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x525f00f39e65e1c0c967e855509bb98a6cd037ce8b8a5f910c034f8ef97baa3b"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0x76de259d47d6ada82888398d287b1b236549e6066d2463604ad4ab8ccbb0402f"
      }
    ],
    "blockNumber": 10399728,
    "cumulativeGasUsed": "14718132",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5"
  ],
  "numDeployments": 1,
  "solcInputHash": "d2fc875e3afcbd9499ae3f5e7a33f9ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_assertionId\",\"type\":\"uint256\"}],\"name\":\"PolicyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_assertionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"PolicyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_assertionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"PolicyRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_COUNCIL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYOUT_REQUEST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assertionId\",\"type\":\"uint256\"}],\"name\":\"approvePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assertion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"ssip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"insureAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assertionId\",\"type\":\"uint256\"}],\"name\":\"claimPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestPolicyId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deprecated/ClaimProcessor.sol\":\"ClaimProcessor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/deprecated/ClaimProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interfaces/ISingleSidedInsurancePool.sol\\\";\\n\\ncontract ClaimProcessor is AccessControl {\\n\\n    bytes32 public constant GUARDIAN_COUNCIL_ROLE = keccak256(\\\"GUARDIAN_COUNCIL_ROLE\\\");\\n    bytes32 public constant PAYOUT_REQUEST_ROLE = keccak256(\\\"PAYOUT_REQUEST_ROLE\\\");\\n\\n    struct Claim {\\n        bool approved;\\n        bool settled;\\n        address ssip;\\n        uint256 policyId;\\n        address payoutAddress;\\n        uint256 insureAmount;\\n    }\\n\\n    uint256 public lastIndex;\\n\\n    mapping (uint256 => Claim) public assertion;\\n\\n    event PolicyRequested(address indexed _ssip, uint256 indexed _assertionId, uint256 indexed _policyId);\\n    event PolicyApproved(uint256 indexed _assertionId);\\n    event PolicyClaimed(address indexed _user, uint256 indexed _assertionId, address indexed _ssip);\\n\\n    constructor(address _governance) {\\n        _grantRole(GUARDIAN_COUNCIL_ROLE, _governance);\\n        _setRoleAdmin(PAYOUT_REQUEST_ROLE, GUARDIAN_COUNCIL_ROLE);\\n        _setRoleAdmin(GUARDIAN_COUNCIL_ROLE, GUARDIAN_COUNCIL_ROLE);\\n    }\\n\\n    function requestPolicyId(uint256 _policyId, address _ssip, address _to, uint256 _amount) external onlyRole(PAYOUT_REQUEST_ROLE) {\\n        uint256 _lastIndex = ++lastIndex;\\n        Claim memory _claim = assertion[_lastIndex];\\n        _claim.ssip = _ssip;\\n        _claim.policyId = _policyId;\\n        _claim.payoutAddress = _to;\\n        _claim.insureAmount = _amount;\\n        assertion[_lastIndex] = _claim;\\n        lastIndex++;\\n        emit PolicyRequested(_ssip, _lastIndex, _policyId);\\n    }\\n\\n    function approvePolicy(uint256 _assertionId) external onlyRole(GUARDIAN_COUNCIL_ROLE) {\\n        require(!assertion[_assertionId].approved, \\\"UnoRe: policy already approved\\\");\\n        assertion[_assertionId].approved = true;\\n        emit PolicyApproved(_assertionId);\\n    }\\n\\n    function claimPolicy(uint256 _assertionId) external {\\n        Claim storage _policy = assertion[_assertionId];\\n        require(_policy.approved && !_policy.settled, \\\"UnoRe: not approved or already settled\\\");\\n        _policy.settled = true;\\n        ISingleSidedInsurancePool(_policy.ssip).settlePayout(_policy.policyId, _policy.payoutAddress, _policy.insureAmount);\\n        \\n        emit PolicyClaimed(msg.sender, _assertionId, _policy.ssip);\\n    }\\n}\\n\",\"keccak256\":\"0x88f2773008a37c2e480e4cfee8507ea48ad334c8af3bb7360be75ec0cd7e403e\",\"license\":\"MIT\"},\"contracts/interfaces/ISingleSidedInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISingleSidedInsurancePool {\\n    function updatePool() external;\\n\\n    function enterInPool(uint256 _amount) external payable;\\n\\n    function leaveFromPoolInPending(uint256 _amount) external;\\n\\n    function leaveFromPending(uint256 _amount) external;\\n\\n    function harvest(address _to) external;\\n\\n    function lpTransfer(address _from, address _to, uint256 _amount) external;\\n\\n    function riskPool() external view returns (address);\\n\\n    function settlePayout(uint256 _policyId, address _payout, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa5bcd329319b9d62543c54bfd87773b27b1e276a884495ea0b8f133b411de6ce\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e64380380610e6483398101604081905261002f91610195565b610047600080516020610e448339815191528261009e565b506100807fcf9f1810ef810bbcc840ce0a6f6dc13392aee445bf3c072ad1e452aae75474f2600080516020610e4483398151915261014a565b610098600080516020610e448339815191528061014a565b506101c5565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610140576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556100f83390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610144565b5060005b92915050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000602082840312156101a757600080fd5b81516001600160a01b03811681146101be57600080fd5b9392505050565b610c70806101d46000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806362dd5fec1161008c578063b5714add11610066578063b5714add14610293578063d531d944146102a6578063d547741f146102cd578063f3f6f0d7146102e057600080fd5b806362dd5fec1461024157806391d1485414610254578063a217fddf1461028b57600080fd5b80632aea118d116100c85780632aea118d146101df5780632f2ff15d146101f457806336568abe14610207578063435bf32a1461021a57600080fd5b806301ffc9a7146100ef578063248a9ca3146101175780632a61f6b614610148575b600080fd5b6101026100fd366004610aed565b6102e9565b60405190151581526020015b60405180910390f35b61013a610125366004610b36565b60009081526020819052604090206001015490565b60405190815260200161010e565b6101a1610156366004610b36565b6002602081905260009182526040909120805460018201549282015460039092015460ff808316946101008404909116936001600160a01b0362010000909404841693919291169086565b60408051961515875294151560208701526001600160a01b0393841694860194909452606085019190915216608083015260a082015260c00161010e565b6101f26101ed366004610b36565b610382565b005b6101f2610202366004610b6b565b610540565b6101f2610215366004610b6b565b61056b565b61013a7fcf9f1810ef810bbcc840ce0a6f6dc13392aee445bf3c072ad1e452aae75474f281565b6101f261024f366004610b36565b6105bc565b610102610262366004610b6b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61013a600081565b6101f26102a1366004610b97565b6106a3565b61013a7f525f00f39e65e1c0c967e855509bb98a6cd037ce8b8a5f910c034f8ef97baa3b81565b6101f26102db366004610b6b565b61091e565b61013a60015481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061037c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000818152600260205260409020805460ff1680156103a857508054610100900460ff16155b610439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f556e6f52653a206e6f7420617070726f766564206f7220616c7265616479207360448201527f6574746c6564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100178082556001820154600283015460038401546040517ffe30e7e600000000000000000000000000000000000000000000000000000000815260048101939093526001600160a01b0391821660248401526044830152620100009092049091169063fe30e7e690606401600060405180830381600087803b1580156104e457600080fd5b505af11580156104f8573d6000803e3d6000fd5b50508254604051620100009091046001600160a01b0316925084915033907ffabd90836bc2ca590a372847681c3eac3d4d2d69034f2636eb5ec2a31b28c2ad90600090a45050565b60008281526020819052604090206001015461055b81610943565b6105658383610950565b50505050565b6001600160a01b03811633146105ad576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105b782826109fa565b505050565b7f525f00f39e65e1c0c967e855509bb98a6cd037ce8b8a5f910c034f8ef97baa3b6105e681610943565b60008281526002602052604090205460ff161561065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e6f52653a20706f6c69637920616c726561647920617070726f76656400006044820152606401610430565b600082815260026020526040808220805460ff191660011790555183917f6fe99ad3a609f3d0a6942a00689c9a4357619ff730f68e4498c42f4c71d7aed391a25050565b7fcf9f1810ef810bbcc840ce0a6f6dc13392aee445bf3c072ad1e452aae75474f26106cd81610943565b60006001600081546106de90610bdb565b91905081905590506000600260008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160038201548152505090508581604001906001600160a01b031690816001600160a01b031681525050868160600181815250508481608001906001600160a01b031690816001600160a01b031681525050838160a0018181525050806002600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816001015560808201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160030155905050600160008154809291906108d890610bdb565b91905055508682876001600160a01b03167fcda702d9f4063d5818ea55a812bc2bd4832f802b1d3127026ac60c2ec4f9547b60405160405180910390a450505050505050565b60008281526020819052604090206001015461093981610943565b61056583836109fa565b61094d8133610a7d565b50565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166109f2576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556109aa3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161037c565b50600061037c565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16156109f2576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161037c565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610ae9576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610430565b5050565b600060208284031215610aff57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610b2f57600080fd5b9392505050565b600060208284031215610b4857600080fd5b5035919050565b80356001600160a01b0381168114610b6657600080fd5b919050565b60008060408385031215610b7e57600080fd5b82359150610b8e60208401610b4f565b90509250929050565b60008060008060808587031215610bad57600080fd5b84359350610bbd60208601610b4f565b9250610bcb60408601610b4f565b9396929550929360600135925050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c33577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212201a66f1beb2d3081f63eea443ad65549c07cd276391b1c07ee604b7beb4d7c07464736f6c63430008170033525f00f39e65e1c0c967e855509bb98a6cd037ce8b8a5f910c034f8ef97baa3b",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806362dd5fec1161008c578063b5714add11610066578063b5714add14610293578063d531d944146102a6578063d547741f146102cd578063f3f6f0d7146102e057600080fd5b806362dd5fec1461024157806391d1485414610254578063a217fddf1461028b57600080fd5b80632aea118d116100c85780632aea118d146101df5780632f2ff15d146101f457806336568abe14610207578063435bf32a1461021a57600080fd5b806301ffc9a7146100ef578063248a9ca3146101175780632a61f6b614610148575b600080fd5b6101026100fd366004610aed565b6102e9565b60405190151581526020015b60405180910390f35b61013a610125366004610b36565b60009081526020819052604090206001015490565b60405190815260200161010e565b6101a1610156366004610b36565b6002602081905260009182526040909120805460018201549282015460039092015460ff808316946101008404909116936001600160a01b0362010000909404841693919291169086565b60408051961515875294151560208701526001600160a01b0393841694860194909452606085019190915216608083015260a082015260c00161010e565b6101f26101ed366004610b36565b610382565b005b6101f2610202366004610b6b565b610540565b6101f2610215366004610b6b565b61056b565b61013a7fcf9f1810ef810bbcc840ce0a6f6dc13392aee445bf3c072ad1e452aae75474f281565b6101f261024f366004610b36565b6105bc565b610102610262366004610b6b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61013a600081565b6101f26102a1366004610b97565b6106a3565b61013a7f525f00f39e65e1c0c967e855509bb98a6cd037ce8b8a5f910c034f8ef97baa3b81565b6101f26102db366004610b6b565b61091e565b61013a60015481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061037c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000818152600260205260409020805460ff1680156103a857508054610100900460ff16155b610439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f556e6f52653a206e6f7420617070726f766564206f7220616c7265616479207360448201527f6574746c6564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100178082556001820154600283015460038401546040517ffe30e7e600000000000000000000000000000000000000000000000000000000815260048101939093526001600160a01b0391821660248401526044830152620100009092049091169063fe30e7e690606401600060405180830381600087803b1580156104e457600080fd5b505af11580156104f8573d6000803e3d6000fd5b50508254604051620100009091046001600160a01b0316925084915033907ffabd90836bc2ca590a372847681c3eac3d4d2d69034f2636eb5ec2a31b28c2ad90600090a45050565b60008281526020819052604090206001015461055b81610943565b6105658383610950565b50505050565b6001600160a01b03811633146105ad576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105b782826109fa565b505050565b7f525f00f39e65e1c0c967e855509bb98a6cd037ce8b8a5f910c034f8ef97baa3b6105e681610943565b60008281526002602052604090205460ff161561065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e6f52653a20706f6c69637920616c726561647920617070726f76656400006044820152606401610430565b600082815260026020526040808220805460ff191660011790555183917f6fe99ad3a609f3d0a6942a00689c9a4357619ff730f68e4498c42f4c71d7aed391a25050565b7fcf9f1810ef810bbcc840ce0a6f6dc13392aee445bf3c072ad1e452aae75474f26106cd81610943565b60006001600081546106de90610bdb565b91905081905590506000600260008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160038201548152505090508581604001906001600160a01b031690816001600160a01b031681525050868160600181815250508481608001906001600160a01b031690816001600160a01b031681525050838160a0018181525050806002600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816001015560808201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160030155905050600160008154809291906108d890610bdb565b91905055508682876001600160a01b03167fcda702d9f4063d5818ea55a812bc2bd4832f802b1d3127026ac60c2ec4f9547b60405160405180910390a450505050505050565b60008281526020819052604090206001015461093981610943565b61056583836109fa565b61094d8133610a7d565b50565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166109f2576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556109aa3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161037c565b50600061037c565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16156109f2576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161037c565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610ae9576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610430565b5050565b600060208284031215610aff57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610b2f57600080fd5b9392505050565b600060208284031215610b4857600080fd5b5035919050565b80356001600160a01b0381168114610b6657600080fd5b919050565b60008060408385031215610b7e57600080fd5b82359150610b8e60208401610b4f565b90509250929050565b60008060008060808587031215610bad57600080fd5b84359350610bbd60208601610b4f565b9250610bcb60408601610b4f565b9396929550929360600135925050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c33577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212201a66f1beb2d3081f63eea443ad65549c07cd276391b1c07ee604b7beb4d7c07464736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1034,
        "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1029_storage)"
      },
      {
        "astId": 24650,
        "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
        "label": "lastIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 24655,
        "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
        "label": "assertion",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Claim)24648_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1029_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1029_storage"
      },
      "t_mapping(t_uint256,t_struct(Claim)24648_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ClaimProcessor.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)24648_storage"
      },
      "t_struct(Claim)24648_storage": {
        "encoding": "inplace",
        "label": "struct ClaimProcessor.Claim",
        "members": [
          {
            "astId": 24637,
            "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
            "label": "approved",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 24639,
            "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
            "label": "settled",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 24641,
            "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
            "label": "ssip",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 24643,
            "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
            "label": "policyId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24645,
            "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
            "label": "payoutAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 24647,
            "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
            "label": "insureAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)1029_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1026,
            "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1028,
            "contract": "contracts/deprecated/ClaimProcessor.sol:ClaimProcessor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}