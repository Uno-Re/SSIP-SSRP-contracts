{
  "address": "0x41a946dA72dD86adE97092AdF36e4d69C9d133E4",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_scr",
          "type": "uint256"
        }
      ],
      "name": "LogAddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "LogAddPoolWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogMarkToClaimPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_salesPolicy",
          "type": "address"
        }
      ],
      "name": "LogRemovePolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "LogRemovePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "LogRemovePoolWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "LogSetExchangeAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_MCR",
          "type": "uint256"
        }
      ],
      "name": "LogSetMCR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_MLR",
          "type": "uint256"
        }
      ],
      "name": "LogSetMLR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "LogSetOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_salesPolicy",
          "type": "address"
        }
      ],
      "name": "LogSetPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_capitalAgent",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_SCR",
          "type": "uint256"
        }
      ],
      "name": "LogSetSCR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "LogSetSalesPolicyFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyUtilized",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalUtilizedAmount",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyCoverage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyTokenId",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePolicyExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_poolCapital",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCapital",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePoolCapital",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MLR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isFinished",
          "type": "bool"
        }
      ],
      "name": "SSIPPolicyCaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "SSIPWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_scr",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_scr",
          "type": "uint256"
        }
      ],
      "name": "addPoolByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "addPoolWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "checkCapitalByMCR",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coverageAmount",
          "type": "uint256"
        }
      ],
      "name": "checkCoverageByMLR",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolicyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDC_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "markToClaimPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "policy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "utilizedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coverageAmount",
          "type": "uint256"
        }
      ],
      "name": "policySale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCapital",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "SCR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolWhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssip",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "removePoolWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salesPolicyFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MCR",
          "type": "uint256"
        }
      ],
      "name": "setMCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MLR",
          "type": "uint256"
        }
      ],
      "name": "setMLR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        }
      ],
      "name": "setPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policy",
          "type": "address"
        }
      ],
      "name": "setPolicyByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_SCR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setSCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setSalesPolicyFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCapitalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUtilizedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "updatePolicyStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf57576aedfd5f31400d8faa90dd890d032c6af795fce8130d19ce08739436239",
  "receipt": {
    "to": null,
    "from": "0xedFFe0a06914c9D6083B4B099e5b935E9E84c9a5",
    "contractAddress": "0x41a946dA72dD86adE97092AdF36e4d69C9d133E4",
    "transactionIndex": 14,
    "gasUsed": "3036392",
    "logsBloom": "0x
    "blockHash": "0xa812fc94688c29663643b8efdcff73881a987a85f80a76bdce93ca062c6154d8",
    "transactionHash": "0xf57576aedfd5f31400d8faa90dd890d032c6af795fce8130d19ce08739436239",
    "logs": [],
    "blockNumber": 10399717,
    "cumulativeGasUsed": "3726657",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7662f64cbd82cdaa36d09bbd919e3a74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_scr\",\"type\":\"uint256\"}],\"name\":\"LogAddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"LogAddPoolWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogMarkToClaimPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_salesPolicy\",\"type\":\"address\"}],\"name\":\"LogRemovePolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"LogRemovePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"LogRemovePoolWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"LogSetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_MCR\",\"type\":\"uint256\"}],\"name\":\"LogSetMCR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_MLR\",\"type\":\"uint256\"}],\"name\":\"LogSetMLR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"LogSetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_salesPolicy\",\"type\":\"address\"}],\"name\":\"LogSetPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_capitalAgent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SCR\",\"type\":\"uint256\"}],\"name\":\"LogSetSCR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"LogSetSalesPolicyFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyUtilized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalUtilizedAmount\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyCoverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyTokenId\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolCapital\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCapital\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePoolCapital\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MLR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFinished\",\"type\":\"bool\"}],\"name\":\"SSIPPolicyCaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"SSIPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scr\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scr\",\"type\":\"uint256\"}],\"name\":\"addPoolByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"addPoolWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"checkCapitalByMCR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"checkCoverageByMLR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"markToClaimPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"utilizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"policySale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCapital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SCR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssip\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"removePoolWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesPolicyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MCR\",\"type\":\"uint256\"}],\"name\":\"setMCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MLR\",\"type\":\"uint256\"}],\"name\":\"setMLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"setPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"setPolicyByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SCR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setSCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setSalesPolicyFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCapitalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUtilizedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"updatePolicyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CapitalAgent.sol\":\"CapitalAgent\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/CapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"./interfaces/ISalesPolicy.sol\\\";\\nimport \\\"./interfaces/IExchangeAgent.sol\\\";\\nimport \\\"./interfaces/ICapitalAgent.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\n\\ncontract CapitalAgent is ICapitalAgent, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    address public exchangeAgent;\\n    address public salesPolicyFactory;\\n    address public usdcToken;\\n    address public operator;\\n\\n    struct PoolInfo {\\n        uint256 totalCapital;\\n        uint256 SCR;\\n        address currency;\\n        bool exist;\\n    }\\n\\n    struct PolicyInfo {\\n        address policy;\\n        uint256 utilizedAmount;\\n        bool exist;\\n    }\\n\\n    mapping(address => PoolInfo) public poolInfo;\\n\\n    address[] private currencyList;\\n    mapping(address => bool) private existedCurrencies;\\n    mapping(address => uint256) private totalCapitalStakedByCurrency;\\n\\n    PolicyInfo public policyInfo;\\n\\n    uint256 public totalUtilizedAmount;\\n\\n    uint256 public MCR;\\n    uint256 public MLR;\\n\\n    uint256 public constant CALC_PRECISION = 1e18;\\n\\n    mapping(address => bool) public poolWhiteList;\\n\\n    event LogAddPool(address indexed _ssip, address _currency, uint256 _scr);\\n    event LogRemovePool(address indexed _ssip);\\n    event LogSetPolicy(address indexed _salesPolicy);\\n    event LogRemovePolicy(address indexed _salesPolicy);\\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\\n    event LogUpdatePolicyCoverage(\\n        address indexed _policy,\\n        uint256 _amount,\\n        uint256 _policyUtilized,\\n        uint256 _totalUtilizedAmount\\n    );\\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\\n    event LogSetMCR(address indexed _owner, address indexed _capitalAgent, uint256 _MCR);\\n    event LogSetMLR(address indexed _owner, address indexed _capitalAgent, uint256 _MLR);\\n    event LogSetSCR(address indexed _owner, address indexed _capitalAgent, address indexed _pool, uint256 _SCR);\\n    event LogSetExchangeAgent(address indexed _owner, address indexed _capitalAgent, address _exchangeAgent);\\n    event LogSetSalesPolicyFactory(address indexed _factory);\\n    event LogAddPoolWhiteList(address indexed _pool);\\n    event LogRemovePoolWhiteList(address indexed _pool);\\n    event LogSetOperator(address indexed _operator);\\n\\n    function initialize(\\n        address _exchangeAgent,\\n        address _USDC_TOKEN,\\n        address _multiSigWallet,\\n        address _operator\\n    ) external initializer {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero exchangeAgent address\\\");\\n        require(_USDC_TOKEN != address(0), \\\"UnoRe: zero USDC address\\\");\\n        require(_multiSigWallet != address(0), \\\"UnoRe: zero multisigwallet address\\\");\\n        require(IGnosisSafe(_multiSigWallet).getOwners().length > 3, \\\"UnoRe: more than three owners requied\\\");\\n        require(IGnosisSafe(_multiSigWallet).getThreshold() > 1, \\\"UnoRe: more than one owners requied to verify\\\");\\n        exchangeAgent = _exchangeAgent;\\n        usdcToken = _USDC_TOKEN;\\n        operator = _operator;\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n    }\\n\\n    modifier onlyPoolWhiteList() {\\n        require(poolWhiteList[msg.sender], \\\"UnoRe: Capital Agent Forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"UnoRe: Capital Agent Forbidden\\\");\\n        _;\\n    }\\n\\n    function getPolicyInfo() external view returns (address, uint256, bool) {\\n        PolicyInfo memory _policy = policyInfo;\\n        return (_policy.policy, _policy.utilizedAmount, _policy.exist);\\n    }\\n\\n    function setSalesPolicyFactory(address _factory) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_factory != address(0), \\\"UnoRe: zero factory address\\\");\\n        salesPolicyFactory = _factory;\\n        emit LogSetSalesPolicyFactory(_factory);\\n    }\\n\\n    function setOperator(address _operator) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_operator != address(0), \\\"UnoRe: zero operator address\\\");\\n        operator = _operator;\\n        emit LogSetOperator(_operator);\\n    }\\n\\n    function addPoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_pool != address(0), \\\"UnoRe: zero pool address\\\");\\n        require(!poolWhiteList[_pool], \\\"UnoRe: white list already\\\");\\n        poolWhiteList[_pool] = true;\\n        emit LogAddPoolWhiteList(_pool);\\n    }\\n\\n    function removePoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(poolWhiteList[_pool], \\\"UnoRe: no white list\\\");\\n        poolWhiteList[_pool] = false;\\n        emit LogRemovePoolWhiteList(_pool);\\n    }\\n\\n    function totalCapitalStaked() public view returns(uint256) {\\n        return _getTotalCapitalStakedInUSDC();\\n    }\\n\\n    function addPool(address _ssip, address _currency, uint256 _scr) external override onlyPoolWhiteList {\\n        require(_ssip != address(0), \\\"UnoRe: zero address\\\");\\n        require(!poolInfo[_ssip].exist, \\\"UnoRe: already exist pool\\\");\\n\\n        if (existedCurrencies[_currency] == false) {\\n            existedCurrencies[_currency] = true;\\n            currencyList.push(_currency);\\n        }\\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\\n\\n        emit LogAddPool(_ssip, _currency, _scr);\\n    }\\n\\n    function addPoolByAdmin(address _ssip, address _currency, uint256 _scr) external onlyRole(ADMIN_ROLE) {\\n        require(_ssip != address(0), \\\"UnoRe: zero address\\\");\\n        require(!poolInfo[_ssip].exist, \\\"UnoRe: already exist pool\\\");\\n\\n        if (existedCurrencies[_currency] == false) {\\n            existedCurrencies[_currency] = true;\\n            currencyList.push(_currency);\\n        }\\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\\n\\n        emit LogAddPool(_ssip, _currency, _scr);\\n    }\\n\\n    function removePool(address _ssip) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(poolInfo[_ssip].exist, \\\"UnoRe: no exit pool\\\");\\n        if (poolInfo[_ssip].totalCapital > 0) {\\n            address currency = poolInfo[_ssip].currency;\\n            totalCapitalStakedByCurrency[currency] = totalCapitalStakedByCurrency[currency] - poolInfo[_ssip].totalCapital;\\n        }\\n        delete poolInfo[_ssip];\\n        emit LogRemovePool(_ssip);\\n    }\\n\\n    function setPolicy(address _policy) external override nonReentrant {\\n        require(!policyInfo.exist, \\\"UnoRe: Policy exists\\\");\\n        require(salesPolicyFactory == msg.sender, \\\"UnoRe: only salesPolicyFactory can call\\\");\\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\\n\\n        emit LogSetPolicy(_policy);\\n    }\\n\\n    function setPolicyByAdmin(address _policy) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_policy != address(0), \\\"UnoRe: zero address\\\");\\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\\n\\n        emit LogSetPolicy(_policy);\\n    }\\n\\n    function removePolicy() external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(policyInfo.exist, \\\"UnoRe: no exit pool\\\");\\n        totalUtilizedAmount = 0;\\n        address _policy = policyInfo.policy;\\n        policyInfo.policy = address(0);\\n        policyInfo.exist = false;\\n        policyInfo.utilizedAmount = 0;\\n        emit LogRemovePolicy(_policy);\\n    }\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        require(_checkCapitalByMCRAndSCR(msg.sender, _withdrawAmount), \\\"UnoRe: minimum capital underflow\\\");\\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\\n    }\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isFinished) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\\n        if (_isFinished) {\\n            _markToClaimPolicy(_policyId);\\n        }\\n    }\\n\\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\\n        require(poolInfo[msg.sender].exist, \\\"UnoRe: no exist ssip\\\");\\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\\n    }\\n\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view override returns (bool) {\\n        return _checkCapitalByMCRAndSCR(_pool, _withdrawAmount);\\n    }\\n\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view override returns (bool) {\\n        return _checkCoverageByMLR(_coverageAmount);\\n    }\\n\\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\\n        require(msg.sender == policyInfo.policy, \\\"UnoRe: only salesPolicy can call\\\");\\n        require(policyInfo.exist, \\\"UnoRe: no exist policy\\\");\\n        require(_checkCoverageByMLR(_coverageAmount), \\\"UnoRe: maximum leverage overflow\\\");\\n        _updatePolicyCoverage(_coverageAmount, true);\\n    }\\n\\n    function updatePolicyStatus(uint256 _policyId) external override nonReentrant {\\n        require(policyInfo.policy != address(0), \\\"UnoRe: no exist salesPolicy\\\");\\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt, , ) = ISalesPolicy(policyInfo.policy)\\n            .getPolicyData(_policyId);\\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\\n        if (isExpired) {\\n            _updatePolicyCoverage(_coverageAmount, false);\\n            ISalesPolicy(policyInfo.policy).updatePolicyExpired(_policyId);\\n            emit LogUpdatePolicyExpired(policyInfo.policy, _policyId);\\n        }\\n    }\\n\\n    function markToClaimPolicy(uint256 _policyId) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        _markToClaimPolicy(_policyId);\\n    }\\n\\n    function _markToClaimPolicy(uint256 _policyId) private {\\n        require(policyInfo.policy != address(0), \\\"UnoRe: no exist salesPolicy\\\");\\n        (uint256 _coverageAmount, , , , ) = ISalesPolicy(policyInfo.policy).getPolicyData(_policyId);\\n        _updatePolicyCoverage(_coverageAmount, false);\\n        ISalesPolicy(policyInfo.policy).markToClaim(_policyId);\\n        emit LogMarkToClaimPolicy(policyInfo.policy, _policyId);\\n    }\\n\\n    function _updatePoolCapital(address _pool, uint256 _amount, bool isAdd) private {\\n        if (!isAdd) {\\n            require(poolInfo[_pool].totalCapital >= _amount, \\\"UnoRe: pool capital overflow\\\");\\n        }\\n        address currency = poolInfo[_pool].currency;\\n        poolInfo[_pool].totalCapital = isAdd ? poolInfo[_pool].totalCapital + _amount : poolInfo[_pool].totalCapital - _amount;\\n        totalCapitalStakedByCurrency[currency] = isAdd ? totalCapitalStakedByCurrency[currency] + _amount : totalCapitalStakedByCurrency[currency] - _amount;\\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStakedByCurrency[currency]);\\n    }\\n\\n    function _updatePolicyCoverage(uint256 _amount, bool isAdd) private {\\n        if (!isAdd) {\\n            require(policyInfo.utilizedAmount >= _amount, \\\"UnoRe: policy coverage overflow\\\");\\n        }\\n        policyInfo.utilizedAmount = isAdd ? policyInfo.utilizedAmount + _amount : policyInfo.utilizedAmount - _amount;\\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\\n        emit LogUpdatePolicyCoverage(policyInfo.policy, _amount, policyInfo.utilizedAmount, totalUtilizedAmount);\\n    }\\n\\n    function _checkCapitalByMCRAndSCR(address _pool, uint256 _withdrawAmount) private view returns (bool) {\\n        address currency = poolInfo[_pool].currency;\\n        uint256 totalCapitalStakedInUSDC;\\n        uint256 mcrInUSDC;\\n        uint256 scrInUSDC;\\n\\n        totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\\n        mcrInUSDC = _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency] - _withdrawAmount);\\n        scrInUSDC = _convertTokenToUSDC(currency, poolInfo[_pool].totalCapital - _withdrawAmount);\\n\\n        bool isMCRPass = mcrInUSDC >= (totalCapitalStakedInUSDC * MCR) / CALC_PRECISION;\\n        bool isSCRPass = scrInUSDC >= poolInfo[_pool].SCR;\\n\\n        return isMCRPass && isSCRPass;\\n    }\\n\\n    function _convertTokenToUSDC(address _currency, uint256 _amount) private view returns (uint256) {\\n        uint256 tokenInUSDC;\\n        if (_currency == usdcToken) {\\n            tokenInUSDC = _amount;\\n        } else {\\n            tokenInUSDC = _currency != address(0)\\n                ? IExchangeAgent(exchangeAgent).getNeededTokenAmount(_currency, usdcToken, _amount)\\n                : IExchangeAgent(exchangeAgent).getTokenAmountForETH(usdcToken, _amount);\\n        }\\n\\n        return tokenInUSDC;\\n    }\\n\\n    function _getTotalCapitalStakedInUSDC() private view returns (uint256) {\\n        uint256 totalCapitalStakedInUSDC;\\n        for (uint256 i = 0; i < currencyList.length; i++) {\\n            address currency = currencyList[i];\\n            totalCapitalStakedInUSDC = totalCapitalStakedInUSDC + _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency]);\\n        }\\n\\n        return totalCapitalStakedInUSDC;\\n    }\\n\\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\\n        uint256 totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStakedInUSDC * MLR) / CALC_PRECISION;\\n    }\\n\\n    function setMCR(uint256 _MCR) external onlyOperator nonReentrant {\\n        require(_MCR > 0, \\\"UnoRe: zero mcr\\\");\\n        MCR = _MCR;\\n        emit LogSetMCR(msg.sender, address(this), _MCR);\\n    }\\n\\n    function setMLR(uint256 _MLR) external onlyOperator nonReentrant {\\n        require(_MLR > 0, \\\"UnoRe: zero mlr\\\");\\n        MLR = _MLR;\\n        emit LogSetMLR(msg.sender, address(this), _MLR);\\n    }\\n\\n    function setSCR(uint256 _SCR, address _pool) external onlyOperator nonReentrant {\\n        require(_SCR > 0, \\\"UnoRe: zero scr\\\");\\n        poolInfo[_pool].SCR = _SCR;\\n        emit LogSetSCR(msg.sender, address(this), _pool, _SCR);\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(_exchangeAgent != address(0), \\\"UnoRe: zero address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit LogSetExchangeAgent(msg.sender, address(this), _exchangeAgent);\\n    }\\n}\\n\",\"keccak256\":\"0xa18cab03e1b145e326d6ed6149a64d45f227511d68229cc2a8e97a3fbdd95bb0\",\"license\":\"MIT\"},\"contracts/interfaces/ICapitalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface ICapitalAgent {\\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\\n\\n    function setPolicy(address _policy) external;\\n\\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\\n\\n    function SSIPStaking(uint256 _stakingAmount) external;\\n\\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isFinished) external;\\n\\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\\n\\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\\n\\n    function policySale(uint256 _coverageAmount) external;\\n\\n    function updatePolicyStatus(uint256 _policyId) external;\\n\\n    function getPolicyInfo() external returns(address, uint256, bool);\\n}\\n\",\"keccak256\":\"0xc9eeaa12b53a52a3e23ff3bb09a308b0e428345e033bb47b417b903f4183eb4f\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\ninterface IExchangeAgent {\\n    function usdcToken() external view returns (address);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\\n\\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\\n\\n    function getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) external view returns (uint256);\\n\\n    function convertForToken(address _token0, address _token1, uint256 _token0Amount) external returns (uint256);\\n\\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3a0b6e72d0cac4ea4a6044538673f2cac3568a1bd9f2b3359979065b8486472\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.23;\\n\\ninterface IGnosisSafe {\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getThreshold() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa958d03be51c456e26205695b66fd76ea243c91c24ca549360074b4782575e4d\",\"license\":\"MIT\"},\"contracts/interfaces/ISalesPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.23;\\n\\ninterface ISalesPolicy {\\n    function setPremiumPool(address _premiumPool) external;\\n\\n    function setExchangeAgent(address _exchangeAgent) external;\\n\\n    function setCapitalAgent(address _capitalAgent) external;\\n\\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\\n\\n    function approvePremium(address _premiumCurrency) external;\\n\\n    function setProtocolURI(string memory newURI) external;\\n\\n    function setSigner(address _signer) external;\\n\\n    function updatePolicyExpired(uint256 _policyId) external;\\n\\n    function markToClaim(uint256 _policyId) external;\\n\\n    function allPoliciesLength() external view returns (uint256);\\n\\n    function killPool() external;\\n\\n    function revivePool() external;\\n\\n    function getPolicyData(uint256 _policyId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x2866e770aad9425cd7fffd3da31e1225b9c391df41aabff8e84583e6df58f598\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613622806100206000396000f3fe608060405234801561001057600080fd5b50600436106102f45760003560e01c80637e29d6c211610191578063a88d2f7a116100e3578063d4688a4511610097578063d9203b9111610071578063d9203b911461074f578063f8c8765e14610762578063fb6cb8471461077557600080fd5b8063d4688a4514610720578063d547741f14610729578063d8c5c8631461073c57600080fd5b8063be22041b116100c8578063be22041b146106e7578063c139b04f146106fa578063c3ea3a281461070d57600080fd5b8063a88d2f7a146106c1578063b3ab15fb146106d457600080fd5b806392ff38ec11610145578063a0931af21161011f578063a0931af214610693578063a217fddf146106a6578063a65888fb146106ae57600080fd5b806392ff38ec146105f8578063974e4d85146106005780639a7b5f111461061e57600080fd5b80638bb70831116101765780638bb70831146105845780638be5a39f1461058d57806391d14854146105a057600080fd5b80637e29d6c21461055e578063869bd44a1461057157600080fd5b80633b7d09461161024a5780635b44d576116101fe57806375b238fc116101d857806375b238fc1461051b578063794e5724146105425780637d4163d31461054b57600080fd5b80635b44d576146104ed57806365cb3a8314610500578063706c2d1b1461050857600080fd5b80634a3a3d141161022f5780634a3a3d14146104b85780634dc70bac146104cb578063570ca735146104da57600080fd5b80633b7d0946146104465780633fecfbf21461045957600080fd5b8063248a9ca3116102ac57806336568abe1161028657806336568abe1461040d57806336760a1c14610420578063385a128f1461043357600080fd5b8063248a9ca31461038757806325042fe9146103d75780632f2ff15d146103fa57600080fd5b806311eac855116102dd57806311eac8551461033657806318a00d8e146103615780631dfa426d1461037457600080fd5b806301ffc9a7146102f95780630d75753114610321575b600080fd5b61030c610307366004613239565b610788565b60405190151581526020015b60405180910390f35b61033461032f366004613290565b610821565b005b600254610349906001600160a01b031681565b6040516001600160a01b039091168152602001610318565b61033461036f3660046132c0565b610961565b6103346103823660046132c0565b610a74565b6103c96103953660046132dd565b60009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b604051908152602001610318565b61030c6103e53660046132c0565b600e6020526000908152604090205460ff1681565b610334610408366004613290565b610ba5565b61033461041b366004613290565b610bef565b600154610349906001600160a01b031681565b6103346104413660046132dd565b610c40565b6103346104543660046132c0565b610d5b565b610491604080516060810182526008546001600160a01b031680825260095460208301819052600a5460ff1615159290930182905292565b604080516001600160a01b0390941684526020840192909252151590820152606001610318565b6103346104c63660046132c0565b610f0e565b6103c9670de0b6b3a764000081565b600354610349906001600160a01b031681565b6103346104fb3660046132dd565b611017565b610334611113565b6103346105163660046132f6565b61122b565b6103c97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6103c9600c5481565b6103346105593660046132c0565b61147f565b61033461056c3660046132f6565b611603565b61033461057f3660046132dd565b61188a565b6103c9600d5481565b61033461059b3660046132dd565b6118ee565b61030c6105ae366004613290565b60009182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6103c961196b565b600854600954600a54610491926001600160a01b0316919060ff1683565b61066261062c3660046132c0565b6004602052600090815260409020805460018201546002909201549091906001600160a01b03811690600160a01b900460ff1684565b604051610318949392919093845260208401929092526001600160a01b031660408301521515606082015260800190565b6103346106a13660046132dd565b61197a565b6103c9600081565b6103346106bc3660046132c0565b611a8e565b6103346106cf3660046132c0565b611bf1565b6103346106e23660046132c0565b611cf6565b6103346106f53660046132dd565b611dfb565b61030c610708366004613337565b611ff8565b61030c61071b3660046132dd565b61200b565b6103c9600b5481565b610334610737366004613290565b612016565b61033461074a3660046132dd565b61205a565b600054610349906001600160a01b031681565b610334610770366004613363565b612145565b6103346107833660046133cd565b612643565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061081b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6003546001600160a01b031633146108805760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e000060448201526064015b60405180910390fd5b6108886126f8565b600082116108d85760405162461bcd60e51b815260206004820152600f60248201527f556e6f52653a207a65726f2073637200000000000000000000000000000000006044820152606401610877565b6001600160a01b0381166000818152600460205260409081902060010184905551309033907fade0e16d2bd0d685eef1e5355dc835692faac192ef62225adb31cd0c0b99c8a89061092c9087815260200190565b60405180910390a461095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561098b8161279f565b6109936126f8565b6001600160a01b0382166109e95760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610877565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155604051908152309033907f28e0ff29ad991f2655c48b0b095a69abbf13aec6c8bc181dd526dbb3f8c9d0b99060200160405180910390a361095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610a9e8161279f565b610aa66126f8565b6001600160a01b038216610afc5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610877565b604080516060810182526001600160a01b03841680825260006020830181905260019284018390526008805473ffffffffffffffffffffffffffffffffffffffff1916831790556009819055600a805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154610bdf8161279f565b610be983836127a9565b50505050565b6001600160a01b0381163314610c31576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c3b8282612878565b505050565b6003546001600160a01b03163314610c9a5760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e00006044820152606401610877565b610ca26126f8565b60008111610cf25760405162461bcd60e51b815260206004820152600f60248201527f556e6f52653a207a65726f206d637200000000000000000000000000000000006044820152606401610877565b600c819055604051818152309033907fa55ee73f4232498ac4c250ffa77f4337343a213648a66147d8848f6660fa3fdf906020015b60405180910390a3610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d858161279f565b610d8d6126f8565b6001600160a01b038216600090815260046020526040902060020154600160a01b900460ff16610dff5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a206e6f206578697420706f6f6c000000000000000000000000006044820152606401610877565b6001600160a01b03821660009081526004602052604090205415610e74576001600160a01b0380831660009081526004602090815260408083206002810154905494168084526007909252909120549091610e599161341c565b6001600160a01b039091166000908152600760205260409020555b6001600160a01b0382166000818152600460205260408082208281556001810183905560020180547fffffffffffffffffffffff000000000000000000000000000000000000000000169055517ff54e47602c09e6190ae0c9cba6074e2e211bf36944fd714fbb0bd78aba514cab9190a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610f388161279f565b610f406126f8565b6001600160a01b0382166000908152600e602052604090205460ff16610fa85760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a206e6f207768697465206c6973740000000000000000000000006044820152606401610877565b6001600160a01b0382166000818152600e6020526040808220805460ff19169055517f4151e001c03bfed83a194d10eea2c0edf04f98e382c440c94a947a99d38d2c329190a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b61101f6126f8565b33600090815260046020526040902060020154600160a01b900460ff166110885760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a206e6f20657869737420737369700000000000000000000000006044820152606401610877565b611092338261291e565b6110de5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f776044820152606401610877565b6110ea33826000612a0b565b610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561113d8161279f565b6111456126f8565b600a5460ff166111975760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a206e6f206578697420706f6f6c000000000000000000000000006044820152606401610877565b6000600b8190556008805473ffffffffffffffffffffffffffffffffffffffff198116909155600a805460ff1916905560098290556040516001600160a01b039091169182917fffb315d96bed6cc0b00a9cc39d15fcbcab7d047fca09660a2d73569cfc75817c9190a250610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756112558161279f565b6001600160a01b0384166112ab5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610877565b6001600160a01b038416600090815260046020526040902060020154600160a01b900460ff161561131e5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a20616c726561647920657869737420706f6f6c000000000000006044820152606401610877565b6001600160a01b03831660009081526006602052604081205460ff16151590036113b5576001600160a01b0383166000818152600660205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60408051608081018252600080825260208083018681526001600160a01b038881168587018181526001606088018181528d851680895260048852978a902098518955945190880155516002909601805493511515600160a01b027fffffffffffffffffffffff000000000000000000000000000000000000000000909416969092169590951791909117905583519283528201859052917f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab91015b60405180910390a250505050565b6114876126f8565b600a5460ff16156114da5760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a20506f6c696379206578697374730000000000000000000000006044820152606401610877565b6001546001600160a01b0316331461155a5760405162461bcd60e51b815260206004820152602760248201527f556e6f52653a206f6e6c792073616c6573506f6c696379466163746f7279206360448201527f616e2063616c6c000000000000000000000000000000000000000000000000006064820152608401610877565b604080516060810182526001600160a01b03831680825260006020830181905260019284018390526008805473ffffffffffffffffffffffffffffffffffffffff1916831790556009819055600a805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a2610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b336000908152600e602052604090205460ff166116625760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e00006044820152606401610877565b6001600160a01b0383166116b85760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610877565b6001600160a01b038316600090815260046020526040902060020154600160a01b900460ff161561172b5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a20616c726561647920657869737420706f6f6c000000000000006044820152606401610877565b6001600160a01b03821660009081526006602052604081205460ff16151590036117c2576001600160a01b0382166000818152600660205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60408051608081018252600080825260208083018581526001600160a01b038781168587018181526001606088018181528c851680895260048852978a902098518955945190880155516002909601805493511515600160a01b027fffffffffffffffffffffff000000000000000000000000000000000000000000909416969092169590951791909117905583519283528201849052917f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab910160405180910390a2505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756118b48161279f565b6118bc6126f8565b6118c582612bba565b61095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6118f66126f8565b33600090815260046020526040902060020154600160a01b900460ff1661195f5760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a206e6f20657869737420737369700000000000000000000000006044820152606401610877565b6110ea33826001612a0b565b6000611975612d68565b905090565b6119826126f8565b6008546001600160a01b031633146119dc5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206f6e6c792073616c6573506f6c6963792063616e2063616c6c6044820152606401610877565b600a5460ff16611a2e5760405162461bcd60e51b815260206004820152601660248201527f556e6f52653a206e6f20657869737420706f6c696379000000000000000000006044820152606401610877565b611a3781612ddb565b611a835760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206d6178696d756d206c65766572616765206f766572666c6f776044820152606401610877565b6110ea816001612e20565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611ab88161279f565b611ac06126f8565b6001600160a01b038216611b165760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20706f6f6c206164647265737300000000000000006044820152606401610877565b6001600160a01b0382166000908152600e602052604090205460ff1615611b7f5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a207768697465206c69737420616c7265616479000000000000006044820152606401610877565b6001600160a01b0382166000818152600e6020526040808220805460ff19166001179055517f398e8e2ed05e6be725398a28e81fdf023a447b92941bd666e68ce2091b82bcc79190a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611c1b8161279f565b611c236126f8565b6001600160a01b038216611c795760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a207a65726f20666163746f7279206164647265737300000000006044820152606401610877565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f6507596e94e343212d1c22479359f82fffb65f099deb3ebcae9eb33c3d06de9e90600090a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611d208161279f565b611d286126f8565b6001600160a01b038216611d7e5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206f70657261746f722061646472657373000000006044820152606401610877565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f08c5d29613b4e7468e893fe5f104f5a3ea6e28298f00fbbab9dc9394578c89de90600090a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b611e036126f8565b6008546001600160a01b0316611e5b5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f2065786973742073616c6573506f6c69637900000000006044820152606401610877565b6008546040517f7a5402e900000000000000000000000000000000000000000000000000000000815260048101839052600091829182916001600160a01b031690637a5402e99060240160a060405180830381865afa158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee6919061342f565b505092509250925060008183611efc9190613486565b421080159150611fcb57611f11846000612e20565b6008546040517fa5d5e142000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169063a5d5e14290602401600060405180830381600087803b158015611f7057600080fd5b505af1158015611f84573d6000803e3d6000fd5b50506008546040518881526001600160a01b0390911692507faf1c77a8196c946ab8e645210cd1e2685b4fb758ddfd474fd918298854dea6fc915060200160405180910390a25b50505050610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6000612004838361291e565b9392505050565b600061081b82612ddb565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546120508161279f565b610be98383612878565b6003546001600160a01b031633146120b45760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e00006044820152606401610877565b6120bc6126f8565b6000811161210c5760405162461bcd60e51b815260206004820152600f60248201527f556e6f52653a207a65726f206d6c7200000000000000000000000000000000006044820152606401610877565b600d819055604051818152309033907fb2f30bd42a6b499419a01b9b79e7b98934167f5a8a8c389ce446e20a8e5df76590602001610d27565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156121905750825b905060008267ffffffffffffffff1660011480156121ad5750303b155b9050811580156121bb575080155b156121f2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561223d57845468ff00000000000000001916680100000000000000001785555b6001600160a01b0389166122b95760405162461bcd60e51b815260206004820152602160248201527f556e6f52653a207a65726f2065786368616e67654167656e742061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610877565b6001600160a01b03881661230f5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f2055534443206164647265737300000000000000006044820152606401610877565b6001600160a01b03871661238b5760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a207a65726f206d756c746973696777616c6c657420616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610877565b6003876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156123cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123f391908101906134bf565b51116124675760405162461bcd60e51b815260206004820152602560248201527f556e6f52653a206d6f7265207468616e207468726565206f776e65727320726560448201527f71756965640000000000000000000000000000000000000000000000000000006064820152608401610877565b6001876001600160a01b031663e75235b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cb9190613584565b1161253e5760405162461bcd60e51b815260206004820152602d60248201527f556e6f52653a206d6f7265207468616e206f6e65206f776e657273207265717560448201527f69656420746f20766572696679000000000000000000000000000000000000006064820152608401610877565b600080546001600160a01b03808c1673ffffffffffffffffffffffffffffffffffffffff1992831617909255600280548b84169083161790556003805492891692909116919091179055612590612f1a565b612598612f2c565b6125c27fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775886127a9565b506125ed7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177580612f34565b831561263857845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b61264b6126f8565b33600090815260046020526040902060020154600160a01b900460ff166126b45760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a206e6f20657869737420737369700000000000000000000000006044820152606401610877565b6126c033846000612a0b565b80156126cf576126cf82612bba565b610c3b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01612773576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b610d588133612fd8565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1661286e576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556128243390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061081b565b600091505061081b565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff161561286e576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061081b565b6001600160a01b03808316600090815260046020526040812060020154909116818080612949612d68565b6001600160a01b03851660009081526007602052604090205490935061297b90859061297690899061341c565b613065565b6001600160a01b0388166000908152600460205260409020549092506129a890859061297690899061341c565b90506000670de0b6b3a7640000600c54856129c3919061359d565b6129cd91906135b4565b6001600160a01b03891660009081526004602052604090206001015490841080159250908310159082906129fe5750805b9998505050505050505050565b80612a78576001600160a01b038316600090815260046020526040902054821115612a785760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a20706f6f6c206361706974616c206f766572666c6f77000000006044820152606401610877565b6001600160a01b038084166000908152600460205260409020600201541681612ac4576001600160a01b038416600090815260046020526040902054612abf90849061341c565b612ae8565b6001600160a01b038416600090815260046020526040902054612ae8908490613486565b6001600160a01b03851660009081526004602052604090205581612b2f576001600160a01b038116600090815260076020526040902054612b2a90849061341c565b612b53565b6001600160a01b038116600090815260076020526040902054612b53908490613486565b6001600160a01b038281166000818152600760208181526040808420879055948a1680845260048252858420549490935290815283519283528201939093527f4c54f63d510ce2f2f9bf99bf203458cb67aa75fae97ccab560a1654eba9dbf249101611471565b6008546001600160a01b0316612c125760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f2065786973742073616c6573506f6c69637900000000006044820152606401610877565b6008546040517f7a5402e9000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b031690637a5402e99060240160a060405180830381865afa158015612c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c99919061342f565b505050509050612caa816000612e20565b6008546040517f33b3691e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03909116906333b3691e90602401600060405180830381600087803b158015612d0957600080fd5b505af1158015612d1d573d6000803e3d6000fd5b50506008546040518581526001600160a01b0390911692507f56b46e5b13fdb3c0b1989f448e91b2ad68cf0c8e8ddd87f996720708ae3a156991506020015b60405180910390a25050565b60008060005b600554811015612dd557600060058281548110612d8d57612d8d6135d6565b60009182526020808320909101546001600160a01b03168083526007909152604090912054909150612dc0908290613065565b612dca9084613486565b925050600101612d6e565b50919050565b600080612de6612d68565b9050670de0b6b3a7640000600d5482612dff919061359d565b612e0991906135b4565b83600b54612e179190613486565b11159392505050565b80612e7757600954821115612e775760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a20706f6c69637920636f766572616765206f766572666c6f77006044820152606401610877565b80612e8f57600954612e8a90839061341c565b612e9d565b600954612e9d908390613486565b60095580612eb85781600b54612eb3919061341c565b612ec6565b81600b54612ec69190613486565b600b8190556008546009546040805186815260208101929092528101929092526001600160a01b0316907facece99dd8b86cb96519fb17caded4d103b35a8261463d0d11f80a411460730090606001612d5c565b612f226131ca565b612f2a613231565b565b612f2a6131ca565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006000612f8f8460009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff1661095d576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610877565b60025460009081906001600160a01b0390811690851603613087575081612004565b6001600160a01b03841661312a576000546002546040517fba560ed90000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810186905291169063ba560ed990604401602060405180830381865afa158015613101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131259190613584565b6131c2565b6000546002546040517f34899be60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529182166024820152604481018690529116906334899be690606401602060405180830381865afa15801561319e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c29190613584565b949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16612f2a576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6127796131ca565b60006020828403121561324b57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461200457600080fd5b6001600160a01b0381168114610d5857600080fd5b600080604083850312156132a357600080fd5b8235915060208301356132b58161327b565b809150509250929050565b6000602082840312156132d257600080fd5b81356120048161327b565b6000602082840312156132ef57600080fd5b5035919050565b60008060006060848603121561330b57600080fd5b83356133168161327b565b925060208401356133268161327b565b929592945050506040919091013590565b6000806040838503121561334a57600080fd5b82356133558161327b565b946020939093013593505050565b6000806000806080858703121561337957600080fd5b84356133848161327b565b935060208501356133948161327b565b925060408501356133a48161327b565b915060608501356133b48161327b565b939692955090935050565b8015158114610d5857600080fd5b6000806000606084860312156133e257600080fd5b833592506020840135915060408401356133fb816133bf565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b8181038181111561081b5761081b613406565b600080600080600060a0868803121561344757600080fd5b8551945060208601519350604086015192506060860151613467816133bf565b6080870151909250613478816133bf565b809150509295509295909350565b8082018082111561081b5761081b613406565b634e487b7160e01b600052604160045260246000fd5b80516134ba8161327b565b919050565b600060208083850312156134d257600080fd5b825167ffffffffffffffff808211156134ea57600080fd5b818501915085601f8301126134fe57600080fd5b81518181111561351057613510613499565b8060051b604051601f19603f8301168101818110858211171561353557613535613499565b60405291825284820192508381018501918883111561355357600080fd5b938501935b8285101561357857613569856134af565b84529385019392850192613558565b98975050505050505050565b60006020828403121561359657600080fd5b5051919050565b808202811582820484141761081b5761081b613406565b6000826135d157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203cc7733c77851e389e09391fb44476803c2e402223dc698bd24dbe1aa919899764736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f45760003560e01c80637e29d6c211610191578063a88d2f7a116100e3578063d4688a4511610097578063d9203b9111610071578063d9203b911461074f578063f8c8765e14610762578063fb6cb8471461077557600080fd5b8063d4688a4514610720578063d547741f14610729578063d8c5c8631461073c57600080fd5b8063be22041b116100c8578063be22041b146106e7578063c139b04f146106fa578063c3ea3a281461070d57600080fd5b8063a88d2f7a146106c1578063b3ab15fb146106d457600080fd5b806392ff38ec11610145578063a0931af21161011f578063a0931af214610693578063a217fddf146106a6578063a65888fb146106ae57600080fd5b806392ff38ec146105f8578063974e4d85146106005780639a7b5f111461061e57600080fd5b80638bb70831116101765780638bb70831146105845780638be5a39f1461058d57806391d14854146105a057600080fd5b80637e29d6c21461055e578063869bd44a1461057157600080fd5b80633b7d09461161024a5780635b44d576116101fe57806375b238fc116101d857806375b238fc1461051b578063794e5724146105425780637d4163d31461054b57600080fd5b80635b44d576146104ed57806365cb3a8314610500578063706c2d1b1461050857600080fd5b80634a3a3d141161022f5780634a3a3d14146104b85780634dc70bac146104cb578063570ca735146104da57600080fd5b80633b7d0946146104465780633fecfbf21461045957600080fd5b8063248a9ca3116102ac57806336568abe1161028657806336568abe1461040d57806336760a1c14610420578063385a128f1461043357600080fd5b8063248a9ca31461038757806325042fe9146103d75780632f2ff15d146103fa57600080fd5b806311eac855116102dd57806311eac8551461033657806318a00d8e146103615780631dfa426d1461037457600080fd5b806301ffc9a7146102f95780630d75753114610321575b600080fd5b61030c610307366004613239565b610788565b60405190151581526020015b60405180910390f35b61033461032f366004613290565b610821565b005b600254610349906001600160a01b031681565b6040516001600160a01b039091168152602001610318565b61033461036f3660046132c0565b610961565b6103346103823660046132c0565b610a74565b6103c96103953660046132dd565b60009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b604051908152602001610318565b61030c6103e53660046132c0565b600e6020526000908152604090205460ff1681565b610334610408366004613290565b610ba5565b61033461041b366004613290565b610bef565b600154610349906001600160a01b031681565b6103346104413660046132dd565b610c40565b6103346104543660046132c0565b610d5b565b610491604080516060810182526008546001600160a01b031680825260095460208301819052600a5460ff1615159290930182905292565b604080516001600160a01b0390941684526020840192909252151590820152606001610318565b6103346104c63660046132c0565b610f0e565b6103c9670de0b6b3a764000081565b600354610349906001600160a01b031681565b6103346104fb3660046132dd565b611017565b610334611113565b6103346105163660046132f6565b61122b565b6103c97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6103c9600c5481565b6103346105593660046132c0565b61147f565b61033461056c3660046132f6565b611603565b61033461057f3660046132dd565b61188a565b6103c9600d5481565b61033461059b3660046132dd565b6118ee565b61030c6105ae366004613290565b60009182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6103c961196b565b600854600954600a54610491926001600160a01b0316919060ff1683565b61066261062c3660046132c0565b6004602052600090815260409020805460018201546002909201549091906001600160a01b03811690600160a01b900460ff1684565b604051610318949392919093845260208401929092526001600160a01b031660408301521515606082015260800190565b6103346106a13660046132dd565b61197a565b6103c9600081565b6103346106bc3660046132c0565b611a8e565b6103346106cf3660046132c0565b611bf1565b6103346106e23660046132c0565b611cf6565b6103346106f53660046132dd565b611dfb565b61030c610708366004613337565b611ff8565b61030c61071b3660046132dd565b61200b565b6103c9600b5481565b610334610737366004613290565b612016565b61033461074a3660046132dd565b61205a565b600054610349906001600160a01b031681565b610334610770366004613363565b612145565b6103346107833660046133cd565b612643565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061081b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6003546001600160a01b031633146108805760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e000060448201526064015b60405180910390fd5b6108886126f8565b600082116108d85760405162461bcd60e51b815260206004820152600f60248201527f556e6f52653a207a65726f2073637200000000000000000000000000000000006044820152606401610877565b6001600160a01b0381166000818152600460205260409081902060010184905551309033907fade0e16d2bd0d685eef1e5355dc835692faac192ef62225adb31cd0c0b99c8a89061092c9087815260200190565b60405180910390a461095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561098b8161279f565b6109936126f8565b6001600160a01b0382166109e95760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610877565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155604051908152309033907f28e0ff29ad991f2655c48b0b095a69abbf13aec6c8bc181dd526dbb3f8c9d0b99060200160405180910390a361095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610a9e8161279f565b610aa66126f8565b6001600160a01b038216610afc5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610877565b604080516060810182526001600160a01b03841680825260006020830181905260019284018390526008805473ffffffffffffffffffffffffffffffffffffffff1916831790556009819055600a805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154610bdf8161279f565b610be983836127a9565b50505050565b6001600160a01b0381163314610c31576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c3b8282612878565b505050565b6003546001600160a01b03163314610c9a5760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e00006044820152606401610877565b610ca26126f8565b60008111610cf25760405162461bcd60e51b815260206004820152600f60248201527f556e6f52653a207a65726f206d637200000000000000000000000000000000006044820152606401610877565b600c819055604051818152309033907fa55ee73f4232498ac4c250ffa77f4337343a213648a66147d8848f6660fa3fdf906020015b60405180910390a3610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d858161279f565b610d8d6126f8565b6001600160a01b038216600090815260046020526040902060020154600160a01b900460ff16610dff5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a206e6f206578697420706f6f6c000000000000000000000000006044820152606401610877565b6001600160a01b03821660009081526004602052604090205415610e74576001600160a01b0380831660009081526004602090815260408083206002810154905494168084526007909252909120549091610e599161341c565b6001600160a01b039091166000908152600760205260409020555b6001600160a01b0382166000818152600460205260408082208281556001810183905560020180547fffffffffffffffffffffff000000000000000000000000000000000000000000169055517ff54e47602c09e6190ae0c9cba6074e2e211bf36944fd714fbb0bd78aba514cab9190a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610f388161279f565b610f406126f8565b6001600160a01b0382166000908152600e602052604090205460ff16610fa85760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a206e6f207768697465206c6973740000000000000000000000006044820152606401610877565b6001600160a01b0382166000818152600e6020526040808220805460ff19169055517f4151e001c03bfed83a194d10eea2c0edf04f98e382c440c94a947a99d38d2c329190a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b61101f6126f8565b33600090815260046020526040902060020154600160a01b900460ff166110885760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a206e6f20657869737420737369700000000000000000000000006044820152606401610877565b611092338261291e565b6110de5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206d696e696d756d206361706974616c20756e646572666c6f776044820152606401610877565b6110ea33826000612a0b565b610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561113d8161279f565b6111456126f8565b600a5460ff166111975760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a206e6f206578697420706f6f6c000000000000000000000000006044820152606401610877565b6000600b8190556008805473ffffffffffffffffffffffffffffffffffffffff198116909155600a805460ff1916905560098290556040516001600160a01b039091169182917fffb315d96bed6cc0b00a9cc39d15fcbcab7d047fca09660a2d73569cfc75817c9190a250610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756112558161279f565b6001600160a01b0384166112ab5760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610877565b6001600160a01b038416600090815260046020526040902060020154600160a01b900460ff161561131e5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a20616c726561647920657869737420706f6f6c000000000000006044820152606401610877565b6001600160a01b03831660009081526006602052604081205460ff16151590036113b5576001600160a01b0383166000818152600660205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60408051608081018252600080825260208083018681526001600160a01b038881168587018181526001606088018181528d851680895260048852978a902098518955945190880155516002909601805493511515600160a01b027fffffffffffffffffffffff000000000000000000000000000000000000000000909416969092169590951791909117905583519283528201859052917f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab91015b60405180910390a250505050565b6114876126f8565b600a5460ff16156114da5760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a20506f6c696379206578697374730000000000000000000000006044820152606401610877565b6001546001600160a01b0316331461155a5760405162461bcd60e51b815260206004820152602760248201527f556e6f52653a206f6e6c792073616c6573506f6c696379466163746f7279206360448201527f616e2063616c6c000000000000000000000000000000000000000000000000006064820152608401610877565b604080516060810182526001600160a01b03831680825260006020830181905260019284018390526008805473ffffffffffffffffffffffffffffffffffffffff1916831790556009819055600a805460ff191690931790925591517f8ba1947a8c64577d7adbd8cbc248c72b68738fe23afef984d842ba5ec5af5cfe9190a2610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b336000908152600e602052604090205460ff166116625760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e00006044820152606401610877565b6001600160a01b0383166116b85760405162461bcd60e51b815260206004820152601360248201527f556e6f52653a207a65726f2061646472657373000000000000000000000000006044820152606401610877565b6001600160a01b038316600090815260046020526040902060020154600160a01b900460ff161561172b5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a20616c726561647920657869737420706f6f6c000000000000006044820152606401610877565b6001600160a01b03821660009081526006602052604081205460ff16151590036117c2576001600160a01b0382166000818152600660205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60408051608081018252600080825260208083018581526001600160a01b038781168587018181526001606088018181528c851680895260048852978a902098518955945190880155516002909601805493511515600160a01b027fffffffffffffffffffffff000000000000000000000000000000000000000000909416969092169590951791909117905583519283528201849052917f4135167fcda3c31ddaa41eecaaa00c3e3ba8aabf49d039cfad433be34bf659ab910160405180910390a2505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756118b48161279f565b6118bc6126f8565b6118c582612bba565b61095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6118f66126f8565b33600090815260046020526040902060020154600160a01b900460ff1661195f5760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a206e6f20657869737420737369700000000000000000000000006044820152606401610877565b6110ea33826001612a0b565b6000611975612d68565b905090565b6119826126f8565b6008546001600160a01b031633146119dc5760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206f6e6c792073616c6573506f6c6963792063616e2063616c6c6044820152606401610877565b600a5460ff16611a2e5760405162461bcd60e51b815260206004820152601660248201527f556e6f52653a206e6f20657869737420706f6c696379000000000000000000006044820152606401610877565b611a3781612ddb565b611a835760405162461bcd60e51b815260206004820181905260248201527f556e6f52653a206d6178696d756d206c65766572616765206f766572666c6f776044820152606401610877565b6110ea816001612e20565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611ab88161279f565b611ac06126f8565b6001600160a01b038216611b165760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f20706f6f6c206164647265737300000000000000006044820152606401610877565b6001600160a01b0382166000908152600e602052604090205460ff1615611b7f5760405162461bcd60e51b815260206004820152601960248201527f556e6f52653a207768697465206c69737420616c7265616479000000000000006044820152606401610877565b6001600160a01b0382166000818152600e6020526040808220805460ff19166001179055517f398e8e2ed05e6be725398a28e81fdf023a447b92941bd666e68ce2091b82bcc79190a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611c1b8161279f565b611c236126f8565b6001600160a01b038216611c795760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a207a65726f20666163746f7279206164647265737300000000006044820152606401610877565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f6507596e94e343212d1c22479359f82fffb65f099deb3ebcae9eb33c3d06de9e90600090a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611d208161279f565b611d286126f8565b6001600160a01b038216611d7e5760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a207a65726f206f70657261746f722061646472657373000000006044820152606401610877565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f08c5d29613b4e7468e893fe5f104f5a3ea6e28298f00fbbab9dc9394578c89de90600090a261095d60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b611e036126f8565b6008546001600160a01b0316611e5b5760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f2065786973742073616c6573506f6c69637900000000006044820152606401610877565b6008546040517f7a5402e900000000000000000000000000000000000000000000000000000000815260048101839052600091829182916001600160a01b031690637a5402e99060240160a060405180830381865afa158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee6919061342f565b505092509250925060008183611efc9190613486565b421080159150611fcb57611f11846000612e20565b6008546040517fa5d5e142000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169063a5d5e14290602401600060405180830381600087803b158015611f7057600080fd5b505af1158015611f84573d6000803e3d6000fd5b50506008546040518881526001600160a01b0390911692507faf1c77a8196c946ab8e645210cd1e2685b4fb758ddfd474fd918298854dea6fc915060200160405180910390a25b50505050610d5860017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6000612004838361291e565b9392505050565b600061081b82612ddb565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546120508161279f565b610be98383612878565b6003546001600160a01b031633146120b45760405162461bcd60e51b815260206004820152601e60248201527f556e6f52653a204361706974616c204167656e7420466f7262696464656e00006044820152606401610877565b6120bc6126f8565b6000811161210c5760405162461bcd60e51b815260206004820152600f60248201527f556e6f52653a207a65726f206d6c7200000000000000000000000000000000006044820152606401610877565b600d819055604051818152309033907fb2f30bd42a6b499419a01b9b79e7b98934167f5a8a8c389ce446e20a8e5df76590602001610d27565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156121905750825b905060008267ffffffffffffffff1660011480156121ad5750303b155b9050811580156121bb575080155b156121f2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561223d57845468ff00000000000000001916680100000000000000001785555b6001600160a01b0389166122b95760405162461bcd60e51b815260206004820152602160248201527f556e6f52653a207a65726f2065786368616e67654167656e742061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610877565b6001600160a01b03881661230f5760405162461bcd60e51b815260206004820152601860248201527f556e6f52653a207a65726f2055534443206164647265737300000000000000006044820152606401610877565b6001600160a01b03871661238b5760405162461bcd60e51b815260206004820152602260248201527f556e6f52653a207a65726f206d756c746973696777616c6c657420616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610877565b6003876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156123cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123f391908101906134bf565b51116124675760405162461bcd60e51b815260206004820152602560248201527f556e6f52653a206d6f7265207468616e207468726565206f776e65727320726560448201527f71756965640000000000000000000000000000000000000000000000000000006064820152608401610877565b6001876001600160a01b031663e75235b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cb9190613584565b1161253e5760405162461bcd60e51b815260206004820152602d60248201527f556e6f52653a206d6f7265207468616e206f6e65206f776e657273207265717560448201527f69656420746f20766572696679000000000000000000000000000000000000006064820152608401610877565b600080546001600160a01b03808c1673ffffffffffffffffffffffffffffffffffffffff1992831617909255600280548b84169083161790556003805492891692909116919091179055612590612f1a565b612598612f2c565b6125c27fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775886127a9565b506125ed7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177580612f34565b831561263857845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b61264b6126f8565b33600090815260046020526040902060020154600160a01b900460ff166126b45760405162461bcd60e51b815260206004820152601460248201527f556e6f52653a206e6f20657869737420737369700000000000000000000000006044820152606401610877565b6126c033846000612a0b565b80156126cf576126cf82612bba565b610c3b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01612773576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b610d588133612fd8565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1661286e576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556128243390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061081b565b600091505061081b565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff161561286e576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061081b565b6001600160a01b03808316600090815260046020526040812060020154909116818080612949612d68565b6001600160a01b03851660009081526007602052604090205490935061297b90859061297690899061341c565b613065565b6001600160a01b0388166000908152600460205260409020549092506129a890859061297690899061341c565b90506000670de0b6b3a7640000600c54856129c3919061359d565b6129cd91906135b4565b6001600160a01b03891660009081526004602052604090206001015490841080159250908310159082906129fe5750805b9998505050505050505050565b80612a78576001600160a01b038316600090815260046020526040902054821115612a785760405162461bcd60e51b815260206004820152601c60248201527f556e6f52653a20706f6f6c206361706974616c206f766572666c6f77000000006044820152606401610877565b6001600160a01b038084166000908152600460205260409020600201541681612ac4576001600160a01b038416600090815260046020526040902054612abf90849061341c565b612ae8565b6001600160a01b038416600090815260046020526040902054612ae8908490613486565b6001600160a01b03851660009081526004602052604090205581612b2f576001600160a01b038116600090815260076020526040902054612b2a90849061341c565b612b53565b6001600160a01b038116600090815260076020526040902054612b53908490613486565b6001600160a01b038281166000818152600760208181526040808420879055948a1680845260048252858420549490935290815283519283528201939093527f4c54f63d510ce2f2f9bf99bf203458cb67aa75fae97ccab560a1654eba9dbf249101611471565b6008546001600160a01b0316612c125760405162461bcd60e51b815260206004820152601b60248201527f556e6f52653a206e6f2065786973742073616c6573506f6c69637900000000006044820152606401610877565b6008546040517f7a5402e9000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b031690637a5402e99060240160a060405180830381865afa158015612c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c99919061342f565b505050509050612caa816000612e20565b6008546040517f33b3691e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03909116906333b3691e90602401600060405180830381600087803b158015612d0957600080fd5b505af1158015612d1d573d6000803e3d6000fd5b50506008546040518581526001600160a01b0390911692507f56b46e5b13fdb3c0b1989f448e91b2ad68cf0c8e8ddd87f996720708ae3a156991506020015b60405180910390a25050565b60008060005b600554811015612dd557600060058281548110612d8d57612d8d6135d6565b60009182526020808320909101546001600160a01b03168083526007909152604090912054909150612dc0908290613065565b612dca9084613486565b925050600101612d6e565b50919050565b600080612de6612d68565b9050670de0b6b3a7640000600d5482612dff919061359d565b612e0991906135b4565b83600b54612e179190613486565b11159392505050565b80612e7757600954821115612e775760405162461bcd60e51b815260206004820152601f60248201527f556e6f52653a20706f6c69637920636f766572616765206f766572666c6f77006044820152606401610877565b80612e8f57600954612e8a90839061341c565b612e9d565b600954612e9d908390613486565b60095580612eb85781600b54612eb3919061341c565b612ec6565b81600b54612ec69190613486565b600b8190556008546009546040805186815260208101929092528101929092526001600160a01b0316907facece99dd8b86cb96519fb17caded4d103b35a8261463d0d11f80a411460730090606001612d5c565b612f226131ca565b612f2a613231565b565b612f2a6131ca565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006000612f8f8460009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff1661095d576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610877565b60025460009081906001600160a01b0390811690851603613087575081612004565b6001600160a01b03841661312a576000546002546040517fba560ed90000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810186905291169063ba560ed990604401602060405180830381865afa158015613101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131259190613584565b6131c2565b6000546002546040517f34899be60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529182166024820152604481018690529116906334899be690606401602060405180830381865afa15801561319e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c29190613584565b949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16612f2a576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6127796131ca565b60006020828403121561324b57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461200457600080fd5b6001600160a01b0381168114610d5857600080fd5b600080604083850312156132a357600080fd5b8235915060208301356132b58161327b565b809150509250929050565b6000602082840312156132d257600080fd5b81356120048161327b565b6000602082840312156132ef57600080fd5b5035919050565b60008060006060848603121561330b57600080fd5b83356133168161327b565b925060208401356133268161327b565b929592945050506040919091013590565b6000806040838503121561334a57600080fd5b82356133558161327b565b946020939093013593505050565b6000806000806080858703121561337957600080fd5b84356133848161327b565b935060208501356133948161327b565b925060408501356133a48161327b565b915060608501356133b48161327b565b939692955090935050565b8015158114610d5857600080fd5b6000806000606084860312156133e257600080fd5b833592506020840135915060408401356133fb816133bf565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b8181038181111561081b5761081b613406565b600080600080600060a0868803121561344757600080fd5b8551945060208601519350604086015192506060860151613467816133bf565b6080870151909250613478816133bf565b809150509295509295909350565b8082018082111561081b5761081b613406565b634e487b7160e01b600052604160045260246000fd5b80516134ba8161327b565b919050565b600060208083850312156134d257600080fd5b825167ffffffffffffffff808211156134ea57600080fd5b818501915085601f8301126134fe57600080fd5b81518181111561351057613510613499565b8060051b604051601f19603f8301168101818110858211171561353557613535613499565b60405291825284820192508381018501918883111561355357600080fd5b938501935b8285101561357857613569856134af565b84529385019392850192613558565b98975050505050505050565b60006020828403121561359657600080fd5b5051919050565b808202811582820484141761081b5761081b613406565b6000826135d157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203cc7733c77851e389e09391fb44476803c2e402223dc698bd24dbe1aa919899764736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1318,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1320,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "salesPolicyFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1322,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "usdcToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1324,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "operator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1345,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolInfo)1333_storage)"
      },
      {
        "astId": 1348,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "currencyList",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1352,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "existedCurrencies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1356,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalCapitalStakedByCurrency",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1359,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "policyInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(PolicyInfo)1340_storage"
      },
      {
        "astId": 1361,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "totalUtilizedAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1363,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MCR",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1365,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "MLR",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1372,
        "contract": "contracts/CapitalAgent.sol:CapitalAgent",
        "label": "poolWhiteList",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(PoolInfo)1333_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CapitalAgent.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)1333_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PolicyInfo)1340_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PolicyInfo",
        "members": [
          {
            "astId": 1335,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "policy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1337,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "utilizedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1339,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolInfo)1333_storage": {
        "encoding": "inplace",
        "label": "struct CapitalAgent.PoolInfo",
        "members": [
          {
            "astId": 1326,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "totalCapital",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1328,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "SCR",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1330,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "currency",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1332,
            "contract": "contracts/CapitalAgent.sol:CapitalAgent",
            "label": "exist",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}