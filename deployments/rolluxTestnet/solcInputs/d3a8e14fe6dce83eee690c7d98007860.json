{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/CapitalAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.23;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"./interfaces/ISalesPolicy.sol\";\nimport \"./interfaces/IExchangeAgent.sol\";\nimport \"./interfaces/ICapitalAgent.sol\";\n\n/**\n * @dev update and manage all pools capital and policy utlized amount,\n * whenever user stake and withdraw from the pool and buy policy from salesPolicy\n * notifies to capital agent to update pool capital and policy coverage\n **/\ncontract CapitalAgent is ICapitalAgent, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    address public exchangeAgent;\n    address public salesPolicyFactory;\n    address public usdcToken;\n    address public operator;\n\n    struct PoolInfo {\n        uint256 totalCapital;\n        uint256 SCR;\n        address currency;\n        bool exist;\n    }\n\n    struct PolicyInfo {\n        address policy;\n        uint256 utilizedAmount;\n        bool exist;\n    }\n\n    mapping(address => PoolInfo) public poolInfo;\n\n    address[] private currencyList;\n    mapping(address => bool) public existedCurrencies;\n    mapping(address => uint256) public totalCapitalStakedByCurrency;\n\n    PolicyInfo public policyInfo;\n\n    uint256 public totalUtilizedAmount;\n\n    uint256 public MCR;\n    uint256 public MLR;\n\n    uint256 public constant CALC_PRECISION = 1e18;\n\n    mapping(address => bool) public poolWhiteList;\n\n    mapping(address => mapping(uint256 => uint256)) public claimedAmount;\n\n    event LogAddPool(address indexed _ssip, address _currency, uint256 _scr);\n    event LogRemovePool(address indexed _ssip);\n    event LogSetPolicy(address indexed _salesPolicy);\n    event LogRemovePolicy(address indexed _salesPolicy);\n    event LogUpdatePoolCapital(address indexed _ssip, uint256 _poolCapital, uint256 _totalCapital);\n    event LogUpdatePolicyCoverage(\n        address indexed _policy,\n        uint256 _amount,\n        uint256 _policyUtilized,\n        uint256 _totalUtilizedAmount\n    );\n    event LogUpdatePolicyExpired(address indexed _policy, uint256 _policyTokenId);\n    event LogMarkToClaimPolicy(address indexed _policy, uint256 _policyTokenId);\n    event LogSetMCR(address indexed _owner, address indexed _capitalAgent, uint256 _MCR);\n    event LogSetMLR(address indexed _owner, address indexed _capitalAgent, uint256 _MLR);\n    event LogSetSCR(address indexed _owner, address indexed _capitalAgent, address indexed _pool, uint256 _SCR);\n    event LogSetExchangeAgent(address indexed _owner, address indexed _capitalAgent, address _exchangeAgent);\n    event LogSetSalesPolicyFactory(address indexed _factory);\n    event LogAddPoolWhiteList(address indexed _pool);\n    event LogRemovePoolWhiteList(address indexed _pool);\n    event LogSetOperator(address indexed _operator);\n    event LogSetUSDC(address indexed _usdcToken);\n\n    function initialize(\n        address _exchangeAgent,\n        address _USDC_TOKEN,\n        address _multiSigWallet,\n        address _operator\n    ) external initializer {\n        require(_exchangeAgent != address(0), \"UnoRe: zero exchangeAgent address\");\n        require(_USDC_TOKEN != address(0), \"UnoRe: zero USDC address\");\n        require(_multiSigWallet != address(0), \"UnoRe: zero multisigwallet address\");\n        exchangeAgent = _exchangeAgent;\n        usdcToken = _USDC_TOKEN;\n        operator = _operator;\n        __ReentrancyGuard_init();\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, _multiSigWallet);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    }\n\n    modifier onlyPoolWhiteList() {\n        require(poolWhiteList[msg.sender], \"UnoRe: Capital Agent Forbidden\");\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"UnoRe: Capital Agent Forbidden\");\n        _;\n    }\n\n    function getPolicyInfo() external view returns (address, uint256, bool) {\n        PolicyInfo memory _policy = policyInfo;\n        return (_policy.policy, _policy.utilizedAmount, _policy.exist);\n    }\n\n    function getPoolInfo(address _pool) external view returns (uint256, uint256, address, bool) {\n        PoolInfo memory _poolInfo = poolInfo[_pool];\n        return (_poolInfo.totalCapital, _poolInfo.SCR, _poolInfo.currency, _poolInfo.exist);\n    }\n\n    /**\n     * @dev set sales policy factory, can only be call by admin role\n     * @param _factory new sales policy factory address\n     **/\n    function setSalesPolicyFactory(address _factory) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_factory != address(0), \"UnoRe: zero factory address\");\n        salesPolicyFactory = _factory;\n        emit LogSetSalesPolicyFactory(_factory);\n    }\n\n    /**\n     * @dev set operator, can only be call by admin role\n     * @param _operator new operator address\n     **/\n    function setOperator(address _operator) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_operator != address(0), \"UnoRe: zero operator address\");\n        operator = _operator;\n        emit LogSetOperator(_operator);\n    }\n\n    /**\n     * @dev set usdc token, can only be call by admin role\n     * @param _usdcToken new usdc token address\n     **/\n    function setUSDCToken(address _usdcToken) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_usdcToken != address(0), \"UnoRe: zero usdc address\");\n        usdcToken = _usdcToken;\n        emit LogSetUSDC(_usdcToken);\n    }\n\n    /**\n     * @dev whitelist pool address, can only be call by admin role\n     * @param _pool address of pool to whitelist\n     **/\n    function addPoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_pool != address(0), \"UnoRe: zero pool address\");\n        require(!poolWhiteList[_pool], \"UnoRe: white list already\");\n        poolWhiteList[_pool] = true;\n        emit LogAddPoolWhiteList(_pool);\n    }\n\n    /**\n     * @dev remove whitelisted pool, can only be call by admin role\n     * @param _pool address of pool to remove from whitelist\n     **/\n    function removePoolWhiteList(address _pool) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolWhiteList[_pool], \"UnoRe: no white list\");\n        poolWhiteList[_pool] = false;\n        emit LogRemovePoolWhiteList(_pool);\n    }\n\n    /**\n     * @dev return total capital in usdc staked in capital agent by pools\n     **/\n    function totalCapitalStaked() public view returns (uint256) {\n        return _getTotalCapitalStakedInUSDC();\n    }\n\n    /**\n     * @dev add pool into capitalAgent to stake capital, can only be call by whitelisted pools\n     * @param _ssip address of pool to add\n     * @param _currency pool lp currency address\n     * @param _scr pool scr value(minimum capital should maintain in capital agent)\n     **/\n    function addPool(address _ssip, address _currency, uint256 _scr) external override onlyPoolWhiteList {\n        require(_ssip != address(0), \"UnoRe: zero address\");\n        require(!poolInfo[_ssip].exist, \"UnoRe: already exist pool\");\n\n        if (existedCurrencies[_currency] == false) {\n            existedCurrencies[_currency] = true;\n            currencyList.push(_currency);\n        }\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\n\n        emit LogAddPool(_ssip, _currency, _scr);\n    }\n\n    /**\n     * @dev add pool into capitalAgent to stake capital, can only be call by admin role\n     * @param _ssip address of pool to add\n     * @param _currency pool lp currency address\n     * @param _scr pool scr value(minimum capital should maintain in capital agent)\n     **/\n    function addPoolByAdmin(address _ssip, address _currency, uint256 _scr) external onlyRole(ADMIN_ROLE) {\n        require(_ssip != address(0), \"UnoRe: zero address\");\n        require(!poolInfo[_ssip].exist, \"UnoRe: already exist pool\");\n\n        if (existedCurrencies[_currency] == false) {\n            existedCurrencies[_currency] = true;\n            currencyList.push(_currency);\n        }\n        poolInfo[_ssip] = PoolInfo({totalCapital: 0, currency: _currency, SCR: _scr, exist: true});\n\n        emit LogAddPool(_ssip, _currency, _scr);\n    }\n\n    /**\n     * @dev remove pool from capitalAgent, can only be call by admin role\n     * @param _ssip address of pool to remove\n     **/\n    function removePool(address _ssip) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolInfo[_ssip].exist, \"UnoRe: no exit pool\");\n        if (poolInfo[_ssip].totalCapital > 0) {\n            address currency = poolInfo[_ssip].currency;\n            totalCapitalStakedByCurrency[currency] = totalCapitalStakedByCurrency[currency] - poolInfo[_ssip].totalCapital;\n        }\n        delete poolInfo[_ssip];\n        emit LogRemovePool(_ssip);\n    }\n\n    function setPoolCapital(address _ssip, uint256 _capital) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(poolInfo[_ssip].exist, \"UnoRe: no exit pool\");\n        address currency = poolInfo[_ssip].currency;\n        totalCapitalStakedByCurrency[currency] = _capital;\n        poolInfo[_ssip].totalCapital = _capital;\n    }\n\n    /**\n     * @dev set sales policy, can only be call by SalesPolicyFactory\n     * @param _policy address of new SalesPolicy\n     **/\n    function setPolicy(address _policy) external override nonReentrant {\n        require(!policyInfo.exist, \"UnoRe: Policy exists\");\n        require(salesPolicyFactory == msg.sender, \"UnoRe: only salesPolicyFactory can call\");\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\n\n        emit LogSetPolicy(_policy);\n    }\n\n    /**\n     * @dev set sales policy, can only be call by admin role\n     * @param _policy address of new SalesPolicy\n     **/\n    function setPolicyByAdmin(address _policy) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_policy != address(0), \"UnoRe: zero address\");\n        policyInfo = PolicyInfo({policy: _policy, utilizedAmount: 0, exist: true});\n\n        emit LogSetPolicy(_policy);\n    }\n\n    /**\n     * @dev remove sales policy from capital agent, can only be call by admin role\n     **/\n    function removePolicy() external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(policyInfo.exist, \"UnoRe: no exit pool\");\n        totalUtilizedAmount = 0;\n        address _policy = policyInfo.policy;\n        policyInfo.policy = address(0);\n        policyInfo.exist = false;\n        policyInfo.utilizedAmount = 0;\n        emit LogRemovePolicy(_policy);\n    }\n\n    /**\n     * @dev update pool(caller) capital from capital agent,\n     * decrease capital of pool by _withdrawAmount, if user withdraw from pool\n     * remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively\n     * @param _withdrawAmount amount to withdraw\n     **/\n    function SSIPWithdraw(uint256 _withdrawAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        require(_checkCapitalByMCRAndSCR(msg.sender, _withdrawAmount), \"UnoRe: minimum capital underflow\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n    }\n\n    /**\n     * @dev update pool(caller) capital from capital agent,\n     * decrease capital of pool by _withdrawAmount, if user claim policy from pool\n     * @param _withdrawAmount amount to withdraw\n     **/\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isNotMigrate) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _withdrawAmount, false);\n        if (_isNotMigrate) {\n            _SSIPPolicyClaim(_withdrawAmount, _policyId);\n        }\n    }\n\n    function _SSIPPolicyClaim(uint256 _withdrawAmount, uint256 _policyId) internal {\n        address _salesPolicyAddress = policyInfo.policy;\n        (uint256 _coverageAmount, , , , ) = ISalesPolicy(_salesPolicyAddress).getPolicyData(_policyId);\n        uint256 _claimed = claimedAmount[_salesPolicyAddress][_policyId];\n        address _poolCurrency = poolInfo[msg.sender].currency;\n        uint256 usdcTokenAmount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(_poolCurrency, usdcToken, _withdrawAmount);\n        require(_coverageAmount >= usdcTokenAmount + _claimed, \"UnoRe: coverage amount is less\");\n        claimedAmount[_salesPolicyAddress][_policyId] += usdcTokenAmount;\n        bool _isFinished = !(_coverageAmount > (usdcTokenAmount + _claimed));\n        if (_isFinished) {\n            // @Audit: DUST amount will prevent marking a policy complete\n            _markToClaimPolicy(_policyId, _coverageAmount);\n        }\n    }\n\n    /**\n     * @dev update pool(caller) capital from capital agent,\n     * increase capital of pool by _stakingAmount, if user stake in pool\n     * @param _stakingAmount amount to deposit\n     **/\n    function SSIPStaking(uint256 _stakingAmount) external override nonReentrant {\n        require(poolInfo[msg.sender].exist, \"UnoRe: no exist ssip\");\n        _updatePoolCapital(msg.sender, _stakingAmount, true);\n    }\n\n    /**\n     * @dev return if pool can withdraw this amount,\n     * remaning pool capital and total capital staked from same currency should be greater pool SCR and MCR respectively\n     * @param _pool address of pool\n     * @param _withdrawAmount withdraw amount\n     **/\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view override returns (bool) {\n        return _checkCapitalByMCRAndSCR(_pool, _withdrawAmount);\n    }\n\n    /**\n     * @dev return if user can buy policy from this coverage amount,\n     * total utlized amount plus coverage should be less than MLR of total capital staked\n     * @param _coverageAmount coverage amount\n     **/\n    function checkCoverageByMLR(uint256 _coverageAmount) external view override returns (bool) {\n        return _checkCoverageByMLR(_coverageAmount);\n    }\n\n    /**\n     * @dev update policy coverage if user buy policy from SalesPolicy, only sales policy can call this function\n     * @param _coverageAmount coverage amount\n     **/\n    function policySale(uint256 _coverageAmount) external override nonReentrant {\n        require(msg.sender == policyInfo.policy, \"UnoRe: only salesPolicy can call\");\n        require(policyInfo.exist, \"UnoRe: no exist policy\");\n        require(_checkCoverageByMLR(_coverageAmount), \"UnoRe: maximum leverage overflow\");\n        _updatePolicyCoverage(_coverageAmount, true);\n    }\n\n    /**\n     * @dev update policy status, if expired update policy coverage and notify to sales policy\n     * @param _policyId policy id to update status\n     **/\n    function updatePolicyStatus(uint256 _policyId) external override nonReentrant {\n        require(policyInfo.policy != address(0), \"UnoRe: no exist salesPolicy\");\n        (uint256 _coverageAmount, uint256 _coverageDuration, uint256 _coverStartAt, , ) = ISalesPolicy(policyInfo.policy)\n            .getPolicyData(_policyId);\n        bool isExpired = block.timestamp >= _coverageDuration + _coverStartAt;\n        if (isExpired) {\n            _updatePolicyCoverage(_coverageAmount, false);\n            ISalesPolicy(policyInfo.policy).updatePolicyExpired(_policyId);\n            emit LogUpdatePolicyExpired(policyInfo.policy, _policyId);\n        }\n    }\n\n    /**\n     * @dev update policy status to not exist, can only be called by admin role\n     * @param _policyId policy id to update status\n     **/\n    function markToClaimPolicy(uint256 _policyId) external onlyRole(ADMIN_ROLE) nonReentrant {\n        (uint256 _coverageAmount, , , , ) = ISalesPolicy(policyInfo.policy).getPolicyData(_policyId);\n        _markToClaimPolicy(_policyId, _coverageAmount);\n    }\n\n    function _markToClaimPolicy(uint256 _policyId, uint256 _coverageAmount) private {\n        require(policyInfo.policy != address(0), \"UnoRe: no exist salesPolicy\");\n        _updatePolicyCoverage(_coverageAmount, false);\n        ISalesPolicy(policyInfo.policy).markToClaim(_policyId);\n        emit LogMarkToClaimPolicy(policyInfo.policy, _policyId);\n    }\n\n    function _updatePoolCapital(address _pool, uint256 _amount, bool isAdd) private {\n        if (!isAdd) {\n            require(poolInfo[_pool].totalCapital >= _amount, \"UnoRe: pool capital overflow\");\n        }\n        address currency = poolInfo[_pool].currency;\n        poolInfo[_pool].totalCapital = isAdd ? poolInfo[_pool].totalCapital + _amount : poolInfo[_pool].totalCapital - _amount;\n        totalCapitalStakedByCurrency[currency] = isAdd\n            ? totalCapitalStakedByCurrency[currency] + _amount\n            : totalCapitalStakedByCurrency[currency] - _amount;\n        emit LogUpdatePoolCapital(_pool, poolInfo[_pool].totalCapital, totalCapitalStakedByCurrency[currency]);\n    }\n\n    function _updatePolicyCoverage(uint256 _amount, bool isAdd) private {\n        if (!isAdd) {\n            require(policyInfo.utilizedAmount >= _amount, \"UnoRe: policy coverage overflow\");\n        }\n        policyInfo.utilizedAmount = isAdd ? policyInfo.utilizedAmount + _amount : policyInfo.utilizedAmount - _amount;\n        totalUtilizedAmount = isAdd ? totalUtilizedAmount + _amount : totalUtilizedAmount - _amount;\n        emit LogUpdatePolicyCoverage(policyInfo.policy, _amount, policyInfo.utilizedAmount, totalUtilizedAmount);\n    }\n\n    function _checkCapitalByMCRAndSCR(address _pool, uint256 _withdrawAmount) private view returns (bool) {\n        address currency = poolInfo[_pool].currency;\n        uint256 totalCapitalStakedInUSDCPool;\n        uint256 mcrInUSDC;\n        uint256 scrInUSDC;\n\n        totalCapitalStakedInUSDCPool = _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency]);\n        mcrInUSDC = _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency] - _withdrawAmount);\n        scrInUSDC = _convertTokenToUSDC(currency, poolInfo[_pool].totalCapital - _withdrawAmount);\n\n        bool isMCRPass = mcrInUSDC >= (totalCapitalStakedInUSDCPool * MCR) / CALC_PRECISION;\n        bool isSCRPass = scrInUSDC >= poolInfo[_pool].SCR;\n\n        return isMCRPass && isSCRPass;\n    }\n\n    function _convertTokenToUSDC(address _currency, uint256 _amount) private view returns (uint256) {\n        uint256 tokenInUSDC;\n        if (_currency == usdcToken) {\n            tokenInUSDC = _amount;\n        } else {\n            tokenInUSDC = _currency != address(0)\n                ? IExchangeAgent(exchangeAgent).getNeededTokenAmount(_currency, usdcToken, _amount)\n                : IExchangeAgent(exchangeAgent).getTokenAmountForETH(usdcToken, _amount);\n        }\n\n        return tokenInUSDC;\n    }\n\n    function _getTotalCapitalStakedInUSDC() private view returns (uint256) {\n        uint256 totalCapitalStakedInUSDC;\n        for (uint256 i = 0; i < currencyList.length; i++) {\n            address currency = currencyList[i];\n            totalCapitalStakedInUSDC =\n                totalCapitalStakedInUSDC +\n                _convertTokenToUSDC(currency, totalCapitalStakedByCurrency[currency]);\n        }\n\n        return totalCapitalStakedInUSDC;\n    }\n\n    function _checkCoverageByMLR(uint256 _newCoverageAmount) private view returns (bool) {\n        uint256 totalCapitalStakedInUSDC = _getTotalCapitalStakedInUSDC();\n        return totalUtilizedAmount + _newCoverageAmount <= (totalCapitalStakedInUSDC * MLR) / CALC_PRECISION;\n    }\n\n    /**\n     * @dev set new MCR, can only be called by operator\n     * @param _MCR new value to update\n     **/\n    function setMCR(uint256 _MCR) external onlyOperator nonReentrant {\n        MCR = _MCR;\n        emit LogSetMCR(msg.sender, address(this), _MCR);\n    }\n\n    /**\n     * @dev set new MLR, can only be called by operator\n     * @param _MLR new value to update\n     **/\n    function setMLR(uint256 _MLR) external onlyOperator nonReentrant {\n        MLR = _MLR;\n        emit LogSetMLR(msg.sender, address(this), _MLR);\n    }\n\n    /**\n     * @dev set new SCR of pool, can only be called by operator\n     * @param _SCR new value to update\n     * @param _pool address of pool\n     **/\n    function setSCR(uint256 _SCR, address _pool) external onlyOperator nonReentrant {\n        poolInfo[_pool].SCR = _SCR;\n        emit LogSetSCR(msg.sender, address(this), _pool, _SCR);\n    }\n\n    /**\n     * @dev set new exchange agent address, can only be called by admin role\n     * @param _exchangeAgent new exchange agent address\n     **/\n    function setExchangeAgent(address _exchangeAgent) external onlyRole(ADMIN_ROLE) nonReentrant {\n        require(_exchangeAgent != address(0), \"UnoRe: zero address\");\n        exchangeAgent = _exchangeAgent;\n        emit LogSetExchangeAgent(msg.sender, address(this), _exchangeAgent);\n    }\n}\n"
    },
    "contracts/interfaces/ICapitalAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface ICapitalAgent {\n    function addPool(address _ssip, address _currency, uint256 _scr) external;\n\n    function setPolicy(address _policy) external;\n\n    function SSIPWithdraw(uint256 _withdrawAmount) external;\n\n    function SSIPStaking(uint256 _stakingAmount) external;\n\n    function SSIPPolicyCaim(uint256 _withdrawAmount, uint256 _policyId, bool _isMigrate) external;\n\n    function checkCapitalByMCR(address _pool, uint256 _withdrawAmount) external view returns (bool);\n\n    function checkCoverageByMLR(uint256 _coverageAmount) external view returns (bool);\n\n    function policySale(uint256 _coverageAmount) external;\n\n    function updatePolicyStatus(uint256 _policyId) external;\n\n    function getPolicyInfo() external returns(address, uint256, bool);\n\n    function claimedAmount(address _policy, uint256 _policyId) external returns(uint256);\n\n    function exchangeAgent() external view returns(address);\n\n    function getPoolInfo(address _pool) external view returns(uint256, uint256, address, bool);\n}\n"
    },
    "contracts/interfaces/IExchangeAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.23;\n\ninterface IExchangeAgent {\n    function usdcToken() external view returns (address);\n\n    function getTokenAmountForUSDC(address _token, uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForUSDC(uint256 _usdtAmount) external view returns (uint256);\n\n    function getETHAmountForToken(address _token, uint256 _tokenAmount) external view returns (uint256);\n\n    function getTokenAmountForETH(address _token, uint256 _ethAmount) external view returns (uint256);\n\n    function getNeededTokenAmount(address _token0, address _token1, uint256 _token0Amount) external view returns (uint256);\n\n    function convertForToken(address _token0, address _token1, uint256 _token0Amount) external returns (uint256);\n\n    function convertForETH(address _token, uint256 _convertAmount) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISalesPolicy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.23;\n\ninterface ISalesPolicy {\n    function setPremiumPool(address _premiumPool) external;\n\n    function setExchangeAgent(address _exchangeAgent) external;\n\n    function setCapitalAgent(address _capitalAgent) external;\n\n    function setBuyPolicyMaxDeadline(uint256 _maxDeadline) external;\n\n    function approvePremium(address _premiumCurrency) external;\n\n    function setProtocolURI(string memory newURI) external;\n\n    function setSigner(address _signer) external;\n\n    function updatePolicyExpired(uint256 _policyId) external;\n\n    function markToClaim(uint256 _policyId) external;\n\n    function allPoliciesLength() external view returns (uint256);\n\n    function killPool() external;\n\n    function revivePool() external;\n\n    function getPolicyData(uint256 _policyId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            bool\n        );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}